
7.1-Combine_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007d88  08007d88  00008d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008194  08008194  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008194  08008194  00009194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800819c  0800819c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800819c  0800819c  0000919c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081a0  080081a0  000091a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080081a4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001d4  08008378  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08008378  0000a4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e797  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024de  00000000  00000000  0001899b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0001ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfa  00000000  00000000  0001bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e3e  00000000  00000000  0001c9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d35  00000000  00000000  00035820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c38b  00000000  00000000  00048555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e48e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005234  00000000  00000000  000e4924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e9b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d70 	.word	0x08007d70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007d70 	.word	0x08007d70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Set_Pin_Mode>:
  * @brief  The internal function is used as gpio pin mode
  * @param  DHT		DHTxx_Drv_t
  * @param  Mode	Input or Output
  */
static void Set_Pin_Mode(DHTxx_Drv_t *DHT, PinMode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetPinMode(DHT->DataPort, DHT->DataPin, LL_GPIO_MODE_INPUT);
	}else{
		LL_GPIO_SetPinMode(DHT->DataPort, DHT->DataPin, LL_GPIO_MODE_OUTPUT);
	}
#else
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT->DataPin;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	889b      	ldrh	r3, [r3, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]
	if(Mode == Input)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <Set_Pin_Mode+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e001      	b.n	8000fb6 <Set_Pin_Mode+0x32>
	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(DHT->DataPort, &GPIO_InitStruct);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f107 020c 	add.w	r2, r7, #12
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 f941 	bl	8003248 <HAL_GPIO_Init>
#endif
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <Set_Pin_Level>:
  * @brief  The internal function is used as gpio pin level
  * @param  DHT		DHTxx_Drv_t
  * @param  Mode	Level: Set/High = 1, Reset/Low = 0
  */
static void Set_Pin_Level(DHTxx_Drv_t *DHT, uint8_t Level)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetOutputPin(DHT->DataPort, DHT->DataPin);
	}else{
		LL_GPIO_ResetOutputPin(DHT->DataPort, DHT->DataPin);
	}
#else
	HAL_GPIO_WritePin(DHT->DataPort, DHT->DataPin, Level);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f002 facb 	bl	8003580 <HAL_GPIO_WritePin>
#endif
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <Bus_Read>:
  * @brief  The internal function is used to read data pin
  * @retval Pin level status
  * @param  DHT		DHTxx_Drv_t
  */
static uint8_t Bus_Read(DHTxx_Drv_t *DHT)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
#ifdef LL_Driver
	return ((DHT->DataPort->IDR & DHT->DataPin) != 0x00U) ? 1 : 0;
#else
	return HAL_GPIO_ReadPin(DHT->DataPort, DHT->DataPin);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f002 faa3 	bl	8003550 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
#endif
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <DHT_Check_Response>:
  * @brief  The internal function is used to check sensor response
  * @param  DHT		DHTxx_Drv_t
  * @retval OK = 1, Failed = -1
  */
static uint8_t DHT_Check_Response(DHTxx_Drv_t *DHT)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

	/* Set Data pin as Output */
	Set_Pin_Mode(DHT, Output);
 8001020:	2101      	movs	r1, #1
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffae 	bl	8000f84 <Set_Pin_Mode>
	/* Reset Data Pin */
	Set_Pin_Level(DHT, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffcf 	bl	8000fce <Set_Pin_Level>

	/* Delay waiting
	 * DHT22 = 1.2ms(give extra delay)
	 * DHT11 = 18ms
	 */
	DwtDelay_us((DHT->Type == DHT22) ? 1500 : 18000);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <DHT_Check_Response+0x2a>
 8001038:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800103c:	e001      	b.n	8001042 <DHT_Check_Response+0x2e>
 800103e:	f244 6350 	movw	r3, #18000	@ 0x4650
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f918 	bl	8001278 <DwtDelay_us>

	/* Set Data Pin */
	Set_Pin_Level(DHT, 1);
 8001048:	2101      	movs	r1, #1
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffbf 	bl	8000fce <Set_Pin_Level>
	/* Delay 20us */
	DwtDelay_us(20);
 8001050:	2014      	movs	r0, #20
 8001052:	f000 f911 	bl	8001278 <DwtDelay_us>
	/* Set Data pin as Input */
	Set_Pin_Mode(DHT, Input);
 8001056:	2100      	movs	r1, #0
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff93 	bl	8000f84 <Set_Pin_Mode>
	/* Delay 40us */
	DwtDelay_us(40);
 800105e:	2028      	movs	r0, #40	@ 0x28
 8001060:	f000 f90a 	bl	8001278 <DwtDelay_us>

	if(!Bus_Read(DHT))
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffc4 	bl	8000ff2 <Bus_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10c      	bne.n	800108a <DHT_Check_Response+0x76>
	{
		DwtDelay_us(80);
 8001070:	2050      	movs	r0, #80	@ 0x50
 8001072:	f000 f901 	bl	8001278 <DwtDelay_us>
		/* if the pin is high, response is ok */
		Response = (Bus_Read(DHT)) ? 1 : -1;
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffbb 	bl	8000ff2 <Bus_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <DHT_Check_Response+0x72>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <DHT_Check_Response+0x74>
 8001086:	23ff      	movs	r3, #255	@ 0xff
 8001088:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait for the pin to go reset */
	while(Bus_Read(DHT)) {};
 800108a:	bf00      	nop
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffb0 	bl	8000ff2 <Bus_Read>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f9      	bne.n	800108c <DHT_Check_Response+0x78>

	return Response;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <DHT_Read>:
/**
  * @brief  The internal function is used to read sensor data and return as byte
  * @param  DHT		DHTxx_Drv_t
  */
static uint8_t DHT_Read(DHTxx_Drv_t *DHT)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	uint8_t i, j;
	for(j = 0; j < 8; j++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	73bb      	strb	r3, [r7, #14]
 80010ae:	e034      	b.n	800111a <DHT_Read+0x78>
	{
		/* Wait for pin to go high */
		while(!Bus_Read(DHT));
 80010b0:	bf00      	nop
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff9d 	bl	8000ff2 <Bus_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f9      	beq.n	80010b2 <DHT_Read+0x10>
		/* Delay 40us */
		DwtDelay_us(40);
 80010be:	2028      	movs	r0, #40	@ 0x28
 80010c0:	f000 f8da 	bl	8001278 <DwtDelay_us>

		/* If the pin go reset */
		if(!Bus_Read(DHT))
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff94 	bl	8000ff2 <Bus_Read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10e      	bne.n	80010ee <DHT_Read+0x4c>
		{
			i &= ~(1 << (7 - j));   // write 0
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4013      	ands	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e00b      	b.n	8001106 <DHT_Read+0x64>
		}else{
			i |= (1 << (7 - j));  // if the pin is high, write 1
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	f1c3 0307 	rsb	r3, r3, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	73fb      	strb	r3, [r7, #15]
		}

		/* Wait the pin go reset */
		while(Bus_Read(DHT));
 8001106:	bf00      	nop
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff72 	bl	8000ff2 <Bus_Read>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f9      	bne.n	8001108 <DHT_Read+0x66>
	for(j = 0; j < 8; j++)
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	3301      	adds	r3, #1
 8001118:	73bb      	strb	r3, [r7, #14]
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d9c7      	bls.n	80010b0 <DHT_Read+0xe>
	}
	return i;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <DHT_GetData>:
  * @brief  The function is used as get temperature and humidity and return in
  * 		data structure
  * @param  DHT		DHTxx_Drv_t
  */
void DHT_GetData(DHTxx_Drv_t *DHT)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if(DHT_Check_Response(DHT))
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff6d 	bl	8001014 <DHT_Check_Response>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d061      	beq.n	8001204 <DHT_GetData+0xd8>
	{
		DHT->Data.Rh1 = DHT_Read(DHT);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffae 	bl	80010a2 <DHT_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	721a      	strb	r2, [r3, #8]
		DHT->Data.Rh2 = DHT_Read(DHT);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa7 	bl	80010a2 <DHT_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	725a      	strb	r2, [r3, #9]
		DHT->Data.Tp1 = DHT_Read(DHT);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffa0 	bl	80010a2 <DHT_Read>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	729a      	strb	r2, [r3, #10]
		DHT->Data.Tp2 = DHT_Read(DHT);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff99 	bl	80010a2 <DHT_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	72da      	strb	r2, [r3, #11]
		DHT->Data.Sum = DHT_Read(DHT);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff92 	bl	80010a2 <DHT_Read>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	819a      	strh	r2, [r3, #12]

		/* Check if data valid */
		if(DHT->Data.Sum == (DHT->Data.Rh1 + DHT->Data.Rh2 + DHT->Data.Tp1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	899b      	ldrh	r3, [r3, #12]
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7a1b      	ldrb	r3, [r3, #8]
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7a5b      	ldrb	r3, [r3, #9]
 8001196:	4413      	add	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	7a92      	ldrb	r2, [r2, #10]
 800119c:	4413      	add	r3, r2
				+ DHT->Data.Tp2))
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	7ad2      	ldrb	r2, [r2, #11]
 80011a2:	4413      	add	r3, r2
		if(DHT->Data.Sum == (DHT->Data.Rh1 + DHT->Data.Rh2 + DHT->Data.Tp1
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d12d      	bne.n	8001204 <DHT_GetData+0xd8>
		{
			DHT->Temperature = ((DHT->Data.Tp1 << 8) | DHT->Data.Tp2) / 10.0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7a9b      	ldrb	r3, [r3, #10]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	7ad2      	ldrb	r2, [r2, #11]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9bd 	bl	8000534 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <DHT_GetData+0xe0>)
 80011c0:	f7ff fb4c 	bl	800085c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fcf4 	bl	8000bb8 <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
			DHT->Humidity = ((DHT->Data.Rh1 << 8) | DHT->Data.Rh2) / 10.0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a1b      	ldrb	r3, [r3, #8]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	7a52      	ldrb	r2, [r2, #9]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9a6 	bl	8000534 <__aeabi_i2d>
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <DHT_GetData+0xe0>)
 80011ee:	f7ff fb35 	bl	800085c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcdd 	bl	8000bb8 <__aeabi_d2f>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	615a      	str	r2, [r3, #20]
		}
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40240000 	.word	0x40240000

08001210 <DwtInit>:

/**
  * @brief  Initialize DWT
  */
void DwtInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	SysCClk 		= (SystemCoreClock / 1000000);	// Calculate in us
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <DwtInit+0x48>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <DwtInit+0x4c>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <DwtInit+0x50>)
 8001222:	6013      	str	r3, [r2, #0]
	DWT_LAR			|= DWT_LAR_UNLOCK;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <DwtInit+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	490e      	ldr	r1, [pc, #56]	@ (8001264 <DwtInit+0x54>)
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <DwtInit+0x58>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
	DEM_CR			|= (uint32_t)DEM_CR_TRCENA;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <DwtInit+0x5c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <DwtInit+0x5c>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800123a:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT		= (uint32_t)0u;					// Reset the clock counter
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <DwtInit+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	DWT_CR			|= (uint32_t)DWT_CR_CYCCNTENA;
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <DwtInit+0x64>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <DwtInit+0x64>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20000000 	.word	0x20000000
 800125c:	431bde83 	.word	0x431bde83
 8001260:	200001f0 	.word	0x200001f0
 8001264:	e0001fb0 	.word	0xe0001fb0
 8001268:	c5acce55 	.word	0xc5acce55
 800126c:	e000edfc 	.word	0xe000edfc
 8001270:	e0001004 	.word	0xe0001004
 8001274:	e0001000 	.word	0xe0001000

08001278 <DwtDelay_us>:
/**
  * @brief  Function to delay in microsecond
  * @param	usec	Period in microsecond
  */
inline void DwtDelay_us(uint32_t usec)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	start = DWT_CYCCNT;
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <DwtDelay_us+0x38>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <DwtDelay_us+0x3c>)
 8001286:	6013      	str	r3, [r2, #0]
	while(((DWT_CYCCNT - start) / SysCClk) < usec) {};
 8001288:	bf00      	nop
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <DwtDelay_us+0x38>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <DwtDelay_us+0x3c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <DwtDelay_us+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fbb2 f3f3 	udiv	r3, r2, r3
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d8f3      	bhi.n	800128a <DwtDelay_us+0x12>
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e0001004 	.word	0xe0001004
 80012b4:	200001f4 	.word	0x200001f4
 80012b8:	200001f0 	.word	0x200001f0

080012bc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	f023 030f 	bic.w	r3, r3, #15
 80012ce:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 030c 	orr.w	r3, r3, #12
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	f043 030c 	orr.w	r3, r3, #12
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	4619      	mov	r1, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	2364      	movs	r3, #100	@ 0x64
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	f002 fa93 	bl	800383c <HAL_I2C_Master_Transmit>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af02      	add	r7, sp, #8
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	f023 030f 	bic.w	r3, r3, #15
 8001330:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	f043 030d 	orr.w	r3, r3, #13
 800133e:	b2db      	uxtb	r3, r3
 8001340:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	f043 0309 	orr.w	r3, r3, #9
 8001348:	b2db      	uxtb	r3, r3
 800134a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	f043 030d 	orr.w	r3, r3, #13
 8001352:	b2db      	uxtb	r3, r3
 8001354:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	f043 0309 	orr.w	r3, r3, #9
 800135c:	b2db      	uxtb	r3, r3
 800135e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	791b      	ldrb	r3, [r3, #4]
 8001368:	4619      	mov	r1, r3
 800136a:	f107 0208 	add.w	r2, r7, #8
 800136e:	2364      	movs	r3, #100	@ 0x64
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2304      	movs	r3, #4
 8001374:	f002 fa62 	bl	800383c <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff96 	bl	80012bc <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e006      	b.n	80013a4 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001396:	2120      	movs	r1, #32
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffc0 	bl	800131e <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80013a8:	ddf5      	ble.n	8001396 <lcd_clear+0x16>
    }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d824      	bhi.n	8001410 <lcd_gotoxy+0x5c>
 80013c6:	a201      	add	r2, pc, #4	@ (adr r2, 80013cc <lcd_gotoxy+0x18>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013e7 	.word	0x080013e7
 80013d4:	080013f1 	.word	0x080013f1
 80013d8:	080013fb 	.word	0x080013fb
    {
        case 0: address = 0x80 + col; break;  // First row
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	3b80      	subs	r3, #128	@ 0x80
 80013e2:	75fb      	strb	r3, [r7, #23]
 80013e4:	e00e      	b.n	8001404 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	3b40      	subs	r3, #64	@ 0x40
 80013ec:	75fb      	strb	r3, [r7, #23]
 80013ee:	e009      	b.n	8001404 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3b6c      	subs	r3, #108	@ 0x6c
 80013f6:	75fb      	strb	r3, [r7, #23]
 80013f8:	e004      	b.n	8001404 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b2c      	subs	r3, #44	@ 0x2c
 8001400:	75fb      	strb	r3, [r7, #23]
 8001402:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	4619      	mov	r1, r3
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff ff57 	bl	80012bc <lcd_send_cmd>
 800140e:	e000      	b.n	8001412 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001410:	bf00      	nop
}
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8001420:	2032      	movs	r0, #50	@ 0x32
 8001422:	f000 fe65 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001426:	2130      	movs	r1, #48	@ 0x30
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f000 fe5e 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001434:	2130      	movs	r1, #48	@ 0x30
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff40 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f000 fe57 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001442:	2130      	movs	r1, #48	@ 0x30
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff39 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f000 fe50 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001450:	2120      	movs	r1, #32
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff32 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(10);
 8001458:	200a      	movs	r0, #10
 800145a:	f000 fe49 	bl	80020f0 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800145e:	2128      	movs	r1, #40	@ 0x28
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2b 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f000 fe42 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800146c:	2108      	movs	r1, #8
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff24 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fe3b 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800147a:	2101      	movs	r1, #1
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff1d 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(2);
 8001482:	2002      	movs	r0, #2
 8001484:	f000 fe34 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001488:	2106      	movs	r1, #6
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff16 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fe2d 	bl	80020f0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001496:	210c      	movs	r1, #12
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff0f 	bl	80012bc <lcd_send_cmd>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80014b0:	e007      	b.n	80014c2 <lcd_puts+0x1c>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	603a      	str	r2, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff2e 	bl	800131e <lcd_send_data>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f3      	bne.n	80014b2 <lcd_puts+0xc>
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* --- KHỐI KHỞI TẠO CỦA STM32 --- */
  HAL_Init();
 80014da:	f000 fd97 	bl	800200c <HAL_Init>
  SystemClock_Config();
 80014de:	f000 f8e7 	bl	80016b0 <SystemClock_Config>

  /* --- KHỞI TẠO CÁC NGOẠI VI ĐÃ CẤU HÌNH TRONG CUBEMX --- */
  MX_GPIO_Init();
 80014e2:	f000 fa55 	bl	8001990 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e6:	f000 fa33 	bl	8001950 <MX_DMA_Init>
  MX_ADC1_Init();
 80014ea:	f000 f949 	bl	8001780 <MX_ADC1_Init>
  MX_I2C1_Init();
 80014ee:	f000 f9a7 	bl	8001840 <MX_I2C1_Init>
  MX_TIM2_Init();
 80014f2:	f000 f9d3 	bl	800189c <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  /* --- KHỞI TẠO CÁC THƯ VIỆN VÀ BẮT ĐẦU CÁC TIẾN TRÌNH --- */
  DwtInit();
 80014f6:	f7ff fe8b 	bl	8001210 <DwtInit>

  // Khởi tạo LCD
  lcd.hi2c = &hi2c1;
 80014fa:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <main+0x18c>)
 80014fc:	4a59      	ldr	r2, [pc, #356]	@ (8001664 <main+0x190>)
 80014fe:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 8001500:	4b57      	ldr	r3, [pc, #348]	@ (8001660 <main+0x18c>)
 8001502:	224e      	movs	r2, #78	@ 0x4e
 8001504:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 8001506:	4856      	ldr	r0, [pc, #344]	@ (8001660 <main+0x18c>)
 8001508:	f7ff ff86 	bl	8001418 <lcd_init>

  // Khởi tạo cảm biến DHT22
  dht22.DataPort = DHT22_GPIO_Port;
 800150c:	4b56      	ldr	r3, [pc, #344]	@ (8001668 <main+0x194>)
 800150e:	4a57      	ldr	r2, [pc, #348]	@ (800166c <main+0x198>)
 8001510:	601a      	str	r2, [r3, #0]
  dht22.DataPin = DHT22_Pin;
 8001512:	4b55      	ldr	r3, [pc, #340]	@ (8001668 <main+0x194>)
 8001514:	2220      	movs	r2, #32
 8001516:	809a      	strh	r2, [r3, #4]
  dht22.Type = DHT22;
 8001518:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <main+0x194>)
 800151a:	2201      	movs	r2, #1
 800151c:	719a      	strb	r2, [r3, #6]

  // Cấu hình và liên kết DMA bằng tay để đảm bảo hoạt động
  Manual_DMA_Link_Init();
 800151e:	f000 fad7 	bl	8001ad0 <Manual_DMA_Link_Init>

  // Bắt đầu quá trình đọc ADC bằng DMA
  HAL_ADC_Start_DMA(&hadc1, adc_dma_buffer, 2);
 8001522:	2202      	movs	r2, #2
 8001524:	4952      	ldr	r1, [pc, #328]	@ (8001670 <main+0x19c>)
 8001526:	4853      	ldr	r0, [pc, #332]	@ (8001674 <main+0x1a0>)
 8001528:	f000 fe4a 	bl	80021c0 <HAL_ADC_Start_DMA>

  // Bắt đầu phát xung PWM cho Servo
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800152c:	2108      	movs	r1, #8
 800152e:	4852      	ldr	r0, [pc, #328]	@ (8001678 <main+0x1a4>)
 8001530:	f003 f9bc 	bl	80048ac <HAL_TIM_PWM_Start>

  // Thiết lập trạng thái ban đầu cho các thiết bị
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 500); // Đóng cửa
 8001534:	4b50      	ldr	r3, [pc, #320]	@ (8001678 <main+0x1a4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c
  lcd_puts(&lcd, "System ready!");
 800153e:	494f      	ldr	r1, [pc, #316]	@ (800167c <main+0x1a8>)
 8001540:	4847      	ldr	r0, [pc, #284]	@ (8001660 <main+0x18c>)
 8001542:	f7ff ffb0 	bl	80014a6 <lcd_puts>
  HAL_Delay(2000);
 8001546:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800154a:	f000 fdd1 	bl	80020f0 <HAL_Delay>
  lcd_clear(&lcd);
 800154e:	4844      	ldr	r0, [pc, #272]	@ (8001660 <main+0x18c>)
 8001550:	f7ff ff16 	bl	8001380 <lcd_clear>

  /* --- VÒNG LẶP CHÍNH CỦA CHƯƠNG TRÌNH --- */
  while (1)
  {
    /* --- 1. ĐỌC DỮ LIỆU TỪ TẤT CẢ CẢM BIẾN --- */
    DHT_GetData(&dht22);
 8001554:	4844      	ldr	r0, [pc, #272]	@ (8001668 <main+0x194>)
 8001556:	f7ff fde9 	bl	800112c <DHT_GetData>
    temperature = dht22.Temperature;
 800155a:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <main+0x194>)
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <main+0x1ac>)
 8001560:	6013      	str	r3, [r2, #0]
    humidity = dht22.Humidity;
 8001562:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <main+0x194>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	4a47      	ldr	r2, [pc, #284]	@ (8001684 <main+0x1b0>)
 8001568:	6013      	str	r3, [r2, #0]
    pir_state = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
 800156a:	2110      	movs	r1, #16
 800156c:	483f      	ldr	r0, [pc, #252]	@ (800166c <main+0x198>)
 800156e:	f001 ffef 	bl	8003550 <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b44      	ldr	r3, [pc, #272]	@ (8001688 <main+0x1b4>)
 8001578:	601a      	str	r2, [r3, #0]

    // Lấy giá trị MQ-2 và MQ-135 trực tiếp từ bộ đệm DMA đã được cập nhật ở nền
    uint32_t mq2_value = adc_dma_buffer[0];
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <main+0x19c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	607b      	str	r3, [r7, #4]
    uint32_t mq135_value = adc_dma_buffer[1];
 8001580:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <main+0x19c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	603b      	str	r3, [r7, #0]

    /* --- 2. XỬ LÝ LOGIC VÀ ĐIỀU KHIỂN (STATE MACHINE) --- */
    // Ưu tiên cao nhất: Báo động khí gas
    if (mq2_value > GAS_ALARM_THRESHOLD)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800158c:	d90f      	bls.n	80015ae <main+0xda>
    {
      HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001594:	483d      	ldr	r0, [pc, #244]	@ (800168c <main+0x1b8>)
 8001596:	f001 fff3 	bl	8003580 <HAL_GPIO_WritePin>
      sprintf(line1_str, "CANH BAO GAS!  ");
 800159a:	493d      	ldr	r1, [pc, #244]	@ (8001690 <main+0x1bc>)
 800159c:	483d      	ldr	r0, [pc, #244]	@ (8001694 <main+0x1c0>)
 800159e:	f004 fab5 	bl	8005b0c <siprintf>
      sprintf(line2_str, "Muc do: %-5lu", mq2_value);
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	493c      	ldr	r1, [pc, #240]	@ (8001698 <main+0x1c4>)
 80015a6:	483d      	ldr	r0, [pc, #244]	@ (800169c <main+0x1c8>)
 80015a8:	f004 fab0 	bl	8005b0c <siprintf>
 80015ac:	e03e      	b.n	800162c <main+0x158>
    }
    // Ưu tiên thứ hai: Phát hiện chuyển động
    else if (pir_state == GPIO_PIN_SET)
 80015ae:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <main+0x1b4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d119      	bne.n	80015ea <main+0x116>
    {
      HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015bc:	482b      	ldr	r0, [pc, #172]	@ (800166c <main+0x198>)
 80015be:	f001 ffdf 	bl	8003580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015c8:	4830      	ldr	r0, [pc, #192]	@ (800168c <main+0x1b8>)
 80015ca:	f001 ffd9 	bl	8003580 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1500); // Mở cửa
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <main+0x1a4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80015d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      sprintf(line1_str, "Phat hien       ");
 80015d8:	4931      	ldr	r1, [pc, #196]	@ (80016a0 <main+0x1cc>)
 80015da:	482e      	ldr	r0, [pc, #184]	@ (8001694 <main+0x1c0>)
 80015dc:	f004 fa96 	bl	8005b0c <siprintf>
      sprintf(line2_str, "chuyen dong...  ");
 80015e0:	4930      	ldr	r1, [pc, #192]	@ (80016a4 <main+0x1d0>)
 80015e2:	482e      	ldr	r0, [pc, #184]	@ (800169c <main+0x1c8>)
 80015e4:	f004 fa92 	bl	8005b0c <siprintf>
 80015e8:	e020      	b.n	800162c <main+0x158>
    }
    // Trạng thái bình thường
    else
    {
      HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f0:	481e      	ldr	r0, [pc, #120]	@ (800166c <main+0x198>)
 80015f2:	f001 ffc5 	bl	8003580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015fc:	4823      	ldr	r0, [pc, #140]	@ (800168c <main+0x1b8>)
 80015fe:	f001 ffbf 	bl	8003580 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 500); // Đóng cửa
 8001602:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <main+0x1a4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800160a:	63da      	str	r2, [r3, #60]	@ 0x3c
      sprintf(line1_str, "NhietDo: %.1f C", temperature);
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <main+0x1ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffa1 	bl	8000558 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4923      	ldr	r1, [pc, #140]	@ (80016a8 <main+0x1d4>)
 800161c:	481d      	ldr	r0, [pc, #116]	@ (8001694 <main+0x1c0>)
 800161e:	f004 fa75 	bl	8005b0c <siprintf>
      sprintf(line2_str, "AQI Raw: %-5lu", mq135_value);
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	4921      	ldr	r1, [pc, #132]	@ (80016ac <main+0x1d8>)
 8001626:	481d      	ldr	r0, [pc, #116]	@ (800169c <main+0x1c8>)
 8001628:	f004 fa70 	bl	8005b0c <siprintf>
    }

    /* --- 3. CẬP NHẬT MÀN HÌNH LCD --- */
    lcd_clear(&lcd);
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <main+0x18c>)
 800162e:	f7ff fea7 	bl	8001380 <lcd_clear>
    lcd_gotoxy(&lcd, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	480a      	ldr	r0, [pc, #40]	@ (8001660 <main+0x18c>)
 8001638:	f7ff febc 	bl	80013b4 <lcd_gotoxy>
    lcd_puts(&lcd, line1_str);
 800163c:	4915      	ldr	r1, [pc, #84]	@ (8001694 <main+0x1c0>)
 800163e:	4808      	ldr	r0, [pc, #32]	@ (8001660 <main+0x18c>)
 8001640:	f7ff ff31 	bl	80014a6 <lcd_puts>
    lcd_gotoxy(&lcd, 0, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	2100      	movs	r1, #0
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <main+0x18c>)
 800164a:	f7ff feb3 	bl	80013b4 <lcd_gotoxy>
    lcd_puts(&lcd, line2_str);
 800164e:	4913      	ldr	r1, [pc, #76]	@ (800169c <main+0x1c8>)
 8001650:	4803      	ldr	r0, [pc, #12]	@ (8001660 <main+0x18c>)
 8001652:	f7ff ff28 	bl	80014a6 <lcd_puts>

    HAL_Delay(1000);
 8001656:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800165a:	f000 fd49 	bl	80020f0 <HAL_Delay>
  {
 800165e:	e779      	b.n	8001554 <main+0x80>
 8001660:	2000033c 	.word	0x2000033c
 8001664:	200002a0 	.word	0x200002a0
 8001668:	20000344 	.word	0x20000344
 800166c:	40020000 	.word	0x40020000
 8001670:	20000368 	.word	0x20000368
 8001674:	200001f8 	.word	0x200001f8
 8001678:	200002f4 	.word	0x200002f4
 800167c:	08007d88 	.word	0x08007d88
 8001680:	2000035c 	.word	0x2000035c
 8001684:	20000360 	.word	0x20000360
 8001688:	20000364 	.word	0x20000364
 800168c:	40020800 	.word	0x40020800
 8001690:	08007d98 	.word	0x08007d98
 8001694:	20000370 	.word	0x20000370
 8001698:	08007da8 	.word	0x08007da8
 800169c:	20000384 	.word	0x20000384
 80016a0:	08007db8 	.word	0x08007db8
 80016a4:	08007dcc 	.word	0x08007dcc
 80016a8:	08007de0 	.word	0x08007de0
 80016ac:	08007df0 	.word	0x08007df0

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	@ 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	@ 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 fa89 	bl	8005bd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <SystemClock_Config+0xc8>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <SystemClock_Config+0xc8>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <SystemClock_Config+0xc8>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b21      	ldr	r3, [pc, #132]	@ (800177c <SystemClock_Config+0xcc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a20      	ldr	r2, [pc, #128]	@ (800177c <SystemClock_Config+0xcc>)
 80016fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <SystemClock_Config+0xcc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170c:	2301      	movs	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001710:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001720:	2304      	movs	r3, #4
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001724:	2364      	movs	r3, #100	@ 0x64
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fbdb 	bl	8003ef0 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001740:	f000 fa02 	bl	8001b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2103      	movs	r1, #3
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fe3d 	bl	80043e0 <HAL_RCC_ClockConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800176c:	f000 f9ec 	bl	8001b48 <Error_Handler>
  }
}
 8001770:	bf00      	nop
 8001772:	3750      	adds	r7, #80	@ 0x50
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001786:	463b      	mov	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]

  // Cấu hình ADC chung
  hadc1.Instance = ADC1;
 8001792:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <MX_ADC1_Init+0xb4>)
 8001794:	4a28      	ldr	r2, [pc, #160]	@ (8001838 <MX_ADC1_Init+0xb8>)
 8001796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <MX_ADC1_Init+0xb4>)
 800179a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800179e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a0:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ac:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017c2:	4a1e      	ldr	r2, [pc, #120]	@ (800183c <MX_ADC1_Init+0xbc>)
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017ce:	2202      	movs	r2, #2
 80017d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE; // Bật yêu cầu DMA liên tục
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017dc:	2201      	movs	r2, #1
 80017de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e0:	4814      	ldr	r0, [pc, #80]	@ (8001834 <MX_ADC1_Init+0xb4>)
 80017e2:	f000 fca9 	bl	8002138 <HAL_ADC_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017ec:	f000 f9ac 	bl	8001b48 <Error_Handler>
  }

  // Cấu hình kênh 1 (Rank 1) cho MQ-2 (PA0)
  sConfig.Channel = ADC_CHANNEL_0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80017f8:	2304      	movs	r3, #4
 80017fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <MX_ADC1_Init+0xb4>)
 8001802:	f000 fdef 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800180c:	f000 f99c 	bl	8001b48 <Error_Handler>
  }

  // Cấu hình kênh 2 (Rank 2) cho MQ-135 (PA1)
  sConfig.Channel = ADC_CHANNEL_1;
 8001810:	2301      	movs	r3, #1
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001814:	2302      	movs	r3, #2
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_ADC1_Init+0xb4>)
 800181e:	f000 fde1 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001828:	f000 f98e 	bl	8001b48 <Error_Handler>
  }
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200001f8 	.word	0x200001f8
 8001838:	40012000 	.word	0x40012000
 800183c:	0f000001 	.word	0x0f000001

08001840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_I2C1_Init+0x50>)
 8001846:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <MX_I2C1_Init+0x54>)
 8001848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_I2C1_Init+0x50>)
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <MX_I2C1_Init+0x58>)
 800184e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_I2C1_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_I2C1_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_I2C1_Init+0x50>)
 800185e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001862:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	@ (8001890 <MX_I2C1_Init+0x50>)
 800187e:	f001 fe99 	bl	80035b4 <HAL_I2C_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001888:	f000 f95e 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200002a0 	.word	0x200002a0
 8001894:	40005400 	.word	0x40005400
 8001898:	000186a0 	.word	0x000186a0

0800189c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80018be:	4b23      	ldr	r3, [pc, #140]	@ (800194c <MX_TIM2_Init+0xb0>)
 80018c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <MX_TIM2_Init+0xb0>)
 80018c8:	2263      	movs	r2, #99	@ 0x63
 80018ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MX_TIM2_Init+0xb0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <MX_TIM2_Init+0xb0>)
 80018d4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80018d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <MX_TIM2_Init+0xb0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Bật Preload
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <MX_TIM2_Init+0xb0>)
 80018e2:	2280      	movs	r2, #128	@ 0x80
 80018e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) // Chỉ dùng PWM_Init là đủ
 80018e6:	4819      	ldr	r0, [pc, #100]	@ (800194c <MX_TIM2_Init+0xb0>)
 80018e8:	f002 ff86 	bl	80047f8 <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018f2:	f000 f929 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	4619      	mov	r1, r3
 8001904:	4811      	ldr	r0, [pc, #68]	@ (800194c <MX_TIM2_Init+0xb0>)
 8001906:	f003 fb7b 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001910:	f000 f91a 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	@ 0x60
 8001916:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500; // Đặt giá trị ban đầu
 8001918:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800191c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2208      	movs	r2, #8
 800192a:	4619      	mov	r1, r3
 800192c:	4807      	ldr	r0, [pc, #28]	@ (800194c <MX_TIM2_Init+0xb0>)
 800192e:	f003 f86d 	bl	8004a0c <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001938:	f000 f906 	bl	8001b48 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800193c:	4803      	ldr	r0, [pc, #12]	@ (800194c <MX_TIM2_Init+0xb0>)
 800193e:	f000 f9f1 	bl	8001d24 <HAL_TIM_MspPostInit>
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200002f4 	.word	0x200002f4

08001950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <MX_DMA_Init+0x3c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <MX_DMA_Init+0x3c>)
 8001960:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_DMA_Init+0x3c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2038      	movs	r0, #56	@ 0x38
 8001978:	f001 f8bf 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800197c:	2038      	movs	r0, #56	@ 0x38
 800197e:	f001 f8d8 	bl	8002b32 <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a45      	ldr	r2, [pc, #276]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a3e      	ldr	r2, [pc, #248]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b38      	ldr	r3, [pc, #224]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a37      	ldr	r2, [pc, #220]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b31      	ldr	r3, [pc, #196]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a30      	ldr	r2, [pc, #192]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <MX_GPIO_Init+0x134>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a1c:	482a      	ldr	r0, [pc, #168]	@ (8001ac8 <MX_GPIO_Init+0x138>)
 8001a1e:	f001 fdaf 	bl	8003580 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a28:	4828      	ldr	r0, [pc, #160]	@ (8001acc <MX_GPIO_Init+0x13c>)
 8001a2a:	f001 fda9 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4820      	ldr	r0, [pc, #128]	@ (8001ac8 <MX_GPIO_Init+0x138>)
 8001a48:	f001 fbfe 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIR_Pin DHT22_Pin */
  GPIO_InitStruct.Pin = PIR_Pin|DHT22_Pin;
 8001a4c:	2330      	movs	r3, #48	@ 0x30
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	481b      	ldr	r0, [pc, #108]	@ (8001acc <MX_GPIO_Init+0x13c>)
 8001a60:	f001 fbf2 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ON_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_ON_BOARD_Pin;
 8001a64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ON_BOARD_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4813      	ldr	r0, [pc, #76]	@ (8001acc <MX_GPIO_Init+0x13c>)
 8001a7e:	f001 fbe3 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_Pin */
  GPIO_InitStruct.Pin = SERVO_Pin;
 8001a82:	2304      	movs	r3, #4
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a92:	2301      	movs	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480b      	ldr	r0, [pc, #44]	@ (8001acc <MX_GPIO_Init+0x13c>)
 8001a9e:	f001 fbd3 	bl	8003248 <HAL_GPIO_Init>

  /* === BỔ SUNG CẤU HÌNH CHO 2 CHÂN ADC (PA0, PA1) === */
  GPIO_InitStruct.Pin = MQ_2_Pin|MQ_135_Pin;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; // Chế độ Analog
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	@ (8001acc <MX_GPIO_Init+0x13c>)
 8001ab6:	f001 fbc7 	bl	8003248 <HAL_GPIO_Init>
  /* ================================================= */
}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	@ 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020000 	.word	0x40020000

08001ad0 <Manual_DMA_Link_Init>:
  * @note   Hàm này được tạo ra để khắc phục lỗi generate code của CubeMX,
  * đảm bảo ADC và DMA luôn được liên kết đúng cách.
  * @retval None
  */
static void Manual_DMA_Link_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  // 1. Cấu hình chi tiết cho luồng DMA mà ADC1 sẽ sử dụng
  hdma_adc1.Instance = DMA2_Stream0;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <Manual_DMA_Link_Init+0x70>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001aee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af2:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001af6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001afa:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b02:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0a:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001b0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b12:	621a      	str	r2, [r3, #32]
  hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b1a:	4808      	ldr	r0, [pc, #32]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001b1c:	f001 f824 	bl	8002b68 <HAL_DMA_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <Manual_DMA_Link_Init+0x5a>
  {
    Error_Handler();
 8001b26:	f000 f80f 	bl	8001b48 <Error_Handler>
  }

  // 2. "Giới thiệu" ADC với DMA. Đây là bước quan trọng nhất!
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <Manual_DMA_Link_Init+0x74>)
 8001b2c:	4a03      	ldr	r2, [pc, #12]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001b2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b30:	4b02      	ldr	r3, [pc, #8]	@ (8001b3c <Manual_DMA_Link_Init+0x6c>)
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <Manual_DMA_Link_Init+0x74>)
 8001b34:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000240 	.word	0x20000240
 8001b40:	40026410 	.word	0x40026410
 8001b44:	200001f8 	.word	0x200001f8

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <Error_Handler+0x8>

08001b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c80 <HAL_ADC_MspInit+0xdc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d157      	bne.n	8001c76 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <HAL_ADC_MspInit+0xe0>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a2d      	ldr	r2, [pc, #180]	@ (8001c84 <HAL_ADC_MspInit+0xe0>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <HAL_ADC_MspInit+0xe0>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_ADC_MspInit+0xe0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a26      	ldr	r2, [pc, #152]	@ (8001c84 <HAL_ADC_MspInit+0xe0>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <HAL_ADC_MspInit+0xe0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_2_Pin|MQ_135_Pin;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481d      	ldr	r0, [pc, #116]	@ (8001c88 <HAL_ADC_MspInit+0xe4>)
 8001c12:	f001 fb19 	bl	8003248 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c18:	4a1d      	ldr	r2, [pc, #116]	@ (8001c90 <HAL_ADC_MspInit+0xec>)
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c5a:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c5c:	f000 ff84 	bl	8002b68 <HAL_DMA_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c66:	f7ff ff6f 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c70:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_ADC_MspInit+0xe8>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	@ 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40012000 	.word	0x40012000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	20000240 	.word	0x20000240
 8001c90:	40026410 	.word	0x40026410

08001c94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_I2C_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12b      	bne.n	8001d0e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cd2:	23c0      	movs	r3, #192	@ 0xc0
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd6:	2312      	movs	r3, #18
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <HAL_I2C_MspInit+0x8c>)
 8001cee:	f001 faab 	bl	8003248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_I2C_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	@ 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020400 	.word	0x40020400

08001d24 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d44:	d11d      	bne.n	8001d82 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_TIM_MspPostInit+0x68>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_TIM_MspPostInit+0x68>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_TIM_MspPostInit+0x68>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001d62:	2304      	movs	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <HAL_TIM_MspPostInit+0x6c>)
 8001d7e:	f001 fa63 	bl	8003248 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <NMI_Handler+0x4>

08001d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <MemManage_Handler+0x4>

08001dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dea:	f000 f961 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <DMA2_Stream0_IRQHandler+0x10>)
 8001dfa:	f000 ffbb 	bl	8002d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000240 	.word	0x20000240

08001e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_kill>:

int _kill(int pid, int sig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e22:	f003 ff2b 	bl	8005c7c <__errno>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2216      	movs	r2, #22
 8001e2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_exit>:

void _exit (int status)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ffe7 	bl	8001e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e4a:	bf00      	nop
 8001e4c:	e7fd      	b.n	8001e4a <_exit+0x12>

08001e4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e00a      	b.n	8001e76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e60:	f3af 8000 	nop.w
 8001e64:	4601      	mov	r1, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	60ba      	str	r2, [r7, #8]
 8001e6c:	b2ca      	uxtb	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3301      	adds	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbf0      	blt.n	8001e60 <_read+0x12>
  }

  return len;
 8001e7e:	687b      	ldr	r3, [r7, #4]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e009      	b.n	8001eae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	60ba      	str	r2, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf1      	blt.n	8001e9a <_write+0x12>
  }
  return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_close>:

int _close(int file)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_isatty>:

int _isatty(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f003 fe90 	bl	8005c7c <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20020000 	.word	0x20020000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	20000398 	.word	0x20000398
 8001f90:	200004f0 	.word	0x200004f0

08001f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fbc:	f7ff ffea 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	@ (8001ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f003 fe4f 	bl	8005c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7ff fa73 	bl	80014d4 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ffc:	080081a4 	.word	0x080081a4
  ldr r2, =_sbss
 8002000:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002004:	200004ec 	.word	0x200004ec

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_Init+0x40>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_Init+0x40>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	@ (800204c <HAL_Init+0x40>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 fd55 	bl	8002ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fd88 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fd6d 	bl	8002b4e <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 fd35 	bl	8002afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000008 	.word	0x20000008
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008
 80020d4:	2000039c 	.word	0x2000039c

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000039c 	.word	0x2000039c

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008

08002138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e033      	b.n	80021b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fd24 	bl	8001ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800217e:	f023 0302 	bic.w	r3, r3, #2
 8002182:	f043 0202 	orr.w	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa5c 	bl	8002648 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80021a6:	e001      	b.n	80021ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_Start_DMA+0x22>
 80021de:	2302      	movs	r3, #2
 80021e0:	e0d0      	b.n	8002384 <HAL_ADC_Start_DMA+0x1c4>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d018      	beq.n	800222a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002208:	4b60      	ldr	r3, [pc, #384]	@ (800238c <HAL_ADC_Start_DMA+0x1cc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a60      	ldr	r2, [pc, #384]	@ (8002390 <HAL_ADC_Start_DMA+0x1d0>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0c9a      	lsrs	r2, r3, #18
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800221c:	e002      	b.n	8002224 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3b01      	subs	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f9      	bne.n	800221e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002238:	d107      	bne.n	800224a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002248:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	f040 8088 	bne.w	800236a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002284:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002298:	d106      	bne.n	80022a8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f023 0206 	bic.w	r2, r3, #6
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80022a6:	e002      	b.n	80022ae <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b6:	4b37      	ldr	r3, [pc, #220]	@ (8002394 <HAL_ADC_Start_DMA+0x1d4>)
 80022b8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022be:	4a36      	ldr	r2, [pc, #216]	@ (8002398 <HAL_ADC_Start_DMA+0x1d8>)
 80022c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	4a35      	ldr	r2, [pc, #212]	@ (800239c <HAL_ADC_Start_DMA+0x1dc>)
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ce:	4a34      	ldr	r2, [pc, #208]	@ (80023a0 <HAL_ADC_Start_DMA+0x1e0>)
 80022d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80022ea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022fa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	334c      	adds	r3, #76	@ 0x4c
 8002306:	4619      	mov	r1, r3
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f000 fcda 	bl	8002cc4 <HAL_DMA_Start_IT>
 8002310:	4603      	mov	r3, r0
 8002312:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10f      	bne.n	8002340 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d129      	bne.n	8002382 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e020      	b.n	8002382 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_ADC_Start_DMA+0x1e4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d11b      	bne.n	8002382 <HAL_ADC_Start_DMA+0x1c2>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d114      	bne.n	8002382 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e00b      	b.n	8002382 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002382:	7ffb      	ldrb	r3, [r7, #31]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000000 	.word	0x20000000
 8002390:	431bde83 	.word	0x431bde83
 8002394:	40012300 	.word	0x40012300
 8002398:	08002841 	.word	0x08002841
 800239c:	080028fb 	.word	0x080028fb
 80023a0:	08002917 	.word	0x08002917
 80023a4:	40012000 	.word	0x40012000

080023a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e113      	b.n	8002628 <HAL_ADC_ConfigChannel+0x244>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b09      	cmp	r3, #9
 800240e:	d925      	bls.n	800245c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68d9      	ldr	r1, [r3, #12]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	3b1e      	subs	r3, #30
 8002426:	2207      	movs	r2, #7
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43da      	mvns	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	400a      	ands	r2, r1
 8002434:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68d9      	ldr	r1, [r3, #12]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	4603      	mov	r3, r0
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4403      	add	r3, r0
 800244e:	3b1e      	subs	r3, #30
 8002450:	409a      	lsls	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	e022      	b.n	80024a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6919      	ldr	r1, [r3, #16]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	2207      	movs	r2, #7
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	4603      	mov	r3, r0
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4403      	add	r3, r0
 8002498:	409a      	lsls	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d824      	bhi.n	80024f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	3b05      	subs	r3, #5
 80024bc:	221f      	movs	r2, #31
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	400a      	ands	r2, r1
 80024ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	3b05      	subs	r3, #5
 80024e6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024f2:	e04c      	b.n	800258e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d824      	bhi.n	8002546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b23      	subs	r3, #35	@ 0x23
 800250e:	221f      	movs	r2, #31
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43da      	mvns	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	400a      	ands	r2, r1
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	4618      	mov	r0, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	3b23      	subs	r3, #35	@ 0x23
 8002538:	fa00 f203 	lsl.w	r2, r0, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
 8002544:	e023      	b.n	800258e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b41      	subs	r3, #65	@ 0x41
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b41      	subs	r3, #65	@ 0x41
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258e:	4b29      	ldr	r3, [pc, #164]	@ (8002634 <HAL_ADC_ConfigChannel+0x250>)
 8002590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a28      	ldr	r2, [pc, #160]	@ (8002638 <HAL_ADC_ConfigChannel+0x254>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d10f      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1d8>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b12      	cmp	r3, #18
 80025a2:	d10b      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_ADC_ConfigChannel+0x254>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12b      	bne.n	800261e <HAL_ADC_ConfigChannel+0x23a>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <HAL_ADC_ConfigChannel+0x258>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x1f4>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b11      	cmp	r3, #17
 80025d6:	d122      	bne.n	800261e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a11      	ldr	r2, [pc, #68]	@ (800263c <HAL_ADC_ConfigChannel+0x258>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d111      	bne.n	800261e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_ADC_ConfigChannel+0x25c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <HAL_ADC_ConfigChannel+0x260>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9a      	lsrs	r2, r3, #18
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002610:	e002      	b.n	8002618 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3b01      	subs	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f9      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40012300 	.word	0x40012300
 8002638:	40012000 	.word	0x40012000
 800263c:	10000012 	.word	0x10000012
 8002640:	20000000 	.word	0x20000000
 8002644:	431bde83 	.word	0x431bde83

08002648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002650:	4b79      	ldr	r3, [pc, #484]	@ (8002838 <ADC_Init+0x1f0>)
 8002652:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	431a      	orrs	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800267c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6899      	ldr	r1, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	4a58      	ldr	r2, [pc, #352]	@ (800283c <ADC_Init+0x1f4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6899      	ldr	r1, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	e00f      	b.n	8002746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002744:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0202 	bic.w	r2, r2, #2
 8002754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e1b      	ldrb	r3, [r3, #24]
 8002760:	005a      	lsls	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01b      	beq.n	80027ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002782:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	3b01      	subs	r3, #1
 80027a0:	035a      	lsls	r2, r3, #13
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	e007      	b.n	80027bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	051a      	lsls	r2, r3, #20
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027fe:	025a      	lsls	r2, r3, #9
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6899      	ldr	r1, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	029a      	lsls	r2, r3, #10
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40012300 	.word	0x40012300
 800283c:	0f000001 	.word	0x0f000001

08002840 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002856:	2b00      	cmp	r3, #0
 8002858:	d13c      	bne.n	80028d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d12b      	bne.n	80028cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d127      	bne.n	80028cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002882:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002894:	2b00      	cmp	r3, #0
 8002896:	d119      	bne.n	80028cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0220 	bic.w	r2, r2, #32
 80028a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff fd6b 	bl	80023a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028d2:	e00e      	b.n	80028f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fd75 	bl	80023d0 <HAL_ADC_ErrorCallback>
}
 80028e6:	e004      	b.n	80028f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fd57 	bl	80023bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2240      	movs	r2, #64	@ 0x40
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f043 0204 	orr.w	r2, r3, #4
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff fd4a 	bl	80023d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4907      	ldr	r1, [pc, #28]	@ (80029e0 <__NVIC_EnableIRQ+0x38>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db0a      	blt.n	8002a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	490c      	ldr	r1, [pc, #48]	@ (8002a30 <__NVIC_SetPriority+0x4c>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	440b      	add	r3, r1
 8002a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a0c:	e00a      	b.n	8002a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4908      	ldr	r1, [pc, #32]	@ (8002a34 <__NVIC_SetPriority+0x50>)
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	440b      	add	r3, r1
 8002a22:	761a      	strb	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	@ 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f1c3 0307 	rsb	r3, r3, #7
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf28      	it	cs
 8002a56:	2304      	movcs	r3, #4
 8002a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d902      	bls.n	8002a68 <NVIC_EncodePriority+0x30>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3b03      	subs	r3, #3
 8002a66:	e000      	b.n	8002a6a <NVIC_EncodePriority+0x32>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43d9      	mvns	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	4313      	orrs	r3, r2
         );
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ab0:	d301      	bcc.n	8002ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00f      	b.n	8002ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <SysTick_Config+0x40>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002abe:	210f      	movs	r1, #15
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f7ff ff8e 	bl	80029e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <SysTick_Config+0x40>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ace:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <SysTick_Config+0x40>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff29 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0c:	f7ff ff3e 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f7ff ff8e 	bl	8002a38 <NVIC_EncodePriority>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff5d 	bl	80029e4 <__NVIC_SetPriority>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff31 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ffa2 	bl	8002aa0 <SysTick_Config>
 8002b5c:	4603      	mov	r3, r0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fab0 	bl	80020d8 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e099      	b.n	8002cb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba4:	e00f      	b.n	8002bc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba6:	f7ff fa97 	bl	80020d8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d908      	bls.n	8002bc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e078      	b.n	8002cb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e8      	bne.n	8002ba6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4b38      	ldr	r3, [pc, #224]	@ (8002cc0 <HAL_DMA_Init+0x158>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d107      	bne.n	8002c30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f023 0307 	bic.w	r3, r3, #7
 8002c46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d117      	bne.n	8002c8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fa6f 	bl	8003150 <DMA_CheckFifoParam>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2240      	movs	r2, #64	@ 0x40
 8002c7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c86:	2301      	movs	r3, #1
 8002c88:	e016      	b.n	8002cb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa26 	bl	80030e4 <DMA_CalcBaseAndBitshift>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	223f      	movs	r2, #63	@ 0x3f
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	f010803f 	.word	0xf010803f

08002cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_DMA_Start_IT+0x26>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e040      	b.n	8002d6c <HAL_DMA_Start_IT+0xa8>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12f      	bne.n	8002d5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f9b8 	bl	8003088 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	223f      	movs	r2, #63	@ 0x3f
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0216 	orr.w	r2, r2, #22
 8002d32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0208 	orr.w	r2, r2, #8
 8002d4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e005      	b.n	8002d6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d66:	2302      	movs	r3, #2
 8002d68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d80:	4b8e      	ldr	r3, [pc, #568]	@ (8002fbc <HAL_DMA_IRQHandler+0x248>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a8e      	ldr	r2, [pc, #568]	@ (8002fc0 <HAL_DMA_IRQHandler+0x24c>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	2208      	movs	r2, #8
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	2208      	movs	r2, #8
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	2204      	movs	r2, #4
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	2210      	movs	r2, #16
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d043      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03c      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	2210      	movs	r2, #16
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d024      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	e01f      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01b      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e016      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0208 	bic.w	r2, r2, #8
 8002ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	2220      	movs	r2, #32
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 808f 	beq.w	8003014 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8087 	beq.w	8003014 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d136      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0216 	bic.w	r2, r2, #22
 8002f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x1da>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0208 	bic.w	r2, r2, #8
 8002f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	223f      	movs	r2, #63	@ 0x3f
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d07e      	beq.n	8003080 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
        }
        return;
 8002f8a:	e079      	b.n	8003080 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d031      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e02c      	b.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
 8002fba:	bf00      	nop
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
 8002fd4:	e01e      	b.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10f      	bne.n	8003004 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	2b00      	cmp	r3, #0
 800301a:	d032      	beq.n	8003082 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d022      	beq.n	800306e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2205      	movs	r2, #5
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	3301      	adds	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	d307      	bcc.n	800305c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f2      	bne.n	8003040 <HAL_DMA_IRQHandler+0x2cc>
 800305a:	e000      	b.n	800305e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800305c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
 800307e:	e000      	b.n	8003082 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003080:	bf00      	nop
    }
  }
}
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b40      	cmp	r3, #64	@ 0x40
 80030b4:	d108      	bne.n	80030c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030c6:	e007      	b.n	80030d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3b10      	subs	r3, #16
 80030f4:	4a14      	ldr	r2, [pc, #80]	@ (8003148 <DMA_CalcBaseAndBitshift+0x64>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030fe:	4a13      	ldr	r2, [pc, #76]	@ (800314c <DMA_CalcBaseAndBitshift+0x68>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d909      	bls.n	8003126 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58
 8003124:	e007      	b.n	8003136 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	aaaaaaab 	.word	0xaaaaaaab
 800314c:	08007e18 	.word	0x08007e18

08003150 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d11f      	bne.n	80031aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d856      	bhi.n	800321e <DMA_CheckFifoParam+0xce>
 8003170:	a201      	add	r2, pc, #4	@ (adr r2, 8003178 <DMA_CheckFifoParam+0x28>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	08003189 	.word	0x08003189
 800317c:	0800319b 	.word	0x0800319b
 8003180:	08003189 	.word	0x08003189
 8003184:	0800321f 	.word	0x0800321f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d046      	beq.n	8003222 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003198:	e043      	b.n	8003222 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031a2:	d140      	bne.n	8003226 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a8:	e03d      	b.n	8003226 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b2:	d121      	bne.n	80031f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d837      	bhi.n	800322a <DMA_CheckFifoParam+0xda>
 80031ba:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <DMA_CheckFifoParam+0x70>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	080031d1 	.word	0x080031d1
 80031c4:	080031d7 	.word	0x080031d7
 80031c8:	080031d1 	.word	0x080031d1
 80031cc:	080031e9 	.word	0x080031e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      break;
 80031d4:	e030      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d025      	beq.n	800322e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e6:	e022      	b.n	800322e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031f0:	d11f      	bne.n	8003232 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031f6:	e01c      	b.n	8003232 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d903      	bls.n	8003206 <DMA_CheckFifoParam+0xb6>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d003      	beq.n	800320c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003204:	e018      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
      break;
 800320a:	e015      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00e      	beq.n	8003236 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e00b      	b.n	8003236 <DMA_CheckFifoParam+0xe6>
      break;
 800321e:	bf00      	nop
 8003220:	e00a      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e008      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e006      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;   
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 8003236:	bf00      	nop
    }
  } 
  
  return status; 
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	@ 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e159      	b.n	8003518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 8148 	bne.w	8003512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d005      	beq.n	800329a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003296:	2b02      	cmp	r3, #2
 8003298:	d130      	bne.n	80032fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 0201 	and.w	r2, r3, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b03      	cmp	r3, #3
 8003306:	d017      	beq.n	8003338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d123      	bne.n	800338c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a2 	beq.w	8003512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b57      	ldr	r3, [pc, #348]	@ (8003530 <HAL_GPIO_Init+0x2e8>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	4a56      	ldr	r2, [pc, #344]	@ (8003530 <HAL_GPIO_Init+0x2e8>)
 80033d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033de:	4b54      	ldr	r3, [pc, #336]	@ (8003530 <HAL_GPIO_Init+0x2e8>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ea:	4a52      	ldr	r2, [pc, #328]	@ (8003534 <HAL_GPIO_Init+0x2ec>)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3302      	adds	r3, #2
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	220f      	movs	r2, #15
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a49      	ldr	r2, [pc, #292]	@ (8003538 <HAL_GPIO_Init+0x2f0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d019      	beq.n	800344a <HAL_GPIO_Init+0x202>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a48      	ldr	r2, [pc, #288]	@ (800353c <HAL_GPIO_Init+0x2f4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0x1fe>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a47      	ldr	r2, [pc, #284]	@ (8003540 <HAL_GPIO_Init+0x2f8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00d      	beq.n	8003442 <HAL_GPIO_Init+0x1fa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a46      	ldr	r2, [pc, #280]	@ (8003544 <HAL_GPIO_Init+0x2fc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x1f6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a45      	ldr	r2, [pc, #276]	@ (8003548 <HAL_GPIO_Init+0x300>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_GPIO_Init+0x1f2>
 8003436:	2304      	movs	r3, #4
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x204>
 800343a:	2307      	movs	r3, #7
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x204>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x204>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x204>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x204>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4935      	ldr	r1, [pc, #212]	@ (8003534 <HAL_GPIO_Init+0x2ec>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346a:	4b38      	ldr	r3, [pc, #224]	@ (800354c <HAL_GPIO_Init+0x304>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800348e:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <HAL_GPIO_Init+0x304>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003494:	4b2d      	ldr	r3, [pc, #180]	@ (800354c <HAL_GPIO_Init+0x304>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b8:	4a24      	ldr	r2, [pc, #144]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034be:	4b23      	ldr	r3, [pc, #140]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e2:	4a1a      	ldr	r2, [pc, #104]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e8:	4b18      	ldr	r3, [pc, #96]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800350c:	4a0f      	ldr	r2, [pc, #60]	@ (800354c <HAL_GPIO_Init+0x304>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f aea2 	bls.w	8003264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3724      	adds	r7, #36	@ 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40013800 	.word	0x40013800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020400 	.word	0x40020400
 8003540:	40020800 	.word	0x40020800
 8003544:	40020c00 	.word	0x40020c00
 8003548:	40021000 	.word	0x40021000
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e001      	b.n	8003572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e12b      	b.n	800381e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fb5a 	bl	8001c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	@ 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003618:	f001 f8da 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a81      	ldr	r2, [pc, #516]	@ (8003828 <HAL_I2C_Init+0x274>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d807      	bhi.n	8003638 <HAL_I2C_Init+0x84>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a80      	ldr	r2, [pc, #512]	@ (800382c <HAL_I2C_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	bf94      	ite	ls
 8003630:	2301      	movls	r3, #1
 8003632:	2300      	movhi	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e006      	b.n	8003646 <HAL_I2C_Init+0x92>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a7d      	ldr	r2, [pc, #500]	@ (8003830 <HAL_I2C_Init+0x27c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0e7      	b.n	800381e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a78      	ldr	r2, [pc, #480]	@ (8003834 <HAL_I2C_Init+0x280>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a6a      	ldr	r2, [pc, #424]	@ (8003828 <HAL_I2C_Init+0x274>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d802      	bhi.n	8003688 <HAL_I2C_Init+0xd4>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	e009      	b.n	800369c <HAL_I2C_Init+0xe8>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a69      	ldr	r2, [pc, #420]	@ (8003838 <HAL_I2C_Init+0x284>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	3301      	adds	r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	495c      	ldr	r1, [pc, #368]	@ (8003828 <HAL_I2C_Init+0x274>)
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d819      	bhi.n	80036f0 <HAL_I2C_Init+0x13c>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e59      	subs	r1, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036d0:	400b      	ands	r3, r1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_I2C_Init+0x138>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e59      	subs	r1, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	e051      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e04f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d111      	bne.n	800371c <HAL_I2C_Init+0x168>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e012      	b.n	8003742 <HAL_I2C_Init+0x18e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Init+0x196>
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <HAL_I2C_Init+0x1bc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e58      	subs	r0, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	fbb0 f3f3 	udiv	r3, r0, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800376e:	e00f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	0099      	lsls	r1, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	6809      	ldr	r1, [r1, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6911      	ldr	r1, [r2, #16]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	000186a0 	.word	0x000186a0
 800382c:	001e847f 	.word	0x001e847f
 8003830:	003d08ff 	.word	0x003d08ff
 8003834:	431bde83 	.word	0x431bde83
 8003838:	10624dd3 	.word	0x10624dd3

0800383c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	461a      	mov	r2, r3
 8003848:	460b      	mov	r3, r1
 800384a:	817b      	strh	r3, [r7, #10]
 800384c:	4613      	mov	r3, r2
 800384e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003850:	f7fe fc42 	bl	80020d8 <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	f040 80e0 	bne.w	8003a24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2319      	movs	r3, #25
 800386a:	2201      	movs	r2, #1
 800386c:	4970      	ldr	r1, [pc, #448]	@ (8003a30 <HAL_I2C_Master_Transmit+0x1f4>)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f964 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
 800387c:	e0d3      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2C_Master_Transmit+0x50>
 8003888:	2302      	movs	r3, #2
 800388a:	e0cc      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d007      	beq.n	80038b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2221      	movs	r2, #33	@ 0x21
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2210      	movs	r2, #16
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	893a      	ldrh	r2, [r7, #8]
 80038e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a50      	ldr	r2, [pc, #320]	@ (8003a34 <HAL_I2C_Master_Transmit+0x1f8>)
 80038f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038f4:	8979      	ldrh	r1, [r7, #10]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f89c 	bl	8003a38 <I2C_MasterRequestWrite>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e08d      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003920:	e066      	b.n	80039f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	6a39      	ldr	r1, [r7, #32]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fa22 	bl	8003d70 <I2C_WaitOnTXEFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	2b04      	cmp	r3, #4
 8003938:	d107      	bne.n	800394a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06b      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d11b      	bne.n	80039c4 <HAL_I2C_Master_Transmit+0x188>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d017      	beq.n	80039c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	6a39      	ldr	r1, [r7, #32]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa19 	bl	8003e00 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d107      	bne.n	80039ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e01a      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d194      	bne.n	8003922 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	00100002 	.word	0x00100002
 8003a34:	ffff0000 	.word	0xffff0000

08003a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d006      	beq.n	8003a62 <I2C_MasterRequestWrite+0x2a>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d003      	beq.n	8003a62 <I2C_MasterRequestWrite+0x2a>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a60:	d108      	bne.n	8003a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00b      	b.n	8003a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	2b12      	cmp	r3, #18
 8003a7a:	d107      	bne.n	8003a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f84f 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab2:	d103      	bne.n	8003abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e035      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac8:	d108      	bne.n	8003adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aca:	897b      	ldrh	r3, [r7, #10]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ad8:	611a      	str	r2, [r3, #16]
 8003ada:	e01b      	b.n	8003b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	11db      	asrs	r3, r3, #7
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0306 	and.w	r3, r3, #6
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f063 030f 	orn	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	490e      	ldr	r1, [pc, #56]	@ (8003b34 <I2C_MasterRequestWrite+0xfc>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f898 	bl	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e010      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <I2C_MasterRequestWrite+0x100>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f888 	bl	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	00010008 	.word	0x00010008
 8003b38:	00010002 	.word	0x00010002

08003b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4c:	e048      	b.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d044      	beq.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe fabf 	bl	80020d8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d139      	bne.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10d      	bne.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	e00c      	b.n	8003bac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d116      	bne.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e023      	b.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10d      	bne.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	e00c      	b.n	8003c20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d093      	beq.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c3e:	e071      	b.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4e:	d123      	bne.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e067      	b.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d041      	beq.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca0:	f7fe fa1a 	bl	80020d8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d302      	bcc.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d136      	bne.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10c      	bne.n	8003cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e00b      	b.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e021      	b.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10c      	bne.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e00b      	b.n	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f af6d 	bne.w	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d7c:	e034      	b.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f886 	bl	8003e90 <I2C_IsAcknowledgeFailed>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e034      	b.n	8003df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d028      	beq.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d96:	f7fe f99f 	bl	80020d8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11d      	bne.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d016      	beq.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e007      	b.n	8003df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d1c3      	bne.n	8003d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e0c:	e034      	b.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f83e 	bl	8003e90 <I2C_IsAcknowledgeFailed>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e034      	b.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d028      	beq.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe f957 	bl	80020d8 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d11d      	bne.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d016      	beq.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e007      	b.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d1c3      	bne.n	8003e0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d11b      	bne.n	8003ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	f043 0204 	orr.w	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e267      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d075      	beq.n	8003ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f0e:	4b88      	ldr	r3, [pc, #544]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1a:	4b85      	ldr	r3, [pc, #532]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d112      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b82      	ldr	r3, [pc, #520]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f32:	d10b      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	4b7e      	ldr	r3, [pc, #504]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05b      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x108>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d157      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e242      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x74>
 8003f56:	4b76      	ldr	r3, [pc, #472]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a75      	ldr	r2, [pc, #468]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x98>
 8003f6e:	4b70      	ldr	r3, [pc, #448]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6f      	ldr	r2, [pc, #444]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6c      	ldr	r2, [pc, #432]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f88:	4b69      	ldr	r3, [pc, #420]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a68      	ldr	r2, [pc, #416]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b66      	ldr	r3, [pc, #408]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a65      	ldr	r2, [pc, #404]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f896 	bl	80020d8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f892 	bl	80020d8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e207      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xc0>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fe f882 	bl	80020d8 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fe f87e 	bl	80020d8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	@ 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1f3      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	4b51      	ldr	r3, [pc, #324]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xe8>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004006:	4b4a      	ldr	r3, [pc, #296]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800401a:	2b08      	cmp	r3, #8
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e1c7      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4937      	ldr	r1, [pc, #220]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	e03a      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004060:	4b34      	ldr	r3, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0x244>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fe f837 	bl	80020d8 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406e:	f7fe f833 	bl	80020d8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1a8      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408c:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4925      	ldr	r1, [pc, #148]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	e015      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a2:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <HAL_RCC_OscConfig+0x244>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fe f816 	bl	80020d8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b0:	f7fe f812 	bl	80020d8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e187      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d036      	beq.n	8004148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e2:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <HAL_RCC_OscConfig+0x248>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fd fff6 	bl	80020d8 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f0:	f7fd fff2 	bl	80020d8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e167      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x200>
 800410e:	e01b      	b.n	8004148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004110:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <HAL_RCC_OscConfig+0x248>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fd ffdf 	bl	80020d8 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	e00e      	b.n	800413c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411e:	f7fd ffdb 	bl	80020d8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d907      	bls.n	800413c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e150      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
 8004130:	40023800 	.word	0x40023800
 8004134:	42470000 	.word	0x42470000
 8004138:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	4b88      	ldr	r3, [pc, #544]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ea      	bne.n	800411e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8097 	beq.w	8004284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	4b81      	ldr	r3, [pc, #516]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	4b7d      	ldr	r3, [pc, #500]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	4a7c      	ldr	r2, [pc, #496]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	@ 0x40
 8004176:	4b7a      	ldr	r3, [pc, #488]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b77      	ldr	r3, [pc, #476]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d118      	bne.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b74      	ldr	r3, [pc, #464]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a73      	ldr	r2, [pc, #460]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fd ff9b 	bl	80020d8 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fd ff97 	bl	80020d8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e10c      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x2ea>
 80041cc:	4b64      	ldr	r3, [pc, #400]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d0:	4a63      	ldr	r2, [pc, #396]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d8:	e01c      	b.n	8004214 <HAL_RCC_OscConfig+0x324>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x30c>
 80041e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0x324>
 80041fc:	4b58      	ldr	r3, [pc, #352]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004200:	4a57      	ldr	r2, [pc, #348]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	6713      	str	r3, [r2, #112]	@ 0x70
 8004208:	4b55      	ldr	r3, [pc, #340]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420c:	4a54      	ldr	r2, [pc, #336]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd ff5c 	bl	80020d8 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	e00a      	b.n	800423a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fd ff58 	bl	80020d8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0cb      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	4b49      	ldr	r3, [pc, #292]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ee      	beq.n	8004224 <HAL_RCC_OscConfig+0x334>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fd ff46 	bl	80020d8 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd ff42 	bl	80020d8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0b5      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	4b3e      	ldr	r3, [pc, #248]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ee      	bne.n	8004250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b39      	ldr	r3, [pc, #228]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	4a38      	ldr	r2, [pc, #224]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800427e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004282:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a1 	beq.w	80043d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800428e:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d05c      	beq.n	8004354 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d141      	bne.n	8004326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <HAL_RCC_OscConfig+0x478>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fd ff16 	bl	80020d8 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fd ff12 	bl	80020d8 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e087      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b27      	ldr	r3, [pc, #156]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	491b      	ldr	r1, [pc, #108]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004368 <HAL_RCC_OscConfig+0x478>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7fd feeb 	bl	80020d8 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004306:	f7fd fee7 	bl	80020d8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e05c      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x416>
 8004324:	e054      	b.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <HAL_RCC_OscConfig+0x478>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fd fed4 	bl	80020d8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd fed0 	bl	80020d8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e045      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x444>
 8004352:	e03d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e038      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
 8004360:	40023800 	.word	0x40023800
 8004364:	40007000 	.word	0x40007000
 8004368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800436c:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <HAL_RCC_OscConfig+0x4ec>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d028      	beq.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d121      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d11a      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800439c:	4013      	ands	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d111      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	3b01      	subs	r3, #1
 80043b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cc      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b68      	ldr	r3, [pc, #416]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d90c      	bls.n	800441c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b65      	ldr	r3, [pc, #404]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b63      	ldr	r3, [pc, #396]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0b8      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004434:	4b59      	ldr	r3, [pc, #356]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a58      	ldr	r2, [pc, #352]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800443e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800444c:	4b53      	ldr	r3, [pc, #332]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a52      	ldr	r2, [pc, #328]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b50      	ldr	r3, [pc, #320]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	494d      	ldr	r1, [pc, #308]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d044      	beq.n	8004500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	4b47      	ldr	r3, [pc, #284]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d119      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d003      	beq.n	800449e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	2b03      	cmp	r3, #3
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	4b3f      	ldr	r3, [pc, #252]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b3b      	ldr	r3, [pc, #236]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e067      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b37      	ldr	r3, [pc, #220]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4934      	ldr	r1, [pc, #208]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d0:	f7fd fe02 	bl	80020d8 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fd fdfe 	bl	80020d8 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b2b      	ldr	r3, [pc, #172]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d20c      	bcs.n	8004528 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b22      	ldr	r3, [pc, #136]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e032      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004534:	4b19      	ldr	r3, [pc, #100]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4916      	ldr	r1, [pc, #88]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004552:	4b12      	ldr	r3, [pc, #72]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	490e      	ldr	r1, [pc, #56]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004566:	f000 f821 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 800456a:	4602      	mov	r2, r0
 800456c:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	490a      	ldr	r1, [pc, #40]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	5ccb      	ldrb	r3, [r1, r3]
 800457a:	fa22 f303 	lsr.w	r3, r2, r3
 800457e:	4a09      	ldr	r2, [pc, #36]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004582:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd fd62 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023c00 	.word	0x40023c00
 800459c:	40023800 	.word	0x40023800
 80045a0:	08007e00 	.word	0x08007e00
 80045a4:	20000000 	.word	0x20000000
 80045a8:	20000004 	.word	0x20000004

080045ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b0:	b094      	sub	sp, #80	@ 0x50
 80045b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c4:	4b79      	ldr	r3, [pc, #484]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d00d      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x40>
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	f200 80e1 	bhi.w	8004798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x34>
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045de:	e0db      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b73      	ldr	r3, [pc, #460]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045e4:	e0db      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045e6:	4b73      	ldr	r3, [pc, #460]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80045e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ea:	e0d8      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ec:	4b6f      	ldr	r3, [pc, #444]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045f6:	4b6d      	ldr	r3, [pc, #436]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d063      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004602:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	2200      	movs	r2, #0
 800460a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800460c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004614:	633b      	str	r3, [r7, #48]	@ 0x30
 8004616:	2300      	movs	r3, #0
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
 800461a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	0159      	lsls	r1, r3, #5
 800462c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004630:	0150      	lsls	r0, r2, #5
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4621      	mov	r1, r4
 8004638:	1a51      	subs	r1, r2, r1
 800463a:	6139      	str	r1, [r7, #16]
 800463c:	4629      	mov	r1, r5
 800463e:	eb63 0301 	sbc.w	r3, r3, r1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004650:	4659      	mov	r1, fp
 8004652:	018b      	lsls	r3, r1, #6
 8004654:	4651      	mov	r1, sl
 8004656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800465a:	4651      	mov	r1, sl
 800465c:	018a      	lsls	r2, r1, #6
 800465e:	4651      	mov	r1, sl
 8004660:	ebb2 0801 	subs.w	r8, r2, r1
 8004664:	4659      	mov	r1, fp
 8004666:	eb63 0901 	sbc.w	r9, r3, r1
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800467e:	4690      	mov	r8, r2
 8004680:	4699      	mov	r9, r3
 8004682:	4623      	mov	r3, r4
 8004684:	eb18 0303 	adds.w	r3, r8, r3
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	462b      	mov	r3, r5
 800468c:	eb49 0303 	adc.w	r3, r9, r3
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800469e:	4629      	mov	r1, r5
 80046a0:	024b      	lsls	r3, r1, #9
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046a8:	4621      	mov	r1, r4
 80046aa:	024a      	lsls	r2, r1, #9
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046b2:	2200      	movs	r2, #0
 80046b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046bc:	f7fc facc 	bl	8000c58 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c8:	e058      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ca:	4b38      	ldr	r3, [pc, #224]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	4611      	mov	r1, r2
 80046d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	2300      	movs	r3, #0
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	0159      	lsls	r1, r3, #5
 80046f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f6:	0150      	lsls	r0, r2, #5
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4641      	mov	r1, r8
 80046fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004702:	4649      	mov	r1, r9
 8004704:	eb63 0b01 	sbc.w	fp, r3, r1
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800471c:	ebb2 040a 	subs.w	r4, r2, sl
 8004720:	eb63 050b 	sbc.w	r5, r3, fp
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	00eb      	lsls	r3, r5, #3
 800472e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004732:	00e2      	lsls	r2, r4, #3
 8004734:	4614      	mov	r4, r2
 8004736:	461d      	mov	r5, r3
 8004738:	4643      	mov	r3, r8
 800473a:	18e3      	adds	r3, r4, r3
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	464b      	mov	r3, r9
 8004740:	eb45 0303 	adc.w	r3, r5, r3
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004752:	4629      	mov	r1, r5
 8004754:	028b      	lsls	r3, r1, #10
 8004756:	4621      	mov	r1, r4
 8004758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800475c:	4621      	mov	r1, r4
 800475e:	028a      	lsls	r2, r1, #10
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004766:	2200      	movs	r2, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	61fa      	str	r2, [r7, #28]
 800476c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004770:	f7fc fa72 	bl	8000c58 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	3301      	adds	r3, #1
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800478c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004796:	e002      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800479a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800479c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800479e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3750      	adds	r7, #80	@ 0x50
 80047a4:	46bd      	mov	sp, r7
 80047a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	007a1200 	.word	0x007a1200

080047b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000000 	.word	0x20000000

080047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047d4:	f7ff fff0 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	@ (80047f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0a9b      	lsrs	r3, r3, #10
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	@ (80047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	08007e10 	.word	0x08007e10

080047f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e041      	b.n	800488e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f839 	bl	8004896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f000 f9aa 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_PWM_Start+0x24>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e022      	b.n	8004916 <HAL_TIM_PWM_Start+0x6a>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d109      	bne.n	80048ea <HAL_TIM_PWM_Start+0x3e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e015      	b.n	8004916 <HAL_TIM_PWM_Start+0x6a>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d109      	bne.n	8004904 <HAL_TIM_PWM_Start+0x58>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e008      	b.n	8004916 <HAL_TIM_PWM_Start+0x6a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	bf14      	ite	ne
 8004910:	2301      	movne	r3, #1
 8004912:	2300      	moveq	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e068      	b.n	80049f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start+0x82>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800492c:	e013      	b.n	8004956 <HAL_TIM_PWM_Start+0xaa>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b04      	cmp	r3, #4
 8004932:	d104      	bne.n	800493e <HAL_TIM_PWM_Start+0x92>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800493c:	e00b      	b.n	8004956 <HAL_TIM_PWM_Start+0xaa>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0xa2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800494c:	e003      	b.n	8004956 <HAL_TIM_PWM_Start+0xaa>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2201      	movs	r2, #1
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fb28 	bl	8004fb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a23      	ldr	r2, [pc, #140]	@ (80049f8 <HAL_TIM_PWM_Start+0x14c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d107      	bne.n	800497e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <HAL_TIM_PWM_Start+0x14c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_TIM_PWM_Start+0x10e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004990:	d013      	beq.n	80049ba <HAL_TIM_PWM_Start+0x10e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <HAL_TIM_PWM_Start+0x150>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_TIM_PWM_Start+0x10e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a17      	ldr	r2, [pc, #92]	@ (8004a00 <HAL_TIM_PWM_Start+0x154>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_TIM_PWM_Start+0x10e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <HAL_TIM_PWM_Start+0x158>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_TIM_PWM_Start+0x10e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a14      	ldr	r2, [pc, #80]	@ (8004a08 <HAL_TIM_PWM_Start+0x15c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d111      	bne.n	80049de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d010      	beq.n	80049ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	e007      	b.n	80049ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40000c00 	.word	0x40000c00
 8004a08:	40014000 	.word	0x40014000

08004a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e0ae      	b.n	8004b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	f200 809f 	bhi.w	8004b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004b79 	.word	0x08004b79
 8004a48:	08004b79 	.word	0x08004b79
 8004a4c:	08004b79 	.word	0x08004b79
 8004a50:	08004ab5 	.word	0x08004ab5
 8004a54:	08004b79 	.word	0x08004b79
 8004a58:	08004b79 	.word	0x08004b79
 8004a5c:	08004b79 	.word	0x08004b79
 8004a60:	08004af7 	.word	0x08004af7
 8004a64:	08004b79 	.word	0x08004b79
 8004a68:	08004b79 	.word	0x08004b79
 8004a6c:	08004b79 	.word	0x08004b79
 8004a70:	08004b37 	.word	0x08004b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f90e 	bl	8004c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0208 	orr.w	r2, r2, #8
 8004a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0204 	bic.w	r2, r2, #4
 8004a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6999      	ldr	r1, [r3, #24]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	619a      	str	r2, [r3, #24]
      break;
 8004ab2:	e064      	b.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f954 	bl	8004d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	021a      	lsls	r2, r3, #8
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	619a      	str	r2, [r3, #24]
      break;
 8004af4:	e043      	b.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f99f 	bl	8004e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0208 	orr.w	r2, r2, #8
 8004b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0204 	bic.w	r2, r2, #4
 8004b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69d9      	ldr	r1, [r3, #28]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	61da      	str	r2, [r3, #28]
      break;
 8004b34:	e023      	b.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 f9e9 	bl	8004f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69d9      	ldr	r1, [r3, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	021a      	lsls	r2, r3, #8
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	61da      	str	r2, [r3, #28]
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a37      	ldr	r2, [pc, #220]	@ (8004c80 <TIM_Base_SetConfig+0xf0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00f      	beq.n	8004bc8 <TIM_Base_SetConfig+0x38>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bae:	d00b      	beq.n	8004bc8 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a34      	ldr	r2, [pc, #208]	@ (8004c84 <TIM_Base_SetConfig+0xf4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <TIM_Base_SetConfig+0x38>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a33      	ldr	r2, [pc, #204]	@ (8004c88 <TIM_Base_SetConfig+0xf8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0x38>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a32      	ldr	r2, [pc, #200]	@ (8004c8c <TIM_Base_SetConfig+0xfc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d108      	bne.n	8004bda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <TIM_Base_SetConfig+0xf0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01b      	beq.n	8004c1a <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be8:	d017      	beq.n	8004c1a <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a25      	ldr	r2, [pc, #148]	@ (8004c84 <TIM_Base_SetConfig+0xf4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a24      	ldr	r2, [pc, #144]	@ (8004c88 <TIM_Base_SetConfig+0xf8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	@ (8004c8c <TIM_Base_SetConfig+0xfc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a22      	ldr	r2, [pc, #136]	@ (8004c90 <TIM_Base_SetConfig+0x100>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0x8a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a21      	ldr	r2, [pc, #132]	@ (8004c94 <TIM_Base_SetConfig+0x104>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a20      	ldr	r2, [pc, #128]	@ (8004c98 <TIM_Base_SetConfig+0x108>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c80 <TIM_Base_SetConfig+0xf0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d103      	bne.n	8004c5a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	601a      	str	r2, [r3, #0]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f023 0201 	bic.w	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 0302 	bic.w	r3, r3, #2
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d64 <TIM_OC1_SetConfig+0xc8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d10c      	bne.n	8004d12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0308 	bic.w	r3, r3, #8
 8004cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a13      	ldr	r2, [pc, #76]	@ (8004d64 <TIM_OC1_SetConfig+0xc8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d111      	bne.n	8004d3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	621a      	str	r2, [r3, #32]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	40010000 	.word	0x40010000

08004d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f023 0210 	bic.w	r2, r3, #16
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0320 	bic.w	r3, r3, #32
 8004db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e3c <TIM_OC2_SetConfig+0xd4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d10d      	bne.n	8004de4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a15      	ldr	r2, [pc, #84]	@ (8004e3c <TIM_OC2_SetConfig+0xd4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d113      	bne.n	8004e14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000

08004e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	@ (8004f10 <TIM_OC3_SetConfig+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10d      	bne.n	8004eba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <TIM_OC3_SetConfig+0xd0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d113      	bne.n	8004eea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	621a      	str	r2, [r3, #32]
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40010000 	.word	0x40010000

08004f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	031b      	lsls	r3, r3, #12
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a10      	ldr	r2, [pc, #64]	@ (8004fb0 <TIM_OC4_SetConfig+0x9c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d109      	bne.n	8004f88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40010000 	.word	0x40010000

08004fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005014:	2302      	movs	r3, #2
 8005016:	e050      	b.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d018      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005064:	d013      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a18      	ldr	r2, [pc, #96]	@ (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00e      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d009      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a13      	ldr	r2, [pc, #76]	@ (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10c      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000

080050dc <__cvt>:
 80050dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	ec57 6b10 	vmov	r6, r7, d0
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	460c      	mov	r4, r1
 80050e8:	4619      	mov	r1, r3
 80050ea:	463b      	mov	r3, r7
 80050ec:	bfbb      	ittet	lt
 80050ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80050f2:	461f      	movlt	r7, r3
 80050f4:	2300      	movge	r3, #0
 80050f6:	232d      	movlt	r3, #45	@ 0x2d
 80050f8:	700b      	strb	r3, [r1, #0]
 80050fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005100:	4691      	mov	r9, r2
 8005102:	f023 0820 	bic.w	r8, r3, #32
 8005106:	bfbc      	itt	lt
 8005108:	4632      	movlt	r2, r6
 800510a:	4616      	movlt	r6, r2
 800510c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005110:	d005      	beq.n	800511e <__cvt+0x42>
 8005112:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005116:	d100      	bne.n	800511a <__cvt+0x3e>
 8005118:	3401      	adds	r4, #1
 800511a:	2102      	movs	r1, #2
 800511c:	e000      	b.n	8005120 <__cvt+0x44>
 800511e:	2103      	movs	r1, #3
 8005120:	ab03      	add	r3, sp, #12
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	ab02      	add	r3, sp, #8
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	ec47 6b10 	vmov	d0, r6, r7
 800512c:	4653      	mov	r3, sl
 800512e:	4622      	mov	r2, r4
 8005130:	f000 fe5a 	bl	8005de8 <_dtoa_r>
 8005134:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005138:	4605      	mov	r5, r0
 800513a:	d119      	bne.n	8005170 <__cvt+0x94>
 800513c:	f019 0f01 	tst.w	r9, #1
 8005140:	d00e      	beq.n	8005160 <__cvt+0x84>
 8005142:	eb00 0904 	add.w	r9, r0, r4
 8005146:	2200      	movs	r2, #0
 8005148:	2300      	movs	r3, #0
 800514a:	4630      	mov	r0, r6
 800514c:	4639      	mov	r1, r7
 800514e:	f7fb fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005152:	b108      	cbz	r0, 8005158 <__cvt+0x7c>
 8005154:	f8cd 900c 	str.w	r9, [sp, #12]
 8005158:	2230      	movs	r2, #48	@ 0x30
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	454b      	cmp	r3, r9
 800515e:	d31e      	bcc.n	800519e <__cvt+0xc2>
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005164:	1b5b      	subs	r3, r3, r5
 8005166:	4628      	mov	r0, r5
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	b004      	add	sp, #16
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005174:	eb00 0904 	add.w	r9, r0, r4
 8005178:	d1e5      	bne.n	8005146 <__cvt+0x6a>
 800517a:	7803      	ldrb	r3, [r0, #0]
 800517c:	2b30      	cmp	r3, #48	@ 0x30
 800517e:	d10a      	bne.n	8005196 <__cvt+0xba>
 8005180:	2200      	movs	r2, #0
 8005182:	2300      	movs	r3, #0
 8005184:	4630      	mov	r0, r6
 8005186:	4639      	mov	r1, r7
 8005188:	f7fb fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800518c:	b918      	cbnz	r0, 8005196 <__cvt+0xba>
 800518e:	f1c4 0401 	rsb	r4, r4, #1
 8005192:	f8ca 4000 	str.w	r4, [sl]
 8005196:	f8da 3000 	ldr.w	r3, [sl]
 800519a:	4499      	add	r9, r3
 800519c:	e7d3      	b.n	8005146 <__cvt+0x6a>
 800519e:	1c59      	adds	r1, r3, #1
 80051a0:	9103      	str	r1, [sp, #12]
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e7d9      	b.n	800515a <__cvt+0x7e>

080051a6 <__exponent>:
 80051a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051a8:	2900      	cmp	r1, #0
 80051aa:	bfba      	itte	lt
 80051ac:	4249      	neglt	r1, r1
 80051ae:	232d      	movlt	r3, #45	@ 0x2d
 80051b0:	232b      	movge	r3, #43	@ 0x2b
 80051b2:	2909      	cmp	r1, #9
 80051b4:	7002      	strb	r2, [r0, #0]
 80051b6:	7043      	strb	r3, [r0, #1]
 80051b8:	dd29      	ble.n	800520e <__exponent+0x68>
 80051ba:	f10d 0307 	add.w	r3, sp, #7
 80051be:	461d      	mov	r5, r3
 80051c0:	270a      	movs	r7, #10
 80051c2:	461a      	mov	r2, r3
 80051c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80051c8:	fb07 1416 	mls	r4, r7, r6, r1
 80051cc:	3430      	adds	r4, #48	@ 0x30
 80051ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80051d2:	460c      	mov	r4, r1
 80051d4:	2c63      	cmp	r4, #99	@ 0x63
 80051d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80051da:	4631      	mov	r1, r6
 80051dc:	dcf1      	bgt.n	80051c2 <__exponent+0x1c>
 80051de:	3130      	adds	r1, #48	@ 0x30
 80051e0:	1e94      	subs	r4, r2, #2
 80051e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051e6:	1c41      	adds	r1, r0, #1
 80051e8:	4623      	mov	r3, r4
 80051ea:	42ab      	cmp	r3, r5
 80051ec:	d30a      	bcc.n	8005204 <__exponent+0x5e>
 80051ee:	f10d 0309 	add.w	r3, sp, #9
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	42ac      	cmp	r4, r5
 80051f6:	bf88      	it	hi
 80051f8:	2300      	movhi	r3, #0
 80051fa:	3302      	adds	r3, #2
 80051fc:	4403      	add	r3, r0
 80051fe:	1a18      	subs	r0, r3, r0
 8005200:	b003      	add	sp, #12
 8005202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005204:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005208:	f801 6f01 	strb.w	r6, [r1, #1]!
 800520c:	e7ed      	b.n	80051ea <__exponent+0x44>
 800520e:	2330      	movs	r3, #48	@ 0x30
 8005210:	3130      	adds	r1, #48	@ 0x30
 8005212:	7083      	strb	r3, [r0, #2]
 8005214:	70c1      	strb	r1, [r0, #3]
 8005216:	1d03      	adds	r3, r0, #4
 8005218:	e7f1      	b.n	80051fe <__exponent+0x58>
	...

0800521c <_printf_float>:
 800521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	b08d      	sub	sp, #52	@ 0x34
 8005222:	460c      	mov	r4, r1
 8005224:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005228:	4616      	mov	r6, r2
 800522a:	461f      	mov	r7, r3
 800522c:	4605      	mov	r5, r0
 800522e:	f000 fcdb 	bl	8005be8 <_localeconv_r>
 8005232:	6803      	ldr	r3, [r0, #0]
 8005234:	9304      	str	r3, [sp, #16]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fb f822 	bl	8000280 <strlen>
 800523c:	2300      	movs	r3, #0
 800523e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005240:	f8d8 3000 	ldr.w	r3, [r8]
 8005244:	9005      	str	r0, [sp, #20]
 8005246:	3307      	adds	r3, #7
 8005248:	f023 0307 	bic.w	r3, r3, #7
 800524c:	f103 0208 	add.w	r2, r3, #8
 8005250:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005254:	f8d4 b000 	ldr.w	fp, [r4]
 8005258:	f8c8 2000 	str.w	r2, [r8]
 800525c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005260:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005264:	9307      	str	r3, [sp, #28]
 8005266:	f8cd 8018 	str.w	r8, [sp, #24]
 800526a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800526e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005272:	4b9c      	ldr	r3, [pc, #624]	@ (80054e4 <_printf_float+0x2c8>)
 8005274:	f04f 32ff 	mov.w	r2, #4294967295
 8005278:	f7fb fc60 	bl	8000b3c <__aeabi_dcmpun>
 800527c:	bb70      	cbnz	r0, 80052dc <_printf_float+0xc0>
 800527e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005282:	4b98      	ldr	r3, [pc, #608]	@ (80054e4 <_printf_float+0x2c8>)
 8005284:	f04f 32ff 	mov.w	r2, #4294967295
 8005288:	f7fb fc3a 	bl	8000b00 <__aeabi_dcmple>
 800528c:	bb30      	cbnz	r0, 80052dc <_printf_float+0xc0>
 800528e:	2200      	movs	r2, #0
 8005290:	2300      	movs	r3, #0
 8005292:	4640      	mov	r0, r8
 8005294:	4649      	mov	r1, r9
 8005296:	f7fb fc29 	bl	8000aec <__aeabi_dcmplt>
 800529a:	b110      	cbz	r0, 80052a2 <_printf_float+0x86>
 800529c:	232d      	movs	r3, #45	@ 0x2d
 800529e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a2:	4a91      	ldr	r2, [pc, #580]	@ (80054e8 <_printf_float+0x2cc>)
 80052a4:	4b91      	ldr	r3, [pc, #580]	@ (80054ec <_printf_float+0x2d0>)
 80052a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80052aa:	bf8c      	ite	hi
 80052ac:	4690      	movhi	r8, r2
 80052ae:	4698      	movls	r8, r3
 80052b0:	2303      	movs	r3, #3
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	f02b 0304 	bic.w	r3, fp, #4
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	f04f 0900 	mov.w	r9, #0
 80052be:	9700      	str	r7, [sp, #0]
 80052c0:	4633      	mov	r3, r6
 80052c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f9d2 	bl	8005670 <_printf_common>
 80052cc:	3001      	adds	r0, #1
 80052ce:	f040 808d 	bne.w	80053ec <_printf_float+0x1d0>
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295
 80052d6:	b00d      	add	sp, #52	@ 0x34
 80052d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	4642      	mov	r2, r8
 80052de:	464b      	mov	r3, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fb fc2a 	bl	8000b3c <__aeabi_dcmpun>
 80052e8:	b140      	cbz	r0, 80052fc <_printf_float+0xe0>
 80052ea:	464b      	mov	r3, r9
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bfbc      	itt	lt
 80052f0:	232d      	movlt	r3, #45	@ 0x2d
 80052f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052f6:	4a7e      	ldr	r2, [pc, #504]	@ (80054f0 <_printf_float+0x2d4>)
 80052f8:	4b7e      	ldr	r3, [pc, #504]	@ (80054f4 <_printf_float+0x2d8>)
 80052fa:	e7d4      	b.n	80052a6 <_printf_float+0x8a>
 80052fc:	6863      	ldr	r3, [r4, #4]
 80052fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005302:	9206      	str	r2, [sp, #24]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	d13b      	bne.n	8005380 <_printf_float+0x164>
 8005308:	2306      	movs	r3, #6
 800530a:	6063      	str	r3, [r4, #4]
 800530c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005310:	2300      	movs	r3, #0
 8005312:	6022      	str	r2, [r4, #0]
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	ab0a      	add	r3, sp, #40	@ 0x28
 8005318:	e9cd a301 	strd	sl, r3, [sp, #4]
 800531c:	ab09      	add	r3, sp, #36	@ 0x24
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	6861      	ldr	r1, [r4, #4]
 8005322:	ec49 8b10 	vmov	d0, r8, r9
 8005326:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800532a:	4628      	mov	r0, r5
 800532c:	f7ff fed6 	bl	80050dc <__cvt>
 8005330:	9b06      	ldr	r3, [sp, #24]
 8005332:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005334:	2b47      	cmp	r3, #71	@ 0x47
 8005336:	4680      	mov	r8, r0
 8005338:	d129      	bne.n	800538e <_printf_float+0x172>
 800533a:	1cc8      	adds	r0, r1, #3
 800533c:	db02      	blt.n	8005344 <_printf_float+0x128>
 800533e:	6863      	ldr	r3, [r4, #4]
 8005340:	4299      	cmp	r1, r3
 8005342:	dd41      	ble.n	80053c8 <_printf_float+0x1ac>
 8005344:	f1aa 0a02 	sub.w	sl, sl, #2
 8005348:	fa5f fa8a 	uxtb.w	sl, sl
 800534c:	3901      	subs	r1, #1
 800534e:	4652      	mov	r2, sl
 8005350:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005354:	9109      	str	r1, [sp, #36]	@ 0x24
 8005356:	f7ff ff26 	bl	80051a6 <__exponent>
 800535a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800535c:	1813      	adds	r3, r2, r0
 800535e:	2a01      	cmp	r2, #1
 8005360:	4681      	mov	r9, r0
 8005362:	6123      	str	r3, [r4, #16]
 8005364:	dc02      	bgt.n	800536c <_printf_float+0x150>
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	07d2      	lsls	r2, r2, #31
 800536a:	d501      	bpl.n	8005370 <_printf_float+0x154>
 800536c:	3301      	adds	r3, #1
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0a2      	beq.n	80052be <_printf_float+0xa2>
 8005378:	232d      	movs	r3, #45	@ 0x2d
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800537e:	e79e      	b.n	80052be <_printf_float+0xa2>
 8005380:	9a06      	ldr	r2, [sp, #24]
 8005382:	2a47      	cmp	r2, #71	@ 0x47
 8005384:	d1c2      	bne.n	800530c <_printf_float+0xf0>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1c0      	bne.n	800530c <_printf_float+0xf0>
 800538a:	2301      	movs	r3, #1
 800538c:	e7bd      	b.n	800530a <_printf_float+0xee>
 800538e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005392:	d9db      	bls.n	800534c <_printf_float+0x130>
 8005394:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005398:	d118      	bne.n	80053cc <_printf_float+0x1b0>
 800539a:	2900      	cmp	r1, #0
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	dd0b      	ble.n	80053b8 <_printf_float+0x19c>
 80053a0:	6121      	str	r1, [r4, #16]
 80053a2:	b913      	cbnz	r3, 80053aa <_printf_float+0x18e>
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	07d0      	lsls	r0, r2, #31
 80053a8:	d502      	bpl.n	80053b0 <_printf_float+0x194>
 80053aa:	3301      	adds	r3, #1
 80053ac:	440b      	add	r3, r1
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80053b2:	f04f 0900 	mov.w	r9, #0
 80053b6:	e7db      	b.n	8005370 <_printf_float+0x154>
 80053b8:	b913      	cbnz	r3, 80053c0 <_printf_float+0x1a4>
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	07d2      	lsls	r2, r2, #31
 80053be:	d501      	bpl.n	80053c4 <_printf_float+0x1a8>
 80053c0:	3302      	adds	r3, #2
 80053c2:	e7f4      	b.n	80053ae <_printf_float+0x192>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e7f2      	b.n	80053ae <_printf_float+0x192>
 80053c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80053cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053ce:	4299      	cmp	r1, r3
 80053d0:	db05      	blt.n	80053de <_printf_float+0x1c2>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	6121      	str	r1, [r4, #16]
 80053d6:	07d8      	lsls	r0, r3, #31
 80053d8:	d5ea      	bpl.n	80053b0 <_printf_float+0x194>
 80053da:	1c4b      	adds	r3, r1, #1
 80053dc:	e7e7      	b.n	80053ae <_printf_float+0x192>
 80053de:	2900      	cmp	r1, #0
 80053e0:	bfd4      	ite	le
 80053e2:	f1c1 0202 	rsble	r2, r1, #2
 80053e6:	2201      	movgt	r2, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	e7e0      	b.n	80053ae <_printf_float+0x192>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	055a      	lsls	r2, r3, #21
 80053f0:	d407      	bmi.n	8005402 <_printf_float+0x1e6>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	4642      	mov	r2, r8
 80053f6:	4631      	mov	r1, r6
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b8      	blx	r7
 80053fc:	3001      	adds	r0, #1
 80053fe:	d12b      	bne.n	8005458 <_printf_float+0x23c>
 8005400:	e767      	b.n	80052d2 <_printf_float+0xb6>
 8005402:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005406:	f240 80dd 	bls.w	80055c4 <_printf_float+0x3a8>
 800540a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	f7fb fb61 	bl	8000ad8 <__aeabi_dcmpeq>
 8005416:	2800      	cmp	r0, #0
 8005418:	d033      	beq.n	8005482 <_printf_float+0x266>
 800541a:	4a37      	ldr	r2, [pc, #220]	@ (80054f8 <_printf_float+0x2dc>)
 800541c:	2301      	movs	r3, #1
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f af54 	beq.w	80052d2 <_printf_float+0xb6>
 800542a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800542e:	4543      	cmp	r3, r8
 8005430:	db02      	blt.n	8005438 <_printf_float+0x21c>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	07d8      	lsls	r0, r3, #31
 8005436:	d50f      	bpl.n	8005458 <_printf_float+0x23c>
 8005438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	f43f af45 	beq.w	80052d2 <_printf_float+0xb6>
 8005448:	f04f 0900 	mov.w	r9, #0
 800544c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005450:	f104 0a1a 	add.w	sl, r4, #26
 8005454:	45c8      	cmp	r8, r9
 8005456:	dc09      	bgt.n	800546c <_printf_float+0x250>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	079b      	lsls	r3, r3, #30
 800545c:	f100 8103 	bmi.w	8005666 <_printf_float+0x44a>
 8005460:	68e0      	ldr	r0, [r4, #12]
 8005462:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005464:	4298      	cmp	r0, r3
 8005466:	bfb8      	it	lt
 8005468:	4618      	movlt	r0, r3
 800546a:	e734      	b.n	80052d6 <_printf_float+0xba>
 800546c:	2301      	movs	r3, #1
 800546e:	4652      	mov	r2, sl
 8005470:	4631      	mov	r1, r6
 8005472:	4628      	mov	r0, r5
 8005474:	47b8      	blx	r7
 8005476:	3001      	adds	r0, #1
 8005478:	f43f af2b 	beq.w	80052d2 <_printf_float+0xb6>
 800547c:	f109 0901 	add.w	r9, r9, #1
 8005480:	e7e8      	b.n	8005454 <_printf_float+0x238>
 8005482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	dc39      	bgt.n	80054fc <_printf_float+0x2e0>
 8005488:	4a1b      	ldr	r2, [pc, #108]	@ (80054f8 <_printf_float+0x2dc>)
 800548a:	2301      	movs	r3, #1
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f af1d 	beq.w	80052d2 <_printf_float+0xb6>
 8005498:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800549c:	ea59 0303 	orrs.w	r3, r9, r3
 80054a0:	d102      	bne.n	80054a8 <_printf_float+0x28c>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	07d9      	lsls	r1, r3, #31
 80054a6:	d5d7      	bpl.n	8005458 <_printf_float+0x23c>
 80054a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b8      	blx	r7
 80054b2:	3001      	adds	r0, #1
 80054b4:	f43f af0d 	beq.w	80052d2 <_printf_float+0xb6>
 80054b8:	f04f 0a00 	mov.w	sl, #0
 80054bc:	f104 0b1a 	add.w	fp, r4, #26
 80054c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c2:	425b      	negs	r3, r3
 80054c4:	4553      	cmp	r3, sl
 80054c6:	dc01      	bgt.n	80054cc <_printf_float+0x2b0>
 80054c8:	464b      	mov	r3, r9
 80054ca:	e793      	b.n	80053f4 <_printf_float+0x1d8>
 80054cc:	2301      	movs	r3, #1
 80054ce:	465a      	mov	r2, fp
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	f43f aefb 	beq.w	80052d2 <_printf_float+0xb6>
 80054dc:	f10a 0a01 	add.w	sl, sl, #1
 80054e0:	e7ee      	b.n	80054c0 <_printf_float+0x2a4>
 80054e2:	bf00      	nop
 80054e4:	7fefffff 	.word	0x7fefffff
 80054e8:	08007e24 	.word	0x08007e24
 80054ec:	08007e20 	.word	0x08007e20
 80054f0:	08007e2c 	.word	0x08007e2c
 80054f4:	08007e28 	.word	0x08007e28
 80054f8:	08007e30 	.word	0x08007e30
 80054fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005502:	4553      	cmp	r3, sl
 8005504:	bfa8      	it	ge
 8005506:	4653      	movge	r3, sl
 8005508:	2b00      	cmp	r3, #0
 800550a:	4699      	mov	r9, r3
 800550c:	dc36      	bgt.n	800557c <_printf_float+0x360>
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005516:	f104 021a 	add.w	r2, r4, #26
 800551a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800551c:	9306      	str	r3, [sp, #24]
 800551e:	eba3 0309 	sub.w	r3, r3, r9
 8005522:	455b      	cmp	r3, fp
 8005524:	dc31      	bgt.n	800558a <_printf_float+0x36e>
 8005526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005528:	459a      	cmp	sl, r3
 800552a:	dc3a      	bgt.n	80055a2 <_printf_float+0x386>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	07da      	lsls	r2, r3, #31
 8005530:	d437      	bmi.n	80055a2 <_printf_float+0x386>
 8005532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005534:	ebaa 0903 	sub.w	r9, sl, r3
 8005538:	9b06      	ldr	r3, [sp, #24]
 800553a:	ebaa 0303 	sub.w	r3, sl, r3
 800553e:	4599      	cmp	r9, r3
 8005540:	bfa8      	it	ge
 8005542:	4699      	movge	r9, r3
 8005544:	f1b9 0f00 	cmp.w	r9, #0
 8005548:	dc33      	bgt.n	80055b2 <_printf_float+0x396>
 800554a:	f04f 0800 	mov.w	r8, #0
 800554e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005552:	f104 0b1a 	add.w	fp, r4, #26
 8005556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005558:	ebaa 0303 	sub.w	r3, sl, r3
 800555c:	eba3 0309 	sub.w	r3, r3, r9
 8005560:	4543      	cmp	r3, r8
 8005562:	f77f af79 	ble.w	8005458 <_printf_float+0x23c>
 8005566:	2301      	movs	r3, #1
 8005568:	465a      	mov	r2, fp
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f aeae 	beq.w	80052d2 <_printf_float+0xb6>
 8005576:	f108 0801 	add.w	r8, r8, #1
 800557a:	e7ec      	b.n	8005556 <_printf_float+0x33a>
 800557c:	4642      	mov	r2, r8
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	d1c2      	bne.n	800550e <_printf_float+0x2f2>
 8005588:	e6a3      	b.n	80052d2 <_printf_float+0xb6>
 800558a:	2301      	movs	r3, #1
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	9206      	str	r2, [sp, #24]
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f ae9c 	beq.w	80052d2 <_printf_float+0xb6>
 800559a:	9a06      	ldr	r2, [sp, #24]
 800559c:	f10b 0b01 	add.w	fp, fp, #1
 80055a0:	e7bb      	b.n	800551a <_printf_float+0x2fe>
 80055a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	d1c0      	bne.n	8005532 <_printf_float+0x316>
 80055b0:	e68f      	b.n	80052d2 <_printf_float+0xb6>
 80055b2:	9a06      	ldr	r2, [sp, #24]
 80055b4:	464b      	mov	r3, r9
 80055b6:	4442      	add	r2, r8
 80055b8:	4631      	mov	r1, r6
 80055ba:	4628      	mov	r0, r5
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	d1c3      	bne.n	800554a <_printf_float+0x32e>
 80055c2:	e686      	b.n	80052d2 <_printf_float+0xb6>
 80055c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055c8:	f1ba 0f01 	cmp.w	sl, #1
 80055cc:	dc01      	bgt.n	80055d2 <_printf_float+0x3b6>
 80055ce:	07db      	lsls	r3, r3, #31
 80055d0:	d536      	bpl.n	8005640 <_printf_float+0x424>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4642      	mov	r2, r8
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f ae78 	beq.w	80052d2 <_printf_float+0xb6>
 80055e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	f43f ae70 	beq.w	80052d2 <_printf_float+0xb6>
 80055f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055f6:	2200      	movs	r2, #0
 80055f8:	2300      	movs	r3, #0
 80055fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055fe:	f7fb fa6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005602:	b9c0      	cbnz	r0, 8005636 <_printf_float+0x41a>
 8005604:	4653      	mov	r3, sl
 8005606:	f108 0201 	add.w	r2, r8, #1
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	d10c      	bne.n	800562e <_printf_float+0x412>
 8005614:	e65d      	b.n	80052d2 <_printf_float+0xb6>
 8005616:	2301      	movs	r3, #1
 8005618:	465a      	mov	r2, fp
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	47b8      	blx	r7
 8005620:	3001      	adds	r0, #1
 8005622:	f43f ae56 	beq.w	80052d2 <_printf_float+0xb6>
 8005626:	f108 0801 	add.w	r8, r8, #1
 800562a:	45d0      	cmp	r8, sl
 800562c:	dbf3      	blt.n	8005616 <_printf_float+0x3fa>
 800562e:	464b      	mov	r3, r9
 8005630:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005634:	e6df      	b.n	80053f6 <_printf_float+0x1da>
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	f104 0b1a 	add.w	fp, r4, #26
 800563e:	e7f4      	b.n	800562a <_printf_float+0x40e>
 8005640:	2301      	movs	r3, #1
 8005642:	4642      	mov	r2, r8
 8005644:	e7e1      	b.n	800560a <_printf_float+0x3ee>
 8005646:	2301      	movs	r3, #1
 8005648:	464a      	mov	r2, r9
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	f43f ae3e 	beq.w	80052d2 <_printf_float+0xb6>
 8005656:	f108 0801 	add.w	r8, r8, #1
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800565e:	1a5b      	subs	r3, r3, r1
 8005660:	4543      	cmp	r3, r8
 8005662:	dcf0      	bgt.n	8005646 <_printf_float+0x42a>
 8005664:	e6fc      	b.n	8005460 <_printf_float+0x244>
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	f104 0919 	add.w	r9, r4, #25
 800566e:	e7f4      	b.n	800565a <_printf_float+0x43e>

08005670 <_printf_common>:
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	4616      	mov	r6, r2
 8005676:	4698      	mov	r8, r3
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	690b      	ldr	r3, [r1, #16]
 800567c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005680:	4293      	cmp	r3, r2
 8005682:	bfb8      	it	lt
 8005684:	4613      	movlt	r3, r2
 8005686:	6033      	str	r3, [r6, #0]
 8005688:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800568c:	4607      	mov	r7, r0
 800568e:	460c      	mov	r4, r1
 8005690:	b10a      	cbz	r2, 8005696 <_printf_common+0x26>
 8005692:	3301      	adds	r3, #1
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	0699      	lsls	r1, r3, #26
 800569a:	bf42      	ittt	mi
 800569c:	6833      	ldrmi	r3, [r6, #0]
 800569e:	3302      	addmi	r3, #2
 80056a0:	6033      	strmi	r3, [r6, #0]
 80056a2:	6825      	ldr	r5, [r4, #0]
 80056a4:	f015 0506 	ands.w	r5, r5, #6
 80056a8:	d106      	bne.n	80056b8 <_printf_common+0x48>
 80056aa:	f104 0a19 	add.w	sl, r4, #25
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dc26      	bgt.n	8005706 <_printf_common+0x96>
 80056b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	3b00      	subs	r3, #0
 80056c0:	bf18      	it	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	0692      	lsls	r2, r2, #26
 80056c6:	d42b      	bmi.n	8005720 <_printf_common+0xb0>
 80056c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056cc:	4641      	mov	r1, r8
 80056ce:	4638      	mov	r0, r7
 80056d0:	47c8      	blx	r9
 80056d2:	3001      	adds	r0, #1
 80056d4:	d01e      	beq.n	8005714 <_printf_common+0xa4>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	f003 0306 	and.w	r3, r3, #6
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf02      	ittt	eq
 80056e2:	68e5      	ldreq	r5, [r4, #12]
 80056e4:	6833      	ldreq	r3, [r6, #0]
 80056e6:	1aed      	subeq	r5, r5, r3
 80056e8:	68a3      	ldr	r3, [r4, #8]
 80056ea:	bf0c      	ite	eq
 80056ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f0:	2500      	movne	r5, #0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	bfc4      	itt	gt
 80056f6:	1a9b      	subgt	r3, r3, r2
 80056f8:	18ed      	addgt	r5, r5, r3
 80056fa:	2600      	movs	r6, #0
 80056fc:	341a      	adds	r4, #26
 80056fe:	42b5      	cmp	r5, r6
 8005700:	d11a      	bne.n	8005738 <_printf_common+0xc8>
 8005702:	2000      	movs	r0, #0
 8005704:	e008      	b.n	8005718 <_printf_common+0xa8>
 8005706:	2301      	movs	r3, #1
 8005708:	4652      	mov	r2, sl
 800570a:	4641      	mov	r1, r8
 800570c:	4638      	mov	r0, r7
 800570e:	47c8      	blx	r9
 8005710:	3001      	adds	r0, #1
 8005712:	d103      	bne.n	800571c <_printf_common+0xac>
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571c:	3501      	adds	r5, #1
 800571e:	e7c6      	b.n	80056ae <_printf_common+0x3e>
 8005720:	18e1      	adds	r1, r4, r3
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	2030      	movs	r0, #48	@ 0x30
 8005726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800572a:	4422      	add	r2, r4
 800572c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005734:	3302      	adds	r3, #2
 8005736:	e7c7      	b.n	80056c8 <_printf_common+0x58>
 8005738:	2301      	movs	r3, #1
 800573a:	4622      	mov	r2, r4
 800573c:	4641      	mov	r1, r8
 800573e:	4638      	mov	r0, r7
 8005740:	47c8      	blx	r9
 8005742:	3001      	adds	r0, #1
 8005744:	d0e6      	beq.n	8005714 <_printf_common+0xa4>
 8005746:	3601      	adds	r6, #1
 8005748:	e7d9      	b.n	80056fe <_printf_common+0x8e>
	...

0800574c <_printf_i>:
 800574c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	7e0f      	ldrb	r7, [r1, #24]
 8005752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005754:	2f78      	cmp	r7, #120	@ 0x78
 8005756:	4691      	mov	r9, r2
 8005758:	4680      	mov	r8, r0
 800575a:	460c      	mov	r4, r1
 800575c:	469a      	mov	sl, r3
 800575e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005762:	d807      	bhi.n	8005774 <_printf_i+0x28>
 8005764:	2f62      	cmp	r7, #98	@ 0x62
 8005766:	d80a      	bhi.n	800577e <_printf_i+0x32>
 8005768:	2f00      	cmp	r7, #0
 800576a:	f000 80d1 	beq.w	8005910 <_printf_i+0x1c4>
 800576e:	2f58      	cmp	r7, #88	@ 0x58
 8005770:	f000 80b8 	beq.w	80058e4 <_printf_i+0x198>
 8005774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800577c:	e03a      	b.n	80057f4 <_printf_i+0xa8>
 800577e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005782:	2b15      	cmp	r3, #21
 8005784:	d8f6      	bhi.n	8005774 <_printf_i+0x28>
 8005786:	a101      	add	r1, pc, #4	@ (adr r1, 800578c <_printf_i+0x40>)
 8005788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800578c:	080057e5 	.word	0x080057e5
 8005790:	080057f9 	.word	0x080057f9
 8005794:	08005775 	.word	0x08005775
 8005798:	08005775 	.word	0x08005775
 800579c:	08005775 	.word	0x08005775
 80057a0:	08005775 	.word	0x08005775
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	08005775 	.word	0x08005775
 80057ac:	08005775 	.word	0x08005775
 80057b0:	08005775 	.word	0x08005775
 80057b4:	08005775 	.word	0x08005775
 80057b8:	080058f7 	.word	0x080058f7
 80057bc:	08005823 	.word	0x08005823
 80057c0:	080058b1 	.word	0x080058b1
 80057c4:	08005775 	.word	0x08005775
 80057c8:	08005775 	.word	0x08005775
 80057cc:	08005919 	.word	0x08005919
 80057d0:	08005775 	.word	0x08005775
 80057d4:	08005823 	.word	0x08005823
 80057d8:	08005775 	.word	0x08005775
 80057dc:	08005775 	.word	0x08005775
 80057e0:	080058b9 	.word	0x080058b9
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6032      	str	r2, [r6, #0]
 80057ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057f4:	2301      	movs	r3, #1
 80057f6:	e09c      	b.n	8005932 <_printf_i+0x1e6>
 80057f8:	6833      	ldr	r3, [r6, #0]
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	1d19      	adds	r1, r3, #4
 80057fe:	6031      	str	r1, [r6, #0]
 8005800:	0606      	lsls	r6, r0, #24
 8005802:	d501      	bpl.n	8005808 <_printf_i+0xbc>
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	e003      	b.n	8005810 <_printf_i+0xc4>
 8005808:	0645      	lsls	r5, r0, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0xb8>
 800580c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005810:	2d00      	cmp	r5, #0
 8005812:	da03      	bge.n	800581c <_printf_i+0xd0>
 8005814:	232d      	movs	r3, #45	@ 0x2d
 8005816:	426d      	negs	r5, r5
 8005818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800581c:	4858      	ldr	r0, [pc, #352]	@ (8005980 <_printf_i+0x234>)
 800581e:	230a      	movs	r3, #10
 8005820:	e011      	b.n	8005846 <_printf_i+0xfa>
 8005822:	6821      	ldr	r1, [r4, #0]
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	0608      	lsls	r0, r1, #24
 8005828:	f853 5b04 	ldr.w	r5, [r3], #4
 800582c:	d402      	bmi.n	8005834 <_printf_i+0xe8>
 800582e:	0649      	lsls	r1, r1, #25
 8005830:	bf48      	it	mi
 8005832:	b2ad      	uxthmi	r5, r5
 8005834:	2f6f      	cmp	r7, #111	@ 0x6f
 8005836:	4852      	ldr	r0, [pc, #328]	@ (8005980 <_printf_i+0x234>)
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	bf14      	ite	ne
 800583c:	230a      	movne	r3, #10
 800583e:	2308      	moveq	r3, #8
 8005840:	2100      	movs	r1, #0
 8005842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005846:	6866      	ldr	r6, [r4, #4]
 8005848:	60a6      	str	r6, [r4, #8]
 800584a:	2e00      	cmp	r6, #0
 800584c:	db05      	blt.n	800585a <_printf_i+0x10e>
 800584e:	6821      	ldr	r1, [r4, #0]
 8005850:	432e      	orrs	r6, r5
 8005852:	f021 0104 	bic.w	r1, r1, #4
 8005856:	6021      	str	r1, [r4, #0]
 8005858:	d04b      	beq.n	80058f2 <_printf_i+0x1a6>
 800585a:	4616      	mov	r6, r2
 800585c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005860:	fb03 5711 	mls	r7, r3, r1, r5
 8005864:	5dc7      	ldrb	r7, [r0, r7]
 8005866:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800586a:	462f      	mov	r7, r5
 800586c:	42bb      	cmp	r3, r7
 800586e:	460d      	mov	r5, r1
 8005870:	d9f4      	bls.n	800585c <_printf_i+0x110>
 8005872:	2b08      	cmp	r3, #8
 8005874:	d10b      	bne.n	800588e <_printf_i+0x142>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	07df      	lsls	r7, r3, #31
 800587a:	d508      	bpl.n	800588e <_printf_i+0x142>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	6861      	ldr	r1, [r4, #4]
 8005880:	4299      	cmp	r1, r3
 8005882:	bfde      	ittt	le
 8005884:	2330      	movle	r3, #48	@ 0x30
 8005886:	f806 3c01 	strble.w	r3, [r6, #-1]
 800588a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800588e:	1b92      	subs	r2, r2, r6
 8005890:	6122      	str	r2, [r4, #16]
 8005892:	f8cd a000 	str.w	sl, [sp]
 8005896:	464b      	mov	r3, r9
 8005898:	aa03      	add	r2, sp, #12
 800589a:	4621      	mov	r1, r4
 800589c:	4640      	mov	r0, r8
 800589e:	f7ff fee7 	bl	8005670 <_printf_common>
 80058a2:	3001      	adds	r0, #1
 80058a4:	d14a      	bne.n	800593c <_printf_i+0x1f0>
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	b004      	add	sp, #16
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	f043 0320 	orr.w	r3, r3, #32
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	4832      	ldr	r0, [pc, #200]	@ (8005984 <_printf_i+0x238>)
 80058ba:	2778      	movs	r7, #120	@ 0x78
 80058bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	6831      	ldr	r1, [r6, #0]
 80058c4:	061f      	lsls	r7, r3, #24
 80058c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80058ca:	d402      	bmi.n	80058d2 <_printf_i+0x186>
 80058cc:	065f      	lsls	r7, r3, #25
 80058ce:	bf48      	it	mi
 80058d0:	b2ad      	uxthmi	r5, r5
 80058d2:	6031      	str	r1, [r6, #0]
 80058d4:	07d9      	lsls	r1, r3, #31
 80058d6:	bf44      	itt	mi
 80058d8:	f043 0320 	orrmi.w	r3, r3, #32
 80058dc:	6023      	strmi	r3, [r4, #0]
 80058de:	b11d      	cbz	r5, 80058e8 <_printf_i+0x19c>
 80058e0:	2310      	movs	r3, #16
 80058e2:	e7ad      	b.n	8005840 <_printf_i+0xf4>
 80058e4:	4826      	ldr	r0, [pc, #152]	@ (8005980 <_printf_i+0x234>)
 80058e6:	e7e9      	b.n	80058bc <_printf_i+0x170>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	f023 0320 	bic.w	r3, r3, #32
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	e7f6      	b.n	80058e0 <_printf_i+0x194>
 80058f2:	4616      	mov	r6, r2
 80058f4:	e7bd      	b.n	8005872 <_printf_i+0x126>
 80058f6:	6833      	ldr	r3, [r6, #0]
 80058f8:	6825      	ldr	r5, [r4, #0]
 80058fa:	6961      	ldr	r1, [r4, #20]
 80058fc:	1d18      	adds	r0, r3, #4
 80058fe:	6030      	str	r0, [r6, #0]
 8005900:	062e      	lsls	r6, r5, #24
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	d501      	bpl.n	800590a <_printf_i+0x1be>
 8005906:	6019      	str	r1, [r3, #0]
 8005908:	e002      	b.n	8005910 <_printf_i+0x1c4>
 800590a:	0668      	lsls	r0, r5, #25
 800590c:	d5fb      	bpl.n	8005906 <_printf_i+0x1ba>
 800590e:	8019      	strh	r1, [r3, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	4616      	mov	r6, r2
 8005916:	e7bc      	b.n	8005892 <_printf_i+0x146>
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	1d1a      	adds	r2, r3, #4
 800591c:	6032      	str	r2, [r6, #0]
 800591e:	681e      	ldr	r6, [r3, #0]
 8005920:	6862      	ldr	r2, [r4, #4]
 8005922:	2100      	movs	r1, #0
 8005924:	4630      	mov	r0, r6
 8005926:	f7fa fc5b 	bl	80001e0 <memchr>
 800592a:	b108      	cbz	r0, 8005930 <_printf_i+0x1e4>
 800592c:	1b80      	subs	r0, r0, r6
 800592e:	6060      	str	r0, [r4, #4]
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	2300      	movs	r3, #0
 8005936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800593a:	e7aa      	b.n	8005892 <_printf_i+0x146>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	4632      	mov	r2, r6
 8005940:	4649      	mov	r1, r9
 8005942:	4640      	mov	r0, r8
 8005944:	47d0      	blx	sl
 8005946:	3001      	adds	r0, #1
 8005948:	d0ad      	beq.n	80058a6 <_printf_i+0x15a>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	079b      	lsls	r3, r3, #30
 800594e:	d413      	bmi.n	8005978 <_printf_i+0x22c>
 8005950:	68e0      	ldr	r0, [r4, #12]
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	4298      	cmp	r0, r3
 8005956:	bfb8      	it	lt
 8005958:	4618      	movlt	r0, r3
 800595a:	e7a6      	b.n	80058aa <_printf_i+0x15e>
 800595c:	2301      	movs	r3, #1
 800595e:	4632      	mov	r2, r6
 8005960:	4649      	mov	r1, r9
 8005962:	4640      	mov	r0, r8
 8005964:	47d0      	blx	sl
 8005966:	3001      	adds	r0, #1
 8005968:	d09d      	beq.n	80058a6 <_printf_i+0x15a>
 800596a:	3501      	adds	r5, #1
 800596c:	68e3      	ldr	r3, [r4, #12]
 800596e:	9903      	ldr	r1, [sp, #12]
 8005970:	1a5b      	subs	r3, r3, r1
 8005972:	42ab      	cmp	r3, r5
 8005974:	dcf2      	bgt.n	800595c <_printf_i+0x210>
 8005976:	e7eb      	b.n	8005950 <_printf_i+0x204>
 8005978:	2500      	movs	r5, #0
 800597a:	f104 0619 	add.w	r6, r4, #25
 800597e:	e7f5      	b.n	800596c <_printf_i+0x220>
 8005980:	08007e32 	.word	0x08007e32
 8005984:	08007e43 	.word	0x08007e43

08005988 <std>:
 8005988:	2300      	movs	r3, #0
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	e9c0 3300 	strd	r3, r3, [r0]
 8005992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005996:	6083      	str	r3, [r0, #8]
 8005998:	8181      	strh	r1, [r0, #12]
 800599a:	6643      	str	r3, [r0, #100]	@ 0x64
 800599c:	81c2      	strh	r2, [r0, #14]
 800599e:	6183      	str	r3, [r0, #24]
 80059a0:	4619      	mov	r1, r3
 80059a2:	2208      	movs	r2, #8
 80059a4:	305c      	adds	r0, #92	@ 0x5c
 80059a6:	f000 f916 	bl	8005bd6 <memset>
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <std+0x58>)
 80059ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <std+0x5c>)
 80059b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059b2:	4b0d      	ldr	r3, [pc, #52]	@ (80059e8 <std+0x60>)
 80059b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <std+0x64>)
 80059b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <std+0x68>)
 80059bc:	6224      	str	r4, [r4, #32]
 80059be:	429c      	cmp	r4, r3
 80059c0:	d006      	beq.n	80059d0 <std+0x48>
 80059c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059c6:	4294      	cmp	r4, r2
 80059c8:	d002      	beq.n	80059d0 <std+0x48>
 80059ca:	33d0      	adds	r3, #208	@ 0xd0
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d105      	bne.n	80059dc <std+0x54>
 80059d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d8:	f000 b97a 	b.w	8005cd0 <__retarget_lock_init_recursive>
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	bf00      	nop
 80059e0:	08005b51 	.word	0x08005b51
 80059e4:	08005b73 	.word	0x08005b73
 80059e8:	08005bab 	.word	0x08005bab
 80059ec:	08005bcf 	.word	0x08005bcf
 80059f0:	200003a0 	.word	0x200003a0

080059f4 <stdio_exit_handler>:
 80059f4:	4a02      	ldr	r2, [pc, #8]	@ (8005a00 <stdio_exit_handler+0xc>)
 80059f6:	4903      	ldr	r1, [pc, #12]	@ (8005a04 <stdio_exit_handler+0x10>)
 80059f8:	4803      	ldr	r0, [pc, #12]	@ (8005a08 <stdio_exit_handler+0x14>)
 80059fa:	f000 b869 	b.w	8005ad0 <_fwalk_sglue>
 80059fe:	bf00      	nop
 8005a00:	2000000c 	.word	0x2000000c
 8005a04:	08007635 	.word	0x08007635
 8005a08:	2000001c 	.word	0x2000001c

08005a0c <cleanup_stdio>:
 8005a0c:	6841      	ldr	r1, [r0, #4]
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <cleanup_stdio+0x34>)
 8005a10:	4299      	cmp	r1, r3
 8005a12:	b510      	push	{r4, lr}
 8005a14:	4604      	mov	r4, r0
 8005a16:	d001      	beq.n	8005a1c <cleanup_stdio+0x10>
 8005a18:	f001 fe0c 	bl	8007634 <_fflush_r>
 8005a1c:	68a1      	ldr	r1, [r4, #8]
 8005a1e:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <cleanup_stdio+0x38>)
 8005a20:	4299      	cmp	r1, r3
 8005a22:	d002      	beq.n	8005a2a <cleanup_stdio+0x1e>
 8005a24:	4620      	mov	r0, r4
 8005a26:	f001 fe05 	bl	8007634 <_fflush_r>
 8005a2a:	68e1      	ldr	r1, [r4, #12]
 8005a2c:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <cleanup_stdio+0x3c>)
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	d004      	beq.n	8005a3c <cleanup_stdio+0x30>
 8005a32:	4620      	mov	r0, r4
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f001 bdfc 	b.w	8007634 <_fflush_r>
 8005a3c:	bd10      	pop	{r4, pc}
 8005a3e:	bf00      	nop
 8005a40:	200003a0 	.word	0x200003a0
 8005a44:	20000408 	.word	0x20000408
 8005a48:	20000470 	.word	0x20000470

08005a4c <global_stdio_init.part.0>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <global_stdio_init.part.0+0x30>)
 8005a50:	4c0b      	ldr	r4, [pc, #44]	@ (8005a80 <global_stdio_init.part.0+0x34>)
 8005a52:	4a0c      	ldr	r2, [pc, #48]	@ (8005a84 <global_stdio_init.part.0+0x38>)
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	4620      	mov	r0, r4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	f7ff ff94 	bl	8005988 <std>
 8005a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a64:	2201      	movs	r2, #1
 8005a66:	2109      	movs	r1, #9
 8005a68:	f7ff ff8e 	bl	8005988 <std>
 8005a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a70:	2202      	movs	r2, #2
 8005a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a76:	2112      	movs	r1, #18
 8005a78:	f7ff bf86 	b.w	8005988 <std>
 8005a7c:	200004d8 	.word	0x200004d8
 8005a80:	200003a0 	.word	0x200003a0
 8005a84:	080059f5 	.word	0x080059f5

08005a88 <__sfp_lock_acquire>:
 8005a88:	4801      	ldr	r0, [pc, #4]	@ (8005a90 <__sfp_lock_acquire+0x8>)
 8005a8a:	f000 b922 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8005a8e:	bf00      	nop
 8005a90:	200004e1 	.word	0x200004e1

08005a94 <__sfp_lock_release>:
 8005a94:	4801      	ldr	r0, [pc, #4]	@ (8005a9c <__sfp_lock_release+0x8>)
 8005a96:	f000 b91d 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	200004e1 	.word	0x200004e1

08005aa0 <__sinit>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	f7ff fff0 	bl	8005a88 <__sfp_lock_acquire>
 8005aa8:	6a23      	ldr	r3, [r4, #32]
 8005aaa:	b11b      	cbz	r3, 8005ab4 <__sinit+0x14>
 8005aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab0:	f7ff bff0 	b.w	8005a94 <__sfp_lock_release>
 8005ab4:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <__sinit+0x28>)
 8005ab6:	6223      	str	r3, [r4, #32]
 8005ab8:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <__sinit+0x2c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1f5      	bne.n	8005aac <__sinit+0xc>
 8005ac0:	f7ff ffc4 	bl	8005a4c <global_stdio_init.part.0>
 8005ac4:	e7f2      	b.n	8005aac <__sinit+0xc>
 8005ac6:	bf00      	nop
 8005ac8:	08005a0d 	.word	0x08005a0d
 8005acc:	200004d8 	.word	0x200004d8

08005ad0 <_fwalk_sglue>:
 8005ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	4688      	mov	r8, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	2600      	movs	r6, #0
 8005adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ae4:	d505      	bpl.n	8005af2 <_fwalk_sglue+0x22>
 8005ae6:	6824      	ldr	r4, [r4, #0]
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d1f7      	bne.n	8005adc <_fwalk_sglue+0xc>
 8005aec:	4630      	mov	r0, r6
 8005aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d907      	bls.n	8005b08 <_fwalk_sglue+0x38>
 8005af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005afc:	3301      	adds	r3, #1
 8005afe:	d003      	beq.n	8005b08 <_fwalk_sglue+0x38>
 8005b00:	4629      	mov	r1, r5
 8005b02:	4638      	mov	r0, r7
 8005b04:	47c0      	blx	r8
 8005b06:	4306      	orrs	r6, r0
 8005b08:	3568      	adds	r5, #104	@ 0x68
 8005b0a:	e7e9      	b.n	8005ae0 <_fwalk_sglue+0x10>

08005b0c <siprintf>:
 8005b0c:	b40e      	push	{r1, r2, r3}
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	b09d      	sub	sp, #116	@ 0x74
 8005b12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b14:	9002      	str	r0, [sp, #8]
 8005b16:	9006      	str	r0, [sp, #24]
 8005b18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b1c:	480a      	ldr	r0, [pc, #40]	@ (8005b48 <siprintf+0x3c>)
 8005b1e:	9107      	str	r1, [sp, #28]
 8005b20:	9104      	str	r1, [sp, #16]
 8005b22:	490a      	ldr	r1, [pc, #40]	@ (8005b4c <siprintf+0x40>)
 8005b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b28:	9105      	str	r1, [sp, #20]
 8005b2a:	2400      	movs	r4, #0
 8005b2c:	a902      	add	r1, sp, #8
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b34:	f001 fbfe 	bl	8007334 <_svfiprintf_r>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	701c      	strb	r4, [r3, #0]
 8005b3c:	b01d      	add	sp, #116	@ 0x74
 8005b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b42:	b003      	add	sp, #12
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000018 	.word	0x20000018
 8005b4c:	ffff0208 	.word	0xffff0208

08005b50 <__sread>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	460c      	mov	r4, r1
 8005b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b58:	f000 f86c 	bl	8005c34 <_read_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	bfab      	itete	ge
 8005b60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b62:	89a3      	ldrhlt	r3, [r4, #12]
 8005b64:	181b      	addge	r3, r3, r0
 8005b66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b6a:	bfac      	ite	ge
 8005b6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b6e:	81a3      	strhlt	r3, [r4, #12]
 8005b70:	bd10      	pop	{r4, pc}

08005b72 <__swrite>:
 8005b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	461f      	mov	r7, r3
 8005b78:	898b      	ldrh	r3, [r1, #12]
 8005b7a:	05db      	lsls	r3, r3, #23
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4616      	mov	r6, r2
 8005b82:	d505      	bpl.n	8005b90 <__swrite+0x1e>
 8005b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b88:	2302      	movs	r3, #2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f000 f840 	bl	8005c10 <_lseek_r>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	f000 b857 	b.w	8005c58 <_write_r>

08005baa <__sseek>:
 8005baa:	b510      	push	{r4, lr}
 8005bac:	460c      	mov	r4, r1
 8005bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb2:	f000 f82d 	bl	8005c10 <_lseek_r>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	bf15      	itete	ne
 8005bbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bc6:	81a3      	strheq	r3, [r4, #12]
 8005bc8:	bf18      	it	ne
 8005bca:	81a3      	strhne	r3, [r4, #12]
 8005bcc:	bd10      	pop	{r4, pc}

08005bce <__sclose>:
 8005bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd2:	f000 b80d 	b.w	8005bf0 <_close_r>

08005bd6 <memset>:
 8005bd6:	4402      	add	r2, r0
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d100      	bne.n	8005be0 <memset+0xa>
 8005bde:	4770      	bx	lr
 8005be0:	f803 1b01 	strb.w	r1, [r3], #1
 8005be4:	e7f9      	b.n	8005bda <memset+0x4>
	...

08005be8 <_localeconv_r>:
 8005be8:	4800      	ldr	r0, [pc, #0]	@ (8005bec <_localeconv_r+0x4>)
 8005bea:	4770      	bx	lr
 8005bec:	20000158 	.word	0x20000158

08005bf0 <_close_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d06      	ldr	r5, [pc, #24]	@ (8005c0c <_close_r+0x1c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fc f960 	bl	8001ec0 <_close>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_close_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_close_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200004dc 	.word	0x200004dc

08005c10 <_lseek_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_lseek_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fc f975 	bl	8001f0e <_lseek>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_lseek_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_lseek_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	200004dc 	.word	0x200004dc

08005c34 <_read_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	@ (8005c54 <_read_r+0x20>)
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f7fc f903 	bl	8001e4e <_read>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_read_r+0x1e>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_read_r+0x1e>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	200004dc 	.word	0x200004dc

08005c58 <_write_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	@ (8005c78 <_write_r+0x20>)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fc f90e 	bl	8001e88 <_write>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_write_r+0x1e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_write_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	200004dc 	.word	0x200004dc

08005c7c <__errno>:
 8005c7c:	4b01      	ldr	r3, [pc, #4]	@ (8005c84 <__errno+0x8>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000018 	.word	0x20000018

08005c88 <__libc_init_array>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cc0 <__libc_init_array+0x38>)
 8005c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cc4 <__libc_init_array+0x3c>)
 8005c8e:	1b64      	subs	r4, r4, r5
 8005c90:	10a4      	asrs	r4, r4, #2
 8005c92:	2600      	movs	r6, #0
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	d109      	bne.n	8005cac <__libc_init_array+0x24>
 8005c98:	4d0b      	ldr	r5, [pc, #44]	@ (8005cc8 <__libc_init_array+0x40>)
 8005c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005ccc <__libc_init_array+0x44>)
 8005c9c:	f002 f868 	bl	8007d70 <_init>
 8005ca0:	1b64      	subs	r4, r4, r5
 8005ca2:	10a4      	asrs	r4, r4, #2
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	42a6      	cmp	r6, r4
 8005ca8:	d105      	bne.n	8005cb6 <__libc_init_array+0x2e>
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb0:	4798      	blx	r3
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7ee      	b.n	8005c94 <__libc_init_array+0xc>
 8005cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cba:	4798      	blx	r3
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	e7f2      	b.n	8005ca6 <__libc_init_array+0x1e>
 8005cc0:	0800819c 	.word	0x0800819c
 8005cc4:	0800819c 	.word	0x0800819c
 8005cc8:	0800819c 	.word	0x0800819c
 8005ccc:	080081a0 	.word	0x080081a0

08005cd0 <__retarget_lock_init_recursive>:
 8005cd0:	4770      	bx	lr

08005cd2 <__retarget_lock_acquire_recursive>:
 8005cd2:	4770      	bx	lr

08005cd4 <__retarget_lock_release_recursive>:
 8005cd4:	4770      	bx	lr

08005cd6 <quorem>:
 8005cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	6903      	ldr	r3, [r0, #16]
 8005cdc:	690c      	ldr	r4, [r1, #16]
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	db7e      	blt.n	8005de2 <quorem+0x10c>
 8005ce4:	3c01      	subs	r4, #1
 8005ce6:	f101 0814 	add.w	r8, r1, #20
 8005cea:	00a3      	lsls	r3, r4, #2
 8005cec:	f100 0514 	add.w	r5, r0, #20
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d00:	3301      	adds	r3, #1
 8005d02:	429a      	cmp	r2, r3
 8005d04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d08:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d0c:	d32e      	bcc.n	8005d6c <quorem+0x96>
 8005d0e:	f04f 0a00 	mov.w	sl, #0
 8005d12:	46c4      	mov	ip, r8
 8005d14:	46ae      	mov	lr, r5
 8005d16:	46d3      	mov	fp, sl
 8005d18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d1c:	b298      	uxth	r0, r3
 8005d1e:	fb06 a000 	mla	r0, r6, r0, sl
 8005d22:	0c02      	lsrs	r2, r0, #16
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	fb06 2303 	mla	r3, r6, r3, r2
 8005d2a:	f8de 2000 	ldr.w	r2, [lr]
 8005d2e:	b280      	uxth	r0, r0
 8005d30:	b292      	uxth	r2, r2
 8005d32:	1a12      	subs	r2, r2, r0
 8005d34:	445a      	add	r2, fp
 8005d36:	f8de 0000 	ldr.w	r0, [lr]
 8005d3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d4e:	45e1      	cmp	r9, ip
 8005d50:	f84e 2b04 	str.w	r2, [lr], #4
 8005d54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d58:	d2de      	bcs.n	8005d18 <quorem+0x42>
 8005d5a:	9b00      	ldr	r3, [sp, #0]
 8005d5c:	58eb      	ldr	r3, [r5, r3]
 8005d5e:	b92b      	cbnz	r3, 8005d6c <quorem+0x96>
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	429d      	cmp	r5, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	d32f      	bcc.n	8005dca <quorem+0xf4>
 8005d6a:	613c      	str	r4, [r7, #16]
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f001 f97d 	bl	800706c <__mcmp>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	db25      	blt.n	8005dc2 <quorem+0xec>
 8005d76:	4629      	mov	r1, r5
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d7e:	f8d1 c000 	ldr.w	ip, [r1]
 8005d82:	fa1f fe82 	uxth.w	lr, r2
 8005d86:	fa1f f38c 	uxth.w	r3, ip
 8005d8a:	eba3 030e 	sub.w	r3, r3, lr
 8005d8e:	4403      	add	r3, r0
 8005d90:	0c12      	lsrs	r2, r2, #16
 8005d92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005da0:	45c1      	cmp	r9, r8
 8005da2:	f841 3b04 	str.w	r3, [r1], #4
 8005da6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005daa:	d2e6      	bcs.n	8005d7a <quorem+0xa4>
 8005dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005db4:	b922      	cbnz	r2, 8005dc0 <quorem+0xea>
 8005db6:	3b04      	subs	r3, #4
 8005db8:	429d      	cmp	r5, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	d30b      	bcc.n	8005dd6 <quorem+0x100>
 8005dbe:	613c      	str	r4, [r7, #16]
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	b003      	add	sp, #12
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d1cb      	bne.n	8005d6a <quorem+0x94>
 8005dd2:	3c01      	subs	r4, #1
 8005dd4:	e7c6      	b.n	8005d64 <quorem+0x8e>
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	3b04      	subs	r3, #4
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d1ef      	bne.n	8005dbe <quorem+0xe8>
 8005dde:	3c01      	subs	r4, #1
 8005de0:	e7ea      	b.n	8005db8 <quorem+0xe2>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e7ee      	b.n	8005dc4 <quorem+0xee>
	...

08005de8 <_dtoa_r>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	69c7      	ldr	r7, [r0, #28]
 8005dee:	b097      	sub	sp, #92	@ 0x5c
 8005df0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005df4:	ec55 4b10 	vmov	r4, r5, d0
 8005df8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005dfa:	9107      	str	r1, [sp, #28]
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e00:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e02:	b97f      	cbnz	r7, 8005e24 <_dtoa_r+0x3c>
 8005e04:	2010      	movs	r0, #16
 8005e06:	f000 fe09 	bl	8006a1c <malloc>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005e10:	b920      	cbnz	r0, 8005e1c <_dtoa_r+0x34>
 8005e12:	4ba9      	ldr	r3, [pc, #676]	@ (80060b8 <_dtoa_r+0x2d0>)
 8005e14:	21ef      	movs	r1, #239	@ 0xef
 8005e16:	48a9      	ldr	r0, [pc, #676]	@ (80060bc <_dtoa_r+0x2d4>)
 8005e18:	f001 fc6c 	bl	80076f4 <__assert_func>
 8005e1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e20:	6007      	str	r7, [r0, #0]
 8005e22:	60c7      	str	r7, [r0, #12]
 8005e24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	b159      	cbz	r1, 8005e44 <_dtoa_r+0x5c>
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	604a      	str	r2, [r1, #4]
 8005e30:	2301      	movs	r3, #1
 8005e32:	4093      	lsls	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
 8005e36:	4648      	mov	r0, r9
 8005e38:	f000 fee6 	bl	8006c08 <_Bfree>
 8005e3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	1e2b      	subs	r3, r5, #0
 8005e46:	bfb9      	ittee	lt
 8005e48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e4c:	9305      	strlt	r3, [sp, #20]
 8005e4e:	2300      	movge	r3, #0
 8005e50:	6033      	strge	r3, [r6, #0]
 8005e52:	9f05      	ldr	r7, [sp, #20]
 8005e54:	4b9a      	ldr	r3, [pc, #616]	@ (80060c0 <_dtoa_r+0x2d8>)
 8005e56:	bfbc      	itt	lt
 8005e58:	2201      	movlt	r2, #1
 8005e5a:	6032      	strlt	r2, [r6, #0]
 8005e5c:	43bb      	bics	r3, r7
 8005e5e:	d112      	bne.n	8005e86 <_dtoa_r+0x9e>
 8005e60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005e62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e6c:	4323      	orrs	r3, r4
 8005e6e:	f000 855a 	beq.w	8006926 <_dtoa_r+0xb3e>
 8005e72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80060d4 <_dtoa_r+0x2ec>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 855c 	beq.w	8006936 <_dtoa_r+0xb4e>
 8005e7e:	f10a 0303 	add.w	r3, sl, #3
 8005e82:	f000 bd56 	b.w	8006932 <_dtoa_r+0xb4a>
 8005e86:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	ec51 0b17 	vmov	r0, r1, d7
 8005e90:	2300      	movs	r3, #0
 8005e92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005e96:	f7fa fe1f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e9a:	4680      	mov	r8, r0
 8005e9c:	b158      	cbz	r0, 8005eb6 <_dtoa_r+0xce>
 8005e9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ea6:	b113      	cbz	r3, 8005eae <_dtoa_r+0xc6>
 8005ea8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005eaa:	4b86      	ldr	r3, [pc, #536]	@ (80060c4 <_dtoa_r+0x2dc>)
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80060d8 <_dtoa_r+0x2f0>
 8005eb2:	f000 bd40 	b.w	8006936 <_dtoa_r+0xb4e>
 8005eb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005eba:	aa14      	add	r2, sp, #80	@ 0x50
 8005ebc:	a915      	add	r1, sp, #84	@ 0x54
 8005ebe:	4648      	mov	r0, r9
 8005ec0:	f001 f984 	bl	80071cc <__d2b>
 8005ec4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ec8:	9002      	str	r0, [sp, #8]
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	d078      	beq.n	8005fc0 <_dtoa_r+0x1d8>
 8005ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ed0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005edc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ee0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ee4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2200      	movs	r2, #0
 8005eec:	4b76      	ldr	r3, [pc, #472]	@ (80060c8 <_dtoa_r+0x2e0>)
 8005eee:	f7fa f9d3 	bl	8000298 <__aeabi_dsub>
 8005ef2:	a36b      	add	r3, pc, #428	@ (adr r3, 80060a0 <_dtoa_r+0x2b8>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fb86 	bl	8000608 <__aeabi_dmul>
 8005efc:	a36a      	add	r3, pc, #424	@ (adr r3, 80060a8 <_dtoa_r+0x2c0>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f9cb 	bl	800029c <__adddf3>
 8005f06:	4604      	mov	r4, r0
 8005f08:	4630      	mov	r0, r6
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	f7fa fb12 	bl	8000534 <__aeabi_i2d>
 8005f10:	a367      	add	r3, pc, #412	@ (adr r3, 80060b0 <_dtoa_r+0x2c8>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa fb77 	bl	8000608 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7fa f9bb 	bl	800029c <__adddf3>
 8005f26:	4604      	mov	r4, r0
 8005f28:	460d      	mov	r5, r1
 8005f2a:	f7fa fe1d 	bl	8000b68 <__aeabi_d2iz>
 8005f2e:	2200      	movs	r2, #0
 8005f30:	4607      	mov	r7, r0
 8005f32:	2300      	movs	r3, #0
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7fa fdd8 	bl	8000aec <__aeabi_dcmplt>
 8005f3c:	b140      	cbz	r0, 8005f50 <_dtoa_r+0x168>
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7fa faf8 	bl	8000534 <__aeabi_i2d>
 8005f44:	4622      	mov	r2, r4
 8005f46:	462b      	mov	r3, r5
 8005f48:	f7fa fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f4c:	b900      	cbnz	r0, 8005f50 <_dtoa_r+0x168>
 8005f4e:	3f01      	subs	r7, #1
 8005f50:	2f16      	cmp	r7, #22
 8005f52:	d852      	bhi.n	8005ffa <_dtoa_r+0x212>
 8005f54:	4b5d      	ldr	r3, [pc, #372]	@ (80060cc <_dtoa_r+0x2e4>)
 8005f56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f62:	f7fa fdc3 	bl	8000aec <__aeabi_dcmplt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d049      	beq.n	8005ffe <_dtoa_r+0x216>
 8005f6a:	3f01      	subs	r7, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f72:	1b9b      	subs	r3, r3, r6
 8005f74:	1e5a      	subs	r2, r3, #1
 8005f76:	bf45      	ittet	mi
 8005f78:	f1c3 0301 	rsbmi	r3, r3, #1
 8005f7c:	9300      	strmi	r3, [sp, #0]
 8005f7e:	2300      	movpl	r3, #0
 8005f80:	2300      	movmi	r3, #0
 8005f82:	9206      	str	r2, [sp, #24]
 8005f84:	bf54      	ite	pl
 8005f86:	9300      	strpl	r3, [sp, #0]
 8005f88:	9306      	strmi	r3, [sp, #24]
 8005f8a:	2f00      	cmp	r7, #0
 8005f8c:	db39      	blt.n	8006002 <_dtoa_r+0x21a>
 8005f8e:	9b06      	ldr	r3, [sp, #24]
 8005f90:	970d      	str	r7, [sp, #52]	@ 0x34
 8005f92:	443b      	add	r3, r7
 8005f94:	9306      	str	r3, [sp, #24]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9308      	str	r3, [sp, #32]
 8005f9a:	9b07      	ldr	r3, [sp, #28]
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	d863      	bhi.n	8006068 <_dtoa_r+0x280>
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	bfc4      	itt	gt
 8005fa4:	3b04      	subgt	r3, #4
 8005fa6:	9307      	strgt	r3, [sp, #28]
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	f1a3 0302 	sub.w	r3, r3, #2
 8005fae:	bfcc      	ite	gt
 8005fb0:	2400      	movgt	r4, #0
 8005fb2:	2401      	movle	r4, #1
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d863      	bhi.n	8006080 <_dtoa_r+0x298>
 8005fb8:	e8df f003 	tbb	[pc, r3]
 8005fbc:	2b375452 	.word	0x2b375452
 8005fc0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005fc4:	441e      	add	r6, r3
 8005fc6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	bfc1      	itttt	gt
 8005fce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005fd2:	409f      	lslgt	r7, r3
 8005fd4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005fd8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fdc:	bfd6      	itet	le
 8005fde:	f1c3 0320 	rsble	r3, r3, #32
 8005fe2:	ea47 0003 	orrgt.w	r0, r7, r3
 8005fe6:	fa04 f003 	lslle.w	r0, r4, r3
 8005fea:	f7fa fa93 	bl	8000514 <__aeabi_ui2d>
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005ff4:	3e01      	subs	r6, #1
 8005ff6:	9212      	str	r2, [sp, #72]	@ 0x48
 8005ff8:	e776      	b.n	8005ee8 <_dtoa_r+0x100>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7b7      	b.n	8005f6e <_dtoa_r+0x186>
 8005ffe:	9010      	str	r0, [sp, #64]	@ 0x40
 8006000:	e7b6      	b.n	8005f70 <_dtoa_r+0x188>
 8006002:	9b00      	ldr	r3, [sp, #0]
 8006004:	1bdb      	subs	r3, r3, r7
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	427b      	negs	r3, r7
 800600a:	9308      	str	r3, [sp, #32]
 800600c:	2300      	movs	r3, #0
 800600e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006010:	e7c3      	b.n	8005f9a <_dtoa_r+0x1b2>
 8006012:	2301      	movs	r3, #1
 8006014:	9309      	str	r3, [sp, #36]	@ 0x24
 8006016:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006018:	eb07 0b03 	add.w	fp, r7, r3
 800601c:	f10b 0301 	add.w	r3, fp, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	9303      	str	r3, [sp, #12]
 8006024:	bfb8      	it	lt
 8006026:	2301      	movlt	r3, #1
 8006028:	e006      	b.n	8006038 <_dtoa_r+0x250>
 800602a:	2301      	movs	r3, #1
 800602c:	9309      	str	r3, [sp, #36]	@ 0x24
 800602e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006030:	2b00      	cmp	r3, #0
 8006032:	dd28      	ble.n	8006086 <_dtoa_r+0x29e>
 8006034:	469b      	mov	fp, r3
 8006036:	9303      	str	r3, [sp, #12]
 8006038:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800603c:	2100      	movs	r1, #0
 800603e:	2204      	movs	r2, #4
 8006040:	f102 0514 	add.w	r5, r2, #20
 8006044:	429d      	cmp	r5, r3
 8006046:	d926      	bls.n	8006096 <_dtoa_r+0x2ae>
 8006048:	6041      	str	r1, [r0, #4]
 800604a:	4648      	mov	r0, r9
 800604c:	f000 fd9c 	bl	8006b88 <_Balloc>
 8006050:	4682      	mov	sl, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	d142      	bne.n	80060dc <_dtoa_r+0x2f4>
 8006056:	4b1e      	ldr	r3, [pc, #120]	@ (80060d0 <_dtoa_r+0x2e8>)
 8006058:	4602      	mov	r2, r0
 800605a:	f240 11af 	movw	r1, #431	@ 0x1af
 800605e:	e6da      	b.n	8005e16 <_dtoa_r+0x2e>
 8006060:	2300      	movs	r3, #0
 8006062:	e7e3      	b.n	800602c <_dtoa_r+0x244>
 8006064:	2300      	movs	r3, #0
 8006066:	e7d5      	b.n	8006014 <_dtoa_r+0x22c>
 8006068:	2401      	movs	r4, #1
 800606a:	2300      	movs	r3, #0
 800606c:	9307      	str	r3, [sp, #28]
 800606e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006070:	f04f 3bff 	mov.w	fp, #4294967295
 8006074:	2200      	movs	r2, #0
 8006076:	f8cd b00c 	str.w	fp, [sp, #12]
 800607a:	2312      	movs	r3, #18
 800607c:	920c      	str	r2, [sp, #48]	@ 0x30
 800607e:	e7db      	b.n	8006038 <_dtoa_r+0x250>
 8006080:	2301      	movs	r3, #1
 8006082:	9309      	str	r3, [sp, #36]	@ 0x24
 8006084:	e7f4      	b.n	8006070 <_dtoa_r+0x288>
 8006086:	f04f 0b01 	mov.w	fp, #1
 800608a:	f8cd b00c 	str.w	fp, [sp, #12]
 800608e:	465b      	mov	r3, fp
 8006090:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006094:	e7d0      	b.n	8006038 <_dtoa_r+0x250>
 8006096:	3101      	adds	r1, #1
 8006098:	0052      	lsls	r2, r2, #1
 800609a:	e7d1      	b.n	8006040 <_dtoa_r+0x258>
 800609c:	f3af 8000 	nop.w
 80060a0:	636f4361 	.word	0x636f4361
 80060a4:	3fd287a7 	.word	0x3fd287a7
 80060a8:	8b60c8b3 	.word	0x8b60c8b3
 80060ac:	3fc68a28 	.word	0x3fc68a28
 80060b0:	509f79fb 	.word	0x509f79fb
 80060b4:	3fd34413 	.word	0x3fd34413
 80060b8:	08007e61 	.word	0x08007e61
 80060bc:	08007e78 	.word	0x08007e78
 80060c0:	7ff00000 	.word	0x7ff00000
 80060c4:	08007e31 	.word	0x08007e31
 80060c8:	3ff80000 	.word	0x3ff80000
 80060cc:	08007fc8 	.word	0x08007fc8
 80060d0:	08007ed0 	.word	0x08007ed0
 80060d4:	08007e5d 	.word	0x08007e5d
 80060d8:	08007e30 	.word	0x08007e30
 80060dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80060e0:	6018      	str	r0, [r3, #0]
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	2b0e      	cmp	r3, #14
 80060e6:	f200 80a1 	bhi.w	800622c <_dtoa_r+0x444>
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	f000 809e 	beq.w	800622c <_dtoa_r+0x444>
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	dd33      	ble.n	800615c <_dtoa_r+0x374>
 80060f4:	4b9c      	ldr	r3, [pc, #624]	@ (8006368 <_dtoa_r+0x580>)
 80060f6:	f007 020f 	and.w	r2, r7, #15
 80060fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060fe:	ed93 7b00 	vldr	d7, [r3]
 8006102:	05f8      	lsls	r0, r7, #23
 8006104:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006108:	ea4f 1427 	mov.w	r4, r7, asr #4
 800610c:	d516      	bpl.n	800613c <_dtoa_r+0x354>
 800610e:	4b97      	ldr	r3, [pc, #604]	@ (800636c <_dtoa_r+0x584>)
 8006110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006118:	f7fa fba0 	bl	800085c <__aeabi_ddiv>
 800611c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006120:	f004 040f 	and.w	r4, r4, #15
 8006124:	2603      	movs	r6, #3
 8006126:	4d91      	ldr	r5, [pc, #580]	@ (800636c <_dtoa_r+0x584>)
 8006128:	b954      	cbnz	r4, 8006140 <_dtoa_r+0x358>
 800612a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800612e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006132:	f7fa fb93 	bl	800085c <__aeabi_ddiv>
 8006136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800613a:	e028      	b.n	800618e <_dtoa_r+0x3a6>
 800613c:	2602      	movs	r6, #2
 800613e:	e7f2      	b.n	8006126 <_dtoa_r+0x33e>
 8006140:	07e1      	lsls	r1, r4, #31
 8006142:	d508      	bpl.n	8006156 <_dtoa_r+0x36e>
 8006144:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006148:	e9d5 2300 	ldrd	r2, r3, [r5]
 800614c:	f7fa fa5c 	bl	8000608 <__aeabi_dmul>
 8006150:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006154:	3601      	adds	r6, #1
 8006156:	1064      	asrs	r4, r4, #1
 8006158:	3508      	adds	r5, #8
 800615a:	e7e5      	b.n	8006128 <_dtoa_r+0x340>
 800615c:	f000 80af 	beq.w	80062be <_dtoa_r+0x4d6>
 8006160:	427c      	negs	r4, r7
 8006162:	4b81      	ldr	r3, [pc, #516]	@ (8006368 <_dtoa_r+0x580>)
 8006164:	4d81      	ldr	r5, [pc, #516]	@ (800636c <_dtoa_r+0x584>)
 8006166:	f004 020f 	and.w	r2, r4, #15
 800616a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006176:	f7fa fa47 	bl	8000608 <__aeabi_dmul>
 800617a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800617e:	1124      	asrs	r4, r4, #4
 8006180:	2300      	movs	r3, #0
 8006182:	2602      	movs	r6, #2
 8006184:	2c00      	cmp	r4, #0
 8006186:	f040 808f 	bne.w	80062a8 <_dtoa_r+0x4c0>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1d3      	bne.n	8006136 <_dtoa_r+0x34e>
 800618e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006190:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8094 	beq.w	80062c2 <_dtoa_r+0x4da>
 800619a:	4b75      	ldr	r3, [pc, #468]	@ (8006370 <_dtoa_r+0x588>)
 800619c:	2200      	movs	r2, #0
 800619e:	4620      	mov	r0, r4
 80061a0:	4629      	mov	r1, r5
 80061a2:	f7fa fca3 	bl	8000aec <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f000 808b 	beq.w	80062c2 <_dtoa_r+0x4da>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8087 	beq.w	80062c2 <_dtoa_r+0x4da>
 80061b4:	f1bb 0f00 	cmp.w	fp, #0
 80061b8:	dd34      	ble.n	8006224 <_dtoa_r+0x43c>
 80061ba:	4620      	mov	r0, r4
 80061bc:	4b6d      	ldr	r3, [pc, #436]	@ (8006374 <_dtoa_r+0x58c>)
 80061be:	2200      	movs	r2, #0
 80061c0:	4629      	mov	r1, r5
 80061c2:	f7fa fa21 	bl	8000608 <__aeabi_dmul>
 80061c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80061ce:	3601      	adds	r6, #1
 80061d0:	465c      	mov	r4, fp
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7fa f9ae 	bl	8000534 <__aeabi_i2d>
 80061d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061dc:	f7fa fa14 	bl	8000608 <__aeabi_dmul>
 80061e0:	4b65      	ldr	r3, [pc, #404]	@ (8006378 <_dtoa_r+0x590>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	f7fa f85a 	bl	800029c <__adddf3>
 80061e8:	4605      	mov	r5, r0
 80061ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061ee:	2c00      	cmp	r4, #0
 80061f0:	d16a      	bne.n	80062c8 <_dtoa_r+0x4e0>
 80061f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f6:	4b61      	ldr	r3, [pc, #388]	@ (800637c <_dtoa_r+0x594>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	f7fa f84d 	bl	8000298 <__aeabi_dsub>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006206:	462a      	mov	r2, r5
 8006208:	4633      	mov	r3, r6
 800620a:	f7fa fc8d 	bl	8000b28 <__aeabi_dcmpgt>
 800620e:	2800      	cmp	r0, #0
 8006210:	f040 8298 	bne.w	8006744 <_dtoa_r+0x95c>
 8006214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006218:	462a      	mov	r2, r5
 800621a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800621e:	f7fa fc65 	bl	8000aec <__aeabi_dcmplt>
 8006222:	bb38      	cbnz	r0, 8006274 <_dtoa_r+0x48c>
 8006224:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006228:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800622c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800622e:	2b00      	cmp	r3, #0
 8006230:	f2c0 8157 	blt.w	80064e2 <_dtoa_r+0x6fa>
 8006234:	2f0e      	cmp	r7, #14
 8006236:	f300 8154 	bgt.w	80064e2 <_dtoa_r+0x6fa>
 800623a:	4b4b      	ldr	r3, [pc, #300]	@ (8006368 <_dtoa_r+0x580>)
 800623c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006240:	ed93 7b00 	vldr	d7, [r3]
 8006244:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006246:	2b00      	cmp	r3, #0
 8006248:	ed8d 7b00 	vstr	d7, [sp]
 800624c:	f280 80e5 	bge.w	800641a <_dtoa_r+0x632>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f300 80e1 	bgt.w	800641a <_dtoa_r+0x632>
 8006258:	d10c      	bne.n	8006274 <_dtoa_r+0x48c>
 800625a:	4b48      	ldr	r3, [pc, #288]	@ (800637c <_dtoa_r+0x594>)
 800625c:	2200      	movs	r2, #0
 800625e:	ec51 0b17 	vmov	r0, r1, d7
 8006262:	f7fa f9d1 	bl	8000608 <__aeabi_dmul>
 8006266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800626a:	f7fa fc53 	bl	8000b14 <__aeabi_dcmpge>
 800626e:	2800      	cmp	r0, #0
 8006270:	f000 8266 	beq.w	8006740 <_dtoa_r+0x958>
 8006274:	2400      	movs	r4, #0
 8006276:	4625      	mov	r5, r4
 8006278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800627a:	4656      	mov	r6, sl
 800627c:	ea6f 0803 	mvn.w	r8, r3
 8006280:	2700      	movs	r7, #0
 8006282:	4621      	mov	r1, r4
 8006284:	4648      	mov	r0, r9
 8006286:	f000 fcbf 	bl	8006c08 <_Bfree>
 800628a:	2d00      	cmp	r5, #0
 800628c:	f000 80bd 	beq.w	800640a <_dtoa_r+0x622>
 8006290:	b12f      	cbz	r7, 800629e <_dtoa_r+0x4b6>
 8006292:	42af      	cmp	r7, r5
 8006294:	d003      	beq.n	800629e <_dtoa_r+0x4b6>
 8006296:	4639      	mov	r1, r7
 8006298:	4648      	mov	r0, r9
 800629a:	f000 fcb5 	bl	8006c08 <_Bfree>
 800629e:	4629      	mov	r1, r5
 80062a0:	4648      	mov	r0, r9
 80062a2:	f000 fcb1 	bl	8006c08 <_Bfree>
 80062a6:	e0b0      	b.n	800640a <_dtoa_r+0x622>
 80062a8:	07e2      	lsls	r2, r4, #31
 80062aa:	d505      	bpl.n	80062b8 <_dtoa_r+0x4d0>
 80062ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062b0:	f7fa f9aa 	bl	8000608 <__aeabi_dmul>
 80062b4:	3601      	adds	r6, #1
 80062b6:	2301      	movs	r3, #1
 80062b8:	1064      	asrs	r4, r4, #1
 80062ba:	3508      	adds	r5, #8
 80062bc:	e762      	b.n	8006184 <_dtoa_r+0x39c>
 80062be:	2602      	movs	r6, #2
 80062c0:	e765      	b.n	800618e <_dtoa_r+0x3a6>
 80062c2:	9c03      	ldr	r4, [sp, #12]
 80062c4:	46b8      	mov	r8, r7
 80062c6:	e784      	b.n	80061d2 <_dtoa_r+0x3ea>
 80062c8:	4b27      	ldr	r3, [pc, #156]	@ (8006368 <_dtoa_r+0x580>)
 80062ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062d4:	4454      	add	r4, sl
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d054      	beq.n	8006384 <_dtoa_r+0x59c>
 80062da:	4929      	ldr	r1, [pc, #164]	@ (8006380 <_dtoa_r+0x598>)
 80062dc:	2000      	movs	r0, #0
 80062de:	f7fa fabd 	bl	800085c <__aeabi_ddiv>
 80062e2:	4633      	mov	r3, r6
 80062e4:	462a      	mov	r2, r5
 80062e6:	f7f9 ffd7 	bl	8000298 <__aeabi_dsub>
 80062ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80062ee:	4656      	mov	r6, sl
 80062f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f4:	f7fa fc38 	bl	8000b68 <__aeabi_d2iz>
 80062f8:	4605      	mov	r5, r0
 80062fa:	f7fa f91b 	bl	8000534 <__aeabi_i2d>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006306:	f7f9 ffc7 	bl	8000298 <__aeabi_dsub>
 800630a:	3530      	adds	r5, #48	@ 0x30
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006314:	f806 5b01 	strb.w	r5, [r6], #1
 8006318:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800631c:	f7fa fbe6 	bl	8000aec <__aeabi_dcmplt>
 8006320:	2800      	cmp	r0, #0
 8006322:	d172      	bne.n	800640a <_dtoa_r+0x622>
 8006324:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006328:	4911      	ldr	r1, [pc, #68]	@ (8006370 <_dtoa_r+0x588>)
 800632a:	2000      	movs	r0, #0
 800632c:	f7f9 ffb4 	bl	8000298 <__aeabi_dsub>
 8006330:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006334:	f7fa fbda 	bl	8000aec <__aeabi_dcmplt>
 8006338:	2800      	cmp	r0, #0
 800633a:	f040 80b4 	bne.w	80064a6 <_dtoa_r+0x6be>
 800633e:	42a6      	cmp	r6, r4
 8006340:	f43f af70 	beq.w	8006224 <_dtoa_r+0x43c>
 8006344:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006348:	4b0a      	ldr	r3, [pc, #40]	@ (8006374 <_dtoa_r+0x58c>)
 800634a:	2200      	movs	r2, #0
 800634c:	f7fa f95c 	bl	8000608 <__aeabi_dmul>
 8006350:	4b08      	ldr	r3, [pc, #32]	@ (8006374 <_dtoa_r+0x58c>)
 8006352:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006356:	2200      	movs	r2, #0
 8006358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800635c:	f7fa f954 	bl	8000608 <__aeabi_dmul>
 8006360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006364:	e7c4      	b.n	80062f0 <_dtoa_r+0x508>
 8006366:	bf00      	nop
 8006368:	08007fc8 	.word	0x08007fc8
 800636c:	08007fa0 	.word	0x08007fa0
 8006370:	3ff00000 	.word	0x3ff00000
 8006374:	40240000 	.word	0x40240000
 8006378:	401c0000 	.word	0x401c0000
 800637c:	40140000 	.word	0x40140000
 8006380:	3fe00000 	.word	0x3fe00000
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	f7fa f93e 	bl	8000608 <__aeabi_dmul>
 800638c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006390:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006392:	4656      	mov	r6, sl
 8006394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006398:	f7fa fbe6 	bl	8000b68 <__aeabi_d2iz>
 800639c:	4605      	mov	r5, r0
 800639e:	f7fa f8c9 	bl	8000534 <__aeabi_i2d>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063aa:	f7f9 ff75 	bl	8000298 <__aeabi_dsub>
 80063ae:	3530      	adds	r5, #48	@ 0x30
 80063b0:	f806 5b01 	strb.w	r5, [r6], #1
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	42a6      	cmp	r6, r4
 80063ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	d124      	bne.n	800640e <_dtoa_r+0x626>
 80063c4:	4baf      	ldr	r3, [pc, #700]	@ (8006684 <_dtoa_r+0x89c>)
 80063c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80063ca:	f7f9 ff67 	bl	800029c <__adddf3>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d6:	f7fa fba7 	bl	8000b28 <__aeabi_dcmpgt>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d163      	bne.n	80064a6 <_dtoa_r+0x6be>
 80063de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80063e2:	49a8      	ldr	r1, [pc, #672]	@ (8006684 <_dtoa_r+0x89c>)
 80063e4:	2000      	movs	r0, #0
 80063e6:	f7f9 ff57 	bl	8000298 <__aeabi_dsub>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f2:	f7fa fb7b 	bl	8000aec <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f43f af14 	beq.w	8006224 <_dtoa_r+0x43c>
 80063fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80063fe:	1e73      	subs	r3, r6, #1
 8006400:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006402:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006406:	2b30      	cmp	r3, #48	@ 0x30
 8006408:	d0f8      	beq.n	80063fc <_dtoa_r+0x614>
 800640a:	4647      	mov	r7, r8
 800640c:	e03b      	b.n	8006486 <_dtoa_r+0x69e>
 800640e:	4b9e      	ldr	r3, [pc, #632]	@ (8006688 <_dtoa_r+0x8a0>)
 8006410:	f7fa f8fa 	bl	8000608 <__aeabi_dmul>
 8006414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006418:	e7bc      	b.n	8006394 <_dtoa_r+0x5ac>
 800641a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800641e:	4656      	mov	r6, sl
 8006420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006424:	4620      	mov	r0, r4
 8006426:	4629      	mov	r1, r5
 8006428:	f7fa fa18 	bl	800085c <__aeabi_ddiv>
 800642c:	f7fa fb9c 	bl	8000b68 <__aeabi_d2iz>
 8006430:	4680      	mov	r8, r0
 8006432:	f7fa f87f 	bl	8000534 <__aeabi_i2d>
 8006436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800643a:	f7fa f8e5 	bl	8000608 <__aeabi_dmul>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800644a:	f7f9 ff25 	bl	8000298 <__aeabi_dsub>
 800644e:	f806 4b01 	strb.w	r4, [r6], #1
 8006452:	9d03      	ldr	r5, [sp, #12]
 8006454:	eba6 040a 	sub.w	r4, r6, sl
 8006458:	42a5      	cmp	r5, r4
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	d133      	bne.n	80064c8 <_dtoa_r+0x6e0>
 8006460:	f7f9 ff1c 	bl	800029c <__adddf3>
 8006464:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006468:	4604      	mov	r4, r0
 800646a:	460d      	mov	r5, r1
 800646c:	f7fa fb5c 	bl	8000b28 <__aeabi_dcmpgt>
 8006470:	b9c0      	cbnz	r0, 80064a4 <_dtoa_r+0x6bc>
 8006472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7fa fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800647e:	b110      	cbz	r0, 8006486 <_dtoa_r+0x69e>
 8006480:	f018 0f01 	tst.w	r8, #1
 8006484:	d10e      	bne.n	80064a4 <_dtoa_r+0x6bc>
 8006486:	9902      	ldr	r1, [sp, #8]
 8006488:	4648      	mov	r0, r9
 800648a:	f000 fbbd 	bl	8006c08 <_Bfree>
 800648e:	2300      	movs	r3, #0
 8006490:	7033      	strb	r3, [r6, #0]
 8006492:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006494:	3701      	adds	r7, #1
 8006496:	601f      	str	r7, [r3, #0]
 8006498:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 824b 	beq.w	8006936 <_dtoa_r+0xb4e>
 80064a0:	601e      	str	r6, [r3, #0]
 80064a2:	e248      	b.n	8006936 <_dtoa_r+0xb4e>
 80064a4:	46b8      	mov	r8, r7
 80064a6:	4633      	mov	r3, r6
 80064a8:	461e      	mov	r6, r3
 80064aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064ae:	2a39      	cmp	r2, #57	@ 0x39
 80064b0:	d106      	bne.n	80064c0 <_dtoa_r+0x6d8>
 80064b2:	459a      	cmp	sl, r3
 80064b4:	d1f8      	bne.n	80064a8 <_dtoa_r+0x6c0>
 80064b6:	2230      	movs	r2, #48	@ 0x30
 80064b8:	f108 0801 	add.w	r8, r8, #1
 80064bc:	f88a 2000 	strb.w	r2, [sl]
 80064c0:	781a      	ldrb	r2, [r3, #0]
 80064c2:	3201      	adds	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	e7a0      	b.n	800640a <_dtoa_r+0x622>
 80064c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006688 <_dtoa_r+0x8a0>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	f7fa f89c 	bl	8000608 <__aeabi_dmul>
 80064d0:	2200      	movs	r2, #0
 80064d2:	2300      	movs	r3, #0
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	f7fa fafe 	bl	8000ad8 <__aeabi_dcmpeq>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d09f      	beq.n	8006420 <_dtoa_r+0x638>
 80064e0:	e7d1      	b.n	8006486 <_dtoa_r+0x69e>
 80064e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	f000 80ea 	beq.w	80066be <_dtoa_r+0x8d6>
 80064ea:	9a07      	ldr	r2, [sp, #28]
 80064ec:	2a01      	cmp	r2, #1
 80064ee:	f300 80cd 	bgt.w	800668c <_dtoa_r+0x8a4>
 80064f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	f000 80c1 	beq.w	800667c <_dtoa_r+0x894>
 80064fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064fe:	9c08      	ldr	r4, [sp, #32]
 8006500:	9e00      	ldr	r6, [sp, #0]
 8006502:	9a00      	ldr	r2, [sp, #0]
 8006504:	441a      	add	r2, r3
 8006506:	9200      	str	r2, [sp, #0]
 8006508:	9a06      	ldr	r2, [sp, #24]
 800650a:	2101      	movs	r1, #1
 800650c:	441a      	add	r2, r3
 800650e:	4648      	mov	r0, r9
 8006510:	9206      	str	r2, [sp, #24]
 8006512:	f000 fc2d 	bl	8006d70 <__i2b>
 8006516:	4605      	mov	r5, r0
 8006518:	b166      	cbz	r6, 8006534 <_dtoa_r+0x74c>
 800651a:	9b06      	ldr	r3, [sp, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	dd09      	ble.n	8006534 <_dtoa_r+0x74c>
 8006520:	42b3      	cmp	r3, r6
 8006522:	9a00      	ldr	r2, [sp, #0]
 8006524:	bfa8      	it	ge
 8006526:	4633      	movge	r3, r6
 8006528:	1ad2      	subs	r2, r2, r3
 800652a:	9200      	str	r2, [sp, #0]
 800652c:	9a06      	ldr	r2, [sp, #24]
 800652e:	1af6      	subs	r6, r6, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	9306      	str	r3, [sp, #24]
 8006534:	9b08      	ldr	r3, [sp, #32]
 8006536:	b30b      	cbz	r3, 800657c <_dtoa_r+0x794>
 8006538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80c6 	beq.w	80066cc <_dtoa_r+0x8e4>
 8006540:	2c00      	cmp	r4, #0
 8006542:	f000 80c0 	beq.w	80066c6 <_dtoa_r+0x8de>
 8006546:	4629      	mov	r1, r5
 8006548:	4622      	mov	r2, r4
 800654a:	4648      	mov	r0, r9
 800654c:	f000 fcc8 	bl	8006ee0 <__pow5mult>
 8006550:	9a02      	ldr	r2, [sp, #8]
 8006552:	4601      	mov	r1, r0
 8006554:	4605      	mov	r5, r0
 8006556:	4648      	mov	r0, r9
 8006558:	f000 fc20 	bl	8006d9c <__multiply>
 800655c:	9902      	ldr	r1, [sp, #8]
 800655e:	4680      	mov	r8, r0
 8006560:	4648      	mov	r0, r9
 8006562:	f000 fb51 	bl	8006c08 <_Bfree>
 8006566:	9b08      	ldr	r3, [sp, #32]
 8006568:	1b1b      	subs	r3, r3, r4
 800656a:	9308      	str	r3, [sp, #32]
 800656c:	f000 80b1 	beq.w	80066d2 <_dtoa_r+0x8ea>
 8006570:	9a08      	ldr	r2, [sp, #32]
 8006572:	4641      	mov	r1, r8
 8006574:	4648      	mov	r0, r9
 8006576:	f000 fcb3 	bl	8006ee0 <__pow5mult>
 800657a:	9002      	str	r0, [sp, #8]
 800657c:	2101      	movs	r1, #1
 800657e:	4648      	mov	r0, r9
 8006580:	f000 fbf6 	bl	8006d70 <__i2b>
 8006584:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006586:	4604      	mov	r4, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 81d8 	beq.w	800693e <_dtoa_r+0xb56>
 800658e:	461a      	mov	r2, r3
 8006590:	4601      	mov	r1, r0
 8006592:	4648      	mov	r0, r9
 8006594:	f000 fca4 	bl	8006ee0 <__pow5mult>
 8006598:	9b07      	ldr	r3, [sp, #28]
 800659a:	2b01      	cmp	r3, #1
 800659c:	4604      	mov	r4, r0
 800659e:	f300 809f 	bgt.w	80066e0 <_dtoa_r+0x8f8>
 80065a2:	9b04      	ldr	r3, [sp, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 8097 	bne.w	80066d8 <_dtoa_r+0x8f0>
 80065aa:	9b05      	ldr	r3, [sp, #20]
 80065ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 8093 	bne.w	80066dc <_dtoa_r+0x8f4>
 80065b6:	9b05      	ldr	r3, [sp, #20]
 80065b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065bc:	0d1b      	lsrs	r3, r3, #20
 80065be:	051b      	lsls	r3, r3, #20
 80065c0:	b133      	cbz	r3, 80065d0 <_dtoa_r+0x7e8>
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	9b06      	ldr	r3, [sp, #24]
 80065ca:	3301      	adds	r3, #1
 80065cc:	9306      	str	r3, [sp, #24]
 80065ce:	2301      	movs	r3, #1
 80065d0:	9308      	str	r3, [sp, #32]
 80065d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 81b8 	beq.w	800694a <_dtoa_r+0xb62>
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065e0:	6918      	ldr	r0, [r3, #16]
 80065e2:	f000 fb79 	bl	8006cd8 <__hi0bits>
 80065e6:	f1c0 0020 	rsb	r0, r0, #32
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	4418      	add	r0, r3
 80065ee:	f010 001f 	ands.w	r0, r0, #31
 80065f2:	f000 8082 	beq.w	80066fa <_dtoa_r+0x912>
 80065f6:	f1c0 0320 	rsb	r3, r0, #32
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	dd73      	ble.n	80066e6 <_dtoa_r+0x8fe>
 80065fe:	9b00      	ldr	r3, [sp, #0]
 8006600:	f1c0 001c 	rsb	r0, r0, #28
 8006604:	4403      	add	r3, r0
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	9b06      	ldr	r3, [sp, #24]
 800660a:	4403      	add	r3, r0
 800660c:	4406      	add	r6, r0
 800660e:	9306      	str	r3, [sp, #24]
 8006610:	9b00      	ldr	r3, [sp, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	dd05      	ble.n	8006622 <_dtoa_r+0x83a>
 8006616:	9902      	ldr	r1, [sp, #8]
 8006618:	461a      	mov	r2, r3
 800661a:	4648      	mov	r0, r9
 800661c:	f000 fcba 	bl	8006f94 <__lshift>
 8006620:	9002      	str	r0, [sp, #8]
 8006622:	9b06      	ldr	r3, [sp, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	dd05      	ble.n	8006634 <_dtoa_r+0x84c>
 8006628:	4621      	mov	r1, r4
 800662a:	461a      	mov	r2, r3
 800662c:	4648      	mov	r0, r9
 800662e:	f000 fcb1 	bl	8006f94 <__lshift>
 8006632:	4604      	mov	r4, r0
 8006634:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d061      	beq.n	80066fe <_dtoa_r+0x916>
 800663a:	9802      	ldr	r0, [sp, #8]
 800663c:	4621      	mov	r1, r4
 800663e:	f000 fd15 	bl	800706c <__mcmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	da5b      	bge.n	80066fe <_dtoa_r+0x916>
 8006646:	2300      	movs	r3, #0
 8006648:	9902      	ldr	r1, [sp, #8]
 800664a:	220a      	movs	r2, #10
 800664c:	4648      	mov	r0, r9
 800664e:	f000 fafd 	bl	8006c4c <__multadd>
 8006652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006654:	9002      	str	r0, [sp, #8]
 8006656:	f107 38ff 	add.w	r8, r7, #4294967295
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8177 	beq.w	800694e <_dtoa_r+0xb66>
 8006660:	4629      	mov	r1, r5
 8006662:	2300      	movs	r3, #0
 8006664:	220a      	movs	r2, #10
 8006666:	4648      	mov	r0, r9
 8006668:	f000 faf0 	bl	8006c4c <__multadd>
 800666c:	f1bb 0f00 	cmp.w	fp, #0
 8006670:	4605      	mov	r5, r0
 8006672:	dc6f      	bgt.n	8006754 <_dtoa_r+0x96c>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	2b02      	cmp	r3, #2
 8006678:	dc49      	bgt.n	800670e <_dtoa_r+0x926>
 800667a:	e06b      	b.n	8006754 <_dtoa_r+0x96c>
 800667c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800667e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006682:	e73c      	b.n	80064fe <_dtoa_r+0x716>
 8006684:	3fe00000 	.word	0x3fe00000
 8006688:	40240000 	.word	0x40240000
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	1e5c      	subs	r4, r3, #1
 8006690:	9b08      	ldr	r3, [sp, #32]
 8006692:	42a3      	cmp	r3, r4
 8006694:	db09      	blt.n	80066aa <_dtoa_r+0x8c2>
 8006696:	1b1c      	subs	r4, r3, r4
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f6bf af30 	bge.w	8006500 <_dtoa_r+0x718>
 80066a0:	9b00      	ldr	r3, [sp, #0]
 80066a2:	9a03      	ldr	r2, [sp, #12]
 80066a4:	1a9e      	subs	r6, r3, r2
 80066a6:	2300      	movs	r3, #0
 80066a8:	e72b      	b.n	8006502 <_dtoa_r+0x71a>
 80066aa:	9b08      	ldr	r3, [sp, #32]
 80066ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80066ae:	9408      	str	r4, [sp, #32]
 80066b0:	1ae3      	subs	r3, r4, r3
 80066b2:	441a      	add	r2, r3
 80066b4:	9e00      	ldr	r6, [sp, #0]
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80066ba:	2400      	movs	r4, #0
 80066bc:	e721      	b.n	8006502 <_dtoa_r+0x71a>
 80066be:	9c08      	ldr	r4, [sp, #32]
 80066c0:	9e00      	ldr	r6, [sp, #0]
 80066c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80066c4:	e728      	b.n	8006518 <_dtoa_r+0x730>
 80066c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80066ca:	e751      	b.n	8006570 <_dtoa_r+0x788>
 80066cc:	9a08      	ldr	r2, [sp, #32]
 80066ce:	9902      	ldr	r1, [sp, #8]
 80066d0:	e750      	b.n	8006574 <_dtoa_r+0x78c>
 80066d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80066d6:	e751      	b.n	800657c <_dtoa_r+0x794>
 80066d8:	2300      	movs	r3, #0
 80066da:	e779      	b.n	80065d0 <_dtoa_r+0x7e8>
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	e777      	b.n	80065d0 <_dtoa_r+0x7e8>
 80066e0:	2300      	movs	r3, #0
 80066e2:	9308      	str	r3, [sp, #32]
 80066e4:	e779      	b.n	80065da <_dtoa_r+0x7f2>
 80066e6:	d093      	beq.n	8006610 <_dtoa_r+0x828>
 80066e8:	9a00      	ldr	r2, [sp, #0]
 80066ea:	331c      	adds	r3, #28
 80066ec:	441a      	add	r2, r3
 80066ee:	9200      	str	r2, [sp, #0]
 80066f0:	9a06      	ldr	r2, [sp, #24]
 80066f2:	441a      	add	r2, r3
 80066f4:	441e      	add	r6, r3
 80066f6:	9206      	str	r2, [sp, #24]
 80066f8:	e78a      	b.n	8006610 <_dtoa_r+0x828>
 80066fa:	4603      	mov	r3, r0
 80066fc:	e7f4      	b.n	80066e8 <_dtoa_r+0x900>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	46b8      	mov	r8, r7
 8006704:	dc20      	bgt.n	8006748 <_dtoa_r+0x960>
 8006706:	469b      	mov	fp, r3
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	2b02      	cmp	r3, #2
 800670c:	dd1e      	ble.n	800674c <_dtoa_r+0x964>
 800670e:	f1bb 0f00 	cmp.w	fp, #0
 8006712:	f47f adb1 	bne.w	8006278 <_dtoa_r+0x490>
 8006716:	4621      	mov	r1, r4
 8006718:	465b      	mov	r3, fp
 800671a:	2205      	movs	r2, #5
 800671c:	4648      	mov	r0, r9
 800671e:	f000 fa95 	bl	8006c4c <__multadd>
 8006722:	4601      	mov	r1, r0
 8006724:	4604      	mov	r4, r0
 8006726:	9802      	ldr	r0, [sp, #8]
 8006728:	f000 fca0 	bl	800706c <__mcmp>
 800672c:	2800      	cmp	r0, #0
 800672e:	f77f ada3 	ble.w	8006278 <_dtoa_r+0x490>
 8006732:	4656      	mov	r6, sl
 8006734:	2331      	movs	r3, #49	@ 0x31
 8006736:	f806 3b01 	strb.w	r3, [r6], #1
 800673a:	f108 0801 	add.w	r8, r8, #1
 800673e:	e59f      	b.n	8006280 <_dtoa_r+0x498>
 8006740:	9c03      	ldr	r4, [sp, #12]
 8006742:	46b8      	mov	r8, r7
 8006744:	4625      	mov	r5, r4
 8006746:	e7f4      	b.n	8006732 <_dtoa_r+0x94a>
 8006748:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800674c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8101 	beq.w	8006956 <_dtoa_r+0xb6e>
 8006754:	2e00      	cmp	r6, #0
 8006756:	dd05      	ble.n	8006764 <_dtoa_r+0x97c>
 8006758:	4629      	mov	r1, r5
 800675a:	4632      	mov	r2, r6
 800675c:	4648      	mov	r0, r9
 800675e:	f000 fc19 	bl	8006f94 <__lshift>
 8006762:	4605      	mov	r5, r0
 8006764:	9b08      	ldr	r3, [sp, #32]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d05c      	beq.n	8006824 <_dtoa_r+0xa3c>
 800676a:	6869      	ldr	r1, [r5, #4]
 800676c:	4648      	mov	r0, r9
 800676e:	f000 fa0b 	bl	8006b88 <_Balloc>
 8006772:	4606      	mov	r6, r0
 8006774:	b928      	cbnz	r0, 8006782 <_dtoa_r+0x99a>
 8006776:	4b82      	ldr	r3, [pc, #520]	@ (8006980 <_dtoa_r+0xb98>)
 8006778:	4602      	mov	r2, r0
 800677a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800677e:	f7ff bb4a 	b.w	8005e16 <_dtoa_r+0x2e>
 8006782:	692a      	ldr	r2, [r5, #16]
 8006784:	3202      	adds	r2, #2
 8006786:	0092      	lsls	r2, r2, #2
 8006788:	f105 010c 	add.w	r1, r5, #12
 800678c:	300c      	adds	r0, #12
 800678e:	f000 ffa3 	bl	80076d8 <memcpy>
 8006792:	2201      	movs	r2, #1
 8006794:	4631      	mov	r1, r6
 8006796:	4648      	mov	r0, r9
 8006798:	f000 fbfc 	bl	8006f94 <__lshift>
 800679c:	f10a 0301 	add.w	r3, sl, #1
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	eb0a 030b 	add.w	r3, sl, fp
 80067a6:	9308      	str	r3, [sp, #32]
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	462f      	mov	r7, r5
 80067b0:	9306      	str	r3, [sp, #24]
 80067b2:	4605      	mov	r5, r0
 80067b4:	9b00      	ldr	r3, [sp, #0]
 80067b6:	9802      	ldr	r0, [sp, #8]
 80067b8:	4621      	mov	r1, r4
 80067ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80067be:	f7ff fa8a 	bl	8005cd6 <quorem>
 80067c2:	4603      	mov	r3, r0
 80067c4:	3330      	adds	r3, #48	@ 0x30
 80067c6:	9003      	str	r0, [sp, #12]
 80067c8:	4639      	mov	r1, r7
 80067ca:	9802      	ldr	r0, [sp, #8]
 80067cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ce:	f000 fc4d 	bl	800706c <__mcmp>
 80067d2:	462a      	mov	r2, r5
 80067d4:	9004      	str	r0, [sp, #16]
 80067d6:	4621      	mov	r1, r4
 80067d8:	4648      	mov	r0, r9
 80067da:	f000 fc63 	bl	80070a4 <__mdiff>
 80067de:	68c2      	ldr	r2, [r0, #12]
 80067e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e2:	4606      	mov	r6, r0
 80067e4:	bb02      	cbnz	r2, 8006828 <_dtoa_r+0xa40>
 80067e6:	4601      	mov	r1, r0
 80067e8:	9802      	ldr	r0, [sp, #8]
 80067ea:	f000 fc3f 	bl	800706c <__mcmp>
 80067ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f0:	4602      	mov	r2, r0
 80067f2:	4631      	mov	r1, r6
 80067f4:	4648      	mov	r0, r9
 80067f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80067f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067fa:	f000 fa05 	bl	8006c08 <_Bfree>
 80067fe:	9b07      	ldr	r3, [sp, #28]
 8006800:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006802:	9e00      	ldr	r6, [sp, #0]
 8006804:	ea42 0103 	orr.w	r1, r2, r3
 8006808:	9b06      	ldr	r3, [sp, #24]
 800680a:	4319      	orrs	r1, r3
 800680c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680e:	d10d      	bne.n	800682c <_dtoa_r+0xa44>
 8006810:	2b39      	cmp	r3, #57	@ 0x39
 8006812:	d027      	beq.n	8006864 <_dtoa_r+0xa7c>
 8006814:	9a04      	ldr	r2, [sp, #16]
 8006816:	2a00      	cmp	r2, #0
 8006818:	dd01      	ble.n	800681e <_dtoa_r+0xa36>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	3331      	adds	r3, #49	@ 0x31
 800681e:	f88b 3000 	strb.w	r3, [fp]
 8006822:	e52e      	b.n	8006282 <_dtoa_r+0x49a>
 8006824:	4628      	mov	r0, r5
 8006826:	e7b9      	b.n	800679c <_dtoa_r+0x9b4>
 8006828:	2201      	movs	r2, #1
 800682a:	e7e2      	b.n	80067f2 <_dtoa_r+0xa0a>
 800682c:	9904      	ldr	r1, [sp, #16]
 800682e:	2900      	cmp	r1, #0
 8006830:	db04      	blt.n	800683c <_dtoa_r+0xa54>
 8006832:	9807      	ldr	r0, [sp, #28]
 8006834:	4301      	orrs	r1, r0
 8006836:	9806      	ldr	r0, [sp, #24]
 8006838:	4301      	orrs	r1, r0
 800683a:	d120      	bne.n	800687e <_dtoa_r+0xa96>
 800683c:	2a00      	cmp	r2, #0
 800683e:	ddee      	ble.n	800681e <_dtoa_r+0xa36>
 8006840:	9902      	ldr	r1, [sp, #8]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2201      	movs	r2, #1
 8006846:	4648      	mov	r0, r9
 8006848:	f000 fba4 	bl	8006f94 <__lshift>
 800684c:	4621      	mov	r1, r4
 800684e:	9002      	str	r0, [sp, #8]
 8006850:	f000 fc0c 	bl	800706c <__mcmp>
 8006854:	2800      	cmp	r0, #0
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	dc02      	bgt.n	8006860 <_dtoa_r+0xa78>
 800685a:	d1e0      	bne.n	800681e <_dtoa_r+0xa36>
 800685c:	07da      	lsls	r2, r3, #31
 800685e:	d5de      	bpl.n	800681e <_dtoa_r+0xa36>
 8006860:	2b39      	cmp	r3, #57	@ 0x39
 8006862:	d1da      	bne.n	800681a <_dtoa_r+0xa32>
 8006864:	2339      	movs	r3, #57	@ 0x39
 8006866:	f88b 3000 	strb.w	r3, [fp]
 800686a:	4633      	mov	r3, r6
 800686c:	461e      	mov	r6, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006874:	2a39      	cmp	r2, #57	@ 0x39
 8006876:	d04e      	beq.n	8006916 <_dtoa_r+0xb2e>
 8006878:	3201      	adds	r2, #1
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e501      	b.n	8006282 <_dtoa_r+0x49a>
 800687e:	2a00      	cmp	r2, #0
 8006880:	dd03      	ble.n	800688a <_dtoa_r+0xaa2>
 8006882:	2b39      	cmp	r3, #57	@ 0x39
 8006884:	d0ee      	beq.n	8006864 <_dtoa_r+0xa7c>
 8006886:	3301      	adds	r3, #1
 8006888:	e7c9      	b.n	800681e <_dtoa_r+0xa36>
 800688a:	9a00      	ldr	r2, [sp, #0]
 800688c:	9908      	ldr	r1, [sp, #32]
 800688e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006892:	428a      	cmp	r2, r1
 8006894:	d028      	beq.n	80068e8 <_dtoa_r+0xb00>
 8006896:	9902      	ldr	r1, [sp, #8]
 8006898:	2300      	movs	r3, #0
 800689a:	220a      	movs	r2, #10
 800689c:	4648      	mov	r0, r9
 800689e:	f000 f9d5 	bl	8006c4c <__multadd>
 80068a2:	42af      	cmp	r7, r5
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	f04f 020a 	mov.w	r2, #10
 80068ae:	4639      	mov	r1, r7
 80068b0:	4648      	mov	r0, r9
 80068b2:	d107      	bne.n	80068c4 <_dtoa_r+0xadc>
 80068b4:	f000 f9ca 	bl	8006c4c <__multadd>
 80068b8:	4607      	mov	r7, r0
 80068ba:	4605      	mov	r5, r0
 80068bc:	9b00      	ldr	r3, [sp, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	e777      	b.n	80067b4 <_dtoa_r+0x9cc>
 80068c4:	f000 f9c2 	bl	8006c4c <__multadd>
 80068c8:	4629      	mov	r1, r5
 80068ca:	4607      	mov	r7, r0
 80068cc:	2300      	movs	r3, #0
 80068ce:	220a      	movs	r2, #10
 80068d0:	4648      	mov	r0, r9
 80068d2:	f000 f9bb 	bl	8006c4c <__multadd>
 80068d6:	4605      	mov	r5, r0
 80068d8:	e7f0      	b.n	80068bc <_dtoa_r+0xad4>
 80068da:	f1bb 0f00 	cmp.w	fp, #0
 80068de:	bfcc      	ite	gt
 80068e0:	465e      	movgt	r6, fp
 80068e2:	2601      	movle	r6, #1
 80068e4:	4456      	add	r6, sl
 80068e6:	2700      	movs	r7, #0
 80068e8:	9902      	ldr	r1, [sp, #8]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	2201      	movs	r2, #1
 80068ee:	4648      	mov	r0, r9
 80068f0:	f000 fb50 	bl	8006f94 <__lshift>
 80068f4:	4621      	mov	r1, r4
 80068f6:	9002      	str	r0, [sp, #8]
 80068f8:	f000 fbb8 	bl	800706c <__mcmp>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	dcb4      	bgt.n	800686a <_dtoa_r+0xa82>
 8006900:	d102      	bne.n	8006908 <_dtoa_r+0xb20>
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	07db      	lsls	r3, r3, #31
 8006906:	d4b0      	bmi.n	800686a <_dtoa_r+0xa82>
 8006908:	4633      	mov	r3, r6
 800690a:	461e      	mov	r6, r3
 800690c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006910:	2a30      	cmp	r2, #48	@ 0x30
 8006912:	d0fa      	beq.n	800690a <_dtoa_r+0xb22>
 8006914:	e4b5      	b.n	8006282 <_dtoa_r+0x49a>
 8006916:	459a      	cmp	sl, r3
 8006918:	d1a8      	bne.n	800686c <_dtoa_r+0xa84>
 800691a:	2331      	movs	r3, #49	@ 0x31
 800691c:	f108 0801 	add.w	r8, r8, #1
 8006920:	f88a 3000 	strb.w	r3, [sl]
 8006924:	e4ad      	b.n	8006282 <_dtoa_r+0x49a>
 8006926:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006928:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006984 <_dtoa_r+0xb9c>
 800692c:	b11b      	cbz	r3, 8006936 <_dtoa_r+0xb4e>
 800692e:	f10a 0308 	add.w	r3, sl, #8
 8006932:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	4650      	mov	r0, sl
 8006938:	b017      	add	sp, #92	@ 0x5c
 800693a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693e:	9b07      	ldr	r3, [sp, #28]
 8006940:	2b01      	cmp	r3, #1
 8006942:	f77f ae2e 	ble.w	80065a2 <_dtoa_r+0x7ba>
 8006946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	2001      	movs	r0, #1
 800694c:	e64d      	b.n	80065ea <_dtoa_r+0x802>
 800694e:	f1bb 0f00 	cmp.w	fp, #0
 8006952:	f77f aed9 	ble.w	8006708 <_dtoa_r+0x920>
 8006956:	4656      	mov	r6, sl
 8006958:	9802      	ldr	r0, [sp, #8]
 800695a:	4621      	mov	r1, r4
 800695c:	f7ff f9bb 	bl	8005cd6 <quorem>
 8006960:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006964:	f806 3b01 	strb.w	r3, [r6], #1
 8006968:	eba6 020a 	sub.w	r2, r6, sl
 800696c:	4593      	cmp	fp, r2
 800696e:	ddb4      	ble.n	80068da <_dtoa_r+0xaf2>
 8006970:	9902      	ldr	r1, [sp, #8]
 8006972:	2300      	movs	r3, #0
 8006974:	220a      	movs	r2, #10
 8006976:	4648      	mov	r0, r9
 8006978:	f000 f968 	bl	8006c4c <__multadd>
 800697c:	9002      	str	r0, [sp, #8]
 800697e:	e7eb      	b.n	8006958 <_dtoa_r+0xb70>
 8006980:	08007ed0 	.word	0x08007ed0
 8006984:	08007e54 	.word	0x08007e54

08006988 <_free_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4605      	mov	r5, r0
 800698c:	2900      	cmp	r1, #0
 800698e:	d041      	beq.n	8006a14 <_free_r+0x8c>
 8006990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006994:	1f0c      	subs	r4, r1, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	bfb8      	it	lt
 800699a:	18e4      	addlt	r4, r4, r3
 800699c:	f000 f8e8 	bl	8006b70 <__malloc_lock>
 80069a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a18 <_free_r+0x90>)
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	b933      	cbnz	r3, 80069b4 <_free_r+0x2c>
 80069a6:	6063      	str	r3, [r4, #4]
 80069a8:	6014      	str	r4, [r2, #0]
 80069aa:	4628      	mov	r0, r5
 80069ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b0:	f000 b8e4 	b.w	8006b7c <__malloc_unlock>
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	d908      	bls.n	80069ca <_free_r+0x42>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	1821      	adds	r1, r4, r0
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf01      	itttt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	1809      	addeq	r1, r1, r0
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	e7ed      	b.n	80069a6 <_free_r+0x1e>
 80069ca:	461a      	mov	r2, r3
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b10b      	cbz	r3, 80069d4 <_free_r+0x4c>
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	d9fa      	bls.n	80069ca <_free_r+0x42>
 80069d4:	6811      	ldr	r1, [r2, #0]
 80069d6:	1850      	adds	r0, r2, r1
 80069d8:	42a0      	cmp	r0, r4
 80069da:	d10b      	bne.n	80069f4 <_free_r+0x6c>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	4401      	add	r1, r0
 80069e0:	1850      	adds	r0, r2, r1
 80069e2:	4283      	cmp	r3, r0
 80069e4:	6011      	str	r1, [r2, #0]
 80069e6:	d1e0      	bne.n	80069aa <_free_r+0x22>
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	6053      	str	r3, [r2, #4]
 80069ee:	4408      	add	r0, r1
 80069f0:	6010      	str	r0, [r2, #0]
 80069f2:	e7da      	b.n	80069aa <_free_r+0x22>
 80069f4:	d902      	bls.n	80069fc <_free_r+0x74>
 80069f6:	230c      	movs	r3, #12
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	e7d6      	b.n	80069aa <_free_r+0x22>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	1821      	adds	r1, r4, r0
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf04      	itt	eq
 8006a04:	6819      	ldreq	r1, [r3, #0]
 8006a06:	685b      	ldreq	r3, [r3, #4]
 8006a08:	6063      	str	r3, [r4, #4]
 8006a0a:	bf04      	itt	eq
 8006a0c:	1809      	addeq	r1, r1, r0
 8006a0e:	6021      	streq	r1, [r4, #0]
 8006a10:	6054      	str	r4, [r2, #4]
 8006a12:	e7ca      	b.n	80069aa <_free_r+0x22>
 8006a14:	bd38      	pop	{r3, r4, r5, pc}
 8006a16:	bf00      	nop
 8006a18:	200004e8 	.word	0x200004e8

08006a1c <malloc>:
 8006a1c:	4b02      	ldr	r3, [pc, #8]	@ (8006a28 <malloc+0xc>)
 8006a1e:	4601      	mov	r1, r0
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	f000 b825 	b.w	8006a70 <_malloc_r>
 8006a26:	bf00      	nop
 8006a28:	20000018 	.word	0x20000018

08006a2c <sbrk_aligned>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a6c <sbrk_aligned+0x40>)
 8006a30:	460c      	mov	r4, r1
 8006a32:	6831      	ldr	r1, [r6, #0]
 8006a34:	4605      	mov	r5, r0
 8006a36:	b911      	cbnz	r1, 8006a3e <sbrk_aligned+0x12>
 8006a38:	f000 fe3e 	bl	80076b8 <_sbrk_r>
 8006a3c:	6030      	str	r0, [r6, #0]
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 fe39 	bl	80076b8 <_sbrk_r>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d103      	bne.n	8006a52 <sbrk_aligned+0x26>
 8006a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a4e:	4620      	mov	r0, r4
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	1cc4      	adds	r4, r0, #3
 8006a54:	f024 0403 	bic.w	r4, r4, #3
 8006a58:	42a0      	cmp	r0, r4
 8006a5a:	d0f8      	beq.n	8006a4e <sbrk_aligned+0x22>
 8006a5c:	1a21      	subs	r1, r4, r0
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 fe2a 	bl	80076b8 <_sbrk_r>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1f2      	bne.n	8006a4e <sbrk_aligned+0x22>
 8006a68:	e7ef      	b.n	8006a4a <sbrk_aligned+0x1e>
 8006a6a:	bf00      	nop
 8006a6c:	200004e4 	.word	0x200004e4

08006a70 <_malloc_r>:
 8006a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	1ccd      	adds	r5, r1, #3
 8006a76:	f025 0503 	bic.w	r5, r5, #3
 8006a7a:	3508      	adds	r5, #8
 8006a7c:	2d0c      	cmp	r5, #12
 8006a7e:	bf38      	it	cc
 8006a80:	250c      	movcc	r5, #12
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	4606      	mov	r6, r0
 8006a86:	db01      	blt.n	8006a8c <_malloc_r+0x1c>
 8006a88:	42a9      	cmp	r1, r5
 8006a8a:	d904      	bls.n	8006a96 <_malloc_r+0x26>
 8006a8c:	230c      	movs	r3, #12
 8006a8e:	6033      	str	r3, [r6, #0]
 8006a90:	2000      	movs	r0, #0
 8006a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b6c <_malloc_r+0xfc>
 8006a9a:	f000 f869 	bl	8006b70 <__malloc_lock>
 8006a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	bb44      	cbnz	r4, 8006af8 <_malloc_r+0x88>
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff ffbf 	bl	8006a2c <sbrk_aligned>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	d158      	bne.n	8006b66 <_malloc_r+0xf6>
 8006ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ab8:	4627      	mov	r7, r4
 8006aba:	2f00      	cmp	r7, #0
 8006abc:	d143      	bne.n	8006b46 <_malloc_r+0xd6>
 8006abe:	2c00      	cmp	r4, #0
 8006ac0:	d04b      	beq.n	8006b5a <_malloc_r+0xea>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	eb04 0903 	add.w	r9, r4, r3
 8006acc:	f000 fdf4 	bl	80076b8 <_sbrk_r>
 8006ad0:	4581      	cmp	r9, r0
 8006ad2:	d142      	bne.n	8006b5a <_malloc_r+0xea>
 8006ad4:	6821      	ldr	r1, [r4, #0]
 8006ad6:	1a6d      	subs	r5, r5, r1
 8006ad8:	4629      	mov	r1, r5
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7ff ffa6 	bl	8006a2c <sbrk_aligned>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d03a      	beq.n	8006b5a <_malloc_r+0xea>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	442b      	add	r3, r5
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	f8d8 3000 	ldr.w	r3, [r8]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	bb62      	cbnz	r2, 8006b4c <_malloc_r+0xdc>
 8006af2:	f8c8 7000 	str.w	r7, [r8]
 8006af6:	e00f      	b.n	8006b18 <_malloc_r+0xa8>
 8006af8:	6822      	ldr	r2, [r4, #0]
 8006afa:	1b52      	subs	r2, r2, r5
 8006afc:	d420      	bmi.n	8006b40 <_malloc_r+0xd0>
 8006afe:	2a0b      	cmp	r2, #11
 8006b00:	d917      	bls.n	8006b32 <_malloc_r+0xc2>
 8006b02:	1961      	adds	r1, r4, r5
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	6025      	str	r5, [r4, #0]
 8006b08:	bf18      	it	ne
 8006b0a:	6059      	strne	r1, [r3, #4]
 8006b0c:	6863      	ldr	r3, [r4, #4]
 8006b0e:	bf08      	it	eq
 8006b10:	f8c8 1000 	streq.w	r1, [r8]
 8006b14:	5162      	str	r2, [r4, r5]
 8006b16:	604b      	str	r3, [r1, #4]
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f000 f82f 	bl	8006b7c <__malloc_unlock>
 8006b1e:	f104 000b 	add.w	r0, r4, #11
 8006b22:	1d23      	adds	r3, r4, #4
 8006b24:	f020 0007 	bic.w	r0, r0, #7
 8006b28:	1ac2      	subs	r2, r0, r3
 8006b2a:	bf1c      	itt	ne
 8006b2c:	1a1b      	subne	r3, r3, r0
 8006b2e:	50a3      	strne	r3, [r4, r2]
 8006b30:	e7af      	b.n	8006a92 <_malloc_r+0x22>
 8006b32:	6862      	ldr	r2, [r4, #4]
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	bf0c      	ite	eq
 8006b38:	f8c8 2000 	streq.w	r2, [r8]
 8006b3c:	605a      	strne	r2, [r3, #4]
 8006b3e:	e7eb      	b.n	8006b18 <_malloc_r+0xa8>
 8006b40:	4623      	mov	r3, r4
 8006b42:	6864      	ldr	r4, [r4, #4]
 8006b44:	e7ae      	b.n	8006aa4 <_malloc_r+0x34>
 8006b46:	463c      	mov	r4, r7
 8006b48:	687f      	ldr	r7, [r7, #4]
 8006b4a:	e7b6      	b.n	8006aba <_malloc_r+0x4a>
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	d1fb      	bne.n	8006b4c <_malloc_r+0xdc>
 8006b54:	2300      	movs	r3, #0
 8006b56:	6053      	str	r3, [r2, #4]
 8006b58:	e7de      	b.n	8006b18 <_malloc_r+0xa8>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f000 f80c 	bl	8006b7c <__malloc_unlock>
 8006b64:	e794      	b.n	8006a90 <_malloc_r+0x20>
 8006b66:	6005      	str	r5, [r0, #0]
 8006b68:	e7d6      	b.n	8006b18 <_malloc_r+0xa8>
 8006b6a:	bf00      	nop
 8006b6c:	200004e8 	.word	0x200004e8

08006b70 <__malloc_lock>:
 8006b70:	4801      	ldr	r0, [pc, #4]	@ (8006b78 <__malloc_lock+0x8>)
 8006b72:	f7ff b8ae 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8006b76:	bf00      	nop
 8006b78:	200004e0 	.word	0x200004e0

08006b7c <__malloc_unlock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	@ (8006b84 <__malloc_unlock+0x8>)
 8006b7e:	f7ff b8a9 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8006b82:	bf00      	nop
 8006b84:	200004e0 	.word	0x200004e0

08006b88 <_Balloc>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	69c6      	ldr	r6, [r0, #28]
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	b976      	cbnz	r6, 8006bb0 <_Balloc+0x28>
 8006b92:	2010      	movs	r0, #16
 8006b94:	f7ff ff42 	bl	8006a1c <malloc>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	61e0      	str	r0, [r4, #28]
 8006b9c:	b920      	cbnz	r0, 8006ba8 <_Balloc+0x20>
 8006b9e:	4b18      	ldr	r3, [pc, #96]	@ (8006c00 <_Balloc+0x78>)
 8006ba0:	4818      	ldr	r0, [pc, #96]	@ (8006c04 <_Balloc+0x7c>)
 8006ba2:	216b      	movs	r1, #107	@ 0x6b
 8006ba4:	f000 fda6 	bl	80076f4 <__assert_func>
 8006ba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bac:	6006      	str	r6, [r0, #0]
 8006bae:	60c6      	str	r6, [r0, #12]
 8006bb0:	69e6      	ldr	r6, [r4, #28]
 8006bb2:	68f3      	ldr	r3, [r6, #12]
 8006bb4:	b183      	cbz	r3, 8006bd8 <_Balloc+0x50>
 8006bb6:	69e3      	ldr	r3, [r4, #28]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bbe:	b9b8      	cbnz	r0, 8006bf0 <_Balloc+0x68>
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	fa01 f605 	lsl.w	r6, r1, r5
 8006bc6:	1d72      	adds	r2, r6, #5
 8006bc8:	0092      	lsls	r2, r2, #2
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 fdb0 	bl	8007730 <_calloc_r>
 8006bd0:	b160      	cbz	r0, 8006bec <_Balloc+0x64>
 8006bd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bd6:	e00e      	b.n	8006bf6 <_Balloc+0x6e>
 8006bd8:	2221      	movs	r2, #33	@ 0x21
 8006bda:	2104      	movs	r1, #4
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fda7 	bl	8007730 <_calloc_r>
 8006be2:	69e3      	ldr	r3, [r4, #28]
 8006be4:	60f0      	str	r0, [r6, #12]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e4      	bne.n	8006bb6 <_Balloc+0x2e>
 8006bec:	2000      	movs	r0, #0
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	6802      	ldr	r2, [r0, #0]
 8006bf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bfc:	e7f7      	b.n	8006bee <_Balloc+0x66>
 8006bfe:	bf00      	nop
 8006c00:	08007e61 	.word	0x08007e61
 8006c04:	08007ee1 	.word	0x08007ee1

08006c08 <_Bfree>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	69c6      	ldr	r6, [r0, #28]
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	b976      	cbnz	r6, 8006c30 <_Bfree+0x28>
 8006c12:	2010      	movs	r0, #16
 8006c14:	f7ff ff02 	bl	8006a1c <malloc>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	61e8      	str	r0, [r5, #28]
 8006c1c:	b920      	cbnz	r0, 8006c28 <_Bfree+0x20>
 8006c1e:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <_Bfree+0x3c>)
 8006c20:	4809      	ldr	r0, [pc, #36]	@ (8006c48 <_Bfree+0x40>)
 8006c22:	218f      	movs	r1, #143	@ 0x8f
 8006c24:	f000 fd66 	bl	80076f4 <__assert_func>
 8006c28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c2c:	6006      	str	r6, [r0, #0]
 8006c2e:	60c6      	str	r6, [r0, #12]
 8006c30:	b13c      	cbz	r4, 8006c42 <_Bfree+0x3a>
 8006c32:	69eb      	ldr	r3, [r5, #28]
 8006c34:	6862      	ldr	r2, [r4, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c3c:	6021      	str	r1, [r4, #0]
 8006c3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	08007e61 	.word	0x08007e61
 8006c48:	08007ee1 	.word	0x08007ee1

08006c4c <__multadd>:
 8006c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c50:	690d      	ldr	r5, [r1, #16]
 8006c52:	4607      	mov	r7, r0
 8006c54:	460c      	mov	r4, r1
 8006c56:	461e      	mov	r6, r3
 8006c58:	f101 0c14 	add.w	ip, r1, #20
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c62:	b299      	uxth	r1, r3
 8006c64:	fb02 6101 	mla	r1, r2, r1, r6
 8006c68:	0c1e      	lsrs	r6, r3, #16
 8006c6a:	0c0b      	lsrs	r3, r1, #16
 8006c6c:	fb02 3306 	mla	r3, r2, r6, r3
 8006c70:	b289      	uxth	r1, r1
 8006c72:	3001      	adds	r0, #1
 8006c74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c78:	4285      	cmp	r5, r0
 8006c7a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c82:	dcec      	bgt.n	8006c5e <__multadd+0x12>
 8006c84:	b30e      	cbz	r6, 8006cca <__multadd+0x7e>
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	42ab      	cmp	r3, r5
 8006c8a:	dc19      	bgt.n	8006cc0 <__multadd+0x74>
 8006c8c:	6861      	ldr	r1, [r4, #4]
 8006c8e:	4638      	mov	r0, r7
 8006c90:	3101      	adds	r1, #1
 8006c92:	f7ff ff79 	bl	8006b88 <_Balloc>
 8006c96:	4680      	mov	r8, r0
 8006c98:	b928      	cbnz	r0, 8006ca6 <__multadd+0x5a>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd0 <__multadd+0x84>)
 8006c9e:	480d      	ldr	r0, [pc, #52]	@ (8006cd4 <__multadd+0x88>)
 8006ca0:	21ba      	movs	r1, #186	@ 0xba
 8006ca2:	f000 fd27 	bl	80076f4 <__assert_func>
 8006ca6:	6922      	ldr	r2, [r4, #16]
 8006ca8:	3202      	adds	r2, #2
 8006caa:	f104 010c 	add.w	r1, r4, #12
 8006cae:	0092      	lsls	r2, r2, #2
 8006cb0:	300c      	adds	r0, #12
 8006cb2:	f000 fd11 	bl	80076d8 <memcpy>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ffa5 	bl	8006c08 <_Bfree>
 8006cbe:	4644      	mov	r4, r8
 8006cc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	615e      	str	r6, [r3, #20]
 8006cc8:	6125      	str	r5, [r4, #16]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	08007ed0 	.word	0x08007ed0
 8006cd4:	08007ee1 	.word	0x08007ee1

08006cd8 <__hi0bits>:
 8006cd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cdc:	4603      	mov	r3, r0
 8006cde:	bf36      	itet	cc
 8006ce0:	0403      	lslcc	r3, r0, #16
 8006ce2:	2000      	movcs	r0, #0
 8006ce4:	2010      	movcc	r0, #16
 8006ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cea:	bf3c      	itt	cc
 8006cec:	021b      	lslcc	r3, r3, #8
 8006cee:	3008      	addcc	r0, #8
 8006cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf4:	bf3c      	itt	cc
 8006cf6:	011b      	lslcc	r3, r3, #4
 8006cf8:	3004      	addcc	r0, #4
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfe:	bf3c      	itt	cc
 8006d00:	009b      	lslcc	r3, r3, #2
 8006d02:	3002      	addcc	r0, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	db05      	blt.n	8006d14 <__hi0bits+0x3c>
 8006d08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d0c:	f100 0001 	add.w	r0, r0, #1
 8006d10:	bf08      	it	eq
 8006d12:	2020      	moveq	r0, #32
 8006d14:	4770      	bx	lr

08006d16 <__lo0bits>:
 8006d16:	6803      	ldr	r3, [r0, #0]
 8006d18:	4602      	mov	r2, r0
 8006d1a:	f013 0007 	ands.w	r0, r3, #7
 8006d1e:	d00b      	beq.n	8006d38 <__lo0bits+0x22>
 8006d20:	07d9      	lsls	r1, r3, #31
 8006d22:	d421      	bmi.n	8006d68 <__lo0bits+0x52>
 8006d24:	0798      	lsls	r0, r3, #30
 8006d26:	bf49      	itett	mi
 8006d28:	085b      	lsrmi	r3, r3, #1
 8006d2a:	089b      	lsrpl	r3, r3, #2
 8006d2c:	2001      	movmi	r0, #1
 8006d2e:	6013      	strmi	r3, [r2, #0]
 8006d30:	bf5c      	itt	pl
 8006d32:	6013      	strpl	r3, [r2, #0]
 8006d34:	2002      	movpl	r0, #2
 8006d36:	4770      	bx	lr
 8006d38:	b299      	uxth	r1, r3
 8006d3a:	b909      	cbnz	r1, 8006d40 <__lo0bits+0x2a>
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	2010      	movs	r0, #16
 8006d40:	b2d9      	uxtb	r1, r3
 8006d42:	b909      	cbnz	r1, 8006d48 <__lo0bits+0x32>
 8006d44:	3008      	adds	r0, #8
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	0719      	lsls	r1, r3, #28
 8006d4a:	bf04      	itt	eq
 8006d4c:	091b      	lsreq	r3, r3, #4
 8006d4e:	3004      	addeq	r0, #4
 8006d50:	0799      	lsls	r1, r3, #30
 8006d52:	bf04      	itt	eq
 8006d54:	089b      	lsreq	r3, r3, #2
 8006d56:	3002      	addeq	r0, #2
 8006d58:	07d9      	lsls	r1, r3, #31
 8006d5a:	d403      	bmi.n	8006d64 <__lo0bits+0x4e>
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	f100 0001 	add.w	r0, r0, #1
 8006d62:	d003      	beq.n	8006d6c <__lo0bits+0x56>
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	4770      	bx	lr
 8006d68:	2000      	movs	r0, #0
 8006d6a:	4770      	bx	lr
 8006d6c:	2020      	movs	r0, #32
 8006d6e:	4770      	bx	lr

08006d70 <__i2b>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	460c      	mov	r4, r1
 8006d74:	2101      	movs	r1, #1
 8006d76:	f7ff ff07 	bl	8006b88 <_Balloc>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	b928      	cbnz	r0, 8006d8a <__i2b+0x1a>
 8006d7e:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <__i2b+0x24>)
 8006d80:	4805      	ldr	r0, [pc, #20]	@ (8006d98 <__i2b+0x28>)
 8006d82:	f240 1145 	movw	r1, #325	@ 0x145
 8006d86:	f000 fcb5 	bl	80076f4 <__assert_func>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	6144      	str	r4, [r0, #20]
 8006d8e:	6103      	str	r3, [r0, #16]
 8006d90:	bd10      	pop	{r4, pc}
 8006d92:	bf00      	nop
 8006d94:	08007ed0 	.word	0x08007ed0
 8006d98:	08007ee1 	.word	0x08007ee1

08006d9c <__multiply>:
 8006d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	4617      	mov	r7, r2
 8006da2:	690a      	ldr	r2, [r1, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	bfa8      	it	ge
 8006daa:	463b      	movge	r3, r7
 8006dac:	4689      	mov	r9, r1
 8006dae:	bfa4      	itt	ge
 8006db0:	460f      	movge	r7, r1
 8006db2:	4699      	movge	r9, r3
 8006db4:	693d      	ldr	r5, [r7, #16]
 8006db6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	eb05 060a 	add.w	r6, r5, sl
 8006dc2:	42b3      	cmp	r3, r6
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	bfb8      	it	lt
 8006dc8:	3101      	addlt	r1, #1
 8006dca:	f7ff fedd 	bl	8006b88 <_Balloc>
 8006dce:	b930      	cbnz	r0, 8006dde <__multiply+0x42>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	4b41      	ldr	r3, [pc, #260]	@ (8006ed8 <__multiply+0x13c>)
 8006dd4:	4841      	ldr	r0, [pc, #260]	@ (8006edc <__multiply+0x140>)
 8006dd6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006dda:	f000 fc8b 	bl	80076f4 <__assert_func>
 8006dde:	f100 0414 	add.w	r4, r0, #20
 8006de2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006de6:	4623      	mov	r3, r4
 8006de8:	2200      	movs	r2, #0
 8006dea:	4573      	cmp	r3, lr
 8006dec:	d320      	bcc.n	8006e30 <__multiply+0x94>
 8006dee:	f107 0814 	add.w	r8, r7, #20
 8006df2:	f109 0114 	add.w	r1, r9, #20
 8006df6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006dfa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	1beb      	subs	r3, r5, r7
 8006e02:	3b15      	subs	r3, #21
 8006e04:	f023 0303 	bic.w	r3, r3, #3
 8006e08:	3304      	adds	r3, #4
 8006e0a:	3715      	adds	r7, #21
 8006e0c:	42bd      	cmp	r5, r7
 8006e0e:	bf38      	it	cc
 8006e10:	2304      	movcc	r3, #4
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	9b02      	ldr	r3, [sp, #8]
 8006e16:	9103      	str	r1, [sp, #12]
 8006e18:	428b      	cmp	r3, r1
 8006e1a:	d80c      	bhi.n	8006e36 <__multiply+0x9a>
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	dd03      	ble.n	8006e28 <__multiply+0x8c>
 8006e20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d055      	beq.n	8006ed4 <__multiply+0x138>
 8006e28:	6106      	str	r6, [r0, #16]
 8006e2a:	b005      	add	sp, #20
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e30:	f843 2b04 	str.w	r2, [r3], #4
 8006e34:	e7d9      	b.n	8006dea <__multiply+0x4e>
 8006e36:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	d01f      	beq.n	8006e80 <__multiply+0xe4>
 8006e40:	46c4      	mov	ip, r8
 8006e42:	46a1      	mov	r9, r4
 8006e44:	2700      	movs	r7, #0
 8006e46:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e4a:	f8d9 3000 	ldr.w	r3, [r9]
 8006e4e:	fa1f fb82 	uxth.w	fp, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e58:	443b      	add	r3, r7
 8006e5a:	f8d9 7000 	ldr.w	r7, [r9]
 8006e5e:	0c12      	lsrs	r2, r2, #16
 8006e60:	0c3f      	lsrs	r7, r7, #16
 8006e62:	fb0a 7202 	mla	r2, sl, r2, r7
 8006e66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e70:	4565      	cmp	r5, ip
 8006e72:	f849 3b04 	str.w	r3, [r9], #4
 8006e76:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006e7a:	d8e4      	bhi.n	8006e46 <__multiply+0xaa>
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	50e7      	str	r7, [r4, r3]
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e86:	3104      	adds	r1, #4
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	d020      	beq.n	8006ed0 <__multiply+0x134>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4647      	mov	r7, r8
 8006e92:	46a4      	mov	ip, r4
 8006e94:	f04f 0a00 	mov.w	sl, #0
 8006e98:	f8b7 b000 	ldrh.w	fp, [r7]
 8006e9c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ea0:	fb09 220b 	mla	r2, r9, fp, r2
 8006ea4:	4452      	add	r2, sl
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eac:	f84c 3b04 	str.w	r3, [ip], #4
 8006eb0:	f857 3b04 	ldr.w	r3, [r7], #4
 8006eb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eb8:	f8bc 3000 	ldrh.w	r3, [ip]
 8006ebc:	fb09 330a 	mla	r3, r9, sl, r3
 8006ec0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006ec4:	42bd      	cmp	r5, r7
 8006ec6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eca:	d8e5      	bhi.n	8006e98 <__multiply+0xfc>
 8006ecc:	9a01      	ldr	r2, [sp, #4]
 8006ece:	50a3      	str	r3, [r4, r2]
 8006ed0:	3404      	adds	r4, #4
 8006ed2:	e79f      	b.n	8006e14 <__multiply+0x78>
 8006ed4:	3e01      	subs	r6, #1
 8006ed6:	e7a1      	b.n	8006e1c <__multiply+0x80>
 8006ed8:	08007ed0 	.word	0x08007ed0
 8006edc:	08007ee1 	.word	0x08007ee1

08006ee0 <__pow5mult>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	f012 0203 	ands.w	r2, r2, #3
 8006eea:	4607      	mov	r7, r0
 8006eec:	460e      	mov	r6, r1
 8006eee:	d007      	beq.n	8006f00 <__pow5mult+0x20>
 8006ef0:	4c25      	ldr	r4, [pc, #148]	@ (8006f88 <__pow5mult+0xa8>)
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006efa:	f7ff fea7 	bl	8006c4c <__multadd>
 8006efe:	4606      	mov	r6, r0
 8006f00:	10ad      	asrs	r5, r5, #2
 8006f02:	d03d      	beq.n	8006f80 <__pow5mult+0xa0>
 8006f04:	69fc      	ldr	r4, [r7, #28]
 8006f06:	b97c      	cbnz	r4, 8006f28 <__pow5mult+0x48>
 8006f08:	2010      	movs	r0, #16
 8006f0a:	f7ff fd87 	bl	8006a1c <malloc>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	61f8      	str	r0, [r7, #28]
 8006f12:	b928      	cbnz	r0, 8006f20 <__pow5mult+0x40>
 8006f14:	4b1d      	ldr	r3, [pc, #116]	@ (8006f8c <__pow5mult+0xac>)
 8006f16:	481e      	ldr	r0, [pc, #120]	@ (8006f90 <__pow5mult+0xb0>)
 8006f18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f1c:	f000 fbea 	bl	80076f4 <__assert_func>
 8006f20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f24:	6004      	str	r4, [r0, #0]
 8006f26:	60c4      	str	r4, [r0, #12]
 8006f28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f30:	b94c      	cbnz	r4, 8006f46 <__pow5mult+0x66>
 8006f32:	f240 2171 	movw	r1, #625	@ 0x271
 8006f36:	4638      	mov	r0, r7
 8006f38:	f7ff ff1a 	bl	8006d70 <__i2b>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f42:	4604      	mov	r4, r0
 8006f44:	6003      	str	r3, [r0, #0]
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	07eb      	lsls	r3, r5, #31
 8006f4c:	d50a      	bpl.n	8006f64 <__pow5mult+0x84>
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4622      	mov	r2, r4
 8006f52:	4638      	mov	r0, r7
 8006f54:	f7ff ff22 	bl	8006d9c <__multiply>
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f7ff fe53 	bl	8006c08 <_Bfree>
 8006f62:	4646      	mov	r6, r8
 8006f64:	106d      	asrs	r5, r5, #1
 8006f66:	d00b      	beq.n	8006f80 <__pow5mult+0xa0>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	b938      	cbnz	r0, 8006f7c <__pow5mult+0x9c>
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ff13 	bl	8006d9c <__multiply>
 8006f76:	6020      	str	r0, [r4, #0]
 8006f78:	f8c0 9000 	str.w	r9, [r0]
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	e7e4      	b.n	8006f4a <__pow5mult+0x6a>
 8006f80:	4630      	mov	r0, r6
 8006f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f86:	bf00      	nop
 8006f88:	08007f94 	.word	0x08007f94
 8006f8c:	08007e61 	.word	0x08007e61
 8006f90:	08007ee1 	.word	0x08007ee1

08006f94 <__lshift>:
 8006f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	460c      	mov	r4, r1
 8006f9a:	6849      	ldr	r1, [r1, #4]
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fa2:	68a3      	ldr	r3, [r4, #8]
 8006fa4:	4607      	mov	r7, r0
 8006fa6:	4691      	mov	r9, r2
 8006fa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fac:	f108 0601 	add.w	r6, r8, #1
 8006fb0:	42b3      	cmp	r3, r6
 8006fb2:	db0b      	blt.n	8006fcc <__lshift+0x38>
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff fde7 	bl	8006b88 <_Balloc>
 8006fba:	4605      	mov	r5, r0
 8006fbc:	b948      	cbnz	r0, 8006fd2 <__lshift+0x3e>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4b28      	ldr	r3, [pc, #160]	@ (8007064 <__lshift+0xd0>)
 8006fc2:	4829      	ldr	r0, [pc, #164]	@ (8007068 <__lshift+0xd4>)
 8006fc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006fc8:	f000 fb94 	bl	80076f4 <__assert_func>
 8006fcc:	3101      	adds	r1, #1
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	e7ee      	b.n	8006fb0 <__lshift+0x1c>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f100 0114 	add.w	r1, r0, #20
 8006fd8:	f100 0210 	add.w	r2, r0, #16
 8006fdc:	4618      	mov	r0, r3
 8006fde:	4553      	cmp	r3, sl
 8006fe0:	db33      	blt.n	800704a <__lshift+0xb6>
 8006fe2:	6920      	ldr	r0, [r4, #16]
 8006fe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fe8:	f104 0314 	add.w	r3, r4, #20
 8006fec:	f019 091f 	ands.w	r9, r9, #31
 8006ff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ff8:	d02b      	beq.n	8007052 <__lshift+0xbe>
 8006ffa:	f1c9 0e20 	rsb	lr, r9, #32
 8006ffe:	468a      	mov	sl, r1
 8007000:	2200      	movs	r2, #0
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	fa00 f009 	lsl.w	r0, r0, r9
 8007008:	4310      	orrs	r0, r2
 800700a:	f84a 0b04 	str.w	r0, [sl], #4
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	459c      	cmp	ip, r3
 8007014:	fa22 f20e 	lsr.w	r2, r2, lr
 8007018:	d8f3      	bhi.n	8007002 <__lshift+0x6e>
 800701a:	ebac 0304 	sub.w	r3, ip, r4
 800701e:	3b15      	subs	r3, #21
 8007020:	f023 0303 	bic.w	r3, r3, #3
 8007024:	3304      	adds	r3, #4
 8007026:	f104 0015 	add.w	r0, r4, #21
 800702a:	4560      	cmp	r0, ip
 800702c:	bf88      	it	hi
 800702e:	2304      	movhi	r3, #4
 8007030:	50ca      	str	r2, [r1, r3]
 8007032:	b10a      	cbz	r2, 8007038 <__lshift+0xa4>
 8007034:	f108 0602 	add.w	r6, r8, #2
 8007038:	3e01      	subs	r6, #1
 800703a:	4638      	mov	r0, r7
 800703c:	612e      	str	r6, [r5, #16]
 800703e:	4621      	mov	r1, r4
 8007040:	f7ff fde2 	bl	8006c08 <_Bfree>
 8007044:	4628      	mov	r0, r5
 8007046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704a:	f842 0f04 	str.w	r0, [r2, #4]!
 800704e:	3301      	adds	r3, #1
 8007050:	e7c5      	b.n	8006fde <__lshift+0x4a>
 8007052:	3904      	subs	r1, #4
 8007054:	f853 2b04 	ldr.w	r2, [r3], #4
 8007058:	f841 2f04 	str.w	r2, [r1, #4]!
 800705c:	459c      	cmp	ip, r3
 800705e:	d8f9      	bhi.n	8007054 <__lshift+0xc0>
 8007060:	e7ea      	b.n	8007038 <__lshift+0xa4>
 8007062:	bf00      	nop
 8007064:	08007ed0 	.word	0x08007ed0
 8007068:	08007ee1 	.word	0x08007ee1

0800706c <__mcmp>:
 800706c:	690a      	ldr	r2, [r1, #16]
 800706e:	4603      	mov	r3, r0
 8007070:	6900      	ldr	r0, [r0, #16]
 8007072:	1a80      	subs	r0, r0, r2
 8007074:	b530      	push	{r4, r5, lr}
 8007076:	d10e      	bne.n	8007096 <__mcmp+0x2a>
 8007078:	3314      	adds	r3, #20
 800707a:	3114      	adds	r1, #20
 800707c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007080:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800708c:	4295      	cmp	r5, r2
 800708e:	d003      	beq.n	8007098 <__mcmp+0x2c>
 8007090:	d205      	bcs.n	800709e <__mcmp+0x32>
 8007092:	f04f 30ff 	mov.w	r0, #4294967295
 8007096:	bd30      	pop	{r4, r5, pc}
 8007098:	42a3      	cmp	r3, r4
 800709a:	d3f3      	bcc.n	8007084 <__mcmp+0x18>
 800709c:	e7fb      	b.n	8007096 <__mcmp+0x2a>
 800709e:	2001      	movs	r0, #1
 80070a0:	e7f9      	b.n	8007096 <__mcmp+0x2a>
	...

080070a4 <__mdiff>:
 80070a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	4689      	mov	r9, r1
 80070aa:	4606      	mov	r6, r0
 80070ac:	4611      	mov	r1, r2
 80070ae:	4648      	mov	r0, r9
 80070b0:	4614      	mov	r4, r2
 80070b2:	f7ff ffdb 	bl	800706c <__mcmp>
 80070b6:	1e05      	subs	r5, r0, #0
 80070b8:	d112      	bne.n	80070e0 <__mdiff+0x3c>
 80070ba:	4629      	mov	r1, r5
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff fd63 	bl	8006b88 <_Balloc>
 80070c2:	4602      	mov	r2, r0
 80070c4:	b928      	cbnz	r0, 80070d2 <__mdiff+0x2e>
 80070c6:	4b3f      	ldr	r3, [pc, #252]	@ (80071c4 <__mdiff+0x120>)
 80070c8:	f240 2137 	movw	r1, #567	@ 0x237
 80070cc:	483e      	ldr	r0, [pc, #248]	@ (80071c8 <__mdiff+0x124>)
 80070ce:	f000 fb11 	bl	80076f4 <__assert_func>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070d8:	4610      	mov	r0, r2
 80070da:	b003      	add	sp, #12
 80070dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e0:	bfbc      	itt	lt
 80070e2:	464b      	movlt	r3, r9
 80070e4:	46a1      	movlt	r9, r4
 80070e6:	4630      	mov	r0, r6
 80070e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070ec:	bfba      	itte	lt
 80070ee:	461c      	movlt	r4, r3
 80070f0:	2501      	movlt	r5, #1
 80070f2:	2500      	movge	r5, #0
 80070f4:	f7ff fd48 	bl	8006b88 <_Balloc>
 80070f8:	4602      	mov	r2, r0
 80070fa:	b918      	cbnz	r0, 8007104 <__mdiff+0x60>
 80070fc:	4b31      	ldr	r3, [pc, #196]	@ (80071c4 <__mdiff+0x120>)
 80070fe:	f240 2145 	movw	r1, #581	@ 0x245
 8007102:	e7e3      	b.n	80070cc <__mdiff+0x28>
 8007104:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007108:	6926      	ldr	r6, [r4, #16]
 800710a:	60c5      	str	r5, [r0, #12]
 800710c:	f109 0310 	add.w	r3, r9, #16
 8007110:	f109 0514 	add.w	r5, r9, #20
 8007114:	f104 0e14 	add.w	lr, r4, #20
 8007118:	f100 0b14 	add.w	fp, r0, #20
 800711c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007120:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	46d9      	mov	r9, fp
 8007128:	f04f 0c00 	mov.w	ip, #0
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007132:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	fa1f f38a 	uxth.w	r3, sl
 800713c:	4619      	mov	r1, r3
 800713e:	b283      	uxth	r3, r0
 8007140:	1acb      	subs	r3, r1, r3
 8007142:	0c00      	lsrs	r0, r0, #16
 8007144:	4463      	add	r3, ip
 8007146:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800714a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800714e:	b29b      	uxth	r3, r3
 8007150:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007154:	4576      	cmp	r6, lr
 8007156:	f849 3b04 	str.w	r3, [r9], #4
 800715a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800715e:	d8e5      	bhi.n	800712c <__mdiff+0x88>
 8007160:	1b33      	subs	r3, r6, r4
 8007162:	3b15      	subs	r3, #21
 8007164:	f023 0303 	bic.w	r3, r3, #3
 8007168:	3415      	adds	r4, #21
 800716a:	3304      	adds	r3, #4
 800716c:	42a6      	cmp	r6, r4
 800716e:	bf38      	it	cc
 8007170:	2304      	movcc	r3, #4
 8007172:	441d      	add	r5, r3
 8007174:	445b      	add	r3, fp
 8007176:	461e      	mov	r6, r3
 8007178:	462c      	mov	r4, r5
 800717a:	4544      	cmp	r4, r8
 800717c:	d30e      	bcc.n	800719c <__mdiff+0xf8>
 800717e:	f108 0103 	add.w	r1, r8, #3
 8007182:	1b49      	subs	r1, r1, r5
 8007184:	f021 0103 	bic.w	r1, r1, #3
 8007188:	3d03      	subs	r5, #3
 800718a:	45a8      	cmp	r8, r5
 800718c:	bf38      	it	cc
 800718e:	2100      	movcc	r1, #0
 8007190:	440b      	add	r3, r1
 8007192:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007196:	b191      	cbz	r1, 80071be <__mdiff+0x11a>
 8007198:	6117      	str	r7, [r2, #16]
 800719a:	e79d      	b.n	80070d8 <__mdiff+0x34>
 800719c:	f854 1b04 	ldr.w	r1, [r4], #4
 80071a0:	46e6      	mov	lr, ip
 80071a2:	0c08      	lsrs	r0, r1, #16
 80071a4:	fa1c fc81 	uxtah	ip, ip, r1
 80071a8:	4471      	add	r1, lr
 80071aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80071ae:	b289      	uxth	r1, r1
 80071b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071b4:	f846 1b04 	str.w	r1, [r6], #4
 80071b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071bc:	e7dd      	b.n	800717a <__mdiff+0xd6>
 80071be:	3f01      	subs	r7, #1
 80071c0:	e7e7      	b.n	8007192 <__mdiff+0xee>
 80071c2:	bf00      	nop
 80071c4:	08007ed0 	.word	0x08007ed0
 80071c8:	08007ee1 	.word	0x08007ee1

080071cc <__d2b>:
 80071cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071d0:	460f      	mov	r7, r1
 80071d2:	2101      	movs	r1, #1
 80071d4:	ec59 8b10 	vmov	r8, r9, d0
 80071d8:	4616      	mov	r6, r2
 80071da:	f7ff fcd5 	bl	8006b88 <_Balloc>
 80071de:	4604      	mov	r4, r0
 80071e0:	b930      	cbnz	r0, 80071f0 <__d2b+0x24>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4b23      	ldr	r3, [pc, #140]	@ (8007274 <__d2b+0xa8>)
 80071e6:	4824      	ldr	r0, [pc, #144]	@ (8007278 <__d2b+0xac>)
 80071e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80071ec:	f000 fa82 	bl	80076f4 <__assert_func>
 80071f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071f8:	b10d      	cbz	r5, 80071fe <__d2b+0x32>
 80071fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	f1b8 0300 	subs.w	r3, r8, #0
 8007204:	d023      	beq.n	800724e <__d2b+0x82>
 8007206:	4668      	mov	r0, sp
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	f7ff fd84 	bl	8006d16 <__lo0bits>
 800720e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007212:	b1d0      	cbz	r0, 800724a <__d2b+0x7e>
 8007214:	f1c0 0320 	rsb	r3, r0, #32
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	430b      	orrs	r3, r1
 800721e:	40c2      	lsrs	r2, r0
 8007220:	6163      	str	r3, [r4, #20]
 8007222:	9201      	str	r2, [sp, #4]
 8007224:	9b01      	ldr	r3, [sp, #4]
 8007226:	61a3      	str	r3, [r4, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	bf0c      	ite	eq
 800722c:	2201      	moveq	r2, #1
 800722e:	2202      	movne	r2, #2
 8007230:	6122      	str	r2, [r4, #16]
 8007232:	b1a5      	cbz	r5, 800725e <__d2b+0x92>
 8007234:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007238:	4405      	add	r5, r0
 800723a:	603d      	str	r5, [r7, #0]
 800723c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007240:	6030      	str	r0, [r6, #0]
 8007242:	4620      	mov	r0, r4
 8007244:	b003      	add	sp, #12
 8007246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800724a:	6161      	str	r1, [r4, #20]
 800724c:	e7ea      	b.n	8007224 <__d2b+0x58>
 800724e:	a801      	add	r0, sp, #4
 8007250:	f7ff fd61 	bl	8006d16 <__lo0bits>
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	6163      	str	r3, [r4, #20]
 8007258:	3020      	adds	r0, #32
 800725a:	2201      	movs	r2, #1
 800725c:	e7e8      	b.n	8007230 <__d2b+0x64>
 800725e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007262:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007266:	6038      	str	r0, [r7, #0]
 8007268:	6918      	ldr	r0, [r3, #16]
 800726a:	f7ff fd35 	bl	8006cd8 <__hi0bits>
 800726e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007272:	e7e5      	b.n	8007240 <__d2b+0x74>
 8007274:	08007ed0 	.word	0x08007ed0
 8007278:	08007ee1 	.word	0x08007ee1

0800727c <__ssputs_r>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	688e      	ldr	r6, [r1, #8]
 8007282:	461f      	mov	r7, r3
 8007284:	42be      	cmp	r6, r7
 8007286:	680b      	ldr	r3, [r1, #0]
 8007288:	4682      	mov	sl, r0
 800728a:	460c      	mov	r4, r1
 800728c:	4690      	mov	r8, r2
 800728e:	d82d      	bhi.n	80072ec <__ssputs_r+0x70>
 8007290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007298:	d026      	beq.n	80072e8 <__ssputs_r+0x6c>
 800729a:	6965      	ldr	r5, [r4, #20]
 800729c:	6909      	ldr	r1, [r1, #16]
 800729e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072a2:	eba3 0901 	sub.w	r9, r3, r1
 80072a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072aa:	1c7b      	adds	r3, r7, #1
 80072ac:	444b      	add	r3, r9
 80072ae:	106d      	asrs	r5, r5, #1
 80072b0:	429d      	cmp	r5, r3
 80072b2:	bf38      	it	cc
 80072b4:	461d      	movcc	r5, r3
 80072b6:	0553      	lsls	r3, r2, #21
 80072b8:	d527      	bpl.n	800730a <__ssputs_r+0x8e>
 80072ba:	4629      	mov	r1, r5
 80072bc:	f7ff fbd8 	bl	8006a70 <_malloc_r>
 80072c0:	4606      	mov	r6, r0
 80072c2:	b360      	cbz	r0, 800731e <__ssputs_r+0xa2>
 80072c4:	6921      	ldr	r1, [r4, #16]
 80072c6:	464a      	mov	r2, r9
 80072c8:	f000 fa06 	bl	80076d8 <memcpy>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	6126      	str	r6, [r4, #16]
 80072da:	6165      	str	r5, [r4, #20]
 80072dc:	444e      	add	r6, r9
 80072de:	eba5 0509 	sub.w	r5, r5, r9
 80072e2:	6026      	str	r6, [r4, #0]
 80072e4:	60a5      	str	r5, [r4, #8]
 80072e6:	463e      	mov	r6, r7
 80072e8:	42be      	cmp	r6, r7
 80072ea:	d900      	bls.n	80072ee <__ssputs_r+0x72>
 80072ec:	463e      	mov	r6, r7
 80072ee:	6820      	ldr	r0, [r4, #0]
 80072f0:	4632      	mov	r2, r6
 80072f2:	4641      	mov	r1, r8
 80072f4:	f000 f9c6 	bl	8007684 <memmove>
 80072f8:	68a3      	ldr	r3, [r4, #8]
 80072fa:	1b9b      	subs	r3, r3, r6
 80072fc:	60a3      	str	r3, [r4, #8]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	4433      	add	r3, r6
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	2000      	movs	r0, #0
 8007306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730a:	462a      	mov	r2, r5
 800730c:	f000 fa36 	bl	800777c <_realloc_r>
 8007310:	4606      	mov	r6, r0
 8007312:	2800      	cmp	r0, #0
 8007314:	d1e0      	bne.n	80072d8 <__ssputs_r+0x5c>
 8007316:	6921      	ldr	r1, [r4, #16]
 8007318:	4650      	mov	r0, sl
 800731a:	f7ff fb35 	bl	8006988 <_free_r>
 800731e:	230c      	movs	r3, #12
 8007320:	f8ca 3000 	str.w	r3, [sl]
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	e7e9      	b.n	8007306 <__ssputs_r+0x8a>
	...

08007334 <_svfiprintf_r>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4698      	mov	r8, r3
 800733a:	898b      	ldrh	r3, [r1, #12]
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	b09d      	sub	sp, #116	@ 0x74
 8007340:	4607      	mov	r7, r0
 8007342:	460d      	mov	r5, r1
 8007344:	4614      	mov	r4, r2
 8007346:	d510      	bpl.n	800736a <_svfiprintf_r+0x36>
 8007348:	690b      	ldr	r3, [r1, #16]
 800734a:	b973      	cbnz	r3, 800736a <_svfiprintf_r+0x36>
 800734c:	2140      	movs	r1, #64	@ 0x40
 800734e:	f7ff fb8f 	bl	8006a70 <_malloc_r>
 8007352:	6028      	str	r0, [r5, #0]
 8007354:	6128      	str	r0, [r5, #16]
 8007356:	b930      	cbnz	r0, 8007366 <_svfiprintf_r+0x32>
 8007358:	230c      	movs	r3, #12
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	b01d      	add	sp, #116	@ 0x74
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	2340      	movs	r3, #64	@ 0x40
 8007368:	616b      	str	r3, [r5, #20]
 800736a:	2300      	movs	r3, #0
 800736c:	9309      	str	r3, [sp, #36]	@ 0x24
 800736e:	2320      	movs	r3, #32
 8007370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007374:	f8cd 800c 	str.w	r8, [sp, #12]
 8007378:	2330      	movs	r3, #48	@ 0x30
 800737a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007518 <_svfiprintf_r+0x1e4>
 800737e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007382:	f04f 0901 	mov.w	r9, #1
 8007386:	4623      	mov	r3, r4
 8007388:	469a      	mov	sl, r3
 800738a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800738e:	b10a      	cbz	r2, 8007394 <_svfiprintf_r+0x60>
 8007390:	2a25      	cmp	r2, #37	@ 0x25
 8007392:	d1f9      	bne.n	8007388 <_svfiprintf_r+0x54>
 8007394:	ebba 0b04 	subs.w	fp, sl, r4
 8007398:	d00b      	beq.n	80073b2 <_svfiprintf_r+0x7e>
 800739a:	465b      	mov	r3, fp
 800739c:	4622      	mov	r2, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	4638      	mov	r0, r7
 80073a2:	f7ff ff6b 	bl	800727c <__ssputs_r>
 80073a6:	3001      	adds	r0, #1
 80073a8:	f000 80a7 	beq.w	80074fa <_svfiprintf_r+0x1c6>
 80073ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073ae:	445a      	add	r2, fp
 80073b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b2:	f89a 3000 	ldrb.w	r3, [sl]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 809f 	beq.w	80074fa <_svfiprintf_r+0x1c6>
 80073bc:	2300      	movs	r3, #0
 80073be:	f04f 32ff 	mov.w	r2, #4294967295
 80073c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073c6:	f10a 0a01 	add.w	sl, sl, #1
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	9307      	str	r3, [sp, #28]
 80073ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073d4:	4654      	mov	r4, sl
 80073d6:	2205      	movs	r2, #5
 80073d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073dc:	484e      	ldr	r0, [pc, #312]	@ (8007518 <_svfiprintf_r+0x1e4>)
 80073de:	f7f8 feff 	bl	80001e0 <memchr>
 80073e2:	9a04      	ldr	r2, [sp, #16]
 80073e4:	b9d8      	cbnz	r0, 800741e <_svfiprintf_r+0xea>
 80073e6:	06d0      	lsls	r0, r2, #27
 80073e8:	bf44      	itt	mi
 80073ea:	2320      	movmi	r3, #32
 80073ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f0:	0711      	lsls	r1, r2, #28
 80073f2:	bf44      	itt	mi
 80073f4:	232b      	movmi	r3, #43	@ 0x2b
 80073f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073fa:	f89a 3000 	ldrb.w	r3, [sl]
 80073fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007400:	d015      	beq.n	800742e <_svfiprintf_r+0xfa>
 8007402:	9a07      	ldr	r2, [sp, #28]
 8007404:	4654      	mov	r4, sl
 8007406:	2000      	movs	r0, #0
 8007408:	f04f 0c0a 	mov.w	ip, #10
 800740c:	4621      	mov	r1, r4
 800740e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007412:	3b30      	subs	r3, #48	@ 0x30
 8007414:	2b09      	cmp	r3, #9
 8007416:	d94b      	bls.n	80074b0 <_svfiprintf_r+0x17c>
 8007418:	b1b0      	cbz	r0, 8007448 <_svfiprintf_r+0x114>
 800741a:	9207      	str	r2, [sp, #28]
 800741c:	e014      	b.n	8007448 <_svfiprintf_r+0x114>
 800741e:	eba0 0308 	sub.w	r3, r0, r8
 8007422:	fa09 f303 	lsl.w	r3, r9, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	46a2      	mov	sl, r4
 800742c:	e7d2      	b.n	80073d4 <_svfiprintf_r+0xa0>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	1d19      	adds	r1, r3, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9103      	str	r1, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfbb      	ittet	lt
 800743a:	425b      	neglt	r3, r3
 800743c:	f042 0202 	orrlt.w	r2, r2, #2
 8007440:	9307      	strge	r3, [sp, #28]
 8007442:	9307      	strlt	r3, [sp, #28]
 8007444:	bfb8      	it	lt
 8007446:	9204      	strlt	r2, [sp, #16]
 8007448:	7823      	ldrb	r3, [r4, #0]
 800744a:	2b2e      	cmp	r3, #46	@ 0x2e
 800744c:	d10a      	bne.n	8007464 <_svfiprintf_r+0x130>
 800744e:	7863      	ldrb	r3, [r4, #1]
 8007450:	2b2a      	cmp	r3, #42	@ 0x2a
 8007452:	d132      	bne.n	80074ba <_svfiprintf_r+0x186>
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	9203      	str	r2, [sp, #12]
 800745c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007460:	3402      	adds	r4, #2
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007528 <_svfiprintf_r+0x1f4>
 8007468:	7821      	ldrb	r1, [r4, #0]
 800746a:	2203      	movs	r2, #3
 800746c:	4650      	mov	r0, sl
 800746e:	f7f8 feb7 	bl	80001e0 <memchr>
 8007472:	b138      	cbz	r0, 8007484 <_svfiprintf_r+0x150>
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	eba0 000a 	sub.w	r0, r0, sl
 800747a:	2240      	movs	r2, #64	@ 0x40
 800747c:	4082      	lsls	r2, r0
 800747e:	4313      	orrs	r3, r2
 8007480:	3401      	adds	r4, #1
 8007482:	9304      	str	r3, [sp, #16]
 8007484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007488:	4824      	ldr	r0, [pc, #144]	@ (800751c <_svfiprintf_r+0x1e8>)
 800748a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800748e:	2206      	movs	r2, #6
 8007490:	f7f8 fea6 	bl	80001e0 <memchr>
 8007494:	2800      	cmp	r0, #0
 8007496:	d036      	beq.n	8007506 <_svfiprintf_r+0x1d2>
 8007498:	4b21      	ldr	r3, [pc, #132]	@ (8007520 <_svfiprintf_r+0x1ec>)
 800749a:	bb1b      	cbnz	r3, 80074e4 <_svfiprintf_r+0x1b0>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	3307      	adds	r3, #7
 80074a0:	f023 0307 	bic.w	r3, r3, #7
 80074a4:	3308      	adds	r3, #8
 80074a6:	9303      	str	r3, [sp, #12]
 80074a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074aa:	4433      	add	r3, r6
 80074ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ae:	e76a      	b.n	8007386 <_svfiprintf_r+0x52>
 80074b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074b4:	460c      	mov	r4, r1
 80074b6:	2001      	movs	r0, #1
 80074b8:	e7a8      	b.n	800740c <_svfiprintf_r+0xd8>
 80074ba:	2300      	movs	r3, #0
 80074bc:	3401      	adds	r4, #1
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	4619      	mov	r1, r3
 80074c2:	f04f 0c0a 	mov.w	ip, #10
 80074c6:	4620      	mov	r0, r4
 80074c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074cc:	3a30      	subs	r2, #48	@ 0x30
 80074ce:	2a09      	cmp	r2, #9
 80074d0:	d903      	bls.n	80074da <_svfiprintf_r+0x1a6>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c6      	beq.n	8007464 <_svfiprintf_r+0x130>
 80074d6:	9105      	str	r1, [sp, #20]
 80074d8:	e7c4      	b.n	8007464 <_svfiprintf_r+0x130>
 80074da:	fb0c 2101 	mla	r1, ip, r1, r2
 80074de:	4604      	mov	r4, r0
 80074e0:	2301      	movs	r3, #1
 80074e2:	e7f0      	b.n	80074c6 <_svfiprintf_r+0x192>
 80074e4:	ab03      	add	r3, sp, #12
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	462a      	mov	r2, r5
 80074ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <_svfiprintf_r+0x1f0>)
 80074ec:	a904      	add	r1, sp, #16
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7fd fe94 	bl	800521c <_printf_float>
 80074f4:	1c42      	adds	r2, r0, #1
 80074f6:	4606      	mov	r6, r0
 80074f8:	d1d6      	bne.n	80074a8 <_svfiprintf_r+0x174>
 80074fa:	89ab      	ldrh	r3, [r5, #12]
 80074fc:	065b      	lsls	r3, r3, #25
 80074fe:	f53f af2d 	bmi.w	800735c <_svfiprintf_r+0x28>
 8007502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007504:	e72c      	b.n	8007360 <_svfiprintf_r+0x2c>
 8007506:	ab03      	add	r3, sp, #12
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	462a      	mov	r2, r5
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <_svfiprintf_r+0x1f0>)
 800750e:	a904      	add	r1, sp, #16
 8007510:	4638      	mov	r0, r7
 8007512:	f7fe f91b 	bl	800574c <_printf_i>
 8007516:	e7ed      	b.n	80074f4 <_svfiprintf_r+0x1c0>
 8007518:	08007f3a 	.word	0x08007f3a
 800751c:	08007f44 	.word	0x08007f44
 8007520:	0800521d 	.word	0x0800521d
 8007524:	0800727d 	.word	0x0800727d
 8007528:	08007f40 	.word	0x08007f40

0800752c <__sflush_r>:
 800752c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007534:	0716      	lsls	r6, r2, #28
 8007536:	4605      	mov	r5, r0
 8007538:	460c      	mov	r4, r1
 800753a:	d454      	bmi.n	80075e6 <__sflush_r+0xba>
 800753c:	684b      	ldr	r3, [r1, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dc02      	bgt.n	8007548 <__sflush_r+0x1c>
 8007542:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	dd48      	ble.n	80075da <__sflush_r+0xae>
 8007548:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800754a:	2e00      	cmp	r6, #0
 800754c:	d045      	beq.n	80075da <__sflush_r+0xae>
 800754e:	2300      	movs	r3, #0
 8007550:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007554:	682f      	ldr	r7, [r5, #0]
 8007556:	6a21      	ldr	r1, [r4, #32]
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	d030      	beq.n	80075be <__sflush_r+0x92>
 800755c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	0759      	lsls	r1, r3, #29
 8007562:	d505      	bpl.n	8007570 <__sflush_r+0x44>
 8007564:	6863      	ldr	r3, [r4, #4]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800756a:	b10b      	cbz	r3, 8007570 <__sflush_r+0x44>
 800756c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	2300      	movs	r3, #0
 8007572:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007574:	6a21      	ldr	r1, [r4, #32]
 8007576:	4628      	mov	r0, r5
 8007578:	47b0      	blx	r6
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	d106      	bne.n	800758e <__sflush_r+0x62>
 8007580:	6829      	ldr	r1, [r5, #0]
 8007582:	291d      	cmp	r1, #29
 8007584:	d82b      	bhi.n	80075de <__sflush_r+0xb2>
 8007586:	4a2a      	ldr	r2, [pc, #168]	@ (8007630 <__sflush_r+0x104>)
 8007588:	40ca      	lsrs	r2, r1
 800758a:	07d6      	lsls	r6, r2, #31
 800758c:	d527      	bpl.n	80075de <__sflush_r+0xb2>
 800758e:	2200      	movs	r2, #0
 8007590:	6062      	str	r2, [r4, #4]
 8007592:	04d9      	lsls	r1, r3, #19
 8007594:	6922      	ldr	r2, [r4, #16]
 8007596:	6022      	str	r2, [r4, #0]
 8007598:	d504      	bpl.n	80075a4 <__sflush_r+0x78>
 800759a:	1c42      	adds	r2, r0, #1
 800759c:	d101      	bne.n	80075a2 <__sflush_r+0x76>
 800759e:	682b      	ldr	r3, [r5, #0]
 80075a0:	b903      	cbnz	r3, 80075a4 <__sflush_r+0x78>
 80075a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80075a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075a6:	602f      	str	r7, [r5, #0]
 80075a8:	b1b9      	cbz	r1, 80075da <__sflush_r+0xae>
 80075aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d002      	beq.n	80075b8 <__sflush_r+0x8c>
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7ff f9e8 	bl	8006988 <_free_r>
 80075b8:	2300      	movs	r3, #0
 80075ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80075bc:	e00d      	b.n	80075da <__sflush_r+0xae>
 80075be:	2301      	movs	r3, #1
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b0      	blx	r6
 80075c4:	4602      	mov	r2, r0
 80075c6:	1c50      	adds	r0, r2, #1
 80075c8:	d1c9      	bne.n	800755e <__sflush_r+0x32>
 80075ca:	682b      	ldr	r3, [r5, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0c6      	beq.n	800755e <__sflush_r+0x32>
 80075d0:	2b1d      	cmp	r3, #29
 80075d2:	d001      	beq.n	80075d8 <__sflush_r+0xac>
 80075d4:	2b16      	cmp	r3, #22
 80075d6:	d11e      	bne.n	8007616 <__sflush_r+0xea>
 80075d8:	602f      	str	r7, [r5, #0]
 80075da:	2000      	movs	r0, #0
 80075dc:	e022      	b.n	8007624 <__sflush_r+0xf8>
 80075de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e2:	b21b      	sxth	r3, r3
 80075e4:	e01b      	b.n	800761e <__sflush_r+0xf2>
 80075e6:	690f      	ldr	r7, [r1, #16]
 80075e8:	2f00      	cmp	r7, #0
 80075ea:	d0f6      	beq.n	80075da <__sflush_r+0xae>
 80075ec:	0793      	lsls	r3, r2, #30
 80075ee:	680e      	ldr	r6, [r1, #0]
 80075f0:	bf08      	it	eq
 80075f2:	694b      	ldreq	r3, [r1, #20]
 80075f4:	600f      	str	r7, [r1, #0]
 80075f6:	bf18      	it	ne
 80075f8:	2300      	movne	r3, #0
 80075fa:	eba6 0807 	sub.w	r8, r6, r7
 80075fe:	608b      	str	r3, [r1, #8]
 8007600:	f1b8 0f00 	cmp.w	r8, #0
 8007604:	dde9      	ble.n	80075da <__sflush_r+0xae>
 8007606:	6a21      	ldr	r1, [r4, #32]
 8007608:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800760a:	4643      	mov	r3, r8
 800760c:	463a      	mov	r2, r7
 800760e:	4628      	mov	r0, r5
 8007610:	47b0      	blx	r6
 8007612:	2800      	cmp	r0, #0
 8007614:	dc08      	bgt.n	8007628 <__sflush_r+0xfc>
 8007616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800761e:	81a3      	strh	r3, [r4, #12]
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007628:	4407      	add	r7, r0
 800762a:	eba8 0800 	sub.w	r8, r8, r0
 800762e:	e7e7      	b.n	8007600 <__sflush_r+0xd4>
 8007630:	20400001 	.word	0x20400001

08007634 <_fflush_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	690b      	ldr	r3, [r1, #16]
 8007638:	4605      	mov	r5, r0
 800763a:	460c      	mov	r4, r1
 800763c:	b913      	cbnz	r3, 8007644 <_fflush_r+0x10>
 800763e:	2500      	movs	r5, #0
 8007640:	4628      	mov	r0, r5
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	b118      	cbz	r0, 800764e <_fflush_r+0x1a>
 8007646:	6a03      	ldr	r3, [r0, #32]
 8007648:	b90b      	cbnz	r3, 800764e <_fflush_r+0x1a>
 800764a:	f7fe fa29 	bl	8005aa0 <__sinit>
 800764e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0f3      	beq.n	800763e <_fflush_r+0xa>
 8007656:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007658:	07d0      	lsls	r0, r2, #31
 800765a:	d404      	bmi.n	8007666 <_fflush_r+0x32>
 800765c:	0599      	lsls	r1, r3, #22
 800765e:	d402      	bmi.n	8007666 <_fflush_r+0x32>
 8007660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007662:	f7fe fb36 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 8007666:	4628      	mov	r0, r5
 8007668:	4621      	mov	r1, r4
 800766a:	f7ff ff5f 	bl	800752c <__sflush_r>
 800766e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007670:	07da      	lsls	r2, r3, #31
 8007672:	4605      	mov	r5, r0
 8007674:	d4e4      	bmi.n	8007640 <_fflush_r+0xc>
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	059b      	lsls	r3, r3, #22
 800767a:	d4e1      	bmi.n	8007640 <_fflush_r+0xc>
 800767c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800767e:	f7fe fb29 	bl	8005cd4 <__retarget_lock_release_recursive>
 8007682:	e7dd      	b.n	8007640 <_fflush_r+0xc>

08007684 <memmove>:
 8007684:	4288      	cmp	r0, r1
 8007686:	b510      	push	{r4, lr}
 8007688:	eb01 0402 	add.w	r4, r1, r2
 800768c:	d902      	bls.n	8007694 <memmove+0x10>
 800768e:	4284      	cmp	r4, r0
 8007690:	4623      	mov	r3, r4
 8007692:	d807      	bhi.n	80076a4 <memmove+0x20>
 8007694:	1e43      	subs	r3, r0, #1
 8007696:	42a1      	cmp	r1, r4
 8007698:	d008      	beq.n	80076ac <memmove+0x28>
 800769a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800769e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076a2:	e7f8      	b.n	8007696 <memmove+0x12>
 80076a4:	4402      	add	r2, r0
 80076a6:	4601      	mov	r1, r0
 80076a8:	428a      	cmp	r2, r1
 80076aa:	d100      	bne.n	80076ae <memmove+0x2a>
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076b6:	e7f7      	b.n	80076a8 <memmove+0x24>

080076b8 <_sbrk_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d06      	ldr	r5, [pc, #24]	@ (80076d4 <_sbrk_r+0x1c>)
 80076bc:	2300      	movs	r3, #0
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7fa fc30 	bl	8001f28 <_sbrk>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_sbrk_r+0x1a>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_sbrk_r+0x1a>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	200004dc 	.word	0x200004dc

080076d8 <memcpy>:
 80076d8:	440a      	add	r2, r1
 80076da:	4291      	cmp	r1, r2
 80076dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076e0:	d100      	bne.n	80076e4 <memcpy+0xc>
 80076e2:	4770      	bx	lr
 80076e4:	b510      	push	{r4, lr}
 80076e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ee:	4291      	cmp	r1, r2
 80076f0:	d1f9      	bne.n	80076e6 <memcpy+0xe>
 80076f2:	bd10      	pop	{r4, pc}

080076f4 <__assert_func>:
 80076f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076f6:	4614      	mov	r4, r2
 80076f8:	461a      	mov	r2, r3
 80076fa:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <__assert_func+0x2c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4605      	mov	r5, r0
 8007700:	68d8      	ldr	r0, [r3, #12]
 8007702:	b14c      	cbz	r4, 8007718 <__assert_func+0x24>
 8007704:	4b07      	ldr	r3, [pc, #28]	@ (8007724 <__assert_func+0x30>)
 8007706:	9100      	str	r1, [sp, #0]
 8007708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800770c:	4906      	ldr	r1, [pc, #24]	@ (8007728 <__assert_func+0x34>)
 800770e:	462b      	mov	r3, r5
 8007710:	f000 f870 	bl	80077f4 <fiprintf>
 8007714:	f000 f880 	bl	8007818 <abort>
 8007718:	4b04      	ldr	r3, [pc, #16]	@ (800772c <__assert_func+0x38>)
 800771a:	461c      	mov	r4, r3
 800771c:	e7f3      	b.n	8007706 <__assert_func+0x12>
 800771e:	bf00      	nop
 8007720:	20000018 	.word	0x20000018
 8007724:	08007f55 	.word	0x08007f55
 8007728:	08007f62 	.word	0x08007f62
 800772c:	08007f90 	.word	0x08007f90

08007730 <_calloc_r>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	fba1 5402 	umull	r5, r4, r1, r2
 8007736:	b934      	cbnz	r4, 8007746 <_calloc_r+0x16>
 8007738:	4629      	mov	r1, r5
 800773a:	f7ff f999 	bl	8006a70 <_malloc_r>
 800773e:	4606      	mov	r6, r0
 8007740:	b928      	cbnz	r0, 800774e <_calloc_r+0x1e>
 8007742:	4630      	mov	r0, r6
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 8007746:	220c      	movs	r2, #12
 8007748:	6002      	str	r2, [r0, #0]
 800774a:	2600      	movs	r6, #0
 800774c:	e7f9      	b.n	8007742 <_calloc_r+0x12>
 800774e:	462a      	mov	r2, r5
 8007750:	4621      	mov	r1, r4
 8007752:	f7fe fa40 	bl	8005bd6 <memset>
 8007756:	e7f4      	b.n	8007742 <_calloc_r+0x12>

08007758 <__ascii_mbtowc>:
 8007758:	b082      	sub	sp, #8
 800775a:	b901      	cbnz	r1, 800775e <__ascii_mbtowc+0x6>
 800775c:	a901      	add	r1, sp, #4
 800775e:	b142      	cbz	r2, 8007772 <__ascii_mbtowc+0x1a>
 8007760:	b14b      	cbz	r3, 8007776 <__ascii_mbtowc+0x1e>
 8007762:	7813      	ldrb	r3, [r2, #0]
 8007764:	600b      	str	r3, [r1, #0]
 8007766:	7812      	ldrb	r2, [r2, #0]
 8007768:	1e10      	subs	r0, r2, #0
 800776a:	bf18      	it	ne
 800776c:	2001      	movne	r0, #1
 800776e:	b002      	add	sp, #8
 8007770:	4770      	bx	lr
 8007772:	4610      	mov	r0, r2
 8007774:	e7fb      	b.n	800776e <__ascii_mbtowc+0x16>
 8007776:	f06f 0001 	mvn.w	r0, #1
 800777a:	e7f8      	b.n	800776e <__ascii_mbtowc+0x16>

0800777c <_realloc_r>:
 800777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	4607      	mov	r7, r0
 8007782:	4614      	mov	r4, r2
 8007784:	460d      	mov	r5, r1
 8007786:	b921      	cbnz	r1, 8007792 <_realloc_r+0x16>
 8007788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	4611      	mov	r1, r2
 800778e:	f7ff b96f 	b.w	8006a70 <_malloc_r>
 8007792:	b92a      	cbnz	r2, 80077a0 <_realloc_r+0x24>
 8007794:	f7ff f8f8 	bl	8006988 <_free_r>
 8007798:	4625      	mov	r5, r4
 800779a:	4628      	mov	r0, r5
 800779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a0:	f000 f841 	bl	8007826 <_malloc_usable_size_r>
 80077a4:	4284      	cmp	r4, r0
 80077a6:	4606      	mov	r6, r0
 80077a8:	d802      	bhi.n	80077b0 <_realloc_r+0x34>
 80077aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077ae:	d8f4      	bhi.n	800779a <_realloc_r+0x1e>
 80077b0:	4621      	mov	r1, r4
 80077b2:	4638      	mov	r0, r7
 80077b4:	f7ff f95c 	bl	8006a70 <_malloc_r>
 80077b8:	4680      	mov	r8, r0
 80077ba:	b908      	cbnz	r0, 80077c0 <_realloc_r+0x44>
 80077bc:	4645      	mov	r5, r8
 80077be:	e7ec      	b.n	800779a <_realloc_r+0x1e>
 80077c0:	42b4      	cmp	r4, r6
 80077c2:	4622      	mov	r2, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	bf28      	it	cs
 80077c8:	4632      	movcs	r2, r6
 80077ca:	f7ff ff85 	bl	80076d8 <memcpy>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7ff f8d9 	bl	8006988 <_free_r>
 80077d6:	e7f1      	b.n	80077bc <_realloc_r+0x40>

080077d8 <__ascii_wctomb>:
 80077d8:	4603      	mov	r3, r0
 80077da:	4608      	mov	r0, r1
 80077dc:	b141      	cbz	r1, 80077f0 <__ascii_wctomb+0x18>
 80077de:	2aff      	cmp	r2, #255	@ 0xff
 80077e0:	d904      	bls.n	80077ec <__ascii_wctomb+0x14>
 80077e2:	228a      	movs	r2, #138	@ 0x8a
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ea:	4770      	bx	lr
 80077ec:	700a      	strb	r2, [r1, #0]
 80077ee:	2001      	movs	r0, #1
 80077f0:	4770      	bx	lr
	...

080077f4 <fiprintf>:
 80077f4:	b40e      	push	{r1, r2, r3}
 80077f6:	b503      	push	{r0, r1, lr}
 80077f8:	4601      	mov	r1, r0
 80077fa:	ab03      	add	r3, sp, #12
 80077fc:	4805      	ldr	r0, [pc, #20]	@ (8007814 <fiprintf+0x20>)
 80077fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007802:	6800      	ldr	r0, [r0, #0]
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	f000 f83f 	bl	8007888 <_vfiprintf_r>
 800780a:	b002      	add	sp, #8
 800780c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007810:	b003      	add	sp, #12
 8007812:	4770      	bx	lr
 8007814:	20000018 	.word	0x20000018

08007818 <abort>:
 8007818:	b508      	push	{r3, lr}
 800781a:	2006      	movs	r0, #6
 800781c:	f000 fa08 	bl	8007c30 <raise>
 8007820:	2001      	movs	r0, #1
 8007822:	f7fa fb09 	bl	8001e38 <_exit>

08007826 <_malloc_usable_size_r>:
 8007826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782a:	1f18      	subs	r0, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	bfbc      	itt	lt
 8007830:	580b      	ldrlt	r3, [r1, r0]
 8007832:	18c0      	addlt	r0, r0, r3
 8007834:	4770      	bx	lr

08007836 <__sfputc_r>:
 8007836:	6893      	ldr	r3, [r2, #8]
 8007838:	3b01      	subs	r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	b410      	push	{r4}
 800783e:	6093      	str	r3, [r2, #8]
 8007840:	da08      	bge.n	8007854 <__sfputc_r+0x1e>
 8007842:	6994      	ldr	r4, [r2, #24]
 8007844:	42a3      	cmp	r3, r4
 8007846:	db01      	blt.n	800784c <__sfputc_r+0x16>
 8007848:	290a      	cmp	r1, #10
 800784a:	d103      	bne.n	8007854 <__sfputc_r+0x1e>
 800784c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007850:	f000 b932 	b.w	8007ab8 <__swbuf_r>
 8007854:	6813      	ldr	r3, [r2, #0]
 8007856:	1c58      	adds	r0, r3, #1
 8007858:	6010      	str	r0, [r2, #0]
 800785a:	7019      	strb	r1, [r3, #0]
 800785c:	4608      	mov	r0, r1
 800785e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007862:	4770      	bx	lr

08007864 <__sfputs_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	4606      	mov	r6, r0
 8007868:	460f      	mov	r7, r1
 800786a:	4614      	mov	r4, r2
 800786c:	18d5      	adds	r5, r2, r3
 800786e:	42ac      	cmp	r4, r5
 8007870:	d101      	bne.n	8007876 <__sfputs_r+0x12>
 8007872:	2000      	movs	r0, #0
 8007874:	e007      	b.n	8007886 <__sfputs_r+0x22>
 8007876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800787a:	463a      	mov	r2, r7
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff ffda 	bl	8007836 <__sfputc_r>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	d1f3      	bne.n	800786e <__sfputs_r+0xa>
 8007886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007888 <_vfiprintf_r>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	460d      	mov	r5, r1
 800788e:	b09d      	sub	sp, #116	@ 0x74
 8007890:	4614      	mov	r4, r2
 8007892:	4698      	mov	r8, r3
 8007894:	4606      	mov	r6, r0
 8007896:	b118      	cbz	r0, 80078a0 <_vfiprintf_r+0x18>
 8007898:	6a03      	ldr	r3, [r0, #32]
 800789a:	b90b      	cbnz	r3, 80078a0 <_vfiprintf_r+0x18>
 800789c:	f7fe f900 	bl	8005aa0 <__sinit>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ae:	f7fe fa10 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	071b      	lsls	r3, r3, #28
 80078b6:	d501      	bpl.n	80078bc <_vfiprintf_r+0x34>
 80078b8:	692b      	ldr	r3, [r5, #16]
 80078ba:	b99b      	cbnz	r3, 80078e4 <_vfiprintf_r+0x5c>
 80078bc:	4629      	mov	r1, r5
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 f938 	bl	8007b34 <__swsetup_r>
 80078c4:	b170      	cbz	r0, 80078e4 <_vfiprintf_r+0x5c>
 80078c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078c8:	07dc      	lsls	r4, r3, #31
 80078ca:	d504      	bpl.n	80078d6 <_vfiprintf_r+0x4e>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	b01d      	add	sp, #116	@ 0x74
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d4f7      	bmi.n	80078cc <_vfiprintf_r+0x44>
 80078dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078de:	f7fe f9f9 	bl	8005cd4 <__retarget_lock_release_recursive>
 80078e2:	e7f3      	b.n	80078cc <_vfiprintf_r+0x44>
 80078e4:	2300      	movs	r3, #0
 80078e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e8:	2320      	movs	r3, #32
 80078ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f2:	2330      	movs	r3, #48	@ 0x30
 80078f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007aa4 <_vfiprintf_r+0x21c>
 80078f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078fc:	f04f 0901 	mov.w	r9, #1
 8007900:	4623      	mov	r3, r4
 8007902:	469a      	mov	sl, r3
 8007904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007908:	b10a      	cbz	r2, 800790e <_vfiprintf_r+0x86>
 800790a:	2a25      	cmp	r2, #37	@ 0x25
 800790c:	d1f9      	bne.n	8007902 <_vfiprintf_r+0x7a>
 800790e:	ebba 0b04 	subs.w	fp, sl, r4
 8007912:	d00b      	beq.n	800792c <_vfiprintf_r+0xa4>
 8007914:	465b      	mov	r3, fp
 8007916:	4622      	mov	r2, r4
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa2 	bl	8007864 <__sfputs_r>
 8007920:	3001      	adds	r0, #1
 8007922:	f000 80a7 	beq.w	8007a74 <_vfiprintf_r+0x1ec>
 8007926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007928:	445a      	add	r2, fp
 800792a:	9209      	str	r2, [sp, #36]	@ 0x24
 800792c:	f89a 3000 	ldrb.w	r3, [sl]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 809f 	beq.w	8007a74 <_vfiprintf_r+0x1ec>
 8007936:	2300      	movs	r3, #0
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007940:	f10a 0a01 	add.w	sl, sl, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800794c:	931a      	str	r3, [sp, #104]	@ 0x68
 800794e:	4654      	mov	r4, sl
 8007950:	2205      	movs	r2, #5
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	4853      	ldr	r0, [pc, #332]	@ (8007aa4 <_vfiprintf_r+0x21c>)
 8007958:	f7f8 fc42 	bl	80001e0 <memchr>
 800795c:	9a04      	ldr	r2, [sp, #16]
 800795e:	b9d8      	cbnz	r0, 8007998 <_vfiprintf_r+0x110>
 8007960:	06d1      	lsls	r1, r2, #27
 8007962:	bf44      	itt	mi
 8007964:	2320      	movmi	r3, #32
 8007966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800796a:	0713      	lsls	r3, r2, #28
 800796c:	bf44      	itt	mi
 800796e:	232b      	movmi	r3, #43	@ 0x2b
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b2a      	cmp	r3, #42	@ 0x2a
 800797a:	d015      	beq.n	80079a8 <_vfiprintf_r+0x120>
 800797c:	9a07      	ldr	r2, [sp, #28]
 800797e:	4654      	mov	r4, sl
 8007980:	2000      	movs	r0, #0
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	4621      	mov	r1, r4
 8007988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798c:	3b30      	subs	r3, #48	@ 0x30
 800798e:	2b09      	cmp	r3, #9
 8007990:	d94b      	bls.n	8007a2a <_vfiprintf_r+0x1a2>
 8007992:	b1b0      	cbz	r0, 80079c2 <_vfiprintf_r+0x13a>
 8007994:	9207      	str	r2, [sp, #28]
 8007996:	e014      	b.n	80079c2 <_vfiprintf_r+0x13a>
 8007998:	eba0 0308 	sub.w	r3, r0, r8
 800799c:	fa09 f303 	lsl.w	r3, r9, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	46a2      	mov	sl, r4
 80079a6:	e7d2      	b.n	800794e <_vfiprintf_r+0xc6>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d19      	adds	r1, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfbb      	ittet	lt
 80079b4:	425b      	neglt	r3, r3
 80079b6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ba:	9307      	strge	r3, [sp, #28]
 80079bc:	9307      	strlt	r3, [sp, #28]
 80079be:	bfb8      	it	lt
 80079c0:	9204      	strlt	r2, [sp, #16]
 80079c2:	7823      	ldrb	r3, [r4, #0]
 80079c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079c6:	d10a      	bne.n	80079de <_vfiprintf_r+0x156>
 80079c8:	7863      	ldrb	r3, [r4, #1]
 80079ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80079cc:	d132      	bne.n	8007a34 <_vfiprintf_r+0x1ac>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9203      	str	r2, [sp, #12]
 80079d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079da:	3402      	adds	r4, #2
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ab4 <_vfiprintf_r+0x22c>
 80079e2:	7821      	ldrb	r1, [r4, #0]
 80079e4:	2203      	movs	r2, #3
 80079e6:	4650      	mov	r0, sl
 80079e8:	f7f8 fbfa 	bl	80001e0 <memchr>
 80079ec:	b138      	cbz	r0, 80079fe <_vfiprintf_r+0x176>
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	eba0 000a 	sub.w	r0, r0, sl
 80079f4:	2240      	movs	r2, #64	@ 0x40
 80079f6:	4082      	lsls	r2, r0
 80079f8:	4313      	orrs	r3, r2
 80079fa:	3401      	adds	r4, #1
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a02:	4829      	ldr	r0, [pc, #164]	@ (8007aa8 <_vfiprintf_r+0x220>)
 8007a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a08:	2206      	movs	r2, #6
 8007a0a:	f7f8 fbe9 	bl	80001e0 <memchr>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d03f      	beq.n	8007a92 <_vfiprintf_r+0x20a>
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <_vfiprintf_r+0x224>)
 8007a14:	bb1b      	cbnz	r3, 8007a5e <_vfiprintf_r+0x1d6>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	3307      	adds	r3, #7
 8007a1a:	f023 0307 	bic.w	r3, r3, #7
 8007a1e:	3308      	adds	r3, #8
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a24:	443b      	add	r3, r7
 8007a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a28:	e76a      	b.n	8007900 <_vfiprintf_r+0x78>
 8007a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a2e:	460c      	mov	r4, r1
 8007a30:	2001      	movs	r0, #1
 8007a32:	e7a8      	b.n	8007986 <_vfiprintf_r+0xfe>
 8007a34:	2300      	movs	r3, #0
 8007a36:	3401      	adds	r4, #1
 8007a38:	9305      	str	r3, [sp, #20]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0c0a 	mov.w	ip, #10
 8007a40:	4620      	mov	r0, r4
 8007a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a46:	3a30      	subs	r2, #48	@ 0x30
 8007a48:	2a09      	cmp	r2, #9
 8007a4a:	d903      	bls.n	8007a54 <_vfiprintf_r+0x1cc>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0c6      	beq.n	80079de <_vfiprintf_r+0x156>
 8007a50:	9105      	str	r1, [sp, #20]
 8007a52:	e7c4      	b.n	80079de <_vfiprintf_r+0x156>
 8007a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a58:	4604      	mov	r4, r0
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7f0      	b.n	8007a40 <_vfiprintf_r+0x1b8>
 8007a5e:	ab03      	add	r3, sp, #12
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	462a      	mov	r2, r5
 8007a64:	4b12      	ldr	r3, [pc, #72]	@ (8007ab0 <_vfiprintf_r+0x228>)
 8007a66:	a904      	add	r1, sp, #16
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7fd fbd7 	bl	800521c <_printf_float>
 8007a6e:	4607      	mov	r7, r0
 8007a70:	1c78      	adds	r0, r7, #1
 8007a72:	d1d6      	bne.n	8007a22 <_vfiprintf_r+0x19a>
 8007a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d405      	bmi.n	8007a86 <_vfiprintf_r+0x1fe>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	059a      	lsls	r2, r3, #22
 8007a7e:	d402      	bmi.n	8007a86 <_vfiprintf_r+0x1fe>
 8007a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a82:	f7fe f927 	bl	8005cd4 <__retarget_lock_release_recursive>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	065b      	lsls	r3, r3, #25
 8007a8a:	f53f af1f 	bmi.w	80078cc <_vfiprintf_r+0x44>
 8007a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a90:	e71e      	b.n	80078d0 <_vfiprintf_r+0x48>
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	462a      	mov	r2, r5
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <_vfiprintf_r+0x228>)
 8007a9a:	a904      	add	r1, sp, #16
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7fd fe55 	bl	800574c <_printf_i>
 8007aa2:	e7e4      	b.n	8007a6e <_vfiprintf_r+0x1e6>
 8007aa4:	08007f3a 	.word	0x08007f3a
 8007aa8:	08007f44 	.word	0x08007f44
 8007aac:	0800521d 	.word	0x0800521d
 8007ab0:	08007865 	.word	0x08007865
 8007ab4:	08007f40 	.word	0x08007f40

08007ab8 <__swbuf_r>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	460e      	mov	r6, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	4605      	mov	r5, r0
 8007ac0:	b118      	cbz	r0, 8007aca <__swbuf_r+0x12>
 8007ac2:	6a03      	ldr	r3, [r0, #32]
 8007ac4:	b90b      	cbnz	r3, 8007aca <__swbuf_r+0x12>
 8007ac6:	f7fd ffeb 	bl	8005aa0 <__sinit>
 8007aca:	69a3      	ldr	r3, [r4, #24]
 8007acc:	60a3      	str	r3, [r4, #8]
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	071a      	lsls	r2, r3, #28
 8007ad2:	d501      	bpl.n	8007ad8 <__swbuf_r+0x20>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	b943      	cbnz	r3, 8007aea <__swbuf_r+0x32>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 f82a 	bl	8007b34 <__swsetup_r>
 8007ae0:	b118      	cbz	r0, 8007aea <__swbuf_r+0x32>
 8007ae2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	6922      	ldr	r2, [r4, #16]
 8007aee:	1a98      	subs	r0, r3, r2
 8007af0:	6963      	ldr	r3, [r4, #20]
 8007af2:	b2f6      	uxtb	r6, r6
 8007af4:	4283      	cmp	r3, r0
 8007af6:	4637      	mov	r7, r6
 8007af8:	dc05      	bgt.n	8007b06 <__swbuf_r+0x4e>
 8007afa:	4621      	mov	r1, r4
 8007afc:	4628      	mov	r0, r5
 8007afe:	f7ff fd99 	bl	8007634 <_fflush_r>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d1ed      	bne.n	8007ae2 <__swbuf_r+0x2a>
 8007b06:	68a3      	ldr	r3, [r4, #8]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	60a3      	str	r3, [r4, #8]
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	6022      	str	r2, [r4, #0]
 8007b12:	701e      	strb	r6, [r3, #0]
 8007b14:	6962      	ldr	r2, [r4, #20]
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d004      	beq.n	8007b26 <__swbuf_r+0x6e>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d5e1      	bpl.n	8007ae6 <__swbuf_r+0x2e>
 8007b22:	2e0a      	cmp	r6, #10
 8007b24:	d1df      	bne.n	8007ae6 <__swbuf_r+0x2e>
 8007b26:	4621      	mov	r1, r4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f7ff fd83 	bl	8007634 <_fflush_r>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0d9      	beq.n	8007ae6 <__swbuf_r+0x2e>
 8007b32:	e7d6      	b.n	8007ae2 <__swbuf_r+0x2a>

08007b34 <__swsetup_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4b29      	ldr	r3, [pc, #164]	@ (8007bdc <__swsetup_r+0xa8>)
 8007b38:	4605      	mov	r5, r0
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	b118      	cbz	r0, 8007b48 <__swsetup_r+0x14>
 8007b40:	6a03      	ldr	r3, [r0, #32]
 8007b42:	b90b      	cbnz	r3, 8007b48 <__swsetup_r+0x14>
 8007b44:	f7fd ffac 	bl	8005aa0 <__sinit>
 8007b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4c:	0719      	lsls	r1, r3, #28
 8007b4e:	d422      	bmi.n	8007b96 <__swsetup_r+0x62>
 8007b50:	06da      	lsls	r2, r3, #27
 8007b52:	d407      	bmi.n	8007b64 <__swsetup_r+0x30>
 8007b54:	2209      	movs	r2, #9
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b62:	e033      	b.n	8007bcc <__swsetup_r+0x98>
 8007b64:	0758      	lsls	r0, r3, #29
 8007b66:	d512      	bpl.n	8007b8e <__swsetup_r+0x5a>
 8007b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b6a:	b141      	cbz	r1, 8007b7e <__swsetup_r+0x4a>
 8007b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b70:	4299      	cmp	r1, r3
 8007b72:	d002      	beq.n	8007b7a <__swsetup_r+0x46>
 8007b74:	4628      	mov	r0, r5
 8007b76:	f7fe ff07 	bl	8006988 <_free_r>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	2300      	movs	r3, #0
 8007b88:	6063      	str	r3, [r4, #4]
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f043 0308 	orr.w	r3, r3, #8
 8007b94:	81a3      	strh	r3, [r4, #12]
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	b94b      	cbnz	r3, 8007bae <__swsetup_r+0x7a>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba4:	d003      	beq.n	8007bae <__swsetup_r+0x7a>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f883 	bl	8007cb4 <__smakebuf_r>
 8007bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb2:	f013 0201 	ands.w	r2, r3, #1
 8007bb6:	d00a      	beq.n	8007bce <__swsetup_r+0x9a>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	60a2      	str	r2, [r4, #8]
 8007bbc:	6962      	ldr	r2, [r4, #20]
 8007bbe:	4252      	negs	r2, r2
 8007bc0:	61a2      	str	r2, [r4, #24]
 8007bc2:	6922      	ldr	r2, [r4, #16]
 8007bc4:	b942      	cbnz	r2, 8007bd8 <__swsetup_r+0xa4>
 8007bc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bca:	d1c5      	bne.n	8007b58 <__swsetup_r+0x24>
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	0799      	lsls	r1, r3, #30
 8007bd0:	bf58      	it	pl
 8007bd2:	6962      	ldrpl	r2, [r4, #20]
 8007bd4:	60a2      	str	r2, [r4, #8]
 8007bd6:	e7f4      	b.n	8007bc2 <__swsetup_r+0x8e>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	e7f7      	b.n	8007bcc <__swsetup_r+0x98>
 8007bdc:	20000018 	.word	0x20000018

08007be0 <_raise_r>:
 8007be0:	291f      	cmp	r1, #31
 8007be2:	b538      	push	{r3, r4, r5, lr}
 8007be4:	4605      	mov	r5, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	d904      	bls.n	8007bf4 <_raise_r+0x14>
 8007bea:	2316      	movs	r3, #22
 8007bec:	6003      	str	r3, [r0, #0]
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bf6:	b112      	cbz	r2, 8007bfe <_raise_r+0x1e>
 8007bf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bfc:	b94b      	cbnz	r3, 8007c12 <_raise_r+0x32>
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 f830 	bl	8007c64 <_getpid_r>
 8007c04:	4622      	mov	r2, r4
 8007c06:	4601      	mov	r1, r0
 8007c08:	4628      	mov	r0, r5
 8007c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0e:	f000 b817 	b.w	8007c40 <_kill_r>
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d00a      	beq.n	8007c2c <_raise_r+0x4c>
 8007c16:	1c59      	adds	r1, r3, #1
 8007c18:	d103      	bne.n	8007c22 <_raise_r+0x42>
 8007c1a:	2316      	movs	r3, #22
 8007c1c:	6003      	str	r3, [r0, #0]
 8007c1e:	2001      	movs	r0, #1
 8007c20:	e7e7      	b.n	8007bf2 <_raise_r+0x12>
 8007c22:	2100      	movs	r1, #0
 8007c24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	4798      	blx	r3
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	e7e0      	b.n	8007bf2 <_raise_r+0x12>

08007c30 <raise>:
 8007c30:	4b02      	ldr	r3, [pc, #8]	@ (8007c3c <raise+0xc>)
 8007c32:	4601      	mov	r1, r0
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	f7ff bfd3 	b.w	8007be0 <_raise_r>
 8007c3a:	bf00      	nop
 8007c3c:	20000018 	.word	0x20000018

08007c40 <_kill_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	@ (8007c60 <_kill_r+0x20>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7fa f8e3 	bl	8001e18 <_kill>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_kill_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_kill_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	200004dc 	.word	0x200004dc

08007c64 <_getpid_r>:
 8007c64:	f7fa b8d0 	b.w	8001e08 <_getpid>

08007c68 <__swhatbuf_r>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c70:	2900      	cmp	r1, #0
 8007c72:	b096      	sub	sp, #88	@ 0x58
 8007c74:	4615      	mov	r5, r2
 8007c76:	461e      	mov	r6, r3
 8007c78:	da0d      	bge.n	8007c96 <__swhatbuf_r+0x2e>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c80:	f04f 0100 	mov.w	r1, #0
 8007c84:	bf14      	ite	ne
 8007c86:	2340      	movne	r3, #64	@ 0x40
 8007c88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	6031      	str	r1, [r6, #0]
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	b016      	add	sp, #88	@ 0x58
 8007c94:	bd70      	pop	{r4, r5, r6, pc}
 8007c96:	466a      	mov	r2, sp
 8007c98:	f000 f848 	bl	8007d2c <_fstat_r>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	dbec      	blt.n	8007c7a <__swhatbuf_r+0x12>
 8007ca0:	9901      	ldr	r1, [sp, #4]
 8007ca2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ca6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007caa:	4259      	negs	r1, r3
 8007cac:	4159      	adcs	r1, r3
 8007cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cb2:	e7eb      	b.n	8007c8c <__swhatbuf_r+0x24>

08007cb4 <__smakebuf_r>:
 8007cb4:	898b      	ldrh	r3, [r1, #12]
 8007cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb8:	079d      	lsls	r5, r3, #30
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	d507      	bpl.n	8007cd0 <__smakebuf_r+0x1c>
 8007cc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	6123      	str	r3, [r4, #16]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	6163      	str	r3, [r4, #20]
 8007ccc:	b003      	add	sp, #12
 8007cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd0:	ab01      	add	r3, sp, #4
 8007cd2:	466a      	mov	r2, sp
 8007cd4:	f7ff ffc8 	bl	8007c68 <__swhatbuf_r>
 8007cd8:	9f00      	ldr	r7, [sp, #0]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	4639      	mov	r1, r7
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7fe fec6 	bl	8006a70 <_malloc_r>
 8007ce4:	b948      	cbnz	r0, 8007cfa <__smakebuf_r+0x46>
 8007ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cea:	059a      	lsls	r2, r3, #22
 8007cec:	d4ee      	bmi.n	8007ccc <__smakebuf_r+0x18>
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	f043 0302 	orr.w	r3, r3, #2
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	e7e2      	b.n	8007cc0 <__smakebuf_r+0xc>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	6020      	str	r0, [r4, #0]
 8007cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	9b01      	ldr	r3, [sp, #4]
 8007d06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d0a:	b15b      	cbz	r3, 8007d24 <__smakebuf_r+0x70>
 8007d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d10:	4630      	mov	r0, r6
 8007d12:	f000 f81d 	bl	8007d50 <_isatty_r>
 8007d16:	b128      	cbz	r0, 8007d24 <__smakebuf_r+0x70>
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	f023 0303 	bic.w	r3, r3, #3
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	431d      	orrs	r5, r3
 8007d28:	81a5      	strh	r5, [r4, #12]
 8007d2a:	e7cf      	b.n	8007ccc <__smakebuf_r+0x18>

08007d2c <_fstat_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	@ (8007d4c <_fstat_r+0x20>)
 8007d30:	2300      	movs	r3, #0
 8007d32:	4604      	mov	r4, r0
 8007d34:	4608      	mov	r0, r1
 8007d36:	4611      	mov	r1, r2
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	f7fa f8cd 	bl	8001ed8 <_fstat>
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	d102      	bne.n	8007d48 <_fstat_r+0x1c>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	b103      	cbz	r3, 8007d48 <_fstat_r+0x1c>
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	bd38      	pop	{r3, r4, r5, pc}
 8007d4a:	bf00      	nop
 8007d4c:	200004dc 	.word	0x200004dc

08007d50 <_isatty_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	@ (8007d6c <_isatty_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7fa f8cc 	bl	8001ef8 <_isatty>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_isatty_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_isatty_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	200004dc 	.word	0x200004dc

08007d70 <_init>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	bf00      	nop
 8007d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d76:	bc08      	pop	{r3}
 8007d78:	469e      	mov	lr, r3
 8007d7a:	4770      	bx	lr

08007d7c <_fini>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr
