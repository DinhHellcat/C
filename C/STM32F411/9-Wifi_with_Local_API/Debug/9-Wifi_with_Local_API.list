
9-Wifi_with_Local_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007488  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08007628  08007628  00008628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af4  08007af4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007af4  08007af4  00008af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007afc  08007afc  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007afc  08007afc  00008afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b00  08007b00  00008b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007b04  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001d4  08007cd8  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007cd8  00009508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4e0  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  000156e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00017768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ae  00000000  00000000  000182a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001711d  00000000  00000000  00018b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb90  00000000  00000000  0002fc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5ee  00000000  00000000  0003e7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8de9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f50  00000000  00000000  000c8e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ccd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007610 	.word	0x08007610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007610 	.word	0x08007610

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Set_Pin_Mode>:
  * @brief  The internal function is used as gpio pin mode
  * @param  DHT		DHTxx_Drv_t
  * @param  Mode	Input or Output
  */
static void Set_Pin_Mode(DHTxx_Drv_t *DHT, PinMode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetPinMode(DHT->DataPort, DHT->DataPin, LL_GPIO_MODE_INPUT);
	}else{
		LL_GPIO_SetPinMode(DHT->DataPort, DHT->DataPin, LL_GPIO_MODE_OUTPUT);
	}
#else
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT->DataPin;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	889b      	ldrh	r3, [r3, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]
	if(Mode == Input)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <Set_Pin_Mode+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e001      	b.n	8000fb6 <Set_Pin_Mode+0x32>
	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(DHT->DataPort, &GPIO_InitStruct);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f107 020c 	add.w	r2, r7, #12
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 f96b 	bl	800229c <HAL_GPIO_Init>
#endif
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <Set_Pin_Level>:
  * @brief  The internal function is used as gpio pin level
  * @param  DHT		DHTxx_Drv_t
  * @param  Mode	Level: Set/High = 1, Reset/Low = 0
  */
static void Set_Pin_Level(DHTxx_Drv_t *DHT, uint8_t Level)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetOutputPin(DHT->DataPort, DHT->DataPin);
	}else{
		LL_GPIO_ResetOutputPin(DHT->DataPort, DHT->DataPin);
	}
#else
	HAL_GPIO_WritePin(DHT->DataPort, DHT->DataPin, Level);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f001 faf5 	bl	80025d4 <HAL_GPIO_WritePin>
#endif
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <Bus_Read>:
  * @brief  The internal function is used to read data pin
  * @retval Pin level status
  * @param  DHT		DHTxx_Drv_t
  */
static uint8_t Bus_Read(DHTxx_Drv_t *DHT)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
#ifdef LL_Driver
	return ((DHT->DataPort->IDR & DHT->DataPin) != 0x00U) ? 1 : 0;
#else
	return HAL_GPIO_ReadPin(DHT->DataPort, DHT->DataPin);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f001 facd 	bl	80025a4 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
#endif
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <DHT_Check_Response>:
  * @brief  The internal function is used to check sensor response
  * @param  DHT		DHTxx_Drv_t
  * @retval OK = 1, Failed = -1
  */
static uint8_t DHT_Check_Response(DHTxx_Drv_t *DHT)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

	/* Set Data pin as Output */
	Set_Pin_Mode(DHT, Output);
 8001020:	2101      	movs	r1, #1
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffae 	bl	8000f84 <Set_Pin_Mode>
	/* Reset Data Pin */
	Set_Pin_Level(DHT, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffcf 	bl	8000fce <Set_Pin_Level>

	/* Delay waiting
	 * DHT22 = 1.2ms(give extra delay)
	 * DHT11 = 18ms
	 */
	DwtDelay_us((DHT->Type == DHT22) ? 1500 : 18000);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <DHT_Check_Response+0x2a>
 8001038:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800103c:	e001      	b.n	8001042 <DHT_Check_Response+0x2e>
 800103e:	f244 6350 	movw	r3, #18000	@ 0x4650
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f918 	bl	8001278 <DwtDelay_us>

	/* Set Data Pin */
	Set_Pin_Level(DHT, 1);
 8001048:	2101      	movs	r1, #1
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffbf 	bl	8000fce <Set_Pin_Level>
	/* Delay 20us */
	DwtDelay_us(20);
 8001050:	2014      	movs	r0, #20
 8001052:	f000 f911 	bl	8001278 <DwtDelay_us>
	/* Set Data pin as Input */
	Set_Pin_Mode(DHT, Input);
 8001056:	2100      	movs	r1, #0
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff93 	bl	8000f84 <Set_Pin_Mode>
	/* Delay 40us */
	DwtDelay_us(40);
 800105e:	2028      	movs	r0, #40	@ 0x28
 8001060:	f000 f90a 	bl	8001278 <DwtDelay_us>

	if(!Bus_Read(DHT))
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffc4 	bl	8000ff2 <Bus_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10c      	bne.n	800108a <DHT_Check_Response+0x76>
	{
		DwtDelay_us(80);
 8001070:	2050      	movs	r0, #80	@ 0x50
 8001072:	f000 f901 	bl	8001278 <DwtDelay_us>
		/* if the pin is high, response is ok */
		Response = (Bus_Read(DHT)) ? 1 : -1;
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffbb 	bl	8000ff2 <Bus_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <DHT_Check_Response+0x72>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <DHT_Check_Response+0x74>
 8001086:	23ff      	movs	r3, #255	@ 0xff
 8001088:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait for the pin to go reset */
	while(Bus_Read(DHT)) {};
 800108a:	bf00      	nop
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffb0 	bl	8000ff2 <Bus_Read>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f9      	bne.n	800108c <DHT_Check_Response+0x78>

	return Response;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <DHT_Read>:
/**
  * @brief  The internal function is used to read sensor data and return as byte
  * @param  DHT		DHTxx_Drv_t
  */
static uint8_t DHT_Read(DHTxx_Drv_t *DHT)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	uint8_t i, j;
	for(j = 0; j < 8; j++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	73bb      	strb	r3, [r7, #14]
 80010ae:	e034      	b.n	800111a <DHT_Read+0x78>
	{
		/* Wait for pin to go high */
		while(!Bus_Read(DHT));
 80010b0:	bf00      	nop
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff9d 	bl	8000ff2 <Bus_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f9      	beq.n	80010b2 <DHT_Read+0x10>
		/* Delay 40us */
		DwtDelay_us(40);
 80010be:	2028      	movs	r0, #40	@ 0x28
 80010c0:	f000 f8da 	bl	8001278 <DwtDelay_us>

		/* If the pin go reset */
		if(!Bus_Read(DHT))
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff94 	bl	8000ff2 <Bus_Read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10e      	bne.n	80010ee <DHT_Read+0x4c>
		{
			i &= ~(1 << (7 - j));   // write 0
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4013      	ands	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e00b      	b.n	8001106 <DHT_Read+0x64>
		}else{
			i |= (1 << (7 - j));  // if the pin is high, write 1
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	f1c3 0307 	rsb	r3, r3, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	73fb      	strb	r3, [r7, #15]
		}

		/* Wait the pin go reset */
		while(Bus_Read(DHT));
 8001106:	bf00      	nop
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff72 	bl	8000ff2 <Bus_Read>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f9      	bne.n	8001108 <DHT_Read+0x66>
	for(j = 0; j < 8; j++)
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	3301      	adds	r3, #1
 8001118:	73bb      	strb	r3, [r7, #14]
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d9c7      	bls.n	80010b0 <DHT_Read+0xe>
	}
	return i;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <DHT_GetData>:
  * @brief  The function is used as get temperature and humidity and return in
  * 		data structure
  * @param  DHT		DHTxx_Drv_t
  */
void DHT_GetData(DHTxx_Drv_t *DHT)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if(DHT_Check_Response(DHT))
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff6d 	bl	8001014 <DHT_Check_Response>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d061      	beq.n	8001204 <DHT_GetData+0xd8>
	{
		DHT->Data.Rh1 = DHT_Read(DHT);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffae 	bl	80010a2 <DHT_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	721a      	strb	r2, [r3, #8]
		DHT->Data.Rh2 = DHT_Read(DHT);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa7 	bl	80010a2 <DHT_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	725a      	strb	r2, [r3, #9]
		DHT->Data.Tp1 = DHT_Read(DHT);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffa0 	bl	80010a2 <DHT_Read>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	729a      	strb	r2, [r3, #10]
		DHT->Data.Tp2 = DHT_Read(DHT);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff99 	bl	80010a2 <DHT_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	72da      	strb	r2, [r3, #11]
		DHT->Data.Sum = DHT_Read(DHT);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff92 	bl	80010a2 <DHT_Read>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	819a      	strh	r2, [r3, #12]

		/* Check if data valid */
		if(DHT->Data.Sum == (DHT->Data.Rh1 + DHT->Data.Rh2 + DHT->Data.Tp1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	899b      	ldrh	r3, [r3, #12]
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7a1b      	ldrb	r3, [r3, #8]
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7a5b      	ldrb	r3, [r3, #9]
 8001196:	4413      	add	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	7a92      	ldrb	r2, [r2, #10]
 800119c:	4413      	add	r3, r2
				+ DHT->Data.Tp2))
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	7ad2      	ldrb	r2, [r2, #11]
 80011a2:	4413      	add	r3, r2
		if(DHT->Data.Sum == (DHT->Data.Rh1 + DHT->Data.Rh2 + DHT->Data.Tp1
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d12d      	bne.n	8001204 <DHT_GetData+0xd8>
		{
			DHT->Temperature = ((DHT->Data.Tp1 << 8) | DHT->Data.Tp2) / 10.0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7a9b      	ldrb	r3, [r3, #10]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	7ad2      	ldrb	r2, [r2, #11]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9bd 	bl	8000534 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <DHT_GetData+0xe0>)
 80011c0:	f7ff fb4c 	bl	800085c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fcf4 	bl	8000bb8 <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
			DHT->Humidity = ((DHT->Data.Rh1 << 8) | DHT->Data.Rh2) / 10.0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a1b      	ldrb	r3, [r3, #8]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	7a52      	ldrb	r2, [r2, #9]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9a6 	bl	8000534 <__aeabi_i2d>
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <DHT_GetData+0xe0>)
 80011ee:	f7ff fb35 	bl	800085c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcdd 	bl	8000bb8 <__aeabi_d2f>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	615a      	str	r2, [r3, #20]
		}
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40240000 	.word	0x40240000

08001210 <DwtInit>:

/**
  * @brief  Initialize DWT
  */
void DwtInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	SysCClk 		= (SystemCoreClock / 1000000);	// Calculate in us
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <DwtInit+0x48>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <DwtInit+0x4c>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <DwtInit+0x50>)
 8001222:	6013      	str	r3, [r2, #0]
	DWT_LAR			|= DWT_LAR_UNLOCK;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <DwtInit+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	490e      	ldr	r1, [pc, #56]	@ (8001264 <DwtInit+0x54>)
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <DwtInit+0x58>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
	DEM_CR			|= (uint32_t)DEM_CR_TRCENA;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <DwtInit+0x5c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <DwtInit+0x5c>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800123a:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT		= (uint32_t)0u;					// Reset the clock counter
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <DwtInit+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	DWT_CR			|= (uint32_t)DWT_CR_CYCCNTENA;
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <DwtInit+0x64>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <DwtInit+0x64>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20000000 	.word	0x20000000
 800125c:	431bde83 	.word	0x431bde83
 8001260:	200001f0 	.word	0x200001f0
 8001264:	e0001fb0 	.word	0xe0001fb0
 8001268:	c5acce55 	.word	0xc5acce55
 800126c:	e000edfc 	.word	0xe000edfc
 8001270:	e0001004 	.word	0xe0001004
 8001274:	e0001000 	.word	0xe0001000

08001278 <DwtDelay_us>:
/**
  * @brief  Function to delay in microsecond
  * @param	usec	Period in microsecond
  */
inline void DwtDelay_us(uint32_t usec)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	start = DWT_CYCCNT;
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <DwtDelay_us+0x38>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <DwtDelay_us+0x3c>)
 8001286:	6013      	str	r3, [r2, #0]
	while(((DWT_CYCCNT - start) / SysCClk) < usec) {};
 8001288:	bf00      	nop
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <DwtDelay_us+0x38>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <DwtDelay_us+0x3c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <DwtDelay_us+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fbb2 f3f3 	udiv	r3, r2, r3
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d8f3      	bhi.n	800128a <DwtDelay_us+0x12>
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e0001004 	.word	0xe0001004
 80012b4:	200001f4 	.word	0x200001f4
 80012b8:	200001f0 	.word	0x200001f0

080012bc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	f023 030f 	bic.w	r3, r3, #15
 80012ce:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 030c 	orr.w	r3, r3, #12
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	f043 030c 	orr.w	r3, r3, #12
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	4619      	mov	r1, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	2364      	movs	r3, #100	@ 0x64
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	f001 fabd 	bl	8002890 <HAL_I2C_Master_Transmit>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af02      	add	r7, sp, #8
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	f023 030f 	bic.w	r3, r3, #15
 8001330:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	f043 030d 	orr.w	r3, r3, #13
 800133e:	b2db      	uxtb	r3, r3
 8001340:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	f043 0309 	orr.w	r3, r3, #9
 8001348:	b2db      	uxtb	r3, r3
 800134a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	f043 030d 	orr.w	r3, r3, #13
 8001352:	b2db      	uxtb	r3, r3
 8001354:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	f043 0309 	orr.w	r3, r3, #9
 800135c:	b2db      	uxtb	r3, r3
 800135e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	791b      	ldrb	r3, [r3, #4]
 8001368:	4619      	mov	r1, r3
 800136a:	f107 0208 	add.w	r2, r7, #8
 800136e:	2364      	movs	r3, #100	@ 0x64
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2304      	movs	r3, #4
 8001374:	f001 fa8c 	bl	8002890 <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff96 	bl	80012bc <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e006      	b.n	80013a4 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001396:	2120      	movs	r1, #32
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffc0 	bl	800131e <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80013a8:	ddf5      	ble.n	8001396 <lcd_clear+0x16>
    }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d824      	bhi.n	8001410 <lcd_gotoxy+0x5c>
 80013c6:	a201      	add	r2, pc, #4	@ (adr r2, 80013cc <lcd_gotoxy+0x18>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013e7 	.word	0x080013e7
 80013d4:	080013f1 	.word	0x080013f1
 80013d8:	080013fb 	.word	0x080013fb
    {
        case 0: address = 0x80 + col; break;  // First row
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	3b80      	subs	r3, #128	@ 0x80
 80013e2:	75fb      	strb	r3, [r7, #23]
 80013e4:	e00e      	b.n	8001404 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	3b40      	subs	r3, #64	@ 0x40
 80013ec:	75fb      	strb	r3, [r7, #23]
 80013ee:	e009      	b.n	8001404 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3b6c      	subs	r3, #108	@ 0x6c
 80013f6:	75fb      	strb	r3, [r7, #23]
 80013f8:	e004      	b.n	8001404 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b2c      	subs	r3, #44	@ 0x2c
 8001400:	75fb      	strb	r3, [r7, #23]
 8001402:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	4619      	mov	r1, r3
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff ff57 	bl	80012bc <lcd_send_cmd>
 800140e:	e000      	b.n	8001412 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001410:	bf00      	nop
}
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8001420:	2032      	movs	r0, #50	@ 0x32
 8001422:	f000 fd73 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001426:	2130      	movs	r1, #48	@ 0x30
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f000 fd6c 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001434:	2130      	movs	r1, #48	@ 0x30
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff40 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f000 fd65 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001442:	2130      	movs	r1, #48	@ 0x30
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff39 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f000 fd5e 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001450:	2120      	movs	r1, #32
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff32 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(10);
 8001458:	200a      	movs	r0, #10
 800145a:	f000 fd57 	bl	8001f0c <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800145e:	2128      	movs	r1, #40	@ 0x28
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2b 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f000 fd50 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800146c:	2108      	movs	r1, #8
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff24 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fd49 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800147a:	2101      	movs	r1, #1
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff1d 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(2);
 8001482:	2002      	movs	r0, #2
 8001484:	f000 fd42 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001488:	2106      	movs	r1, #6
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff16 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fd3b 	bl	8001f0c <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001496:	210c      	movs	r1, #12
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff0f 	bl	80012bc <lcd_send_cmd>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80014b0:	e007      	b.n	80014c2 <lcd_puts+0x1c>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	603a      	str	r2, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff2e 	bl	800131e <lcd_send_data>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f3      	bne.n	80014b2 <lcd_puts+0xc>
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <LCD_Init_Custom>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LCD_Init_Custom()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  lcd.hi2c = &hi2c1;
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <LCD_Init_Custom+0x1c>)
 80014da:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <LCD_Init_Custom+0x20>)
 80014dc:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <LCD_Init_Custom+0x1c>)
 80014e0:	224e      	movs	r2, #78	@ 0x4e
 80014e2:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <LCD_Init_Custom+0x1c>)
 80014e6:	f7ff ff97 	bl	8001418 <lcd_init>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000294 	.word	0x20000294
 80014f4:	200001f8 	.word	0x200001f8

080014f8 <send_at_command>:

int send_at_command(const char* command, const char* expected_response, uint32_t timeout)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    // Xóa bộ đệm cũ
    memset(response_buffer, 0, sizeof(response_buffer));
 8001504:	22c8      	movs	r2, #200	@ 0xc8
 8001506:	2100      	movs	r1, #0
 8001508:	4810      	ldr	r0, [pc, #64]	@ (800154c <send_at_command+0x54>)
 800150a:	f003 ff9c 	bl	8005446 <memset>
    response_index = 0;
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <send_at_command+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]

    // Gửi lệnh
    HAL_UART_Transmit(&huart6, (uint8_t*)command, strlen(command), 1000);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7fe feb3 	bl	8000280 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	68f9      	ldr	r1, [r7, #12]
 8001524:	480b      	ldr	r0, [pc, #44]	@ (8001554 <send_at_command+0x5c>)
 8001526:	f002 f9f5 	bl	8003914 <HAL_UART_Transmit>

    // Chờ cho hết thời gian timeout để thu thập toàn bộ phản hồi
    HAL_Delay(timeout);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fcee 	bl	8001f0c <HAL_Delay>

    // Sau khi đã chờ, kiểm tra xem chuỗi phản hồi thu thập được có chứa nội dung mong muốn không
    if (strstr(response_buffer, expected_response) != NULL)
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	4806      	ldr	r0, [pc, #24]	@ (800154c <send_at_command+0x54>)
 8001534:	f003 ff8f 	bl	8005456 <strstr>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <send_at_command+0x4a>
    {
        return 1; // Thành công
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <send_at_command+0x4c>
    }

    return 0; // Thất bại
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002b8 	.word	0x200002b8
 8001550:	20000380 	.word	0x20000380
 8001554:	2000024c 	.word	0x2000024c

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b0dc      	sub	sp, #368	@ 0x170
 800155c:	af02      	add	r7, sp, #8
  /* --- KHỞI TẠO --- */
  HAL_Init();
 800155e:	f000 fc63 	bl	8001e28 <HAL_Init>
  SystemClock_Config();
 8001562:	f000 f90f 	bl	8001784 <SystemClock_Config>
  MX_GPIO_Init();
 8001566:	f000 f9cd 	bl	8001904 <MX_GPIO_Init>
  MX_I2C1_Init();
 800156a:	f000 f973 	bl	8001854 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800156e:	f000 f99f 	bl	80018b0 <MX_USART6_UART_Init>

  /* USER CODE BEGIN 2 */
  // Khởi tạo các module
  LCD_Init_Custom();
 8001572:	f7ff ffaf 	bl	80014d4 <LCD_Init_Custom>
  DwtInit();
 8001576:	f7ff fe4b 	bl	8001210 <DwtInit>
  dht22.DataPort = DHT22_GPIO_Port;
 800157a:	4b67      	ldr	r3, [pc, #412]	@ (8001718 <main+0x1c0>)
 800157c:	4a67      	ldr	r2, [pc, #412]	@ (800171c <main+0x1c4>)
 800157e:	601a      	str	r2, [r3, #0]
  dht22.DataPin = DHT22_Pin;
 8001580:	4b65      	ldr	r3, [pc, #404]	@ (8001718 <main+0x1c0>)
 8001582:	2220      	movs	r2, #32
 8001584:	809a      	strh	r2, [r3, #4]
  dht22.Type = DHT22;
 8001586:	4b64      	ldr	r3, [pc, #400]	@ (8001718 <main+0x1c0>)
 8001588:	2201      	movs	r2, #1
 800158a:	719a      	strb	r2, [r3, #6]
  HAL_UART_Receive_IT(&huart6, &uart_rx_byte, 1);
 800158c:	2201      	movs	r2, #1
 800158e:	4964      	ldr	r1, [pc, #400]	@ (8001720 <main+0x1c8>)
 8001590:	4864      	ldr	r0, [pc, #400]	@ (8001724 <main+0x1cc>)
 8001592:	f002 fa4a 	bl	8003a2a <HAL_UART_Receive_IT>
//  HAL_Delay(500);

  /* Infinite loop */
    while (1)
    {
      switch (app_state)
 8001596:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <main+0x1d0>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d057      	beq.n	800164e <main+0xf6>
 800159e:	2b02      	cmp	r3, #2
 80015a0:	dcf9      	bgt.n	8001596 <main+0x3e>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <main+0x52>
 80015a6:	2b01      	cmp	r3, #1
          HAL_Delay(10000); // Tạm thời vẫn dùng Delay để test
          break;

        case APP_STATE_WIFI_CONNECTED:
                // Không làm gì cả
                break;
 80015a8:	e0b4      	b.n	8001714 <main+0x1bc>
          lcd_clear(&lcd);
 80015aa:	4860      	ldr	r0, [pc, #384]	@ (800172c <main+0x1d4>)
 80015ac:	f7ff fee8 	bl	8001380 <lcd_clear>
          lcd_puts(&lcd, "Connecting WiFi...");
 80015b0:	495f      	ldr	r1, [pc, #380]	@ (8001730 <main+0x1d8>)
 80015b2:	485e      	ldr	r0, [pc, #376]	@ (800172c <main+0x1d4>)
 80015b4:	f7ff ff77 	bl	80014a6 <lcd_puts>
          send_at_command("AT+RST\r\n", "ready", 5000);
 80015b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015bc:	495d      	ldr	r1, [pc, #372]	@ (8001734 <main+0x1dc>)
 80015be:	485e      	ldr	r0, [pc, #376]	@ (8001738 <main+0x1e0>)
 80015c0:	f7ff ff9a 	bl	80014f8 <send_at_command>
          HAL_Delay(2000);
 80015c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015c8:	f000 fca0 	bl	8001f0c <HAL_Delay>
          send_at_command("ATE0\r\n", "OK", 1000);
 80015cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d0:	495a      	ldr	r1, [pc, #360]	@ (800173c <main+0x1e4>)
 80015d2:	485b      	ldr	r0, [pc, #364]	@ (8001740 <main+0x1e8>)
 80015d4:	f7ff ff90 	bl	80014f8 <send_at_command>
          HAL_Delay(500);
 80015d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015dc:	f000 fc96 	bl	8001f0c <HAL_Delay>
          send_at_command("AT+WMODE=1,1\r\n", "OK", 3000);
 80015e0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80015e4:	4955      	ldr	r1, [pc, #340]	@ (800173c <main+0x1e4>)
 80015e6:	4857      	ldr	r0, [pc, #348]	@ (8001744 <main+0x1ec>)
 80015e8:	f7ff ff86 	bl	80014f8 <send_at_command>
          HAL_Delay(500);
 80015ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015f0:	f000 fc8c 	bl	8001f0c <HAL_Delay>
          sprintf(connect_command, "AT+WJAP=\"%s\",\"%s\"\r\n", WIFI_SSID, WIFI_PASSWORD);
 80015f4:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <main+0x1f0>)
 80015fa:	4a54      	ldr	r2, [pc, #336]	@ (800174c <main+0x1f4>)
 80015fc:	4954      	ldr	r1, [pc, #336]	@ (8001750 <main+0x1f8>)
 80015fe:	f003 febd 	bl	800537c <siprintf>
          if (send_at_command(connect_command, "+EVENT:WIFI_GOT_IP", 15000))
 8001602:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001606:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800160a:	4952      	ldr	r1, [pc, #328]	@ (8001754 <main+0x1fc>)
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff73 	bl	80014f8 <send_at_command>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <main+0xde>
            lcd_clear(&lcd);
 8001618:	4844      	ldr	r0, [pc, #272]	@ (800172c <main+0x1d4>)
 800161a:	f7ff feb1 	bl	8001380 <lcd_clear>
            lcd_puts(&lcd, "WiFi Connected!");
 800161e:	494e      	ldr	r1, [pc, #312]	@ (8001758 <main+0x200>)
 8001620:	4842      	ldr	r0, [pc, #264]	@ (800172c <main+0x1d4>)
 8001622:	f7ff ff40 	bl	80014a6 <lcd_puts>
            HAL_Delay(2000);
 8001626:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800162a:	f000 fc6f 	bl	8001f0c <HAL_Delay>
            app_state = APP_STATE_RUNNING; // Chuyển sang trạng thái hoạt động chính
 800162e:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <main+0x1d0>)
 8001630:	2202      	movs	r2, #2
 8001632:	701a      	strb	r2, [r3, #0]
          break;
 8001634:	e06e      	b.n	8001714 <main+0x1bc>
            lcd_clear(&lcd);
 8001636:	483d      	ldr	r0, [pc, #244]	@ (800172c <main+0x1d4>)
 8001638:	f7ff fea2 	bl	8001380 <lcd_clear>
            lcd_puts(&lcd, "WiFi Failed!");
 800163c:	4947      	ldr	r1, [pc, #284]	@ (800175c <main+0x204>)
 800163e:	483b      	ldr	r0, [pc, #236]	@ (800172c <main+0x1d4>)
 8001640:	f7ff ff31 	bl	80014a6 <lcd_puts>
            HAL_Delay(5000); // Đợi 5 giây rồi thử lại
 8001644:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001648:	f000 fc60 	bl	8001f0c <HAL_Delay>
          break;
 800164c:	e062      	b.n	8001714 <main+0x1bc>
              DHT_GetData(&dht22);
 800164e:	4832      	ldr	r0, [pc, #200]	@ (8001718 <main+0x1c0>)
 8001650:	f7ff fd6c 	bl	800112c <DHT_GetData>
              temperature = dht22.Temperature;
 8001654:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <main+0x1c0>)
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	4a41      	ldr	r2, [pc, #260]	@ (8001760 <main+0x208>)
 800165a:	6013      	str	r3, [r2, #0]
              humidity = dht22.Humidity;
 800165c:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <main+0x1c0>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4a40      	ldr	r2, [pc, #256]	@ (8001764 <main+0x20c>)
 8001662:	6013      	str	r3, [r2, #0]
              sprintf(line1_str, "Temp: %.1f C", temperature);
 8001664:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <main+0x208>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff75 	bl	8000558 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	493d      	ldr	r1, [pc, #244]	@ (8001768 <main+0x210>)
 8001674:	483d      	ldr	r0, [pc, #244]	@ (800176c <main+0x214>)
 8001676:	f003 fe81 	bl	800537c <siprintf>
              sprintf(line2_str, "Humi: %.1f %%", humidity);
 800167a:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <main+0x20c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff6a 	bl	8000558 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4939      	ldr	r1, [pc, #228]	@ (8001770 <main+0x218>)
 800168a:	483a      	ldr	r0, [pc, #232]	@ (8001774 <main+0x21c>)
 800168c:	f003 fe76 	bl	800537c <siprintf>
              lcd_clear(&lcd);
 8001690:	4826      	ldr	r0, [pc, #152]	@ (800172c <main+0x1d4>)
 8001692:	f7ff fe75 	bl	8001380 <lcd_clear>
              lcd_gotoxy(&lcd, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	4824      	ldr	r0, [pc, #144]	@ (800172c <main+0x1d4>)
 800169c:	f7ff fe8a 	bl	80013b4 <lcd_gotoxy>
              lcd_puts(&lcd, line1_str);
 80016a0:	4932      	ldr	r1, [pc, #200]	@ (800176c <main+0x214>)
 80016a2:	4822      	ldr	r0, [pc, #136]	@ (800172c <main+0x1d4>)
 80016a4:	f7ff feff 	bl	80014a6 <lcd_puts>
              lcd_gotoxy(&lcd, 0, 1);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2100      	movs	r1, #0
 80016ac:	481f      	ldr	r0, [pc, #124]	@ (800172c <main+0x1d4>)
 80016ae:	f7ff fe81 	bl	80013b4 <lcd_gotoxy>
              lcd_puts(&lcd, line2_str);
 80016b2:	4930      	ldr	r1, [pc, #192]	@ (8001774 <main+0x21c>)
 80016b4:	481d      	ldr	r0, [pc, #116]	@ (800172c <main+0x1d4>)
 80016b6:	f7ff fef6 	bl	80014a6 <lcd_puts>
              sprintf(json_payload, "{\\\"temperature\\\":%.1f,\\\"humidity\\\":%.1f}", temperature, humidity);
 80016ba:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <main+0x208>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_f2d>
 80016c4:	4604      	mov	r4, r0
 80016c6:	460d      	mov	r5, r1
 80016c8:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <main+0x20c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff43 	bl	8000558 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	1d38      	adds	r0, r7, #4
 80016d8:	e9cd 2300 	strd	r2, r3, [sp]
 80016dc:	4622      	mov	r2, r4
 80016de:	462b      	mov	r3, r5
 80016e0:	4925      	ldr	r1, [pc, #148]	@ (8001778 <main+0x220>)
 80016e2:	f003 fe4b 	bl	800537c <siprintf>
              sprintf(http_command, "AT+HTTPCLIENTLINE=1,3,\"application/json\",\"%s\",%d,/api/data,%s\r\n",
 80016e6:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016f2:	4a22      	ldr	r2, [pc, #136]	@ (800177c <main+0x224>)
 80016f4:	4922      	ldr	r1, [pc, #136]	@ (8001780 <main+0x228>)
 80016f6:	f003 fe41 	bl	800537c <siprintf>
              send_at_command(http_command, "OK", 10000);
 80016fa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80016fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001702:	490e      	ldr	r1, [pc, #56]	@ (800173c <main+0x1e4>)
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fef7 	bl	80014f8 <send_at_command>
          HAL_Delay(10000); // Tạm thời vẫn dùng Delay để test
 800170a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800170e:	f000 fbfd 	bl	8001f0c <HAL_Delay>
          break;
 8001712:	bf00      	nop
      switch (app_state)
 8001714:	e73f      	b.n	8001596 <main+0x3e>
 8001716:	bf00      	nop
 8001718:	2000029c 	.word	0x2000029c
 800171c:	40020000 	.word	0x40020000
 8001720:	200002b5 	.word	0x200002b5
 8001724:	2000024c 	.word	0x2000024c
 8001728:	200002b4 	.word	0x200002b4
 800172c:	20000294 	.word	0x20000294
 8001730:	08007628 	.word	0x08007628
 8001734:	0800763c 	.word	0x0800763c
 8001738:	08007644 	.word	0x08007644
 800173c:	08007650 	.word	0x08007650
 8001740:	08007654 	.word	0x08007654
 8001744:	0800765c 	.word	0x0800765c
 8001748:	0800766c 	.word	0x0800766c
 800174c:	08007678 	.word	0x08007678
 8001750:	08007684 	.word	0x08007684
 8001754:	08007698 	.word	0x08007698
 8001758:	080076ac 	.word	0x080076ac
 800175c:	080076bc 	.word	0x080076bc
 8001760:	20000384 	.word	0x20000384
 8001764:	20000388 	.word	0x20000388
 8001768:	080076cc 	.word	0x080076cc
 800176c:	2000038c 	.word	0x2000038c
 8001770:	080076dc 	.word	0x080076dc
 8001774:	200003a0 	.word	0x200003a0
 8001778:	080076ec 	.word	0x080076ec
 800177c:	08007718 	.word	0x08007718
 8001780:	08007728 	.word	0x08007728

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b094      	sub	sp, #80	@ 0x50
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	2230      	movs	r2, #48	@ 0x30
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fe57 	bl	8005446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	4b27      	ldr	r3, [pc, #156]	@ (800184c <SystemClock_Config+0xc8>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <SystemClock_Config+0xc8>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <SystemClock_Config+0xc8>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <SystemClock_Config+0xcc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a20      	ldr	r2, [pc, #128]	@ (8001850 <SystemClock_Config+0xcc>)
 80017ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <SystemClock_Config+0xcc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ea:	2302      	movs	r3, #2
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017f4:	2304      	movs	r3, #4
 80017f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017f8:	2364      	movs	r3, #100	@ 0x64
 80017fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001800:	2304      	movs	r3, #4
 8001802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fb9b 	bl	8002f44 <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001814:	f000 f906 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001818:	230f      	movs	r3, #15
 800181a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181c:	2302      	movs	r3, #2
 800181e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2103      	movs	r1, #3
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fdfd 	bl	8003434 <HAL_RCC_ClockConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001840:	f000 f8f0 	bl	8001a24 <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3750      	adds	r7, #80	@ 0x50
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800185a:	4a13      	ldr	r2, [pc, #76]	@ (80018a8 <MX_I2C1_Init+0x54>)
 800185c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001860:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <MX_I2C1_Init+0x58>)
 8001862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001872:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001892:	f000 feb9 	bl	8002608 <HAL_I2C_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800189c:	f000 f8c2 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200001f8 	.word	0x200001f8
 80018a8:	40005400 	.word	0x40005400
 80018ac:	000186a0 	.word	0x000186a0

080018b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <MX_USART6_UART_Init+0x50>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_USART6_UART_Init+0x4c>)
 80018e8:	f001 ffc4 	bl	8003874 <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018f2:	f000 f897 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000024c 	.word	0x2000024c
 8001900:	40011400 	.word	0x40011400

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <MX_GPIO_Init+0xa8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_GPIO_Init+0xa8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <MX_GPIO_Init+0xa8>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <MX_GPIO_Init+0xa8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 800198a:	2320      	movs	r3, #32
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <MX_GPIO_Init+0xac>)
 800199e:	f000 fc7d 	bl	800229c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a13      	ldr	r2, [pc, #76]	@ (8001a10 <HAL_UART_RxCpltCallback+0x5c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d11f      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0x52>
  {
    // Chỉ ghép ký tự vào bộ đệm, không đặt cờ báo nữa
    if (response_index < sizeof(response_buffer) - 1)
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <HAL_UART_RxCpltCallback+0x60>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2bc6      	cmp	r3, #198	@ 0xc6
 80019cc:	d813      	bhi.n	80019f6 <HAL_UART_RxCpltCallback+0x42>
    {
      // Thay thế ký tự xuống dòng bằng dấu cách để dễ hiển thị trên 1 dòng
      if(uart_rx_byte == '\r' || uart_rx_byte == '\n')
 80019ce:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_UART_RxCpltCallback+0x64>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b0d      	cmp	r3, #13
 80019d4:	d012      	beq.n	80019fc <HAL_UART_RxCpltCallback+0x48>
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <HAL_UART_RxCpltCallback+0x64>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d00e      	beq.n	80019fc <HAL_UART_RxCpltCallback+0x48>
//        	  data_received_flag = 1;
          }
      }
      else
      {
          response_buffer[response_index++] = uart_rx_byte;
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_UART_RxCpltCallback+0x60>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	b2d1      	uxtb	r1, r2
 80019e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_UART_RxCpltCallback+0x60>)
 80019e8:	7011      	strb	r1, [r2, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_UART_RxCpltCallback+0x64>)
 80019ee:	7819      	ldrb	r1, [r3, #0]
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_UART_RxCpltCallback+0x68>)
 80019f2:	5499      	strb	r1, [r3, r2]
 80019f4:	e002      	b.n	80019fc <HAL_UART_RxCpltCallback+0x48>
      }
    } else {
    	// Tràn bộ đệm, reset lại
    	response_index = 0;
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <HAL_UART_RxCpltCallback+0x60>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
    }

    // Luôn lắng nghe byte tiếp theo
    HAL_UART_Receive_IT(&huart6, &uart_rx_byte, 1);
 80019fc:	2201      	movs	r2, #1
 80019fe:	4906      	ldr	r1, [pc, #24]	@ (8001a18 <HAL_UART_RxCpltCallback+0x64>)
 8001a00:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <HAL_UART_RxCpltCallback+0x6c>)
 8001a02:	f002 f812 	bl	8003a2a <HAL_UART_Receive_IT>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40011400 	.word	0x40011400
 8001a14:	20000380 	.word	0x20000380
 8001a18:	200002b5 	.word	0x200002b5
 8001a1c:	200002b8 	.word	0x200002b8
 8001a20:	2000024c 	.word	0x2000024c

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <Error_Handler+0x8>

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_I2C_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12b      	bne.n	8001afa <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001abe:	23c0      	movs	r3, #192	@ 0xc0
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac2:	2312      	movs	r3, #18
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <HAL_I2C_MspInit+0x8c>)
 8001ada:	f000 fbdf 	bl	800229c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40005400 	.word	0x40005400
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba4 <HAL_UART_MspInit+0x94>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d133      	bne.n	8001b9a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <HAL_UART_MspInit+0x98>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba8 <HAL_UART_MspInit+0x98>)
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_UART_MspInit+0x98>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_UART_MspInit+0x98>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <HAL_UART_MspInit+0x98>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_UART_MspInit+0x98>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6a:	23c0      	movs	r3, #192	@ 0xc0
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4809      	ldr	r0, [pc, #36]	@ (8001bac <HAL_UART_MspInit+0x9c>)
 8001b86:	f000 fb89 	bl	800229c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2047      	movs	r0, #71	@ 0x47
 8001b90:	f000 fabb 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b94:	2047      	movs	r0, #71	@ 0x47
 8001b96:	f000 fad4 	bl	8002142 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	@ 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40011400 	.word	0x40011400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020800 	.word	0x40020800

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c06:	f000 f961 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <USART6_IRQHandler+0x10>)
 8001c16:	f001 ff2d 	bl	8003a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000024c 	.word	0x2000024c

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_kill>:

int _kill(int pid, int sig)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3e:	f003 fc6b 	bl	8005518 <__errno>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2216      	movs	r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_exit>:

void _exit (int status)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffe7 	bl	8001c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c66:	bf00      	nop
 8001c68:	e7fd      	b.n	8001c66 <_exit+0x12>

08001c6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e00a      	b.n	8001c92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c7c:	f3af 8000 	nop.w
 8001c80:	4601      	mov	r1, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbf0      	blt.n	8001c7c <_read+0x12>
  }

  return len;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e009      	b.n	8001cca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60ba      	str	r2, [r7, #8]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf1      	blt.n	8001cb6 <_write+0x12>
  }
  return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_close>:

int _close(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
  return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f003 fbd0 	bl	8005518 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20020000 	.word	0x20020000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	200003b4 	.word	0x200003b4
 8001dac:	20000508 	.word	0x20000508

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dd8:	f7ff ffea 	bl	8001db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f003 fb8f 	bl	8005524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff fba7 	bl	8001558 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e18:	08007b04 	.word	0x08007b04
  ldr r2, =_sbss
 8001e1c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e20:	20000508 	.word	0x20000508

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f94f 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fde8 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f967 	bl	800215e <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f92f 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	200003b8 	.word	0x200003b8

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200003b8 	.word	0x200003b8

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	@ (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	@ (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	@ (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	@ 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff29 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff3e 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff8e 	bl	8002048 <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5d 	bl	8001ff4 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff31 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff feb6 	bl	8001ef4 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d008      	beq.n	80021a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e052      	b.n	800224e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0216 	bic.w	r2, r2, #22
 80021b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <HAL_DMA_Abort+0x62>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0208 	bic.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f8:	e013      	b.n	8002222 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fa:	f7ff fe7b 	bl	8001ef4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b05      	cmp	r3, #5
 8002206:	d90c      	bls.n	8002222 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e015      	b.n	800224e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e4      	bne.n	80021fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	223f      	movs	r2, #63	@ 0x3f
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e00c      	b.n	800228e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2205      	movs	r2, #5
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e159      	b.n	800256c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8148 	bne.w	8002566 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a2 	beq.w	8002566 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b57      	ldr	r3, [pc, #348]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	4a56      	ldr	r2, [pc, #344]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002430:	6453      	str	r3, [r2, #68]	@ 0x44
 8002432:	4b54      	ldr	r3, [pc, #336]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a52      	ldr	r2, [pc, #328]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	@ (800258c <HAL_GPIO_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x202>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_GPIO_Init+0x2f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x1fe>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x1fa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a46      	ldr	r2, [pc, #280]	@ (8002598 <HAL_GPIO_Init+0x2fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x1f6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a45      	ldr	r2, [pc, #276]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x1f2>
 800248a:	2304      	movs	r3, #4
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800248e:	2307      	movs	r3, #7
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a2f      	ldr	r2, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a24      	ldr	r2, [pc, #144]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f aea2 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
 80025e0:	4613      	mov	r3, r2
 80025e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	787b      	ldrb	r3, [r7, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f0:	e003      	b.n	80025fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e12b      	b.n	8002872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fa26 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	@ 0x24
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800265a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800266a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800266c:	f001 f8da 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8002670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a81      	ldr	r2, [pc, #516]	@ (800287c <HAL_I2C_Init+0x274>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d807      	bhi.n	800268c <HAL_I2C_Init+0x84>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a80      	ldr	r2, [pc, #512]	@ (8002880 <HAL_I2C_Init+0x278>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e006      	b.n	800269a <HAL_I2C_Init+0x92>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a7d      	ldr	r2, [pc, #500]	@ (8002884 <HAL_I2C_Init+0x27c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	bf94      	ite	ls
 8002694:	2301      	movls	r3, #1
 8002696:	2300      	movhi	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0e7      	b.n	8002872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a78      	ldr	r2, [pc, #480]	@ (8002888 <HAL_I2C_Init+0x280>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0c9b      	lsrs	r3, r3, #18
 80026ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a6a      	ldr	r2, [pc, #424]	@ (800287c <HAL_I2C_Init+0x274>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d802      	bhi.n	80026dc <HAL_I2C_Init+0xd4>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3301      	adds	r3, #1
 80026da:	e009      	b.n	80026f0 <HAL_I2C_Init+0xe8>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	4a69      	ldr	r2, [pc, #420]	@ (800288c <HAL_I2C_Init+0x284>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	3301      	adds	r3, #1
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002702:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	495c      	ldr	r1, [pc, #368]	@ (800287c <HAL_I2C_Init+0x274>)
 800270c:	428b      	cmp	r3, r1
 800270e:	d819      	bhi.n	8002744 <HAL_I2C_Init+0x13c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e59      	subs	r1, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fbb1 f3f3 	udiv	r3, r1, r3
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002724:	400b      	ands	r3, r1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_I2C_Init+0x138>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e59      	subs	r1, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fbb1 f3f3 	udiv	r3, r1, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273e:	e051      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 8002740:	2304      	movs	r3, #4
 8002742:	e04f      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <HAL_I2C_Init+0x168>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1e58      	subs	r0, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e012      	b.n	8002796 <HAL_I2C_Init+0x18e>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Init+0x196>
 800279a:	2301      	movs	r3, #1
 800279c:	e022      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10e      	bne.n	80027c4 <HAL_I2C_Init+0x1bc>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1e58      	subs	r0, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	440b      	add	r3, r1
 80027b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027c2:	e00f      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e58      	subs	r0, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	0099      	lsls	r1, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	6809      	ldr	r1, [r1, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002812:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6911      	ldr	r1, [r2, #16]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	430b      	orrs	r3, r1
 8002826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	000186a0 	.word	0x000186a0
 8002880:	001e847f 	.word	0x001e847f
 8002884:	003d08ff 	.word	0x003d08ff
 8002888:	431bde83 	.word	0x431bde83
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	461a      	mov	r2, r3
 800289c:	460b      	mov	r3, r1
 800289e:	817b      	strh	r3, [r7, #10]
 80028a0:	4613      	mov	r3, r2
 80028a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff fb26 	bl	8001ef4 <HAL_GetTick>
 80028a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	f040 80e0 	bne.w	8002a78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2319      	movs	r3, #25
 80028be:	2201      	movs	r2, #1
 80028c0:	4970      	ldr	r1, [pc, #448]	@ (8002a84 <HAL_I2C_Master_Transmit+0x1f4>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f964 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0d3      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_I2C_Master_Transmit+0x50>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0cc      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1ea>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d007      	beq.n	8002906 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002914:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2221      	movs	r2, #33	@ 0x21
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2210      	movs	r2, #16
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	893a      	ldrh	r2, [r7, #8]
 8002936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a50      	ldr	r2, [pc, #320]	@ (8002a88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	6a3a      	ldr	r2, [r7, #32]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f89c 	bl	8002a8c <I2C_MasterRequestWrite>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e08d      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002974:	e066      	b.n	8002a44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	6a39      	ldr	r1, [r7, #32]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fa22 	bl	8002dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00d      	beq.n	80029a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2b04      	cmp	r3, #4
 800298c:	d107      	bne.n	800299e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <HAL_I2C_Master_Transmit+0x188>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d017      	beq.n	8002a18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	6a39      	ldr	r1, [r7, #32]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fa19 	bl	8002e54 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d107      	bne.n	8002a40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e01a      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d194      	bne.n	8002976 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	00100002 	.word	0x00100002
 8002a88:	ffff0000 	.word	0xffff0000

08002a8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d006      	beq.n	8002ab6 <I2C_MasterRequestWrite+0x2a>
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d003      	beq.n	8002ab6 <I2C_MasterRequestWrite+0x2a>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ab4:	d108      	bne.n	8002ac8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e00b      	b.n	8002ae0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	d107      	bne.n	8002ae0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ade:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f84f 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b06:	d103      	bne.n	8002b10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e035      	b.n	8002b80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b1c:	d108      	bne.n	8002b30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b1e:	897b      	ldrh	r3, [r7, #10]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	e01b      	b.n	8002b68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	11db      	asrs	r3, r3, #7
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f003 0306 	and.w	r3, r3, #6
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f063 030f 	orn	r3, r3, #15
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	490e      	ldr	r1, [pc, #56]	@ (8002b88 <I2C_MasterRequestWrite+0xfc>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f898 	bl	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e010      	b.n	8002b80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b5e:	897b      	ldrh	r3, [r7, #10]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4907      	ldr	r1, [pc, #28]	@ (8002b8c <I2C_MasterRequestWrite+0x100>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f888 	bl	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	00010008 	.word	0x00010008
 8002b8c:	00010002 	.word	0x00010002

08002b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba0:	e048      	b.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d044      	beq.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002baa:	f7ff f9a3 	bl	8001ef4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d139      	bne.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10d      	bne.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	e00c      	b.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d116      	bne.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e023      	b.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10d      	bne.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	e00c      	b.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d093      	beq.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c92:	e071      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca2:	d123      	bne.n	8002cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	f043 0204 	orr.w	r2, r3, #4
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e067      	b.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d041      	beq.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7ff f8fe 	bl	8001ef4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d136      	bne.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10c      	bne.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e00b      	b.n	8002d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e021      	b.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10c      	bne.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e00b      	b.n	8002db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4013      	ands	r3, r2
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f47f af6d 	bne.w	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f886 	bl	8002ee4 <I2C_IsAcknowledgeFailed>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e034      	b.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d028      	beq.n	8002e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7ff f883 	bl	8001ef4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11d      	bne.n	8002e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	2b80      	cmp	r3, #128	@ 0x80
 8002e0c:	d016      	beq.n	8002e3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b80      	cmp	r3, #128	@ 0x80
 8002e48:	d1c3      	bne.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e60:	e034      	b.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f83e 	bl	8002ee4 <I2C_IsAcknowledgeFailed>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e034      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d028      	beq.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7ff f83b 	bl	8001ef4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11d      	bne.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d016      	beq.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e007      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d1c3      	bne.n	8002e62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d11b      	bne.n	8002f34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e267      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d075      	beq.n	800304e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f62:	4b88      	ldr	r3, [pc, #544]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d00c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b85      	ldr	r3, [pc, #532]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d112      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b82      	ldr	r3, [pc, #520]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4b7e      	ldr	r3, [pc, #504]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d05b      	beq.n	800304c <HAL_RCC_OscConfig+0x108>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d157      	bne.n	800304c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e242      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x74>
 8002faa:	4b76      	ldr	r3, [pc, #472]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a75      	ldr	r2, [pc, #468]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x98>
 8002fc2:	4b70      	ldr	r3, [pc, #448]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b6d      	ldr	r3, [pc, #436]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6c      	ldr	r2, [pc, #432]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fdc:	4b69      	ldr	r3, [pc, #420]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a68      	ldr	r2, [pc, #416]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b66      	ldr	r3, [pc, #408]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a65      	ldr	r2, [pc, #404]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe ff7a 	bl	8001ef4 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe ff76 	bl	8001ef4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	@ 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e207      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b5b      	ldr	r3, [pc, #364]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xc0>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe ff66 	bl	8001ef4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe ff62 	bl	8001ef4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	@ 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1f3      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	4b51      	ldr	r3, [pc, #324]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0xe8>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800305a:	4b4a      	ldr	r3, [pc, #296]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b47      	ldr	r3, [pc, #284]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11c      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b44      	ldr	r3, [pc, #272]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	4b41      	ldr	r3, [pc, #260]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1c7      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4937      	ldr	r1, [pc, #220]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	e03a      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b34      	ldr	r3, [pc, #208]	@ (8003188 <HAL_RCC_OscConfig+0x244>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe ff1b 	bl	8001ef4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fe ff17 	bl	8001ef4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1a8      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b28      	ldr	r3, [pc, #160]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4925      	ldr	r1, [pc, #148]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <HAL_RCC_OscConfig+0x244>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fefa 	bl	8001ef4 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003104:	f7fe fef6 	bl	8001ef4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e187      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d036      	beq.n	800319c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b15      	ldr	r3, [pc, #84]	@ (800318c <HAL_RCC_OscConfig+0x248>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe feda 	bl	8001ef4 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fed6 	bl	8001ef4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e167      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_OscConfig+0x240>)
 8003158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x200>
 8003162:	e01b      	b.n	800319c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_OscConfig+0x248>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fe fec3 	bl	8001ef4 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	e00e      	b.n	8003190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe febf 	bl	8001ef4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d907      	bls.n	8003190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e150      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
 8003184:	40023800 	.word	0x40023800
 8003188:	42470000 	.word	0x42470000
 800318c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003190:	4b88      	ldr	r3, [pc, #544]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ea      	bne.n	8003172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8097 	beq.w	80032d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ae:	4b81      	ldr	r3, [pc, #516]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	4b7d      	ldr	r3, [pc, #500]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	4a7c      	ldr	r2, [pc, #496]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ca:	4b7a      	ldr	r3, [pc, #488]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b77      	ldr	r3, [pc, #476]	@ (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e6:	4b74      	ldr	r3, [pc, #464]	@ (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a73      	ldr	r2, [pc, #460]	@ (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fe fe7f 	bl	8001ef4 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fe fe7b 	bl	8001ef4 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e10c      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b6a      	ldr	r3, [pc, #424]	@ (80033b8 <HAL_RCC_OscConfig+0x474>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x2ea>
 8003220:	4b64      	ldr	r3, [pc, #400]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003224:	4a63      	ldr	r2, [pc, #396]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	@ 0x70
 800322c:	e01c      	b.n	8003268 <HAL_RCC_OscConfig+0x324>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x30c>
 8003236:	4b5f      	ldr	r3, [pc, #380]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323a:	4a5e      	ldr	r2, [pc, #376]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	6713      	str	r3, [r2, #112]	@ 0x70
 8003242:	4b5c      	ldr	r3, [pc, #368]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	4a5b      	ldr	r2, [pc, #364]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	@ 0x70
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0x324>
 8003250:	4b58      	ldr	r3, [pc, #352]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003254:	4a57      	ldr	r2, [pc, #348]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	@ 0x70
 800325c:	4b55      	ldr	r3, [pc, #340]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003260:	4a54      	ldr	r2, [pc, #336]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003262:	f023 0304 	bic.w	r3, r3, #4
 8003266:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7fe fe40 	bl	8001ef4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fe fe3c 	bl	8001ef4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0cb      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328e:	4b49      	ldr	r3, [pc, #292]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ee      	beq.n	8003278 <HAL_RCC_OscConfig+0x334>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe fe2a 	bl	8001ef4 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe fe26 	bl	8001ef4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0b5      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	4b3e      	ldr	r3, [pc, #248]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ee      	bne.n	80032a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b39      	ldr	r3, [pc, #228]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	4a38      	ldr	r2, [pc, #224]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80a1 	beq.w	8003424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032e2:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d05c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d141      	bne.n	800337a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b31      	ldr	r3, [pc, #196]	@ (80033bc <HAL_RCC_OscConfig+0x478>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe fdfa 	bl	8001ef4 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe fdf6 	bl	8001ef4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e087      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	4b27      	ldr	r3, [pc, #156]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	019b      	lsls	r3, r3, #6
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	3b01      	subs	r3, #1
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	491b      	ldr	r1, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	@ (80033bc <HAL_RCC_OscConfig+0x478>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe fdcf 	bl	8001ef4 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe fdcb 	bl	8001ef4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e05c      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x416>
 8003378:	e054      	b.n	8003424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fdb8 	bl	8001ef4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fdb4 	bl	8001ef4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e045      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x444>
 80033a6:	e03d      	b.n	8003424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e038      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <HAL_RCC_OscConfig+0x4ec>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d028      	beq.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d121      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d11a      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d111      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d107      	bne.n	8003420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0cc      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b68      	ldr	r3, [pc, #416]	@ (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d90c      	bls.n	8003470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b65      	ldr	r3, [pc, #404]	@ (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b63      	ldr	r3, [pc, #396]	@ (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0b8      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003488:	4b59      	ldr	r3, [pc, #356]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a58      	ldr	r2, [pc, #352]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a0:	4b53      	ldr	r3, [pc, #332]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4a52      	ldr	r2, [pc, #328]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ac:	4b50      	ldr	r3, [pc, #320]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	494d      	ldr	r1, [pc, #308]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d044      	beq.n	8003554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b47      	ldr	r3, [pc, #284]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d119      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e07f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f2:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	4b3b      	ldr	r3, [pc, #236]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e067      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003512:	4b37      	ldr	r3, [pc, #220]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 0203 	bic.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4934      	ldr	r1, [pc, #208]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003524:	f7fe fce6 	bl	8001ef4 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	e00a      	b.n	8003542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352c:	f7fe fce2 	bl	8001ef4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e04f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 020c 	and.w	r2, r3, #12
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	429a      	cmp	r2, r3
 8003552:	d1eb      	bne.n	800352c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003554:	4b25      	ldr	r3, [pc, #148]	@ (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d20c      	bcs.n	800357c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b22      	ldr	r3, [pc, #136]	@ (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b20      	ldr	r3, [pc, #128]	@ (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e032      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003588:	4b19      	ldr	r3, [pc, #100]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4916      	ldr	r1, [pc, #88]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a6:	4b12      	ldr	r3, [pc, #72]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	490e      	ldr	r1, [pc, #56]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ba:	f000 f821 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490a      	ldr	r1, [pc, #40]	@ (80035f4 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035d6:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <HAL_RCC_ClockConfig+0x1c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fc46 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023c00 	.word	0x40023c00
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08007768 	.word	0x08007768
 80035f8:	20000000 	.word	0x20000000
 80035fc:	20000004 	.word	0x20000004

08003600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003604:	b094      	sub	sp, #80	@ 0x50
 8003606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003618:	4b79      	ldr	r3, [pc, #484]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	d00d      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x40>
 8003624:	2b08      	cmp	r3, #8
 8003626:	f200 80e1 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x34>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d003      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x3a>
 8003632:	e0db      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b73      	ldr	r3, [pc, #460]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x204>)
 8003636:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003638:	e0db      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800363a:	4b73      	ldr	r3, [pc, #460]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x208>)
 800363c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800363e:	e0d8      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003640:	4b6f      	ldr	r3, [pc, #444]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003648:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800364a:	4b6d      	ldr	r3, [pc, #436]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d063      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	2200      	movs	r2, #0
 800365e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003660:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003668:	633b      	str	r3, [r7, #48]	@ 0x30
 800366a:	2300      	movs	r3, #0
 800366c:	637b      	str	r3, [r7, #52]	@ 0x34
 800366e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003672:	4622      	mov	r2, r4
 8003674:	462b      	mov	r3, r5
 8003676:	f04f 0000 	mov.w	r0, #0
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	0159      	lsls	r1, r3, #5
 8003680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003684:	0150      	lsls	r0, r2, #5
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4621      	mov	r1, r4
 800368c:	1a51      	subs	r1, r2, r1
 800368e:	6139      	str	r1, [r7, #16]
 8003690:	4629      	mov	r1, r5
 8003692:	eb63 0301 	sbc.w	r3, r3, r1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a4:	4659      	mov	r1, fp
 80036a6:	018b      	lsls	r3, r1, #6
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ae:	4651      	mov	r1, sl
 80036b0:	018a      	lsls	r2, r1, #6
 80036b2:	4651      	mov	r1, sl
 80036b4:	ebb2 0801 	subs.w	r8, r2, r1
 80036b8:	4659      	mov	r1, fp
 80036ba:	eb63 0901 	sbc.w	r9, r3, r1
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036d2:	4690      	mov	r8, r2
 80036d4:	4699      	mov	r9, r3
 80036d6:	4623      	mov	r3, r4
 80036d8:	eb18 0303 	adds.w	r3, r8, r3
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	462b      	mov	r3, r5
 80036e0:	eb49 0303 	adc.w	r3, r9, r3
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036f2:	4629      	mov	r1, r5
 80036f4:	024b      	lsls	r3, r1, #9
 80036f6:	4621      	mov	r1, r4
 80036f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036fc:	4621      	mov	r1, r4
 80036fe:	024a      	lsls	r2, r1, #9
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003706:	2200      	movs	r2, #0
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800370c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003710:	f7fd faa2 	bl	8000c58 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4613      	mov	r3, r2
 800371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800371c:	e058      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b38      	ldr	r3, [pc, #224]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	4618      	mov	r0, r3
 8003728:	4611      	mov	r1, r2
 800372a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
 8003734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003738:	4642      	mov	r2, r8
 800373a:	464b      	mov	r3, r9
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	0159      	lsls	r1, r3, #5
 8003746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374a:	0150      	lsls	r0, r2, #5
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4641      	mov	r1, r8
 8003752:	ebb2 0a01 	subs.w	sl, r2, r1
 8003756:	4649      	mov	r1, r9
 8003758:	eb63 0b01 	sbc.w	fp, r3, r1
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800376c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003770:	ebb2 040a 	subs.w	r4, r2, sl
 8003774:	eb63 050b 	sbc.w	r5, r3, fp
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	00eb      	lsls	r3, r5, #3
 8003782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003786:	00e2      	lsls	r2, r4, #3
 8003788:	4614      	mov	r4, r2
 800378a:	461d      	mov	r5, r3
 800378c:	4643      	mov	r3, r8
 800378e:	18e3      	adds	r3, r4, r3
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	464b      	mov	r3, r9
 8003794:	eb45 0303 	adc.w	r3, r5, r3
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a6:	4629      	mov	r1, r5
 80037a8:	028b      	lsls	r3, r1, #10
 80037aa:	4621      	mov	r1, r4
 80037ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b0:	4621      	mov	r1, r4
 80037b2:	028a      	lsls	r2, r1, #10
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ba:	2200      	movs	r2, #0
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	61fa      	str	r2, [r7, #28]
 80037c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c4:	f7fd fa48 	bl	8000c58 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4613      	mov	r3, r2
 80037ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3750      	adds	r7, #80	@ 0x50
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	@ (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	08007778 	.word	0x08007778

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffdc 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0b5b      	lsrs	r3, r3, #13
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	@ (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	08007778 	.word	0x08007778

08003874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e042      	b.n	800390c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe f938 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	@ 0x24
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fdd3 	bl	8004464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	@ 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	d175      	bne.n	8003a20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_UART_Transmit+0x2c>
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e06e      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2221      	movs	r2, #33	@ 0x21
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003952:	f7fe facf 	bl	8001ef4 <HAL_GetTick>
 8003956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800396c:	d108      	bne.n	8003980 <HAL_UART_Transmit+0x6c>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003988:	e02e      	b.n	80039e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	@ 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb37 	bl	8004008 <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03a      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	3302      	adds	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e007      	b.n	80039da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1cb      	bne.n	800398a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2140      	movs	r1, #64	@ 0x40
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fb03 	bl	8004008 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d112      	bne.n	8003a6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Receive_IT+0x26>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e00b      	b.n	8003a6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fb2a 	bl	80040ba <UART_Start_Receive_IT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	e000      	b.n	8003a6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b0ba      	sub	sp, #232	@ 0xe8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_UART_IRQHandler+0x66>
 8003ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fc07 	bl	80042e6 <UART_Receive_IT>
      return;
 8003ad8:	e273      	b.n	8003fc2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80de 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x22c>
 8003ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80d1 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xae>
 8003b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xd2>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xf6>
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d011      	beq.n	8003b9a <HAL_UART_IRQHandler+0x126>
 8003b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0208 	orr.w	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 820a 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x14e>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fb92 	bl	80042e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bcc:	2b40      	cmp	r3, #64	@ 0x40
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_UART_IRQHandler+0x17a>
 8003be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d04f      	beq.n	8003c8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa9d 	bl	800412e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfe:	2b40      	cmp	r3, #64	@ 0x40
 8003c00:	d141      	bne.n	8003c86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1d9      	bne.n	8003c02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d013      	beq.n	8003c7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	4a8a      	ldr	r2, [pc, #552]	@ (8003e84 <HAL_UART_IRQHandler+0x410>)
 8003c5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe faf7 	bl	8002256 <HAL_DMA_Abort_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d016      	beq.n	8003c9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e00e      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9ac 	bl	8003fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	e00a      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f9a8 	bl	8003fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	e006      	b.n	8003c9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f9a4 	bl	8003fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c9a:	e18d      	b.n	8003fb8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	bf00      	nop
    return;
 8003c9e:	e18b      	b.n	8003fb8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 8167 	bne.w	8003f78 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8160 	beq.w	8003f78 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8159 	beq.w	8003f78 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce6:	2b40      	cmp	r3, #64	@ 0x40
 8003ce8:	f040 80ce 	bne.w	8003e88 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80a9 	beq.w	8003e54 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	f080 80a2 	bcs.w	8003e54 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d22:	f000 8088 	beq.w	8003e36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1d9      	bne.n	8003d26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e1      	bne.n	8003d72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3314      	adds	r3, #20
 8003dce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e3      	bne.n	8003dae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e06:	f023 0310 	bic.w	r3, r3, #16
 8003e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e3      	bne.n	8003df4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe f9a0 	bl	8002176 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f8cf 	bl	8003ff0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003e52:	e0b3      	b.n	8003fbc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f040 80ad 	bne.w	8003fbc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6c:	f040 80a6 	bne.w	8003fbc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f8b7 	bl	8003ff0 <HAL_UARTEx_RxEventCallback>
      return;
 8003e82:	e09b      	b.n	8003fbc <HAL_UART_IRQHandler+0x548>
 8003e84:	080041f5 	.word	0x080041f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 808e 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8089 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ed2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f83d 	bl	8003ff0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f76:	e023      	b.n	8003fc0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_UART_IRQHandler+0x524>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f940 	bl	8004216 <UART_Transmit_IT>
    return;
 8003f96:	e014      	b.n	8003fc2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x54e>
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f980 	bl	80042b6 <UART_EndTransmit_IT>
    return;
 8003fb6:	e004      	b.n	8003fc2 <HAL_UART_IRQHandler+0x54e>
    return;
 8003fb8:	bf00      	nop
 8003fba:	e002      	b.n	8003fc2 <HAL_UART_IRQHandler+0x54e>
      return;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <HAL_UART_IRQHandler+0x54e>
      return;
 8003fc0:	bf00      	nop
  }
}
 8003fc2:	37e8      	adds	r7, #232	@ 0xe8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004018:	e03b      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d037      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fd ff67 	bl	8001ef4 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <UART_WaitOnFlagUntilTimeout+0x30>
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e03a      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d023      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x8a>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b80      	cmp	r3, #128	@ 0x80
 800404e:	d020      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d01d      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d116      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f857 	bl	800412e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2208      	movs	r2, #8
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e00f      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d0b4      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	4613      	mov	r3, r2
 80040c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2222      	movs	r2, #34	@ 0x22
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0220 	orr.w	r2, r2, #32
 800411e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412e:	b480      	push	{r7}
 8004130:	b095      	sub	sp, #84	@ 0x54
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004156:	643a      	str	r2, [r7, #64]	@ 0x40
 8004158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800415c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	61fb      	str	r3, [r7, #28]
   return(result);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800418a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0310 	bic.w	r3, r3, #16
 80041bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c6:	61ba      	str	r2, [r7, #24]
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	613b      	str	r3, [r7, #16]
   return(result);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041e8:	bf00      	nop
 80041ea:	3754      	adds	r7, #84	@ 0x54
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff fee7 	bl	8003fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b21      	cmp	r3, #33	@ 0x21
 8004228:	d13e      	bne.n	80042a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004232:	d114      	bne.n	800425e <UART_Transmit_IT+0x48>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d110      	bne.n	800425e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004250:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]
 800425c:	e008      	b.n	8004270 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6211      	str	r1, [r2, #32]
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4619      	mov	r1, r3
 800427e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10f      	bne.n	80042a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004292:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fe76 	bl	8003fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b08c      	sub	sp, #48	@ 0x30
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b22      	cmp	r3, #34	@ 0x22
 8004300:	f040 80aa 	bne.w	8004458 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430c:	d115      	bne.n	800433a <UART_Receive_IT+0x54>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d111      	bne.n	800433a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004328:	b29a      	uxth	r2, r3
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	@ 0x28
 8004338:	e024      	b.n	8004384 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004348:	d007      	beq.n	800435a <UART_Receive_IT+0x74>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <UART_Receive_IT+0x82>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e008      	b.n	800437a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004374:	b2da      	uxtb	r2, r3
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29b      	uxth	r3, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4619      	mov	r1, r3
 8004392:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004394:	2b00      	cmp	r3, #0
 8004396:	d15d      	bne.n	8004454 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0220 	bic.w	r2, r2, #32
 80043a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d135      	bne.n	800444a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	613b      	str	r3, [r7, #16]
   return(result);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f023 0310 	bic.w	r3, r3, #16
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004404:	623a      	str	r2, [r7, #32]
 8004406:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	69f9      	ldr	r1, [r7, #28]
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	61bb      	str	r3, [r7, #24]
   return(result);
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e5      	bne.n	80043e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d10a      	bne.n	800443c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fdd4 	bl	8003ff0 <HAL_UARTEx_RxEventCallback>
 8004448:	e002      	b.n	8004450 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd fab2 	bl	80019b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e002      	b.n	800445a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3730      	adds	r7, #48	@ 0x30
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004468:	b0c0      	sub	sp, #256	@ 0x100
 800446a:	af00      	add	r7, sp, #0
 800446c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	68d9      	ldr	r1, [r3, #12]
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	ea40 0301 	orr.w	r3, r0, r1
 800448c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	431a      	orrs	r2, r3
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044bc:	f021 010c 	bic.w	r1, r1, #12
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044ca:	430b      	orrs	r3, r1
 80044cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	6999      	ldr	r1, [r3, #24]
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	ea40 0301 	orr.w	r3, r0, r1
 80044ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004730 <UART_SetConfig+0x2cc>)
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d005      	beq.n	8004504 <UART_SetConfig+0xa0>
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004734 <UART_SetConfig+0x2d0>)
 8004500:	429a      	cmp	r2, r3
 8004502:	d104      	bne.n	800450e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004504:	f7ff f9a2 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8004508:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800450c:	e003      	b.n	8004516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800450e:	f7ff f989 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8004512:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004520:	f040 810c 	bne.w	800473c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004528:	2200      	movs	r2, #0
 800452a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800452e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004536:	4622      	mov	r2, r4
 8004538:	462b      	mov	r3, r5
 800453a:	1891      	adds	r1, r2, r2
 800453c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800453e:	415b      	adcs	r3, r3
 8004540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004546:	4621      	mov	r1, r4
 8004548:	eb12 0801 	adds.w	r8, r2, r1
 800454c:	4629      	mov	r1, r5
 800454e:	eb43 0901 	adc.w	r9, r3, r1
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800455e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004566:	4690      	mov	r8, r2
 8004568:	4699      	mov	r9, r3
 800456a:	4623      	mov	r3, r4
 800456c:	eb18 0303 	adds.w	r3, r8, r3
 8004570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004574:	462b      	mov	r3, r5
 8004576:	eb49 0303 	adc.w	r3, r9, r3
 800457a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800458a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800458e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004592:	460b      	mov	r3, r1
 8004594:	18db      	adds	r3, r3, r3
 8004596:	653b      	str	r3, [r7, #80]	@ 0x50
 8004598:	4613      	mov	r3, r2
 800459a:	eb42 0303 	adc.w	r3, r2, r3
 800459e:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045a8:	f7fc fb56 	bl	8000c58 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4b61      	ldr	r3, [pc, #388]	@ (8004738 <UART_SetConfig+0x2d4>)
 80045b2:	fba3 2302 	umull	r2, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	011c      	lsls	r4, r3, #4
 80045ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045cc:	4642      	mov	r2, r8
 80045ce:	464b      	mov	r3, r9
 80045d0:	1891      	adds	r1, r2, r2
 80045d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045d4:	415b      	adcs	r3, r3
 80045d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045dc:	4641      	mov	r1, r8
 80045de:	eb12 0a01 	adds.w	sl, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb43 0b01 	adc.w	fp, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045fc:	4692      	mov	sl, r2
 80045fe:	469b      	mov	fp, r3
 8004600:	4643      	mov	r3, r8
 8004602:	eb1a 0303 	adds.w	r3, sl, r3
 8004606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800460a:	464b      	mov	r3, r9
 800460c:	eb4b 0303 	adc.w	r3, fp, r3
 8004610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004620:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004628:	460b      	mov	r3, r1
 800462a:	18db      	adds	r3, r3, r3
 800462c:	643b      	str	r3, [r7, #64]	@ 0x40
 800462e:	4613      	mov	r3, r2
 8004630:	eb42 0303 	adc.w	r3, r2, r3
 8004634:	647b      	str	r3, [r7, #68]	@ 0x44
 8004636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800463a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800463e:	f7fc fb0b 	bl	8000c58 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4611      	mov	r1, r2
 8004648:	4b3b      	ldr	r3, [pc, #236]	@ (8004738 <UART_SetConfig+0x2d4>)
 800464a:	fba3 2301 	umull	r2, r3, r3, r1
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2264      	movs	r2, #100	@ 0x64
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	1acb      	subs	r3, r1, r3
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800465e:	4b36      	ldr	r3, [pc, #216]	@ (8004738 <UART_SetConfig+0x2d4>)
 8004660:	fba3 2302 	umull	r2, r3, r3, r2
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800466c:	441c      	add	r4, r3
 800466e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004678:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800467c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	1891      	adds	r1, r2, r2
 8004686:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004688:	415b      	adcs	r3, r3
 800468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800468c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004690:	4641      	mov	r1, r8
 8004692:	1851      	adds	r1, r2, r1
 8004694:	6339      	str	r1, [r7, #48]	@ 0x30
 8004696:	4649      	mov	r1, r9
 8004698:	414b      	adcs	r3, r1
 800469a:	637b      	str	r3, [r7, #52]	@ 0x34
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046a8:	4659      	mov	r1, fp
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b2:	4651      	mov	r1, sl
 80046b4:	00ca      	lsls	r2, r1, #3
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	4642      	mov	r2, r8
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046c4:	464b      	mov	r3, r9
 80046c6:	460a      	mov	r2, r1
 80046c8:	eb42 0303 	adc.w	r3, r2, r3
 80046cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046e4:	460b      	mov	r3, r1
 80046e6:	18db      	adds	r3, r3, r3
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ea:	4613      	mov	r3, r2
 80046ec:	eb42 0303 	adc.w	r3, r2, r3
 80046f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046fa:	f7fc faad 	bl	8000c58 <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <UART_SetConfig+0x2d4>)
 8004704:	fba3 1302 	umull	r1, r3, r3, r2
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	2164      	movs	r1, #100	@ 0x64
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	3332      	adds	r3, #50	@ 0x32
 8004716:	4a08      	ldr	r2, [pc, #32]	@ (8004738 <UART_SetConfig+0x2d4>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f003 0207 	and.w	r2, r3, #7
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4422      	add	r2, r4
 800472a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800472c:	e106      	b.n	800493c <UART_SetConfig+0x4d8>
 800472e:	bf00      	nop
 8004730:	40011000 	.word	0x40011000
 8004734:	40011400 	.word	0x40011400
 8004738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800473c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004740:	2200      	movs	r2, #0
 8004742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800474a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800474e:	4642      	mov	r2, r8
 8004750:	464b      	mov	r3, r9
 8004752:	1891      	adds	r1, r2, r2
 8004754:	6239      	str	r1, [r7, #32]
 8004756:	415b      	adcs	r3, r3
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
 800475a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800475e:	4641      	mov	r1, r8
 8004760:	1854      	adds	r4, r2, r1
 8004762:	4649      	mov	r1, r9
 8004764:	eb43 0501 	adc.w	r5, r3, r1
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	00eb      	lsls	r3, r5, #3
 8004772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004776:	00e2      	lsls	r2, r4, #3
 8004778:	4614      	mov	r4, r2
 800477a:	461d      	mov	r5, r3
 800477c:	4643      	mov	r3, r8
 800477e:	18e3      	adds	r3, r4, r3
 8004780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004784:	464b      	mov	r3, r9
 8004786:	eb45 0303 	adc.w	r3, r5, r3
 800478a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800479a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047aa:	4629      	mov	r1, r5
 80047ac:	008b      	lsls	r3, r1, #2
 80047ae:	4621      	mov	r1, r4
 80047b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b4:	4621      	mov	r1, r4
 80047b6:	008a      	lsls	r2, r1, #2
 80047b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047bc:	f7fc fa4c 	bl	8000c58 <__aeabi_uldivmod>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4b60      	ldr	r3, [pc, #384]	@ (8004948 <UART_SetConfig+0x4e4>)
 80047c6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	011c      	lsls	r4, r3, #4
 80047ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	1891      	adds	r1, r2, r2
 80047e6:	61b9      	str	r1, [r7, #24]
 80047e8:	415b      	adcs	r3, r3
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f0:	4641      	mov	r1, r8
 80047f2:	1851      	adds	r1, r2, r1
 80047f4:	6139      	str	r1, [r7, #16]
 80047f6:	4649      	mov	r1, r9
 80047f8:	414b      	adcs	r3, r1
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004808:	4659      	mov	r1, fp
 800480a:	00cb      	lsls	r3, r1, #3
 800480c:	4651      	mov	r1, sl
 800480e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004812:	4651      	mov	r1, sl
 8004814:	00ca      	lsls	r2, r1, #3
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	4603      	mov	r3, r0
 800481c:	4642      	mov	r2, r8
 800481e:	189b      	adds	r3, r3, r2
 8004820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004824:	464b      	mov	r3, r9
 8004826:	460a      	mov	r2, r1
 8004828:	eb42 0303 	adc.w	r3, r2, r3
 800482c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	67bb      	str	r3, [r7, #120]	@ 0x78
 800483a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004848:	4649      	mov	r1, r9
 800484a:	008b      	lsls	r3, r1, #2
 800484c:	4641      	mov	r1, r8
 800484e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004852:	4641      	mov	r1, r8
 8004854:	008a      	lsls	r2, r1, #2
 8004856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800485a:	f7fc f9fd 	bl	8000c58 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4611      	mov	r1, r2
 8004864:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <UART_SetConfig+0x4e4>)
 8004866:	fba3 2301 	umull	r2, r3, r3, r1
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2264      	movs	r2, #100	@ 0x64
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	1acb      	subs	r3, r1, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	3332      	adds	r3, #50	@ 0x32
 8004878:	4a33      	ldr	r2, [pc, #204]	@ (8004948 <UART_SetConfig+0x4e4>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004884:	441c      	add	r4, r3
 8004886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488a:	2200      	movs	r2, #0
 800488c:	673b      	str	r3, [r7, #112]	@ 0x70
 800488e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004890:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	1891      	adds	r1, r2, r2
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	415b      	adcs	r3, r3
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a4:	4641      	mov	r1, r8
 80048a6:	1851      	adds	r1, r2, r1
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	4649      	mov	r1, r9
 80048ac:	414b      	adcs	r3, r1
 80048ae:	607b      	str	r3, [r7, #4]
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048bc:	4659      	mov	r1, fp
 80048be:	00cb      	lsls	r3, r1, #3
 80048c0:	4651      	mov	r1, sl
 80048c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c6:	4651      	mov	r1, sl
 80048c8:	00ca      	lsls	r2, r1, #3
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	4642      	mov	r2, r8
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048d6:	464b      	mov	r3, r9
 80048d8:	460a      	mov	r2, r1
 80048da:	eb42 0303 	adc.w	r3, r2, r3
 80048de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048f8:	4649      	mov	r1, r9
 80048fa:	008b      	lsls	r3, r1, #2
 80048fc:	4641      	mov	r1, r8
 80048fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004902:	4641      	mov	r1, r8
 8004904:	008a      	lsls	r2, r1, #2
 8004906:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800490a:	f7fc f9a5 	bl	8000c58 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <UART_SetConfig+0x4e4>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	2164      	movs	r1, #100	@ 0x64
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	3332      	adds	r3, #50	@ 0x32
 8004926:	4a08      	ldr	r2, [pc, #32]	@ (8004948 <UART_SetConfig+0x4e4>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 020f 	and.w	r2, r3, #15
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4422      	add	r2, r4
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004942:	46bd      	mov	sp, r7
 8004944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004948:	51eb851f 	.word	0x51eb851f

0800494c <__cvt>:
 800494c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	ec57 6b10 	vmov	r6, r7, d0
 8004954:	2f00      	cmp	r7, #0
 8004956:	460c      	mov	r4, r1
 8004958:	4619      	mov	r1, r3
 800495a:	463b      	mov	r3, r7
 800495c:	bfbb      	ittet	lt
 800495e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004962:	461f      	movlt	r7, r3
 8004964:	2300      	movge	r3, #0
 8004966:	232d      	movlt	r3, #45	@ 0x2d
 8004968:	700b      	strb	r3, [r1, #0]
 800496a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800496c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004970:	4691      	mov	r9, r2
 8004972:	f023 0820 	bic.w	r8, r3, #32
 8004976:	bfbc      	itt	lt
 8004978:	4632      	movlt	r2, r6
 800497a:	4616      	movlt	r6, r2
 800497c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004980:	d005      	beq.n	800498e <__cvt+0x42>
 8004982:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004986:	d100      	bne.n	800498a <__cvt+0x3e>
 8004988:	3401      	adds	r4, #1
 800498a:	2102      	movs	r1, #2
 800498c:	e000      	b.n	8004990 <__cvt+0x44>
 800498e:	2103      	movs	r1, #3
 8004990:	ab03      	add	r3, sp, #12
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	ab02      	add	r3, sp, #8
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	ec47 6b10 	vmov	d0, r6, r7
 800499c:	4653      	mov	r3, sl
 800499e:	4622      	mov	r2, r4
 80049a0:	f000 fe72 	bl	8005688 <_dtoa_r>
 80049a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049a8:	4605      	mov	r5, r0
 80049aa:	d119      	bne.n	80049e0 <__cvt+0x94>
 80049ac:	f019 0f01 	tst.w	r9, #1
 80049b0:	d00e      	beq.n	80049d0 <__cvt+0x84>
 80049b2:	eb00 0904 	add.w	r9, r0, r4
 80049b6:	2200      	movs	r2, #0
 80049b8:	2300      	movs	r3, #0
 80049ba:	4630      	mov	r0, r6
 80049bc:	4639      	mov	r1, r7
 80049be:	f7fc f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80049c2:	b108      	cbz	r0, 80049c8 <__cvt+0x7c>
 80049c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80049c8:	2230      	movs	r2, #48	@ 0x30
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	454b      	cmp	r3, r9
 80049ce:	d31e      	bcc.n	8004a0e <__cvt+0xc2>
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049d4:	1b5b      	subs	r3, r3, r5
 80049d6:	4628      	mov	r0, r5
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	b004      	add	sp, #16
 80049dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049e4:	eb00 0904 	add.w	r9, r0, r4
 80049e8:	d1e5      	bne.n	80049b6 <__cvt+0x6a>
 80049ea:	7803      	ldrb	r3, [r0, #0]
 80049ec:	2b30      	cmp	r3, #48	@ 0x30
 80049ee:	d10a      	bne.n	8004a06 <__cvt+0xba>
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	4630      	mov	r0, r6
 80049f6:	4639      	mov	r1, r7
 80049f8:	f7fc f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 80049fc:	b918      	cbnz	r0, 8004a06 <__cvt+0xba>
 80049fe:	f1c4 0401 	rsb	r4, r4, #1
 8004a02:	f8ca 4000 	str.w	r4, [sl]
 8004a06:	f8da 3000 	ldr.w	r3, [sl]
 8004a0a:	4499      	add	r9, r3
 8004a0c:	e7d3      	b.n	80049b6 <__cvt+0x6a>
 8004a0e:	1c59      	adds	r1, r3, #1
 8004a10:	9103      	str	r1, [sp, #12]
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e7d9      	b.n	80049ca <__cvt+0x7e>

08004a16 <__exponent>:
 8004a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	bfba      	itte	lt
 8004a1c:	4249      	neglt	r1, r1
 8004a1e:	232d      	movlt	r3, #45	@ 0x2d
 8004a20:	232b      	movge	r3, #43	@ 0x2b
 8004a22:	2909      	cmp	r1, #9
 8004a24:	7002      	strb	r2, [r0, #0]
 8004a26:	7043      	strb	r3, [r0, #1]
 8004a28:	dd29      	ble.n	8004a7e <__exponent+0x68>
 8004a2a:	f10d 0307 	add.w	r3, sp, #7
 8004a2e:	461d      	mov	r5, r3
 8004a30:	270a      	movs	r7, #10
 8004a32:	461a      	mov	r2, r3
 8004a34:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a38:	fb07 1416 	mls	r4, r7, r6, r1
 8004a3c:	3430      	adds	r4, #48	@ 0x30
 8004a3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a42:	460c      	mov	r4, r1
 8004a44:	2c63      	cmp	r4, #99	@ 0x63
 8004a46:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	dcf1      	bgt.n	8004a32 <__exponent+0x1c>
 8004a4e:	3130      	adds	r1, #48	@ 0x30
 8004a50:	1e94      	subs	r4, r2, #2
 8004a52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a56:	1c41      	adds	r1, r0, #1
 8004a58:	4623      	mov	r3, r4
 8004a5a:	42ab      	cmp	r3, r5
 8004a5c:	d30a      	bcc.n	8004a74 <__exponent+0x5e>
 8004a5e:	f10d 0309 	add.w	r3, sp, #9
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	42ac      	cmp	r4, r5
 8004a66:	bf88      	it	hi
 8004a68:	2300      	movhi	r3, #0
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	1a18      	subs	r0, r3, r0
 8004a70:	b003      	add	sp, #12
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a7c:	e7ed      	b.n	8004a5a <__exponent+0x44>
 8004a7e:	2330      	movs	r3, #48	@ 0x30
 8004a80:	3130      	adds	r1, #48	@ 0x30
 8004a82:	7083      	strb	r3, [r0, #2]
 8004a84:	70c1      	strb	r1, [r0, #3]
 8004a86:	1d03      	adds	r3, r0, #4
 8004a88:	e7f1      	b.n	8004a6e <__exponent+0x58>
	...

08004a8c <_printf_float>:
 8004a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a90:	b08d      	sub	sp, #52	@ 0x34
 8004a92:	460c      	mov	r4, r1
 8004a94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a98:	4616      	mov	r6, r2
 8004a9a:	461f      	mov	r7, r3
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	f000 fcf1 	bl	8005484 <_localeconv_r>
 8004aa2:	6803      	ldr	r3, [r0, #0]
 8004aa4:	9304      	str	r3, [sp, #16]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fbea 	bl	8000280 <strlen>
 8004aac:	2300      	movs	r3, #0
 8004aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab4:	9005      	str	r0, [sp, #20]
 8004ab6:	3307      	adds	r3, #7
 8004ab8:	f023 0307 	bic.w	r3, r3, #7
 8004abc:	f103 0208 	add.w	r2, r3, #8
 8004ac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ac4:	f8d4 b000 	ldr.w	fp, [r4]
 8004ac8:	f8c8 2000 	str.w	r2, [r8]
 8004acc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ad0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ad4:	9307      	str	r3, [sp, #28]
 8004ad6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ada:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ae2:	4b9c      	ldr	r3, [pc, #624]	@ (8004d54 <_printf_float+0x2c8>)
 8004ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae8:	f7fc f828 	bl	8000b3c <__aeabi_dcmpun>
 8004aec:	bb70      	cbnz	r0, 8004b4c <_printf_float+0xc0>
 8004aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004af2:	4b98      	ldr	r3, [pc, #608]	@ (8004d54 <_printf_float+0x2c8>)
 8004af4:	f04f 32ff 	mov.w	r2, #4294967295
 8004af8:	f7fc f802 	bl	8000b00 <__aeabi_dcmple>
 8004afc:	bb30      	cbnz	r0, 8004b4c <_printf_float+0xc0>
 8004afe:	2200      	movs	r2, #0
 8004b00:	2300      	movs	r3, #0
 8004b02:	4640      	mov	r0, r8
 8004b04:	4649      	mov	r1, r9
 8004b06:	f7fb fff1 	bl	8000aec <__aeabi_dcmplt>
 8004b0a:	b110      	cbz	r0, 8004b12 <_printf_float+0x86>
 8004b0c:	232d      	movs	r3, #45	@ 0x2d
 8004b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b12:	4a91      	ldr	r2, [pc, #580]	@ (8004d58 <_printf_float+0x2cc>)
 8004b14:	4b91      	ldr	r3, [pc, #580]	@ (8004d5c <_printf_float+0x2d0>)
 8004b16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b1a:	bf8c      	ite	hi
 8004b1c:	4690      	movhi	r8, r2
 8004b1e:	4698      	movls	r8, r3
 8004b20:	2303      	movs	r3, #3
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	f02b 0304 	bic.w	r3, fp, #4
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	f04f 0900 	mov.w	r9, #0
 8004b2e:	9700      	str	r7, [sp, #0]
 8004b30:	4633      	mov	r3, r6
 8004b32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b34:	4621      	mov	r1, r4
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 f9d2 	bl	8004ee0 <_printf_common>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	f040 808d 	bne.w	8004c5c <_printf_float+0x1d0>
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295
 8004b46:	b00d      	add	sp, #52	@ 0x34
 8004b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	4649      	mov	r1, r9
 8004b54:	f7fb fff2 	bl	8000b3c <__aeabi_dcmpun>
 8004b58:	b140      	cbz	r0, 8004b6c <_printf_float+0xe0>
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bfbc      	itt	lt
 8004b60:	232d      	movlt	r3, #45	@ 0x2d
 8004b62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b66:	4a7e      	ldr	r2, [pc, #504]	@ (8004d60 <_printf_float+0x2d4>)
 8004b68:	4b7e      	ldr	r3, [pc, #504]	@ (8004d64 <_printf_float+0x2d8>)
 8004b6a:	e7d4      	b.n	8004b16 <_printf_float+0x8a>
 8004b6c:	6863      	ldr	r3, [r4, #4]
 8004b6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004b72:	9206      	str	r2, [sp, #24]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	d13b      	bne.n	8004bf0 <_printf_float+0x164>
 8004b78:	2306      	movs	r3, #6
 8004b7a:	6063      	str	r3, [r4, #4]
 8004b7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b80:	2300      	movs	r3, #0
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	9303      	str	r3, [sp, #12]
 8004b86:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b8c:	ab09      	add	r3, sp, #36	@ 0x24
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	6861      	ldr	r1, [r4, #4]
 8004b92:	ec49 8b10 	vmov	d0, r8, r9
 8004b96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f7ff fed6 	bl	800494c <__cvt>
 8004ba0:	9b06      	ldr	r3, [sp, #24]
 8004ba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ba4:	2b47      	cmp	r3, #71	@ 0x47
 8004ba6:	4680      	mov	r8, r0
 8004ba8:	d129      	bne.n	8004bfe <_printf_float+0x172>
 8004baa:	1cc8      	adds	r0, r1, #3
 8004bac:	db02      	blt.n	8004bb4 <_printf_float+0x128>
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	dd41      	ble.n	8004c38 <_printf_float+0x1ac>
 8004bb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bb8:	fa5f fa8a 	uxtb.w	sl, sl
 8004bbc:	3901      	subs	r1, #1
 8004bbe:	4652      	mov	r2, sl
 8004bc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004bc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bc6:	f7ff ff26 	bl	8004a16 <__exponent>
 8004bca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bcc:	1813      	adds	r3, r2, r0
 8004bce:	2a01      	cmp	r2, #1
 8004bd0:	4681      	mov	r9, r0
 8004bd2:	6123      	str	r3, [r4, #16]
 8004bd4:	dc02      	bgt.n	8004bdc <_printf_float+0x150>
 8004bd6:	6822      	ldr	r2, [r4, #0]
 8004bd8:	07d2      	lsls	r2, r2, #31
 8004bda:	d501      	bpl.n	8004be0 <_printf_float+0x154>
 8004bdc:	3301      	adds	r3, #1
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0a2      	beq.n	8004b2e <_printf_float+0xa2>
 8004be8:	232d      	movs	r3, #45	@ 0x2d
 8004bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bee:	e79e      	b.n	8004b2e <_printf_float+0xa2>
 8004bf0:	9a06      	ldr	r2, [sp, #24]
 8004bf2:	2a47      	cmp	r2, #71	@ 0x47
 8004bf4:	d1c2      	bne.n	8004b7c <_printf_float+0xf0>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1c0      	bne.n	8004b7c <_printf_float+0xf0>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e7bd      	b.n	8004b7a <_printf_float+0xee>
 8004bfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c02:	d9db      	bls.n	8004bbc <_printf_float+0x130>
 8004c04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c08:	d118      	bne.n	8004c3c <_printf_float+0x1b0>
 8004c0a:	2900      	cmp	r1, #0
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	dd0b      	ble.n	8004c28 <_printf_float+0x19c>
 8004c10:	6121      	str	r1, [r4, #16]
 8004c12:	b913      	cbnz	r3, 8004c1a <_printf_float+0x18e>
 8004c14:	6822      	ldr	r2, [r4, #0]
 8004c16:	07d0      	lsls	r0, r2, #31
 8004c18:	d502      	bpl.n	8004c20 <_printf_float+0x194>
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	440b      	add	r3, r1
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c22:	f04f 0900 	mov.w	r9, #0
 8004c26:	e7db      	b.n	8004be0 <_printf_float+0x154>
 8004c28:	b913      	cbnz	r3, 8004c30 <_printf_float+0x1a4>
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	07d2      	lsls	r2, r2, #31
 8004c2e:	d501      	bpl.n	8004c34 <_printf_float+0x1a8>
 8004c30:	3302      	adds	r3, #2
 8004c32:	e7f4      	b.n	8004c1e <_printf_float+0x192>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e7f2      	b.n	8004c1e <_printf_float+0x192>
 8004c38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	db05      	blt.n	8004c4e <_printf_float+0x1c2>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	6121      	str	r1, [r4, #16]
 8004c46:	07d8      	lsls	r0, r3, #31
 8004c48:	d5ea      	bpl.n	8004c20 <_printf_float+0x194>
 8004c4a:	1c4b      	adds	r3, r1, #1
 8004c4c:	e7e7      	b.n	8004c1e <_printf_float+0x192>
 8004c4e:	2900      	cmp	r1, #0
 8004c50:	bfd4      	ite	le
 8004c52:	f1c1 0202 	rsble	r2, r1, #2
 8004c56:	2201      	movgt	r2, #1
 8004c58:	4413      	add	r3, r2
 8004c5a:	e7e0      	b.n	8004c1e <_printf_float+0x192>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	055a      	lsls	r2, r3, #21
 8004c60:	d407      	bmi.n	8004c72 <_printf_float+0x1e6>
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	4642      	mov	r2, r8
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b8      	blx	r7
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d12b      	bne.n	8004cc8 <_printf_float+0x23c>
 8004c70:	e767      	b.n	8004b42 <_printf_float+0xb6>
 8004c72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c76:	f240 80dd 	bls.w	8004e34 <_printf_float+0x3a8>
 8004c7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2300      	movs	r3, #0
 8004c82:	f7fb ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d033      	beq.n	8004cf2 <_printf_float+0x266>
 8004c8a:	4a37      	ldr	r2, [pc, #220]	@ (8004d68 <_printf_float+0x2dc>)
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f af54 	beq.w	8004b42 <_printf_float+0xb6>
 8004c9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c9e:	4543      	cmp	r3, r8
 8004ca0:	db02      	blt.n	8004ca8 <_printf_float+0x21c>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	07d8      	lsls	r0, r3, #31
 8004ca6:	d50f      	bpl.n	8004cc8 <_printf_float+0x23c>
 8004ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f af45 	beq.w	8004b42 <_printf_float+0xb6>
 8004cb8:	f04f 0900 	mov.w	r9, #0
 8004cbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cc0:	f104 0a1a 	add.w	sl, r4, #26
 8004cc4:	45c8      	cmp	r8, r9
 8004cc6:	dc09      	bgt.n	8004cdc <_printf_float+0x250>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	079b      	lsls	r3, r3, #30
 8004ccc:	f100 8103 	bmi.w	8004ed6 <_printf_float+0x44a>
 8004cd0:	68e0      	ldr	r0, [r4, #12]
 8004cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cd4:	4298      	cmp	r0, r3
 8004cd6:	bfb8      	it	lt
 8004cd8:	4618      	movlt	r0, r3
 8004cda:	e734      	b.n	8004b46 <_printf_float+0xba>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4652      	mov	r2, sl
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af2b 	beq.w	8004b42 <_printf_float+0xb6>
 8004cec:	f109 0901 	add.w	r9, r9, #1
 8004cf0:	e7e8      	b.n	8004cc4 <_printf_float+0x238>
 8004cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dc39      	bgt.n	8004d6c <_printf_float+0x2e0>
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <_printf_float+0x2dc>)
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f af1d 	beq.w	8004b42 <_printf_float+0xb6>
 8004d08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d0c:	ea59 0303 	orrs.w	r3, r9, r3
 8004d10:	d102      	bne.n	8004d18 <_printf_float+0x28c>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	07d9      	lsls	r1, r3, #31
 8004d16:	d5d7      	bpl.n	8004cc8 <_printf_float+0x23c>
 8004d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f af0d 	beq.w	8004b42 <_printf_float+0xb6>
 8004d28:	f04f 0a00 	mov.w	sl, #0
 8004d2c:	f104 0b1a 	add.w	fp, r4, #26
 8004d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d32:	425b      	negs	r3, r3
 8004d34:	4553      	cmp	r3, sl
 8004d36:	dc01      	bgt.n	8004d3c <_printf_float+0x2b0>
 8004d38:	464b      	mov	r3, r9
 8004d3a:	e793      	b.n	8004c64 <_printf_float+0x1d8>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	465a      	mov	r2, fp
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f aefb 	beq.w	8004b42 <_printf_float+0xb6>
 8004d4c:	f10a 0a01 	add.w	sl, sl, #1
 8004d50:	e7ee      	b.n	8004d30 <_printf_float+0x2a4>
 8004d52:	bf00      	nop
 8004d54:	7fefffff 	.word	0x7fefffff
 8004d58:	08007784 	.word	0x08007784
 8004d5c:	08007780 	.word	0x08007780
 8004d60:	0800778c 	.word	0x0800778c
 8004d64:	08007788 	.word	0x08007788
 8004d68:	08007790 	.word	0x08007790
 8004d6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d72:	4553      	cmp	r3, sl
 8004d74:	bfa8      	it	ge
 8004d76:	4653      	movge	r3, sl
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	dc36      	bgt.n	8004dec <_printf_float+0x360>
 8004d7e:	f04f 0b00 	mov.w	fp, #0
 8004d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d86:	f104 021a 	add.w	r2, r4, #26
 8004d8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d8c:	9306      	str	r3, [sp, #24]
 8004d8e:	eba3 0309 	sub.w	r3, r3, r9
 8004d92:	455b      	cmp	r3, fp
 8004d94:	dc31      	bgt.n	8004dfa <_printf_float+0x36e>
 8004d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d98:	459a      	cmp	sl, r3
 8004d9a:	dc3a      	bgt.n	8004e12 <_printf_float+0x386>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	07da      	lsls	r2, r3, #31
 8004da0:	d437      	bmi.n	8004e12 <_printf_float+0x386>
 8004da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da4:	ebaa 0903 	sub.w	r9, sl, r3
 8004da8:	9b06      	ldr	r3, [sp, #24]
 8004daa:	ebaa 0303 	sub.w	r3, sl, r3
 8004dae:	4599      	cmp	r9, r3
 8004db0:	bfa8      	it	ge
 8004db2:	4699      	movge	r9, r3
 8004db4:	f1b9 0f00 	cmp.w	r9, #0
 8004db8:	dc33      	bgt.n	8004e22 <_printf_float+0x396>
 8004dba:	f04f 0800 	mov.w	r8, #0
 8004dbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dc2:	f104 0b1a 	add.w	fp, r4, #26
 8004dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc8:	ebaa 0303 	sub.w	r3, sl, r3
 8004dcc:	eba3 0309 	sub.w	r3, r3, r9
 8004dd0:	4543      	cmp	r3, r8
 8004dd2:	f77f af79 	ble.w	8004cc8 <_printf_float+0x23c>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	465a      	mov	r2, fp
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f aeae 	beq.w	8004b42 <_printf_float+0xb6>
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	e7ec      	b.n	8004dc6 <_printf_float+0x33a>
 8004dec:	4642      	mov	r2, r8
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	d1c2      	bne.n	8004d7e <_printf_float+0x2f2>
 8004df8:	e6a3      	b.n	8004b42 <_printf_float+0xb6>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4628      	mov	r0, r5
 8004e00:	9206      	str	r2, [sp, #24]
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae9c 	beq.w	8004b42 <_printf_float+0xb6>
 8004e0a:	9a06      	ldr	r2, [sp, #24]
 8004e0c:	f10b 0b01 	add.w	fp, fp, #1
 8004e10:	e7bb      	b.n	8004d8a <_printf_float+0x2fe>
 8004e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d1c0      	bne.n	8004da2 <_printf_float+0x316>
 8004e20:	e68f      	b.n	8004b42 <_printf_float+0xb6>
 8004e22:	9a06      	ldr	r2, [sp, #24]
 8004e24:	464b      	mov	r3, r9
 8004e26:	4442      	add	r2, r8
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d1c3      	bne.n	8004dba <_printf_float+0x32e>
 8004e32:	e686      	b.n	8004b42 <_printf_float+0xb6>
 8004e34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e38:	f1ba 0f01 	cmp.w	sl, #1
 8004e3c:	dc01      	bgt.n	8004e42 <_printf_float+0x3b6>
 8004e3e:	07db      	lsls	r3, r3, #31
 8004e40:	d536      	bpl.n	8004eb0 <_printf_float+0x424>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4642      	mov	r2, r8
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f43f ae78 	beq.w	8004b42 <_printf_float+0xb6>
 8004e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e56:	4631      	mov	r1, r6
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f43f ae70 	beq.w	8004b42 <_printf_float+0xb6>
 8004e62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e66:	2200      	movs	r2, #0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e6e:	f7fb fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e72:	b9c0      	cbnz	r0, 8004ea6 <_printf_float+0x41a>
 8004e74:	4653      	mov	r3, sl
 8004e76:	f108 0201 	add.w	r2, r8, #1
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	d10c      	bne.n	8004e9e <_printf_float+0x412>
 8004e84:	e65d      	b.n	8004b42 <_printf_float+0xb6>
 8004e86:	2301      	movs	r3, #1
 8004e88:	465a      	mov	r2, fp
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b8      	blx	r7
 8004e90:	3001      	adds	r0, #1
 8004e92:	f43f ae56 	beq.w	8004b42 <_printf_float+0xb6>
 8004e96:	f108 0801 	add.w	r8, r8, #1
 8004e9a:	45d0      	cmp	r8, sl
 8004e9c:	dbf3      	blt.n	8004e86 <_printf_float+0x3fa>
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ea4:	e6df      	b.n	8004c66 <_printf_float+0x1da>
 8004ea6:	f04f 0800 	mov.w	r8, #0
 8004eaa:	f104 0b1a 	add.w	fp, r4, #26
 8004eae:	e7f4      	b.n	8004e9a <_printf_float+0x40e>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	4642      	mov	r2, r8
 8004eb4:	e7e1      	b.n	8004e7a <_printf_float+0x3ee>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	464a      	mov	r2, r9
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f43f ae3e 	beq.w	8004b42 <_printf_float+0xb6>
 8004ec6:	f108 0801 	add.w	r8, r8, #1
 8004eca:	68e3      	ldr	r3, [r4, #12]
 8004ecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ece:	1a5b      	subs	r3, r3, r1
 8004ed0:	4543      	cmp	r3, r8
 8004ed2:	dcf0      	bgt.n	8004eb6 <_printf_float+0x42a>
 8004ed4:	e6fc      	b.n	8004cd0 <_printf_float+0x244>
 8004ed6:	f04f 0800 	mov.w	r8, #0
 8004eda:	f104 0919 	add.w	r9, r4, #25
 8004ede:	e7f4      	b.n	8004eca <_printf_float+0x43e>

08004ee0 <_printf_common>:
 8004ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	4616      	mov	r6, r2
 8004ee6:	4698      	mov	r8, r3
 8004ee8:	688a      	ldr	r2, [r1, #8]
 8004eea:	690b      	ldr	r3, [r1, #16]
 8004eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bfb8      	it	lt
 8004ef4:	4613      	movlt	r3, r2
 8004ef6:	6033      	str	r3, [r6, #0]
 8004ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004efc:	4607      	mov	r7, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	b10a      	cbz	r2, 8004f06 <_printf_common+0x26>
 8004f02:	3301      	adds	r3, #1
 8004f04:	6033      	str	r3, [r6, #0]
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	0699      	lsls	r1, r3, #26
 8004f0a:	bf42      	ittt	mi
 8004f0c:	6833      	ldrmi	r3, [r6, #0]
 8004f0e:	3302      	addmi	r3, #2
 8004f10:	6033      	strmi	r3, [r6, #0]
 8004f12:	6825      	ldr	r5, [r4, #0]
 8004f14:	f015 0506 	ands.w	r5, r5, #6
 8004f18:	d106      	bne.n	8004f28 <_printf_common+0x48>
 8004f1a:	f104 0a19 	add.w	sl, r4, #25
 8004f1e:	68e3      	ldr	r3, [r4, #12]
 8004f20:	6832      	ldr	r2, [r6, #0]
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	42ab      	cmp	r3, r5
 8004f26:	dc26      	bgt.n	8004f76 <_printf_common+0x96>
 8004f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	3b00      	subs	r3, #0
 8004f30:	bf18      	it	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	0692      	lsls	r2, r2, #26
 8004f36:	d42b      	bmi.n	8004f90 <_printf_common+0xb0>
 8004f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	4638      	mov	r0, r7
 8004f40:	47c8      	blx	r9
 8004f42:	3001      	adds	r0, #1
 8004f44:	d01e      	beq.n	8004f84 <_printf_common+0xa4>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	6922      	ldr	r2, [r4, #16]
 8004f4a:	f003 0306 	and.w	r3, r3, #6
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	bf02      	ittt	eq
 8004f52:	68e5      	ldreq	r5, [r4, #12]
 8004f54:	6833      	ldreq	r3, [r6, #0]
 8004f56:	1aed      	subeq	r5, r5, r3
 8004f58:	68a3      	ldr	r3, [r4, #8]
 8004f5a:	bf0c      	ite	eq
 8004f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f60:	2500      	movne	r5, #0
 8004f62:	4293      	cmp	r3, r2
 8004f64:	bfc4      	itt	gt
 8004f66:	1a9b      	subgt	r3, r3, r2
 8004f68:	18ed      	addgt	r5, r5, r3
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	341a      	adds	r4, #26
 8004f6e:	42b5      	cmp	r5, r6
 8004f70:	d11a      	bne.n	8004fa8 <_printf_common+0xc8>
 8004f72:	2000      	movs	r0, #0
 8004f74:	e008      	b.n	8004f88 <_printf_common+0xa8>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4652      	mov	r2, sl
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	47c8      	blx	r9
 8004f80:	3001      	adds	r0, #1
 8004f82:	d103      	bne.n	8004f8c <_printf_common+0xac>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	e7c6      	b.n	8004f1e <_printf_common+0x3e>
 8004f90:	18e1      	adds	r1, r4, r3
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	2030      	movs	r0, #48	@ 0x30
 8004f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f9a:	4422      	add	r2, r4
 8004f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	e7c7      	b.n	8004f38 <_printf_common+0x58>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4622      	mov	r2, r4
 8004fac:	4641      	mov	r1, r8
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c8      	blx	r9
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d0e6      	beq.n	8004f84 <_printf_common+0xa4>
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7d9      	b.n	8004f6e <_printf_common+0x8e>
	...

08004fbc <_printf_i>:
 8004fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	7e0f      	ldrb	r7, [r1, #24]
 8004fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fc4:	2f78      	cmp	r7, #120	@ 0x78
 8004fc6:	4691      	mov	r9, r2
 8004fc8:	4680      	mov	r8, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	469a      	mov	sl, r3
 8004fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fd2:	d807      	bhi.n	8004fe4 <_printf_i+0x28>
 8004fd4:	2f62      	cmp	r7, #98	@ 0x62
 8004fd6:	d80a      	bhi.n	8004fee <_printf_i+0x32>
 8004fd8:	2f00      	cmp	r7, #0
 8004fda:	f000 80d1 	beq.w	8005180 <_printf_i+0x1c4>
 8004fde:	2f58      	cmp	r7, #88	@ 0x58
 8004fe0:	f000 80b8 	beq.w	8005154 <_printf_i+0x198>
 8004fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fec:	e03a      	b.n	8005064 <_printf_i+0xa8>
 8004fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ff2:	2b15      	cmp	r3, #21
 8004ff4:	d8f6      	bhi.n	8004fe4 <_printf_i+0x28>
 8004ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8004ffc <_printf_i+0x40>)
 8004ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005069 	.word	0x08005069
 8005004:	08004fe5 	.word	0x08004fe5
 8005008:	08004fe5 	.word	0x08004fe5
 800500c:	08004fe5 	.word	0x08004fe5
 8005010:	08004fe5 	.word	0x08004fe5
 8005014:	08005069 	.word	0x08005069
 8005018:	08004fe5 	.word	0x08004fe5
 800501c:	08004fe5 	.word	0x08004fe5
 8005020:	08004fe5 	.word	0x08004fe5
 8005024:	08004fe5 	.word	0x08004fe5
 8005028:	08005167 	.word	0x08005167
 800502c:	08005093 	.word	0x08005093
 8005030:	08005121 	.word	0x08005121
 8005034:	08004fe5 	.word	0x08004fe5
 8005038:	08004fe5 	.word	0x08004fe5
 800503c:	08005189 	.word	0x08005189
 8005040:	08004fe5 	.word	0x08004fe5
 8005044:	08005093 	.word	0x08005093
 8005048:	08004fe5 	.word	0x08004fe5
 800504c:	08004fe5 	.word	0x08004fe5
 8005050:	08005129 	.word	0x08005129
 8005054:	6833      	ldr	r3, [r6, #0]
 8005056:	1d1a      	adds	r2, r3, #4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6032      	str	r2, [r6, #0]
 800505c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005064:	2301      	movs	r3, #1
 8005066:	e09c      	b.n	80051a2 <_printf_i+0x1e6>
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	1d19      	adds	r1, r3, #4
 800506e:	6031      	str	r1, [r6, #0]
 8005070:	0606      	lsls	r6, r0, #24
 8005072:	d501      	bpl.n	8005078 <_printf_i+0xbc>
 8005074:	681d      	ldr	r5, [r3, #0]
 8005076:	e003      	b.n	8005080 <_printf_i+0xc4>
 8005078:	0645      	lsls	r5, r0, #25
 800507a:	d5fb      	bpl.n	8005074 <_printf_i+0xb8>
 800507c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005080:	2d00      	cmp	r5, #0
 8005082:	da03      	bge.n	800508c <_printf_i+0xd0>
 8005084:	232d      	movs	r3, #45	@ 0x2d
 8005086:	426d      	negs	r5, r5
 8005088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800508c:	4858      	ldr	r0, [pc, #352]	@ (80051f0 <_printf_i+0x234>)
 800508e:	230a      	movs	r3, #10
 8005090:	e011      	b.n	80050b6 <_printf_i+0xfa>
 8005092:	6821      	ldr	r1, [r4, #0]
 8005094:	6833      	ldr	r3, [r6, #0]
 8005096:	0608      	lsls	r0, r1, #24
 8005098:	f853 5b04 	ldr.w	r5, [r3], #4
 800509c:	d402      	bmi.n	80050a4 <_printf_i+0xe8>
 800509e:	0649      	lsls	r1, r1, #25
 80050a0:	bf48      	it	mi
 80050a2:	b2ad      	uxthmi	r5, r5
 80050a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80050a6:	4852      	ldr	r0, [pc, #328]	@ (80051f0 <_printf_i+0x234>)
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	bf14      	ite	ne
 80050ac:	230a      	movne	r3, #10
 80050ae:	2308      	moveq	r3, #8
 80050b0:	2100      	movs	r1, #0
 80050b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050b6:	6866      	ldr	r6, [r4, #4]
 80050b8:	60a6      	str	r6, [r4, #8]
 80050ba:	2e00      	cmp	r6, #0
 80050bc:	db05      	blt.n	80050ca <_printf_i+0x10e>
 80050be:	6821      	ldr	r1, [r4, #0]
 80050c0:	432e      	orrs	r6, r5
 80050c2:	f021 0104 	bic.w	r1, r1, #4
 80050c6:	6021      	str	r1, [r4, #0]
 80050c8:	d04b      	beq.n	8005162 <_printf_i+0x1a6>
 80050ca:	4616      	mov	r6, r2
 80050cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80050d0:	fb03 5711 	mls	r7, r3, r1, r5
 80050d4:	5dc7      	ldrb	r7, [r0, r7]
 80050d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050da:	462f      	mov	r7, r5
 80050dc:	42bb      	cmp	r3, r7
 80050de:	460d      	mov	r5, r1
 80050e0:	d9f4      	bls.n	80050cc <_printf_i+0x110>
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d10b      	bne.n	80050fe <_printf_i+0x142>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	07df      	lsls	r7, r3, #31
 80050ea:	d508      	bpl.n	80050fe <_printf_i+0x142>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	6861      	ldr	r1, [r4, #4]
 80050f0:	4299      	cmp	r1, r3
 80050f2:	bfde      	ittt	le
 80050f4:	2330      	movle	r3, #48	@ 0x30
 80050f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050fe:	1b92      	subs	r2, r2, r6
 8005100:	6122      	str	r2, [r4, #16]
 8005102:	f8cd a000 	str.w	sl, [sp]
 8005106:	464b      	mov	r3, r9
 8005108:	aa03      	add	r2, sp, #12
 800510a:	4621      	mov	r1, r4
 800510c:	4640      	mov	r0, r8
 800510e:	f7ff fee7 	bl	8004ee0 <_printf_common>
 8005112:	3001      	adds	r0, #1
 8005114:	d14a      	bne.n	80051ac <_printf_i+0x1f0>
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	b004      	add	sp, #16
 800511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	f043 0320 	orr.w	r3, r3, #32
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	4832      	ldr	r0, [pc, #200]	@ (80051f4 <_printf_i+0x238>)
 800512a:	2778      	movs	r7, #120	@ 0x78
 800512c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	6831      	ldr	r1, [r6, #0]
 8005134:	061f      	lsls	r7, r3, #24
 8005136:	f851 5b04 	ldr.w	r5, [r1], #4
 800513a:	d402      	bmi.n	8005142 <_printf_i+0x186>
 800513c:	065f      	lsls	r7, r3, #25
 800513e:	bf48      	it	mi
 8005140:	b2ad      	uxthmi	r5, r5
 8005142:	6031      	str	r1, [r6, #0]
 8005144:	07d9      	lsls	r1, r3, #31
 8005146:	bf44      	itt	mi
 8005148:	f043 0320 	orrmi.w	r3, r3, #32
 800514c:	6023      	strmi	r3, [r4, #0]
 800514e:	b11d      	cbz	r5, 8005158 <_printf_i+0x19c>
 8005150:	2310      	movs	r3, #16
 8005152:	e7ad      	b.n	80050b0 <_printf_i+0xf4>
 8005154:	4826      	ldr	r0, [pc, #152]	@ (80051f0 <_printf_i+0x234>)
 8005156:	e7e9      	b.n	800512c <_printf_i+0x170>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	f023 0320 	bic.w	r3, r3, #32
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	e7f6      	b.n	8005150 <_printf_i+0x194>
 8005162:	4616      	mov	r6, r2
 8005164:	e7bd      	b.n	80050e2 <_printf_i+0x126>
 8005166:	6833      	ldr	r3, [r6, #0]
 8005168:	6825      	ldr	r5, [r4, #0]
 800516a:	6961      	ldr	r1, [r4, #20]
 800516c:	1d18      	adds	r0, r3, #4
 800516e:	6030      	str	r0, [r6, #0]
 8005170:	062e      	lsls	r6, r5, #24
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	d501      	bpl.n	800517a <_printf_i+0x1be>
 8005176:	6019      	str	r1, [r3, #0]
 8005178:	e002      	b.n	8005180 <_printf_i+0x1c4>
 800517a:	0668      	lsls	r0, r5, #25
 800517c:	d5fb      	bpl.n	8005176 <_printf_i+0x1ba>
 800517e:	8019      	strh	r1, [r3, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	4616      	mov	r6, r2
 8005186:	e7bc      	b.n	8005102 <_printf_i+0x146>
 8005188:	6833      	ldr	r3, [r6, #0]
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	6032      	str	r2, [r6, #0]
 800518e:	681e      	ldr	r6, [r3, #0]
 8005190:	6862      	ldr	r2, [r4, #4]
 8005192:	2100      	movs	r1, #0
 8005194:	4630      	mov	r0, r6
 8005196:	f7fb f823 	bl	80001e0 <memchr>
 800519a:	b108      	cbz	r0, 80051a0 <_printf_i+0x1e4>
 800519c:	1b80      	subs	r0, r0, r6
 800519e:	6060      	str	r0, [r4, #4]
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	2300      	movs	r3, #0
 80051a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051aa:	e7aa      	b.n	8005102 <_printf_i+0x146>
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	4632      	mov	r2, r6
 80051b0:	4649      	mov	r1, r9
 80051b2:	4640      	mov	r0, r8
 80051b4:	47d0      	blx	sl
 80051b6:	3001      	adds	r0, #1
 80051b8:	d0ad      	beq.n	8005116 <_printf_i+0x15a>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	079b      	lsls	r3, r3, #30
 80051be:	d413      	bmi.n	80051e8 <_printf_i+0x22c>
 80051c0:	68e0      	ldr	r0, [r4, #12]
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	4298      	cmp	r0, r3
 80051c6:	bfb8      	it	lt
 80051c8:	4618      	movlt	r0, r3
 80051ca:	e7a6      	b.n	800511a <_printf_i+0x15e>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4632      	mov	r2, r6
 80051d0:	4649      	mov	r1, r9
 80051d2:	4640      	mov	r0, r8
 80051d4:	47d0      	blx	sl
 80051d6:	3001      	adds	r0, #1
 80051d8:	d09d      	beq.n	8005116 <_printf_i+0x15a>
 80051da:	3501      	adds	r5, #1
 80051dc:	68e3      	ldr	r3, [r4, #12]
 80051de:	9903      	ldr	r1, [sp, #12]
 80051e0:	1a5b      	subs	r3, r3, r1
 80051e2:	42ab      	cmp	r3, r5
 80051e4:	dcf2      	bgt.n	80051cc <_printf_i+0x210>
 80051e6:	e7eb      	b.n	80051c0 <_printf_i+0x204>
 80051e8:	2500      	movs	r5, #0
 80051ea:	f104 0619 	add.w	r6, r4, #25
 80051ee:	e7f5      	b.n	80051dc <_printf_i+0x220>
 80051f0:	08007792 	.word	0x08007792
 80051f4:	080077a3 	.word	0x080077a3

080051f8 <std>:
 80051f8:	2300      	movs	r3, #0
 80051fa:	b510      	push	{r4, lr}
 80051fc:	4604      	mov	r4, r0
 80051fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005206:	6083      	str	r3, [r0, #8]
 8005208:	8181      	strh	r1, [r0, #12]
 800520a:	6643      	str	r3, [r0, #100]	@ 0x64
 800520c:	81c2      	strh	r2, [r0, #14]
 800520e:	6183      	str	r3, [r0, #24]
 8005210:	4619      	mov	r1, r3
 8005212:	2208      	movs	r2, #8
 8005214:	305c      	adds	r0, #92	@ 0x5c
 8005216:	f000 f916 	bl	8005446 <memset>
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <std+0x58>)
 800521c:	6263      	str	r3, [r4, #36]	@ 0x24
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <std+0x5c>)
 8005220:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <std+0x60>)
 8005224:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005226:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <std+0x64>)
 8005228:	6323      	str	r3, [r4, #48]	@ 0x30
 800522a:	4b0d      	ldr	r3, [pc, #52]	@ (8005260 <std+0x68>)
 800522c:	6224      	str	r4, [r4, #32]
 800522e:	429c      	cmp	r4, r3
 8005230:	d006      	beq.n	8005240 <std+0x48>
 8005232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005236:	4294      	cmp	r4, r2
 8005238:	d002      	beq.n	8005240 <std+0x48>
 800523a:	33d0      	adds	r3, #208	@ 0xd0
 800523c:	429c      	cmp	r4, r3
 800523e:	d105      	bne.n	800524c <std+0x54>
 8005240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005248:	f000 b990 	b.w	800556c <__retarget_lock_init_recursive>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	bf00      	nop
 8005250:	080053c1 	.word	0x080053c1
 8005254:	080053e3 	.word	0x080053e3
 8005258:	0800541b 	.word	0x0800541b
 800525c:	0800543f 	.word	0x0800543f
 8005260:	200003bc 	.word	0x200003bc

08005264 <stdio_exit_handler>:
 8005264:	4a02      	ldr	r2, [pc, #8]	@ (8005270 <stdio_exit_handler+0xc>)
 8005266:	4903      	ldr	r1, [pc, #12]	@ (8005274 <stdio_exit_handler+0x10>)
 8005268:	4803      	ldr	r0, [pc, #12]	@ (8005278 <stdio_exit_handler+0x14>)
 800526a:	f000 b869 	b.w	8005340 <_fwalk_sglue>
 800526e:	bf00      	nop
 8005270:	2000000c 	.word	0x2000000c
 8005274:	08006ed5 	.word	0x08006ed5
 8005278:	2000001c 	.word	0x2000001c

0800527c <cleanup_stdio>:
 800527c:	6841      	ldr	r1, [r0, #4]
 800527e:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <cleanup_stdio+0x34>)
 8005280:	4299      	cmp	r1, r3
 8005282:	b510      	push	{r4, lr}
 8005284:	4604      	mov	r4, r0
 8005286:	d001      	beq.n	800528c <cleanup_stdio+0x10>
 8005288:	f001 fe24 	bl	8006ed4 <_fflush_r>
 800528c:	68a1      	ldr	r1, [r4, #8]
 800528e:	4b09      	ldr	r3, [pc, #36]	@ (80052b4 <cleanup_stdio+0x38>)
 8005290:	4299      	cmp	r1, r3
 8005292:	d002      	beq.n	800529a <cleanup_stdio+0x1e>
 8005294:	4620      	mov	r0, r4
 8005296:	f001 fe1d 	bl	8006ed4 <_fflush_r>
 800529a:	68e1      	ldr	r1, [r4, #12]
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <cleanup_stdio+0x3c>)
 800529e:	4299      	cmp	r1, r3
 80052a0:	d004      	beq.n	80052ac <cleanup_stdio+0x30>
 80052a2:	4620      	mov	r0, r4
 80052a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a8:	f001 be14 	b.w	8006ed4 <_fflush_r>
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	200003bc 	.word	0x200003bc
 80052b4:	20000424 	.word	0x20000424
 80052b8:	2000048c 	.word	0x2000048c

080052bc <global_stdio_init.part.0>:
 80052bc:	b510      	push	{r4, lr}
 80052be:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <global_stdio_init.part.0+0x30>)
 80052c0:	4c0b      	ldr	r4, [pc, #44]	@ (80052f0 <global_stdio_init.part.0+0x34>)
 80052c2:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <global_stdio_init.part.0+0x38>)
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	4620      	mov	r0, r4
 80052c8:	2200      	movs	r2, #0
 80052ca:	2104      	movs	r1, #4
 80052cc:	f7ff ff94 	bl	80051f8 <std>
 80052d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052d4:	2201      	movs	r2, #1
 80052d6:	2109      	movs	r1, #9
 80052d8:	f7ff ff8e 	bl	80051f8 <std>
 80052dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052e0:	2202      	movs	r2, #2
 80052e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e6:	2112      	movs	r1, #18
 80052e8:	f7ff bf86 	b.w	80051f8 <std>
 80052ec:	200004f4 	.word	0x200004f4
 80052f0:	200003bc 	.word	0x200003bc
 80052f4:	08005265 	.word	0x08005265

080052f8 <__sfp_lock_acquire>:
 80052f8:	4801      	ldr	r0, [pc, #4]	@ (8005300 <__sfp_lock_acquire+0x8>)
 80052fa:	f000 b938 	b.w	800556e <__retarget_lock_acquire_recursive>
 80052fe:	bf00      	nop
 8005300:	200004fd 	.word	0x200004fd

08005304 <__sfp_lock_release>:
 8005304:	4801      	ldr	r0, [pc, #4]	@ (800530c <__sfp_lock_release+0x8>)
 8005306:	f000 b933 	b.w	8005570 <__retarget_lock_release_recursive>
 800530a:	bf00      	nop
 800530c:	200004fd 	.word	0x200004fd

08005310 <__sinit>:
 8005310:	b510      	push	{r4, lr}
 8005312:	4604      	mov	r4, r0
 8005314:	f7ff fff0 	bl	80052f8 <__sfp_lock_acquire>
 8005318:	6a23      	ldr	r3, [r4, #32]
 800531a:	b11b      	cbz	r3, 8005324 <__sinit+0x14>
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005320:	f7ff bff0 	b.w	8005304 <__sfp_lock_release>
 8005324:	4b04      	ldr	r3, [pc, #16]	@ (8005338 <__sinit+0x28>)
 8005326:	6223      	str	r3, [r4, #32]
 8005328:	4b04      	ldr	r3, [pc, #16]	@ (800533c <__sinit+0x2c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f5      	bne.n	800531c <__sinit+0xc>
 8005330:	f7ff ffc4 	bl	80052bc <global_stdio_init.part.0>
 8005334:	e7f2      	b.n	800531c <__sinit+0xc>
 8005336:	bf00      	nop
 8005338:	0800527d 	.word	0x0800527d
 800533c:	200004f4 	.word	0x200004f4

08005340 <_fwalk_sglue>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	4607      	mov	r7, r0
 8005346:	4688      	mov	r8, r1
 8005348:	4614      	mov	r4, r2
 800534a:	2600      	movs	r6, #0
 800534c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005350:	f1b9 0901 	subs.w	r9, r9, #1
 8005354:	d505      	bpl.n	8005362 <_fwalk_sglue+0x22>
 8005356:	6824      	ldr	r4, [r4, #0]
 8005358:	2c00      	cmp	r4, #0
 800535a:	d1f7      	bne.n	800534c <_fwalk_sglue+0xc>
 800535c:	4630      	mov	r0, r6
 800535e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d907      	bls.n	8005378 <_fwalk_sglue+0x38>
 8005368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800536c:	3301      	adds	r3, #1
 800536e:	d003      	beq.n	8005378 <_fwalk_sglue+0x38>
 8005370:	4629      	mov	r1, r5
 8005372:	4638      	mov	r0, r7
 8005374:	47c0      	blx	r8
 8005376:	4306      	orrs	r6, r0
 8005378:	3568      	adds	r5, #104	@ 0x68
 800537a:	e7e9      	b.n	8005350 <_fwalk_sglue+0x10>

0800537c <siprintf>:
 800537c:	b40e      	push	{r1, r2, r3}
 800537e:	b510      	push	{r4, lr}
 8005380:	b09d      	sub	sp, #116	@ 0x74
 8005382:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005384:	9002      	str	r0, [sp, #8]
 8005386:	9006      	str	r0, [sp, #24]
 8005388:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800538c:	480a      	ldr	r0, [pc, #40]	@ (80053b8 <siprintf+0x3c>)
 800538e:	9107      	str	r1, [sp, #28]
 8005390:	9104      	str	r1, [sp, #16]
 8005392:	490a      	ldr	r1, [pc, #40]	@ (80053bc <siprintf+0x40>)
 8005394:	f853 2b04 	ldr.w	r2, [r3], #4
 8005398:	9105      	str	r1, [sp, #20]
 800539a:	2400      	movs	r4, #0
 800539c:	a902      	add	r1, sp, #8
 800539e:	6800      	ldr	r0, [r0, #0]
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80053a4:	f001 fc16 	bl	8006bd4 <_svfiprintf_r>
 80053a8:	9b02      	ldr	r3, [sp, #8]
 80053aa:	701c      	strb	r4, [r3, #0]
 80053ac:	b01d      	add	sp, #116	@ 0x74
 80053ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b2:	b003      	add	sp, #12
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000018 	.word	0x20000018
 80053bc:	ffff0208 	.word	0xffff0208

080053c0 <__sread>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	460c      	mov	r4, r1
 80053c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c8:	f000 f882 	bl	80054d0 <_read_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	bfab      	itete	ge
 80053d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053d2:	89a3      	ldrhlt	r3, [r4, #12]
 80053d4:	181b      	addge	r3, r3, r0
 80053d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053da:	bfac      	ite	ge
 80053dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053de:	81a3      	strhlt	r3, [r4, #12]
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <__swrite>:
 80053e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	461f      	mov	r7, r3
 80053e8:	898b      	ldrh	r3, [r1, #12]
 80053ea:	05db      	lsls	r3, r3, #23
 80053ec:	4605      	mov	r5, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	4616      	mov	r6, r2
 80053f2:	d505      	bpl.n	8005400 <__swrite+0x1e>
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	2302      	movs	r3, #2
 80053fa:	2200      	movs	r2, #0
 80053fc:	f000 f856 	bl	80054ac <_lseek_r>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005406:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	4628      	mov	r0, r5
 8005412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	f000 b86d 	b.w	80054f4 <_write_r>

0800541a <__sseek>:
 800541a:	b510      	push	{r4, lr}
 800541c:	460c      	mov	r4, r1
 800541e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005422:	f000 f843 	bl	80054ac <_lseek_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	bf15      	itete	ne
 800542c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800542e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005436:	81a3      	strheq	r3, [r4, #12]
 8005438:	bf18      	it	ne
 800543a:	81a3      	strhne	r3, [r4, #12]
 800543c:	bd10      	pop	{r4, pc}

0800543e <__sclose>:
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 b823 	b.w	800548c <_close_r>

08005446 <memset>:
 8005446:	4402      	add	r2, r0
 8005448:	4603      	mov	r3, r0
 800544a:	4293      	cmp	r3, r2
 800544c:	d100      	bne.n	8005450 <memset+0xa>
 800544e:	4770      	bx	lr
 8005450:	f803 1b01 	strb.w	r1, [r3], #1
 8005454:	e7f9      	b.n	800544a <memset+0x4>

08005456 <strstr>:
 8005456:	780a      	ldrb	r2, [r1, #0]
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	b96a      	cbnz	r2, 8005478 <strstr+0x22>
 800545c:	bd70      	pop	{r4, r5, r6, pc}
 800545e:	429a      	cmp	r2, r3
 8005460:	d109      	bne.n	8005476 <strstr+0x20>
 8005462:	460c      	mov	r4, r1
 8005464:	4605      	mov	r5, r0
 8005466:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f6      	beq.n	800545c <strstr+0x6>
 800546e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005472:	429e      	cmp	r6, r3
 8005474:	d0f7      	beq.n	8005466 <strstr+0x10>
 8005476:	3001      	adds	r0, #1
 8005478:	7803      	ldrb	r3, [r0, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1ef      	bne.n	800545e <strstr+0x8>
 800547e:	4618      	mov	r0, r3
 8005480:	e7ec      	b.n	800545c <strstr+0x6>
	...

08005484 <_localeconv_r>:
 8005484:	4800      	ldr	r0, [pc, #0]	@ (8005488 <_localeconv_r+0x4>)
 8005486:	4770      	bx	lr
 8005488:	20000158 	.word	0x20000158

0800548c <_close_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d06      	ldr	r5, [pc, #24]	@ (80054a8 <_close_r+0x1c>)
 8005490:	2300      	movs	r3, #0
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	f7fc fc20 	bl	8001cdc <_close>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_close_r+0x1a>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_close_r+0x1a>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	200004f8 	.word	0x200004f8

080054ac <_lseek_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d07      	ldr	r5, [pc, #28]	@ (80054cc <_lseek_r+0x20>)
 80054b0:	4604      	mov	r4, r0
 80054b2:	4608      	mov	r0, r1
 80054b4:	4611      	mov	r1, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	602a      	str	r2, [r5, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f7fc fc35 	bl	8001d2a <_lseek>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_lseek_r+0x1e>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_lseek_r+0x1e>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	200004f8 	.word	0x200004f8

080054d0 <_read_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d07      	ldr	r5, [pc, #28]	@ (80054f0 <_read_r+0x20>)
 80054d4:	4604      	mov	r4, r0
 80054d6:	4608      	mov	r0, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fc fbc3 	bl	8001c6a <_read>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_read_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_read_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	200004f8 	.word	0x200004f8

080054f4 <_write_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d07      	ldr	r5, [pc, #28]	@ (8005514 <_write_r+0x20>)
 80054f8:	4604      	mov	r4, r0
 80054fa:	4608      	mov	r0, r1
 80054fc:	4611      	mov	r1, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	602a      	str	r2, [r5, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	f7fc fbce 	bl	8001ca4 <_write>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_write_r+0x1e>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_write_r+0x1e>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	200004f8 	.word	0x200004f8

08005518 <__errno>:
 8005518:	4b01      	ldr	r3, [pc, #4]	@ (8005520 <__errno+0x8>)
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000018 	.word	0x20000018

08005524 <__libc_init_array>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4d0d      	ldr	r5, [pc, #52]	@ (800555c <__libc_init_array+0x38>)
 8005528:	4c0d      	ldr	r4, [pc, #52]	@ (8005560 <__libc_init_array+0x3c>)
 800552a:	1b64      	subs	r4, r4, r5
 800552c:	10a4      	asrs	r4, r4, #2
 800552e:	2600      	movs	r6, #0
 8005530:	42a6      	cmp	r6, r4
 8005532:	d109      	bne.n	8005548 <__libc_init_array+0x24>
 8005534:	4d0b      	ldr	r5, [pc, #44]	@ (8005564 <__libc_init_array+0x40>)
 8005536:	4c0c      	ldr	r4, [pc, #48]	@ (8005568 <__libc_init_array+0x44>)
 8005538:	f002 f86a 	bl	8007610 <_init>
 800553c:	1b64      	subs	r4, r4, r5
 800553e:	10a4      	asrs	r4, r4, #2
 8005540:	2600      	movs	r6, #0
 8005542:	42a6      	cmp	r6, r4
 8005544:	d105      	bne.n	8005552 <__libc_init_array+0x2e>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	f855 3b04 	ldr.w	r3, [r5], #4
 800554c:	4798      	blx	r3
 800554e:	3601      	adds	r6, #1
 8005550:	e7ee      	b.n	8005530 <__libc_init_array+0xc>
 8005552:	f855 3b04 	ldr.w	r3, [r5], #4
 8005556:	4798      	blx	r3
 8005558:	3601      	adds	r6, #1
 800555a:	e7f2      	b.n	8005542 <__libc_init_array+0x1e>
 800555c:	08007afc 	.word	0x08007afc
 8005560:	08007afc 	.word	0x08007afc
 8005564:	08007afc 	.word	0x08007afc
 8005568:	08007b00 	.word	0x08007b00

0800556c <__retarget_lock_init_recursive>:
 800556c:	4770      	bx	lr

0800556e <__retarget_lock_acquire_recursive>:
 800556e:	4770      	bx	lr

08005570 <__retarget_lock_release_recursive>:
 8005570:	4770      	bx	lr

08005572 <quorem>:
 8005572:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005576:	6903      	ldr	r3, [r0, #16]
 8005578:	690c      	ldr	r4, [r1, #16]
 800557a:	42a3      	cmp	r3, r4
 800557c:	4607      	mov	r7, r0
 800557e:	db7e      	blt.n	800567e <quorem+0x10c>
 8005580:	3c01      	subs	r4, #1
 8005582:	f101 0814 	add.w	r8, r1, #20
 8005586:	00a3      	lsls	r3, r4, #2
 8005588:	f100 0514 	add.w	r5, r0, #20
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559c:	3301      	adds	r3, #1
 800559e:	429a      	cmp	r2, r3
 80055a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80055a8:	d32e      	bcc.n	8005608 <quorem+0x96>
 80055aa:	f04f 0a00 	mov.w	sl, #0
 80055ae:	46c4      	mov	ip, r8
 80055b0:	46ae      	mov	lr, r5
 80055b2:	46d3      	mov	fp, sl
 80055b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055b8:	b298      	uxth	r0, r3
 80055ba:	fb06 a000 	mla	r0, r6, r0, sl
 80055be:	0c02      	lsrs	r2, r0, #16
 80055c0:	0c1b      	lsrs	r3, r3, #16
 80055c2:	fb06 2303 	mla	r3, r6, r3, r2
 80055c6:	f8de 2000 	ldr.w	r2, [lr]
 80055ca:	b280      	uxth	r0, r0
 80055cc:	b292      	uxth	r2, r2
 80055ce:	1a12      	subs	r2, r2, r0
 80055d0:	445a      	add	r2, fp
 80055d2:	f8de 0000 	ldr.w	r0, [lr]
 80055d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055da:	b29b      	uxth	r3, r3
 80055dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055e4:	b292      	uxth	r2, r2
 80055e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055ea:	45e1      	cmp	r9, ip
 80055ec:	f84e 2b04 	str.w	r2, [lr], #4
 80055f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055f4:	d2de      	bcs.n	80055b4 <quorem+0x42>
 80055f6:	9b00      	ldr	r3, [sp, #0]
 80055f8:	58eb      	ldr	r3, [r5, r3]
 80055fa:	b92b      	cbnz	r3, 8005608 <quorem+0x96>
 80055fc:	9b01      	ldr	r3, [sp, #4]
 80055fe:	3b04      	subs	r3, #4
 8005600:	429d      	cmp	r5, r3
 8005602:	461a      	mov	r2, r3
 8005604:	d32f      	bcc.n	8005666 <quorem+0xf4>
 8005606:	613c      	str	r4, [r7, #16]
 8005608:	4638      	mov	r0, r7
 800560a:	f001 f97f 	bl	800690c <__mcmp>
 800560e:	2800      	cmp	r0, #0
 8005610:	db25      	blt.n	800565e <quorem+0xec>
 8005612:	4629      	mov	r1, r5
 8005614:	2000      	movs	r0, #0
 8005616:	f858 2b04 	ldr.w	r2, [r8], #4
 800561a:	f8d1 c000 	ldr.w	ip, [r1]
 800561e:	fa1f fe82 	uxth.w	lr, r2
 8005622:	fa1f f38c 	uxth.w	r3, ip
 8005626:	eba3 030e 	sub.w	r3, r3, lr
 800562a:	4403      	add	r3, r0
 800562c:	0c12      	lsrs	r2, r2, #16
 800562e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005632:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800563c:	45c1      	cmp	r9, r8
 800563e:	f841 3b04 	str.w	r3, [r1], #4
 8005642:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005646:	d2e6      	bcs.n	8005616 <quorem+0xa4>
 8005648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800564c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005650:	b922      	cbnz	r2, 800565c <quorem+0xea>
 8005652:	3b04      	subs	r3, #4
 8005654:	429d      	cmp	r5, r3
 8005656:	461a      	mov	r2, r3
 8005658:	d30b      	bcc.n	8005672 <quorem+0x100>
 800565a:	613c      	str	r4, [r7, #16]
 800565c:	3601      	adds	r6, #1
 800565e:	4630      	mov	r0, r6
 8005660:	b003      	add	sp, #12
 8005662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	3b04      	subs	r3, #4
 800566a:	2a00      	cmp	r2, #0
 800566c:	d1cb      	bne.n	8005606 <quorem+0x94>
 800566e:	3c01      	subs	r4, #1
 8005670:	e7c6      	b.n	8005600 <quorem+0x8e>
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	3b04      	subs	r3, #4
 8005676:	2a00      	cmp	r2, #0
 8005678:	d1ef      	bne.n	800565a <quorem+0xe8>
 800567a:	3c01      	subs	r4, #1
 800567c:	e7ea      	b.n	8005654 <quorem+0xe2>
 800567e:	2000      	movs	r0, #0
 8005680:	e7ee      	b.n	8005660 <quorem+0xee>
 8005682:	0000      	movs	r0, r0
 8005684:	0000      	movs	r0, r0
	...

08005688 <_dtoa_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	69c7      	ldr	r7, [r0, #28]
 800568e:	b097      	sub	sp, #92	@ 0x5c
 8005690:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005694:	ec55 4b10 	vmov	r4, r5, d0
 8005698:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800569a:	9107      	str	r1, [sp, #28]
 800569c:	4681      	mov	r9, r0
 800569e:	920c      	str	r2, [sp, #48]	@ 0x30
 80056a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80056a2:	b97f      	cbnz	r7, 80056c4 <_dtoa_r+0x3c>
 80056a4:	2010      	movs	r0, #16
 80056a6:	f000 fe09 	bl	80062bc <malloc>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80056b0:	b920      	cbnz	r0, 80056bc <_dtoa_r+0x34>
 80056b2:	4ba9      	ldr	r3, [pc, #676]	@ (8005958 <_dtoa_r+0x2d0>)
 80056b4:	21ef      	movs	r1, #239	@ 0xef
 80056b6:	48a9      	ldr	r0, [pc, #676]	@ (800595c <_dtoa_r+0x2d4>)
 80056b8:	f001 fc6c 	bl	8006f94 <__assert_func>
 80056bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056c0:	6007      	str	r7, [r0, #0]
 80056c2:	60c7      	str	r7, [r0, #12]
 80056c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	b159      	cbz	r1, 80056e4 <_dtoa_r+0x5c>
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	604a      	str	r2, [r1, #4]
 80056d0:	2301      	movs	r3, #1
 80056d2:	4093      	lsls	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
 80056d6:	4648      	mov	r0, r9
 80056d8:	f000 fee6 	bl	80064a8 <_Bfree>
 80056dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	1e2b      	subs	r3, r5, #0
 80056e6:	bfb9      	ittee	lt
 80056e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056ec:	9305      	strlt	r3, [sp, #20]
 80056ee:	2300      	movge	r3, #0
 80056f0:	6033      	strge	r3, [r6, #0]
 80056f2:	9f05      	ldr	r7, [sp, #20]
 80056f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005960 <_dtoa_r+0x2d8>)
 80056f6:	bfbc      	itt	lt
 80056f8:	2201      	movlt	r2, #1
 80056fa:	6032      	strlt	r2, [r6, #0]
 80056fc:	43bb      	bics	r3, r7
 80056fe:	d112      	bne.n	8005726 <_dtoa_r+0x9e>
 8005700:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005702:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800570c:	4323      	orrs	r3, r4
 800570e:	f000 855a 	beq.w	80061c6 <_dtoa_r+0xb3e>
 8005712:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005714:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005974 <_dtoa_r+0x2ec>
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 855c 	beq.w	80061d6 <_dtoa_r+0xb4e>
 800571e:	f10a 0303 	add.w	r3, sl, #3
 8005722:	f000 bd56 	b.w	80061d2 <_dtoa_r+0xb4a>
 8005726:	ed9d 7b04 	vldr	d7, [sp, #16]
 800572a:	2200      	movs	r2, #0
 800572c:	ec51 0b17 	vmov	r0, r1, d7
 8005730:	2300      	movs	r3, #0
 8005732:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005736:	f7fb f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800573a:	4680      	mov	r8, r0
 800573c:	b158      	cbz	r0, 8005756 <_dtoa_r+0xce>
 800573e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005740:	2301      	movs	r3, #1
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005746:	b113      	cbz	r3, 800574e <_dtoa_r+0xc6>
 8005748:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800574a:	4b86      	ldr	r3, [pc, #536]	@ (8005964 <_dtoa_r+0x2dc>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005978 <_dtoa_r+0x2f0>
 8005752:	f000 bd40 	b.w	80061d6 <_dtoa_r+0xb4e>
 8005756:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800575a:	aa14      	add	r2, sp, #80	@ 0x50
 800575c:	a915      	add	r1, sp, #84	@ 0x54
 800575e:	4648      	mov	r0, r9
 8005760:	f001 f984 	bl	8006a6c <__d2b>
 8005764:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	2e00      	cmp	r6, #0
 800576c:	d078      	beq.n	8005860 <_dtoa_r+0x1d8>
 800576e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005770:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800577c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005780:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005784:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005788:	4619      	mov	r1, r3
 800578a:	2200      	movs	r2, #0
 800578c:	4b76      	ldr	r3, [pc, #472]	@ (8005968 <_dtoa_r+0x2e0>)
 800578e:	f7fa fd83 	bl	8000298 <__aeabi_dsub>
 8005792:	a36b      	add	r3, pc, #428	@ (adr r3, 8005940 <_dtoa_r+0x2b8>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f7fa ff36 	bl	8000608 <__aeabi_dmul>
 800579c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005948 <_dtoa_r+0x2c0>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f7fa fd7b 	bl	800029c <__adddf3>
 80057a6:	4604      	mov	r4, r0
 80057a8:	4630      	mov	r0, r6
 80057aa:	460d      	mov	r5, r1
 80057ac:	f7fa fec2 	bl	8000534 <__aeabi_i2d>
 80057b0:	a367      	add	r3, pc, #412	@ (adr r3, 8005950 <_dtoa_r+0x2c8>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa ff27 	bl	8000608 <__aeabi_dmul>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fa fd6b 	bl	800029c <__adddf3>
 80057c6:	4604      	mov	r4, r0
 80057c8:	460d      	mov	r5, r1
 80057ca:	f7fb f9cd 	bl	8000b68 <__aeabi_d2iz>
 80057ce:	2200      	movs	r2, #0
 80057d0:	4607      	mov	r7, r0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fb f988 	bl	8000aec <__aeabi_dcmplt>
 80057dc:	b140      	cbz	r0, 80057f0 <_dtoa_r+0x168>
 80057de:	4638      	mov	r0, r7
 80057e0:	f7fa fea8 	bl	8000534 <__aeabi_i2d>
 80057e4:	4622      	mov	r2, r4
 80057e6:	462b      	mov	r3, r5
 80057e8:	f7fb f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ec:	b900      	cbnz	r0, 80057f0 <_dtoa_r+0x168>
 80057ee:	3f01      	subs	r7, #1
 80057f0:	2f16      	cmp	r7, #22
 80057f2:	d852      	bhi.n	800589a <_dtoa_r+0x212>
 80057f4:	4b5d      	ldr	r3, [pc, #372]	@ (800596c <_dtoa_r+0x2e4>)
 80057f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005802:	f7fb f973 	bl	8000aec <__aeabi_dcmplt>
 8005806:	2800      	cmp	r0, #0
 8005808:	d049      	beq.n	800589e <_dtoa_r+0x216>
 800580a:	3f01      	subs	r7, #1
 800580c:	2300      	movs	r3, #0
 800580e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005810:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005812:	1b9b      	subs	r3, r3, r6
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	bf45      	ittet	mi
 8005818:	f1c3 0301 	rsbmi	r3, r3, #1
 800581c:	9300      	strmi	r3, [sp, #0]
 800581e:	2300      	movpl	r3, #0
 8005820:	2300      	movmi	r3, #0
 8005822:	9206      	str	r2, [sp, #24]
 8005824:	bf54      	ite	pl
 8005826:	9300      	strpl	r3, [sp, #0]
 8005828:	9306      	strmi	r3, [sp, #24]
 800582a:	2f00      	cmp	r7, #0
 800582c:	db39      	blt.n	80058a2 <_dtoa_r+0x21a>
 800582e:	9b06      	ldr	r3, [sp, #24]
 8005830:	970d      	str	r7, [sp, #52]	@ 0x34
 8005832:	443b      	add	r3, r7
 8005834:	9306      	str	r3, [sp, #24]
 8005836:	2300      	movs	r3, #0
 8005838:	9308      	str	r3, [sp, #32]
 800583a:	9b07      	ldr	r3, [sp, #28]
 800583c:	2b09      	cmp	r3, #9
 800583e:	d863      	bhi.n	8005908 <_dtoa_r+0x280>
 8005840:	2b05      	cmp	r3, #5
 8005842:	bfc4      	itt	gt
 8005844:	3b04      	subgt	r3, #4
 8005846:	9307      	strgt	r3, [sp, #28]
 8005848:	9b07      	ldr	r3, [sp, #28]
 800584a:	f1a3 0302 	sub.w	r3, r3, #2
 800584e:	bfcc      	ite	gt
 8005850:	2400      	movgt	r4, #0
 8005852:	2401      	movle	r4, #1
 8005854:	2b03      	cmp	r3, #3
 8005856:	d863      	bhi.n	8005920 <_dtoa_r+0x298>
 8005858:	e8df f003 	tbb	[pc, r3]
 800585c:	2b375452 	.word	0x2b375452
 8005860:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005864:	441e      	add	r6, r3
 8005866:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800586a:	2b20      	cmp	r3, #32
 800586c:	bfc1      	itttt	gt
 800586e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005872:	409f      	lslgt	r7, r3
 8005874:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005878:	fa24 f303 	lsrgt.w	r3, r4, r3
 800587c:	bfd6      	itet	le
 800587e:	f1c3 0320 	rsble	r3, r3, #32
 8005882:	ea47 0003 	orrgt.w	r0, r7, r3
 8005886:	fa04 f003 	lslle.w	r0, r4, r3
 800588a:	f7fa fe43 	bl	8000514 <__aeabi_ui2d>
 800588e:	2201      	movs	r2, #1
 8005890:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005894:	3e01      	subs	r6, #1
 8005896:	9212      	str	r2, [sp, #72]	@ 0x48
 8005898:	e776      	b.n	8005788 <_dtoa_r+0x100>
 800589a:	2301      	movs	r3, #1
 800589c:	e7b7      	b.n	800580e <_dtoa_r+0x186>
 800589e:	9010      	str	r0, [sp, #64]	@ 0x40
 80058a0:	e7b6      	b.n	8005810 <_dtoa_r+0x188>
 80058a2:	9b00      	ldr	r3, [sp, #0]
 80058a4:	1bdb      	subs	r3, r3, r7
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	427b      	negs	r3, r7
 80058aa:	9308      	str	r3, [sp, #32]
 80058ac:	2300      	movs	r3, #0
 80058ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80058b0:	e7c3      	b.n	800583a <_dtoa_r+0x1b2>
 80058b2:	2301      	movs	r3, #1
 80058b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058b8:	eb07 0b03 	add.w	fp, r7, r3
 80058bc:	f10b 0301 	add.w	r3, fp, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	9303      	str	r3, [sp, #12]
 80058c4:	bfb8      	it	lt
 80058c6:	2301      	movlt	r3, #1
 80058c8:	e006      	b.n	80058d8 <_dtoa_r+0x250>
 80058ca:	2301      	movs	r3, #1
 80058cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dd28      	ble.n	8005926 <_dtoa_r+0x29e>
 80058d4:	469b      	mov	fp, r3
 80058d6:	9303      	str	r3, [sp, #12]
 80058d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80058dc:	2100      	movs	r1, #0
 80058de:	2204      	movs	r2, #4
 80058e0:	f102 0514 	add.w	r5, r2, #20
 80058e4:	429d      	cmp	r5, r3
 80058e6:	d926      	bls.n	8005936 <_dtoa_r+0x2ae>
 80058e8:	6041      	str	r1, [r0, #4]
 80058ea:	4648      	mov	r0, r9
 80058ec:	f000 fd9c 	bl	8006428 <_Balloc>
 80058f0:	4682      	mov	sl, r0
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d142      	bne.n	800597c <_dtoa_r+0x2f4>
 80058f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005970 <_dtoa_r+0x2e8>)
 80058f8:	4602      	mov	r2, r0
 80058fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80058fe:	e6da      	b.n	80056b6 <_dtoa_r+0x2e>
 8005900:	2300      	movs	r3, #0
 8005902:	e7e3      	b.n	80058cc <_dtoa_r+0x244>
 8005904:	2300      	movs	r3, #0
 8005906:	e7d5      	b.n	80058b4 <_dtoa_r+0x22c>
 8005908:	2401      	movs	r4, #1
 800590a:	2300      	movs	r3, #0
 800590c:	9307      	str	r3, [sp, #28]
 800590e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005910:	f04f 3bff 	mov.w	fp, #4294967295
 8005914:	2200      	movs	r2, #0
 8005916:	f8cd b00c 	str.w	fp, [sp, #12]
 800591a:	2312      	movs	r3, #18
 800591c:	920c      	str	r2, [sp, #48]	@ 0x30
 800591e:	e7db      	b.n	80058d8 <_dtoa_r+0x250>
 8005920:	2301      	movs	r3, #1
 8005922:	9309      	str	r3, [sp, #36]	@ 0x24
 8005924:	e7f4      	b.n	8005910 <_dtoa_r+0x288>
 8005926:	f04f 0b01 	mov.w	fp, #1
 800592a:	f8cd b00c 	str.w	fp, [sp, #12]
 800592e:	465b      	mov	r3, fp
 8005930:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005934:	e7d0      	b.n	80058d8 <_dtoa_r+0x250>
 8005936:	3101      	adds	r1, #1
 8005938:	0052      	lsls	r2, r2, #1
 800593a:	e7d1      	b.n	80058e0 <_dtoa_r+0x258>
 800593c:	f3af 8000 	nop.w
 8005940:	636f4361 	.word	0x636f4361
 8005944:	3fd287a7 	.word	0x3fd287a7
 8005948:	8b60c8b3 	.word	0x8b60c8b3
 800594c:	3fc68a28 	.word	0x3fc68a28
 8005950:	509f79fb 	.word	0x509f79fb
 8005954:	3fd34413 	.word	0x3fd34413
 8005958:	080077c1 	.word	0x080077c1
 800595c:	080077d8 	.word	0x080077d8
 8005960:	7ff00000 	.word	0x7ff00000
 8005964:	08007791 	.word	0x08007791
 8005968:	3ff80000 	.word	0x3ff80000
 800596c:	08007928 	.word	0x08007928
 8005970:	08007830 	.word	0x08007830
 8005974:	080077bd 	.word	0x080077bd
 8005978:	08007790 	.word	0x08007790
 800597c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005980:	6018      	str	r0, [r3, #0]
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	2b0e      	cmp	r3, #14
 8005986:	f200 80a1 	bhi.w	8005acc <_dtoa_r+0x444>
 800598a:	2c00      	cmp	r4, #0
 800598c:	f000 809e 	beq.w	8005acc <_dtoa_r+0x444>
 8005990:	2f00      	cmp	r7, #0
 8005992:	dd33      	ble.n	80059fc <_dtoa_r+0x374>
 8005994:	4b9c      	ldr	r3, [pc, #624]	@ (8005c08 <_dtoa_r+0x580>)
 8005996:	f007 020f 	and.w	r2, r7, #15
 800599a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800599e:	ed93 7b00 	vldr	d7, [r3]
 80059a2:	05f8      	lsls	r0, r7, #23
 80059a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80059a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059ac:	d516      	bpl.n	80059dc <_dtoa_r+0x354>
 80059ae:	4b97      	ldr	r3, [pc, #604]	@ (8005c0c <_dtoa_r+0x584>)
 80059b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80059b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059b8:	f7fa ff50 	bl	800085c <__aeabi_ddiv>
 80059bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c0:	f004 040f 	and.w	r4, r4, #15
 80059c4:	2603      	movs	r6, #3
 80059c6:	4d91      	ldr	r5, [pc, #580]	@ (8005c0c <_dtoa_r+0x584>)
 80059c8:	b954      	cbnz	r4, 80059e0 <_dtoa_r+0x358>
 80059ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d2:	f7fa ff43 	bl	800085c <__aeabi_ddiv>
 80059d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059da:	e028      	b.n	8005a2e <_dtoa_r+0x3a6>
 80059dc:	2602      	movs	r6, #2
 80059de:	e7f2      	b.n	80059c6 <_dtoa_r+0x33e>
 80059e0:	07e1      	lsls	r1, r4, #31
 80059e2:	d508      	bpl.n	80059f6 <_dtoa_r+0x36e>
 80059e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059ec:	f7fa fe0c 	bl	8000608 <__aeabi_dmul>
 80059f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059f4:	3601      	adds	r6, #1
 80059f6:	1064      	asrs	r4, r4, #1
 80059f8:	3508      	adds	r5, #8
 80059fa:	e7e5      	b.n	80059c8 <_dtoa_r+0x340>
 80059fc:	f000 80af 	beq.w	8005b5e <_dtoa_r+0x4d6>
 8005a00:	427c      	negs	r4, r7
 8005a02:	4b81      	ldr	r3, [pc, #516]	@ (8005c08 <_dtoa_r+0x580>)
 8005a04:	4d81      	ldr	r5, [pc, #516]	@ (8005c0c <_dtoa_r+0x584>)
 8005a06:	f004 020f 	and.w	r2, r4, #15
 8005a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a16:	f7fa fdf7 	bl	8000608 <__aeabi_dmul>
 8005a1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a1e:	1124      	asrs	r4, r4, #4
 8005a20:	2300      	movs	r3, #0
 8005a22:	2602      	movs	r6, #2
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	f040 808f 	bne.w	8005b48 <_dtoa_r+0x4c0>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d3      	bne.n	80059d6 <_dtoa_r+0x34e>
 8005a2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8094 	beq.w	8005b62 <_dtoa_r+0x4da>
 8005a3a:	4b75      	ldr	r3, [pc, #468]	@ (8005c10 <_dtoa_r+0x588>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	f7fb f853 	bl	8000aec <__aeabi_dcmplt>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f000 808b 	beq.w	8005b62 <_dtoa_r+0x4da>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8087 	beq.w	8005b62 <_dtoa_r+0x4da>
 8005a54:	f1bb 0f00 	cmp.w	fp, #0
 8005a58:	dd34      	ble.n	8005ac4 <_dtoa_r+0x43c>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4b6d      	ldr	r3, [pc, #436]	@ (8005c14 <_dtoa_r+0x58c>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4629      	mov	r1, r5
 8005a62:	f7fa fdd1 	bl	8000608 <__aeabi_dmul>
 8005a66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a6a:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a6e:	3601      	adds	r6, #1
 8005a70:	465c      	mov	r4, fp
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7fa fd5e 	bl	8000534 <__aeabi_i2d>
 8005a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7c:	f7fa fdc4 	bl	8000608 <__aeabi_dmul>
 8005a80:	4b65      	ldr	r3, [pc, #404]	@ (8005c18 <_dtoa_r+0x590>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	f7fa fc0a 	bl	800029c <__adddf3>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d16a      	bne.n	8005b68 <_dtoa_r+0x4e0>
 8005a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a96:	4b61      	ldr	r3, [pc, #388]	@ (8005c1c <_dtoa_r+0x594>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f7fa fbfd 	bl	8000298 <__aeabi_dsub>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005aa6:	462a      	mov	r2, r5
 8005aa8:	4633      	mov	r3, r6
 8005aaa:	f7fb f83d 	bl	8000b28 <__aeabi_dcmpgt>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f040 8298 	bne.w	8005fe4 <_dtoa_r+0x95c>
 8005ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ab8:	462a      	mov	r2, r5
 8005aba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005abe:	f7fb f815 	bl	8000aec <__aeabi_dcmplt>
 8005ac2:	bb38      	cbnz	r0, 8005b14 <_dtoa_r+0x48c>
 8005ac4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005ac8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005acc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f2c0 8157 	blt.w	8005d82 <_dtoa_r+0x6fa>
 8005ad4:	2f0e      	cmp	r7, #14
 8005ad6:	f300 8154 	bgt.w	8005d82 <_dtoa_r+0x6fa>
 8005ada:	4b4b      	ldr	r3, [pc, #300]	@ (8005c08 <_dtoa_r+0x580>)
 8005adc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ae0:	ed93 7b00 	vldr	d7, [r3]
 8005ae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	ed8d 7b00 	vstr	d7, [sp]
 8005aec:	f280 80e5 	bge.w	8005cba <_dtoa_r+0x632>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f300 80e1 	bgt.w	8005cba <_dtoa_r+0x632>
 8005af8:	d10c      	bne.n	8005b14 <_dtoa_r+0x48c>
 8005afa:	4b48      	ldr	r3, [pc, #288]	@ (8005c1c <_dtoa_r+0x594>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	ec51 0b17 	vmov	r0, r1, d7
 8005b02:	f7fa fd81 	bl	8000608 <__aeabi_dmul>
 8005b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0a:	f7fb f803 	bl	8000b14 <__aeabi_dcmpge>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f000 8266 	beq.w	8005fe0 <_dtoa_r+0x958>
 8005b14:	2400      	movs	r4, #0
 8005b16:	4625      	mov	r5, r4
 8005b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b1a:	4656      	mov	r6, sl
 8005b1c:	ea6f 0803 	mvn.w	r8, r3
 8005b20:	2700      	movs	r7, #0
 8005b22:	4621      	mov	r1, r4
 8005b24:	4648      	mov	r0, r9
 8005b26:	f000 fcbf 	bl	80064a8 <_Bfree>
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	f000 80bd 	beq.w	8005caa <_dtoa_r+0x622>
 8005b30:	b12f      	cbz	r7, 8005b3e <_dtoa_r+0x4b6>
 8005b32:	42af      	cmp	r7, r5
 8005b34:	d003      	beq.n	8005b3e <_dtoa_r+0x4b6>
 8005b36:	4639      	mov	r1, r7
 8005b38:	4648      	mov	r0, r9
 8005b3a:	f000 fcb5 	bl	80064a8 <_Bfree>
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4648      	mov	r0, r9
 8005b42:	f000 fcb1 	bl	80064a8 <_Bfree>
 8005b46:	e0b0      	b.n	8005caa <_dtoa_r+0x622>
 8005b48:	07e2      	lsls	r2, r4, #31
 8005b4a:	d505      	bpl.n	8005b58 <_dtoa_r+0x4d0>
 8005b4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b50:	f7fa fd5a 	bl	8000608 <__aeabi_dmul>
 8005b54:	3601      	adds	r6, #1
 8005b56:	2301      	movs	r3, #1
 8005b58:	1064      	asrs	r4, r4, #1
 8005b5a:	3508      	adds	r5, #8
 8005b5c:	e762      	b.n	8005a24 <_dtoa_r+0x39c>
 8005b5e:	2602      	movs	r6, #2
 8005b60:	e765      	b.n	8005a2e <_dtoa_r+0x3a6>
 8005b62:	9c03      	ldr	r4, [sp, #12]
 8005b64:	46b8      	mov	r8, r7
 8005b66:	e784      	b.n	8005a72 <_dtoa_r+0x3ea>
 8005b68:	4b27      	ldr	r3, [pc, #156]	@ (8005c08 <_dtoa_r+0x580>)
 8005b6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b74:	4454      	add	r4, sl
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d054      	beq.n	8005c24 <_dtoa_r+0x59c>
 8005b7a:	4929      	ldr	r1, [pc, #164]	@ (8005c20 <_dtoa_r+0x598>)
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7fa fe6d 	bl	800085c <__aeabi_ddiv>
 8005b82:	4633      	mov	r3, r6
 8005b84:	462a      	mov	r2, r5
 8005b86:	f7fa fb87 	bl	8000298 <__aeabi_dsub>
 8005b8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b8e:	4656      	mov	r6, sl
 8005b90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b94:	f7fa ffe8 	bl	8000b68 <__aeabi_d2iz>
 8005b98:	4605      	mov	r5, r0
 8005b9a:	f7fa fccb 	bl	8000534 <__aeabi_i2d>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba6:	f7fa fb77 	bl	8000298 <__aeabi_dsub>
 8005baa:	3530      	adds	r5, #48	@ 0x30
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bb4:	f806 5b01 	strb.w	r5, [r6], #1
 8005bb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bbc:	f7fa ff96 	bl	8000aec <__aeabi_dcmplt>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d172      	bne.n	8005caa <_dtoa_r+0x622>
 8005bc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc8:	4911      	ldr	r1, [pc, #68]	@ (8005c10 <_dtoa_r+0x588>)
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f7fa fb64 	bl	8000298 <__aeabi_dsub>
 8005bd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bd4:	f7fa ff8a 	bl	8000aec <__aeabi_dcmplt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f040 80b4 	bne.w	8005d46 <_dtoa_r+0x6be>
 8005bde:	42a6      	cmp	r6, r4
 8005be0:	f43f af70 	beq.w	8005ac4 <_dtoa_r+0x43c>
 8005be4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005be8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <_dtoa_r+0x58c>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	f7fa fd0c 	bl	8000608 <__aeabi_dmul>
 8005bf0:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <_dtoa_r+0x58c>)
 8005bf2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bfc:	f7fa fd04 	bl	8000608 <__aeabi_dmul>
 8005c00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c04:	e7c4      	b.n	8005b90 <_dtoa_r+0x508>
 8005c06:	bf00      	nop
 8005c08:	08007928 	.word	0x08007928
 8005c0c:	08007900 	.word	0x08007900
 8005c10:	3ff00000 	.word	0x3ff00000
 8005c14:	40240000 	.word	0x40240000
 8005c18:	401c0000 	.word	0x401c0000
 8005c1c:	40140000 	.word	0x40140000
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7fa fcee 	bl	8000608 <__aeabi_dmul>
 8005c2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c30:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c32:	4656      	mov	r6, sl
 8005c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c38:	f7fa ff96 	bl	8000b68 <__aeabi_d2iz>
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	f7fa fc79 	bl	8000534 <__aeabi_i2d>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c4a:	f7fa fb25 	bl	8000298 <__aeabi_dsub>
 8005c4e:	3530      	adds	r5, #48	@ 0x30
 8005c50:	f806 5b01 	strb.w	r5, [r6], #1
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	d124      	bne.n	8005cae <_dtoa_r+0x626>
 8005c64:	4baf      	ldr	r3, [pc, #700]	@ (8005f24 <_dtoa_r+0x89c>)
 8005c66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c6a:	f7fa fb17 	bl	800029c <__adddf3>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c76:	f7fa ff57 	bl	8000b28 <__aeabi_dcmpgt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d163      	bne.n	8005d46 <_dtoa_r+0x6be>
 8005c7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c82:	49a8      	ldr	r1, [pc, #672]	@ (8005f24 <_dtoa_r+0x89c>)
 8005c84:	2000      	movs	r0, #0
 8005c86:	f7fa fb07 	bl	8000298 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c92:	f7fa ff2b 	bl	8000aec <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f43f af14 	beq.w	8005ac4 <_dtoa_r+0x43c>
 8005c9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c9e:	1e73      	subs	r3, r6, #1
 8005ca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ca2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ca6:	2b30      	cmp	r3, #48	@ 0x30
 8005ca8:	d0f8      	beq.n	8005c9c <_dtoa_r+0x614>
 8005caa:	4647      	mov	r7, r8
 8005cac:	e03b      	b.n	8005d26 <_dtoa_r+0x69e>
 8005cae:	4b9e      	ldr	r3, [pc, #632]	@ (8005f28 <_dtoa_r+0x8a0>)
 8005cb0:	f7fa fcaa 	bl	8000608 <__aeabi_dmul>
 8005cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cb8:	e7bc      	b.n	8005c34 <_dtoa_r+0x5ac>
 8005cba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005cbe:	4656      	mov	r6, sl
 8005cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa fdc8 	bl	800085c <__aeabi_ddiv>
 8005ccc:	f7fa ff4c 	bl	8000b68 <__aeabi_d2iz>
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	f7fa fc2f 	bl	8000534 <__aeabi_i2d>
 8005cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cda:	f7fa fc95 	bl	8000608 <__aeabi_dmul>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005cea:	f7fa fad5 	bl	8000298 <__aeabi_dsub>
 8005cee:	f806 4b01 	strb.w	r4, [r6], #1
 8005cf2:	9d03      	ldr	r5, [sp, #12]
 8005cf4:	eba6 040a 	sub.w	r4, r6, sl
 8005cf8:	42a5      	cmp	r5, r4
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	d133      	bne.n	8005d68 <_dtoa_r+0x6e0>
 8005d00:	f7fa facc 	bl	800029c <__adddf3>
 8005d04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	f7fa ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 8005d10:	b9c0      	cbnz	r0, 8005d44 <_dtoa_r+0x6bc>
 8005d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d1e:	b110      	cbz	r0, 8005d26 <_dtoa_r+0x69e>
 8005d20:	f018 0f01 	tst.w	r8, #1
 8005d24:	d10e      	bne.n	8005d44 <_dtoa_r+0x6bc>
 8005d26:	9902      	ldr	r1, [sp, #8]
 8005d28:	4648      	mov	r0, r9
 8005d2a:	f000 fbbd 	bl	80064a8 <_Bfree>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	7033      	strb	r3, [r6, #0]
 8005d32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d34:	3701      	adds	r7, #1
 8005d36:	601f      	str	r7, [r3, #0]
 8005d38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 824b 	beq.w	80061d6 <_dtoa_r+0xb4e>
 8005d40:	601e      	str	r6, [r3, #0]
 8005d42:	e248      	b.n	80061d6 <_dtoa_r+0xb4e>
 8005d44:	46b8      	mov	r8, r7
 8005d46:	4633      	mov	r3, r6
 8005d48:	461e      	mov	r6, r3
 8005d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d4e:	2a39      	cmp	r2, #57	@ 0x39
 8005d50:	d106      	bne.n	8005d60 <_dtoa_r+0x6d8>
 8005d52:	459a      	cmp	sl, r3
 8005d54:	d1f8      	bne.n	8005d48 <_dtoa_r+0x6c0>
 8005d56:	2230      	movs	r2, #48	@ 0x30
 8005d58:	f108 0801 	add.w	r8, r8, #1
 8005d5c:	f88a 2000 	strb.w	r2, [sl]
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	3201      	adds	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e7a0      	b.n	8005caa <_dtoa_r+0x622>
 8005d68:	4b6f      	ldr	r3, [pc, #444]	@ (8005f28 <_dtoa_r+0x8a0>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f7fa fc4c 	bl	8000608 <__aeabi_dmul>
 8005d70:	2200      	movs	r2, #0
 8005d72:	2300      	movs	r3, #0
 8005d74:	4604      	mov	r4, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	f7fa feae 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d09f      	beq.n	8005cc0 <_dtoa_r+0x638>
 8005d80:	e7d1      	b.n	8005d26 <_dtoa_r+0x69e>
 8005d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	f000 80ea 	beq.w	8005f5e <_dtoa_r+0x8d6>
 8005d8a:	9a07      	ldr	r2, [sp, #28]
 8005d8c:	2a01      	cmp	r2, #1
 8005d8e:	f300 80cd 	bgt.w	8005f2c <_dtoa_r+0x8a4>
 8005d92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	f000 80c1 	beq.w	8005f1c <_dtoa_r+0x894>
 8005d9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d9e:	9c08      	ldr	r4, [sp, #32]
 8005da0:	9e00      	ldr	r6, [sp, #0]
 8005da2:	9a00      	ldr	r2, [sp, #0]
 8005da4:	441a      	add	r2, r3
 8005da6:	9200      	str	r2, [sp, #0]
 8005da8:	9a06      	ldr	r2, [sp, #24]
 8005daa:	2101      	movs	r1, #1
 8005dac:	441a      	add	r2, r3
 8005dae:	4648      	mov	r0, r9
 8005db0:	9206      	str	r2, [sp, #24]
 8005db2:	f000 fc2d 	bl	8006610 <__i2b>
 8005db6:	4605      	mov	r5, r0
 8005db8:	b166      	cbz	r6, 8005dd4 <_dtoa_r+0x74c>
 8005dba:	9b06      	ldr	r3, [sp, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd09      	ble.n	8005dd4 <_dtoa_r+0x74c>
 8005dc0:	42b3      	cmp	r3, r6
 8005dc2:	9a00      	ldr	r2, [sp, #0]
 8005dc4:	bfa8      	it	ge
 8005dc6:	4633      	movge	r3, r6
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	9200      	str	r2, [sp, #0]
 8005dcc:	9a06      	ldr	r2, [sp, #24]
 8005dce:	1af6      	subs	r6, r6, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	9306      	str	r3, [sp, #24]
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	b30b      	cbz	r3, 8005e1c <_dtoa_r+0x794>
 8005dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80c6 	beq.w	8005f6c <_dtoa_r+0x8e4>
 8005de0:	2c00      	cmp	r4, #0
 8005de2:	f000 80c0 	beq.w	8005f66 <_dtoa_r+0x8de>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4622      	mov	r2, r4
 8005dea:	4648      	mov	r0, r9
 8005dec:	f000 fcc8 	bl	8006780 <__pow5mult>
 8005df0:	9a02      	ldr	r2, [sp, #8]
 8005df2:	4601      	mov	r1, r0
 8005df4:	4605      	mov	r5, r0
 8005df6:	4648      	mov	r0, r9
 8005df8:	f000 fc20 	bl	800663c <__multiply>
 8005dfc:	9902      	ldr	r1, [sp, #8]
 8005dfe:	4680      	mov	r8, r0
 8005e00:	4648      	mov	r0, r9
 8005e02:	f000 fb51 	bl	80064a8 <_Bfree>
 8005e06:	9b08      	ldr	r3, [sp, #32]
 8005e08:	1b1b      	subs	r3, r3, r4
 8005e0a:	9308      	str	r3, [sp, #32]
 8005e0c:	f000 80b1 	beq.w	8005f72 <_dtoa_r+0x8ea>
 8005e10:	9a08      	ldr	r2, [sp, #32]
 8005e12:	4641      	mov	r1, r8
 8005e14:	4648      	mov	r0, r9
 8005e16:	f000 fcb3 	bl	8006780 <__pow5mult>
 8005e1a:	9002      	str	r0, [sp, #8]
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4648      	mov	r0, r9
 8005e20:	f000 fbf6 	bl	8006610 <__i2b>
 8005e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e26:	4604      	mov	r4, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 81d8 	beq.w	80061de <_dtoa_r+0xb56>
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4601      	mov	r1, r0
 8005e32:	4648      	mov	r0, r9
 8005e34:	f000 fca4 	bl	8006780 <__pow5mult>
 8005e38:	9b07      	ldr	r3, [sp, #28]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	f300 809f 	bgt.w	8005f80 <_dtoa_r+0x8f8>
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8097 	bne.w	8005f78 <_dtoa_r+0x8f0>
 8005e4a:	9b05      	ldr	r3, [sp, #20]
 8005e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 8093 	bne.w	8005f7c <_dtoa_r+0x8f4>
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e5c:	0d1b      	lsrs	r3, r3, #20
 8005e5e:	051b      	lsls	r3, r3, #20
 8005e60:	b133      	cbz	r3, 8005e70 <_dtoa_r+0x7e8>
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	9b06      	ldr	r3, [sp, #24]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	9306      	str	r3, [sp, #24]
 8005e6e:	2301      	movs	r3, #1
 8005e70:	9308      	str	r3, [sp, #32]
 8005e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 81b8 	beq.w	80061ea <_dtoa_r+0xb62>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	f000 fb79 	bl	8006578 <__hi0bits>
 8005e86:	f1c0 0020 	rsb	r0, r0, #32
 8005e8a:	9b06      	ldr	r3, [sp, #24]
 8005e8c:	4418      	add	r0, r3
 8005e8e:	f010 001f 	ands.w	r0, r0, #31
 8005e92:	f000 8082 	beq.w	8005f9a <_dtoa_r+0x912>
 8005e96:	f1c0 0320 	rsb	r3, r0, #32
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	dd73      	ble.n	8005f86 <_dtoa_r+0x8fe>
 8005e9e:	9b00      	ldr	r3, [sp, #0]
 8005ea0:	f1c0 001c 	rsb	r0, r0, #28
 8005ea4:	4403      	add	r3, r0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	9b06      	ldr	r3, [sp, #24]
 8005eaa:	4403      	add	r3, r0
 8005eac:	4406      	add	r6, r0
 8005eae:	9306      	str	r3, [sp, #24]
 8005eb0:	9b00      	ldr	r3, [sp, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dd05      	ble.n	8005ec2 <_dtoa_r+0x83a>
 8005eb6:	9902      	ldr	r1, [sp, #8]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4648      	mov	r0, r9
 8005ebc:	f000 fcba 	bl	8006834 <__lshift>
 8005ec0:	9002      	str	r0, [sp, #8]
 8005ec2:	9b06      	ldr	r3, [sp, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd05      	ble.n	8005ed4 <_dtoa_r+0x84c>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4648      	mov	r0, r9
 8005ece:	f000 fcb1 	bl	8006834 <__lshift>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d061      	beq.n	8005f9e <_dtoa_r+0x916>
 8005eda:	9802      	ldr	r0, [sp, #8]
 8005edc:	4621      	mov	r1, r4
 8005ede:	f000 fd15 	bl	800690c <__mcmp>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	da5b      	bge.n	8005f9e <_dtoa_r+0x916>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9902      	ldr	r1, [sp, #8]
 8005eea:	220a      	movs	r2, #10
 8005eec:	4648      	mov	r0, r9
 8005eee:	f000 fafd 	bl	80064ec <__multadd>
 8005ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef4:	9002      	str	r0, [sp, #8]
 8005ef6:	f107 38ff 	add.w	r8, r7, #4294967295
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8177 	beq.w	80061ee <_dtoa_r+0xb66>
 8005f00:	4629      	mov	r1, r5
 8005f02:	2300      	movs	r3, #0
 8005f04:	220a      	movs	r2, #10
 8005f06:	4648      	mov	r0, r9
 8005f08:	f000 faf0 	bl	80064ec <__multadd>
 8005f0c:	f1bb 0f00 	cmp.w	fp, #0
 8005f10:	4605      	mov	r5, r0
 8005f12:	dc6f      	bgt.n	8005ff4 <_dtoa_r+0x96c>
 8005f14:	9b07      	ldr	r3, [sp, #28]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	dc49      	bgt.n	8005fae <_dtoa_r+0x926>
 8005f1a:	e06b      	b.n	8005ff4 <_dtoa_r+0x96c>
 8005f1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f22:	e73c      	b.n	8005d9e <_dtoa_r+0x716>
 8005f24:	3fe00000 	.word	0x3fe00000
 8005f28:	40240000 	.word	0x40240000
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	1e5c      	subs	r4, r3, #1
 8005f30:	9b08      	ldr	r3, [sp, #32]
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	db09      	blt.n	8005f4a <_dtoa_r+0x8c2>
 8005f36:	1b1c      	subs	r4, r3, r4
 8005f38:	9b03      	ldr	r3, [sp, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f6bf af30 	bge.w	8005da0 <_dtoa_r+0x718>
 8005f40:	9b00      	ldr	r3, [sp, #0]
 8005f42:	9a03      	ldr	r2, [sp, #12]
 8005f44:	1a9e      	subs	r6, r3, r2
 8005f46:	2300      	movs	r3, #0
 8005f48:	e72b      	b.n	8005da2 <_dtoa_r+0x71a>
 8005f4a:	9b08      	ldr	r3, [sp, #32]
 8005f4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f4e:	9408      	str	r4, [sp, #32]
 8005f50:	1ae3      	subs	r3, r4, r3
 8005f52:	441a      	add	r2, r3
 8005f54:	9e00      	ldr	r6, [sp, #0]
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	920d      	str	r2, [sp, #52]	@ 0x34
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	e721      	b.n	8005da2 <_dtoa_r+0x71a>
 8005f5e:	9c08      	ldr	r4, [sp, #32]
 8005f60:	9e00      	ldr	r6, [sp, #0]
 8005f62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005f64:	e728      	b.n	8005db8 <_dtoa_r+0x730>
 8005f66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005f6a:	e751      	b.n	8005e10 <_dtoa_r+0x788>
 8005f6c:	9a08      	ldr	r2, [sp, #32]
 8005f6e:	9902      	ldr	r1, [sp, #8]
 8005f70:	e750      	b.n	8005e14 <_dtoa_r+0x78c>
 8005f72:	f8cd 8008 	str.w	r8, [sp, #8]
 8005f76:	e751      	b.n	8005e1c <_dtoa_r+0x794>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e779      	b.n	8005e70 <_dtoa_r+0x7e8>
 8005f7c:	9b04      	ldr	r3, [sp, #16]
 8005f7e:	e777      	b.n	8005e70 <_dtoa_r+0x7e8>
 8005f80:	2300      	movs	r3, #0
 8005f82:	9308      	str	r3, [sp, #32]
 8005f84:	e779      	b.n	8005e7a <_dtoa_r+0x7f2>
 8005f86:	d093      	beq.n	8005eb0 <_dtoa_r+0x828>
 8005f88:	9a00      	ldr	r2, [sp, #0]
 8005f8a:	331c      	adds	r3, #28
 8005f8c:	441a      	add	r2, r3
 8005f8e:	9200      	str	r2, [sp, #0]
 8005f90:	9a06      	ldr	r2, [sp, #24]
 8005f92:	441a      	add	r2, r3
 8005f94:	441e      	add	r6, r3
 8005f96:	9206      	str	r2, [sp, #24]
 8005f98:	e78a      	b.n	8005eb0 <_dtoa_r+0x828>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	e7f4      	b.n	8005f88 <_dtoa_r+0x900>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	46b8      	mov	r8, r7
 8005fa4:	dc20      	bgt.n	8005fe8 <_dtoa_r+0x960>
 8005fa6:	469b      	mov	fp, r3
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	dd1e      	ble.n	8005fec <_dtoa_r+0x964>
 8005fae:	f1bb 0f00 	cmp.w	fp, #0
 8005fb2:	f47f adb1 	bne.w	8005b18 <_dtoa_r+0x490>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	465b      	mov	r3, fp
 8005fba:	2205      	movs	r2, #5
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	f000 fa95 	bl	80064ec <__multadd>
 8005fc2:	4601      	mov	r1, r0
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	9802      	ldr	r0, [sp, #8]
 8005fc8:	f000 fca0 	bl	800690c <__mcmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	f77f ada3 	ble.w	8005b18 <_dtoa_r+0x490>
 8005fd2:	4656      	mov	r6, sl
 8005fd4:	2331      	movs	r3, #49	@ 0x31
 8005fd6:	f806 3b01 	strb.w	r3, [r6], #1
 8005fda:	f108 0801 	add.w	r8, r8, #1
 8005fde:	e59f      	b.n	8005b20 <_dtoa_r+0x498>
 8005fe0:	9c03      	ldr	r4, [sp, #12]
 8005fe2:	46b8      	mov	r8, r7
 8005fe4:	4625      	mov	r5, r4
 8005fe6:	e7f4      	b.n	8005fd2 <_dtoa_r+0x94a>
 8005fe8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8101 	beq.w	80061f6 <_dtoa_r+0xb6e>
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	dd05      	ble.n	8006004 <_dtoa_r+0x97c>
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	4648      	mov	r0, r9
 8005ffe:	f000 fc19 	bl	8006834 <__lshift>
 8006002:	4605      	mov	r5, r0
 8006004:	9b08      	ldr	r3, [sp, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d05c      	beq.n	80060c4 <_dtoa_r+0xa3c>
 800600a:	6869      	ldr	r1, [r5, #4]
 800600c:	4648      	mov	r0, r9
 800600e:	f000 fa0b 	bl	8006428 <_Balloc>
 8006012:	4606      	mov	r6, r0
 8006014:	b928      	cbnz	r0, 8006022 <_dtoa_r+0x99a>
 8006016:	4b82      	ldr	r3, [pc, #520]	@ (8006220 <_dtoa_r+0xb98>)
 8006018:	4602      	mov	r2, r0
 800601a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800601e:	f7ff bb4a 	b.w	80056b6 <_dtoa_r+0x2e>
 8006022:	692a      	ldr	r2, [r5, #16]
 8006024:	3202      	adds	r2, #2
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	f105 010c 	add.w	r1, r5, #12
 800602c:	300c      	adds	r0, #12
 800602e:	f000 ffa3 	bl	8006f78 <memcpy>
 8006032:	2201      	movs	r2, #1
 8006034:	4631      	mov	r1, r6
 8006036:	4648      	mov	r0, r9
 8006038:	f000 fbfc 	bl	8006834 <__lshift>
 800603c:	f10a 0301 	add.w	r3, sl, #1
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	eb0a 030b 	add.w	r3, sl, fp
 8006046:	9308      	str	r3, [sp, #32]
 8006048:	9b04      	ldr	r3, [sp, #16]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	462f      	mov	r7, r5
 8006050:	9306      	str	r3, [sp, #24]
 8006052:	4605      	mov	r5, r0
 8006054:	9b00      	ldr	r3, [sp, #0]
 8006056:	9802      	ldr	r0, [sp, #8]
 8006058:	4621      	mov	r1, r4
 800605a:	f103 3bff 	add.w	fp, r3, #4294967295
 800605e:	f7ff fa88 	bl	8005572 <quorem>
 8006062:	4603      	mov	r3, r0
 8006064:	3330      	adds	r3, #48	@ 0x30
 8006066:	9003      	str	r0, [sp, #12]
 8006068:	4639      	mov	r1, r7
 800606a:	9802      	ldr	r0, [sp, #8]
 800606c:	9309      	str	r3, [sp, #36]	@ 0x24
 800606e:	f000 fc4d 	bl	800690c <__mcmp>
 8006072:	462a      	mov	r2, r5
 8006074:	9004      	str	r0, [sp, #16]
 8006076:	4621      	mov	r1, r4
 8006078:	4648      	mov	r0, r9
 800607a:	f000 fc63 	bl	8006944 <__mdiff>
 800607e:	68c2      	ldr	r2, [r0, #12]
 8006080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006082:	4606      	mov	r6, r0
 8006084:	bb02      	cbnz	r2, 80060c8 <_dtoa_r+0xa40>
 8006086:	4601      	mov	r1, r0
 8006088:	9802      	ldr	r0, [sp, #8]
 800608a:	f000 fc3f 	bl	800690c <__mcmp>
 800608e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006090:	4602      	mov	r2, r0
 8006092:	4631      	mov	r1, r6
 8006094:	4648      	mov	r0, r9
 8006096:	920c      	str	r2, [sp, #48]	@ 0x30
 8006098:	9309      	str	r3, [sp, #36]	@ 0x24
 800609a:	f000 fa05 	bl	80064a8 <_Bfree>
 800609e:	9b07      	ldr	r3, [sp, #28]
 80060a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060a2:	9e00      	ldr	r6, [sp, #0]
 80060a4:	ea42 0103 	orr.w	r1, r2, r3
 80060a8:	9b06      	ldr	r3, [sp, #24]
 80060aa:	4319      	orrs	r1, r3
 80060ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ae:	d10d      	bne.n	80060cc <_dtoa_r+0xa44>
 80060b0:	2b39      	cmp	r3, #57	@ 0x39
 80060b2:	d027      	beq.n	8006104 <_dtoa_r+0xa7c>
 80060b4:	9a04      	ldr	r2, [sp, #16]
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	dd01      	ble.n	80060be <_dtoa_r+0xa36>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	3331      	adds	r3, #49	@ 0x31
 80060be:	f88b 3000 	strb.w	r3, [fp]
 80060c2:	e52e      	b.n	8005b22 <_dtoa_r+0x49a>
 80060c4:	4628      	mov	r0, r5
 80060c6:	e7b9      	b.n	800603c <_dtoa_r+0x9b4>
 80060c8:	2201      	movs	r2, #1
 80060ca:	e7e2      	b.n	8006092 <_dtoa_r+0xa0a>
 80060cc:	9904      	ldr	r1, [sp, #16]
 80060ce:	2900      	cmp	r1, #0
 80060d0:	db04      	blt.n	80060dc <_dtoa_r+0xa54>
 80060d2:	9807      	ldr	r0, [sp, #28]
 80060d4:	4301      	orrs	r1, r0
 80060d6:	9806      	ldr	r0, [sp, #24]
 80060d8:	4301      	orrs	r1, r0
 80060da:	d120      	bne.n	800611e <_dtoa_r+0xa96>
 80060dc:	2a00      	cmp	r2, #0
 80060de:	ddee      	ble.n	80060be <_dtoa_r+0xa36>
 80060e0:	9902      	ldr	r1, [sp, #8]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4648      	mov	r0, r9
 80060e8:	f000 fba4 	bl	8006834 <__lshift>
 80060ec:	4621      	mov	r1, r4
 80060ee:	9002      	str	r0, [sp, #8]
 80060f0:	f000 fc0c 	bl	800690c <__mcmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	dc02      	bgt.n	8006100 <_dtoa_r+0xa78>
 80060fa:	d1e0      	bne.n	80060be <_dtoa_r+0xa36>
 80060fc:	07da      	lsls	r2, r3, #31
 80060fe:	d5de      	bpl.n	80060be <_dtoa_r+0xa36>
 8006100:	2b39      	cmp	r3, #57	@ 0x39
 8006102:	d1da      	bne.n	80060ba <_dtoa_r+0xa32>
 8006104:	2339      	movs	r3, #57	@ 0x39
 8006106:	f88b 3000 	strb.w	r3, [fp]
 800610a:	4633      	mov	r3, r6
 800610c:	461e      	mov	r6, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006114:	2a39      	cmp	r2, #57	@ 0x39
 8006116:	d04e      	beq.n	80061b6 <_dtoa_r+0xb2e>
 8006118:	3201      	adds	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e501      	b.n	8005b22 <_dtoa_r+0x49a>
 800611e:	2a00      	cmp	r2, #0
 8006120:	dd03      	ble.n	800612a <_dtoa_r+0xaa2>
 8006122:	2b39      	cmp	r3, #57	@ 0x39
 8006124:	d0ee      	beq.n	8006104 <_dtoa_r+0xa7c>
 8006126:	3301      	adds	r3, #1
 8006128:	e7c9      	b.n	80060be <_dtoa_r+0xa36>
 800612a:	9a00      	ldr	r2, [sp, #0]
 800612c:	9908      	ldr	r1, [sp, #32]
 800612e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006132:	428a      	cmp	r2, r1
 8006134:	d028      	beq.n	8006188 <_dtoa_r+0xb00>
 8006136:	9902      	ldr	r1, [sp, #8]
 8006138:	2300      	movs	r3, #0
 800613a:	220a      	movs	r2, #10
 800613c:	4648      	mov	r0, r9
 800613e:	f000 f9d5 	bl	80064ec <__multadd>
 8006142:	42af      	cmp	r7, r5
 8006144:	9002      	str	r0, [sp, #8]
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	f04f 020a 	mov.w	r2, #10
 800614e:	4639      	mov	r1, r7
 8006150:	4648      	mov	r0, r9
 8006152:	d107      	bne.n	8006164 <_dtoa_r+0xadc>
 8006154:	f000 f9ca 	bl	80064ec <__multadd>
 8006158:	4607      	mov	r7, r0
 800615a:	4605      	mov	r5, r0
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	e777      	b.n	8006054 <_dtoa_r+0x9cc>
 8006164:	f000 f9c2 	bl	80064ec <__multadd>
 8006168:	4629      	mov	r1, r5
 800616a:	4607      	mov	r7, r0
 800616c:	2300      	movs	r3, #0
 800616e:	220a      	movs	r2, #10
 8006170:	4648      	mov	r0, r9
 8006172:	f000 f9bb 	bl	80064ec <__multadd>
 8006176:	4605      	mov	r5, r0
 8006178:	e7f0      	b.n	800615c <_dtoa_r+0xad4>
 800617a:	f1bb 0f00 	cmp.w	fp, #0
 800617e:	bfcc      	ite	gt
 8006180:	465e      	movgt	r6, fp
 8006182:	2601      	movle	r6, #1
 8006184:	4456      	add	r6, sl
 8006186:	2700      	movs	r7, #0
 8006188:	9902      	ldr	r1, [sp, #8]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	4648      	mov	r0, r9
 8006190:	f000 fb50 	bl	8006834 <__lshift>
 8006194:	4621      	mov	r1, r4
 8006196:	9002      	str	r0, [sp, #8]
 8006198:	f000 fbb8 	bl	800690c <__mcmp>
 800619c:	2800      	cmp	r0, #0
 800619e:	dcb4      	bgt.n	800610a <_dtoa_r+0xa82>
 80061a0:	d102      	bne.n	80061a8 <_dtoa_r+0xb20>
 80061a2:	9b00      	ldr	r3, [sp, #0]
 80061a4:	07db      	lsls	r3, r3, #31
 80061a6:	d4b0      	bmi.n	800610a <_dtoa_r+0xa82>
 80061a8:	4633      	mov	r3, r6
 80061aa:	461e      	mov	r6, r3
 80061ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b0:	2a30      	cmp	r2, #48	@ 0x30
 80061b2:	d0fa      	beq.n	80061aa <_dtoa_r+0xb22>
 80061b4:	e4b5      	b.n	8005b22 <_dtoa_r+0x49a>
 80061b6:	459a      	cmp	sl, r3
 80061b8:	d1a8      	bne.n	800610c <_dtoa_r+0xa84>
 80061ba:	2331      	movs	r3, #49	@ 0x31
 80061bc:	f108 0801 	add.w	r8, r8, #1
 80061c0:	f88a 3000 	strb.w	r3, [sl]
 80061c4:	e4ad      	b.n	8005b22 <_dtoa_r+0x49a>
 80061c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006224 <_dtoa_r+0xb9c>
 80061cc:	b11b      	cbz	r3, 80061d6 <_dtoa_r+0xb4e>
 80061ce:	f10a 0308 	add.w	r3, sl, #8
 80061d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4650      	mov	r0, sl
 80061d8:	b017      	add	sp, #92	@ 0x5c
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	9b07      	ldr	r3, [sp, #28]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f77f ae2e 	ble.w	8005e42 <_dtoa_r+0x7ba>
 80061e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061e8:	9308      	str	r3, [sp, #32]
 80061ea:	2001      	movs	r0, #1
 80061ec:	e64d      	b.n	8005e8a <_dtoa_r+0x802>
 80061ee:	f1bb 0f00 	cmp.w	fp, #0
 80061f2:	f77f aed9 	ble.w	8005fa8 <_dtoa_r+0x920>
 80061f6:	4656      	mov	r6, sl
 80061f8:	9802      	ldr	r0, [sp, #8]
 80061fa:	4621      	mov	r1, r4
 80061fc:	f7ff f9b9 	bl	8005572 <quorem>
 8006200:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006204:	f806 3b01 	strb.w	r3, [r6], #1
 8006208:	eba6 020a 	sub.w	r2, r6, sl
 800620c:	4593      	cmp	fp, r2
 800620e:	ddb4      	ble.n	800617a <_dtoa_r+0xaf2>
 8006210:	9902      	ldr	r1, [sp, #8]
 8006212:	2300      	movs	r3, #0
 8006214:	220a      	movs	r2, #10
 8006216:	4648      	mov	r0, r9
 8006218:	f000 f968 	bl	80064ec <__multadd>
 800621c:	9002      	str	r0, [sp, #8]
 800621e:	e7eb      	b.n	80061f8 <_dtoa_r+0xb70>
 8006220:	08007830 	.word	0x08007830
 8006224:	080077b4 	.word	0x080077b4

08006228 <_free_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	d041      	beq.n	80062b4 <_free_r+0x8c>
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	18e4      	addlt	r4, r4, r3
 800623c:	f000 f8e8 	bl	8006410 <__malloc_lock>
 8006240:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <_free_r+0x90>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x2c>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006250:	f000 b8e4 	b.w	800641c <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x42>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1809      	addeq	r1, r1, r0
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x1e>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x4c>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x42>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1850      	adds	r0, r2, r1
 8006278:	42a0      	cmp	r0, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x6c>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	4401      	add	r1, r0
 8006280:	1850      	adds	r0, r2, r1
 8006282:	4283      	cmp	r3, r0
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x22>
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	4408      	add	r0, r1
 8006290:	6010      	str	r0, [r2, #0]
 8006292:	e7da      	b.n	800624a <_free_r+0x22>
 8006294:	d902      	bls.n	800629c <_free_r+0x74>
 8006296:	230c      	movs	r3, #12
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x22>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf04      	itt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	bf04      	itt	eq
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	6054      	str	r4, [r2, #4]
 80062b2:	e7ca      	b.n	800624a <_free_r+0x22>
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	20000504 	.word	0x20000504

080062bc <malloc>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	@ (80062c8 <malloc+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f000 b825 	b.w	8006310 <_malloc_r>
 80062c6:	bf00      	nop
 80062c8:	20000018 	.word	0x20000018

080062cc <sbrk_aligned>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4e0f      	ldr	r6, [pc, #60]	@ (800630c <sbrk_aligned+0x40>)
 80062d0:	460c      	mov	r4, r1
 80062d2:	6831      	ldr	r1, [r6, #0]
 80062d4:	4605      	mov	r5, r0
 80062d6:	b911      	cbnz	r1, 80062de <sbrk_aligned+0x12>
 80062d8:	f000 fe3e 	bl	8006f58 <_sbrk_r>
 80062dc:	6030      	str	r0, [r6, #0]
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fe39 	bl	8006f58 <_sbrk_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d103      	bne.n	80062f2 <sbrk_aligned+0x26>
 80062ea:	f04f 34ff 	mov.w	r4, #4294967295
 80062ee:	4620      	mov	r0, r4
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	1cc4      	adds	r4, r0, #3
 80062f4:	f024 0403 	bic.w	r4, r4, #3
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d0f8      	beq.n	80062ee <sbrk_aligned+0x22>
 80062fc:	1a21      	subs	r1, r4, r0
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 fe2a 	bl	8006f58 <_sbrk_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d1f2      	bne.n	80062ee <sbrk_aligned+0x22>
 8006308:	e7ef      	b.n	80062ea <sbrk_aligned+0x1e>
 800630a:	bf00      	nop
 800630c:	20000500 	.word	0x20000500

08006310 <_malloc_r>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	1ccd      	adds	r5, r1, #3
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	2d00      	cmp	r5, #0
 8006324:	4606      	mov	r6, r0
 8006326:	db01      	blt.n	800632c <_malloc_r+0x1c>
 8006328:	42a9      	cmp	r1, r5
 800632a:	d904      	bls.n	8006336 <_malloc_r+0x26>
 800632c:	230c      	movs	r3, #12
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	2000      	movs	r0, #0
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800640c <_malloc_r+0xfc>
 800633a:	f000 f869 	bl	8006410 <__malloc_lock>
 800633e:	f8d8 3000 	ldr.w	r3, [r8]
 8006342:	461c      	mov	r4, r3
 8006344:	bb44      	cbnz	r4, 8006398 <_malloc_r+0x88>
 8006346:	4629      	mov	r1, r5
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ffbf 	bl	80062cc <sbrk_aligned>
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	4604      	mov	r4, r0
 8006352:	d158      	bne.n	8006406 <_malloc_r+0xf6>
 8006354:	f8d8 4000 	ldr.w	r4, [r8]
 8006358:	4627      	mov	r7, r4
 800635a:	2f00      	cmp	r7, #0
 800635c:	d143      	bne.n	80063e6 <_malloc_r+0xd6>
 800635e:	2c00      	cmp	r4, #0
 8006360:	d04b      	beq.n	80063fa <_malloc_r+0xea>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	4639      	mov	r1, r7
 8006366:	4630      	mov	r0, r6
 8006368:	eb04 0903 	add.w	r9, r4, r3
 800636c:	f000 fdf4 	bl	8006f58 <_sbrk_r>
 8006370:	4581      	cmp	r9, r0
 8006372:	d142      	bne.n	80063fa <_malloc_r+0xea>
 8006374:	6821      	ldr	r1, [r4, #0]
 8006376:	1a6d      	subs	r5, r5, r1
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ffa6 	bl	80062cc <sbrk_aligned>
 8006380:	3001      	adds	r0, #1
 8006382:	d03a      	beq.n	80063fa <_malloc_r+0xea>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	442b      	add	r3, r5
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	f8d8 3000 	ldr.w	r3, [r8]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	bb62      	cbnz	r2, 80063ec <_malloc_r+0xdc>
 8006392:	f8c8 7000 	str.w	r7, [r8]
 8006396:	e00f      	b.n	80063b8 <_malloc_r+0xa8>
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	1b52      	subs	r2, r2, r5
 800639c:	d420      	bmi.n	80063e0 <_malloc_r+0xd0>
 800639e:	2a0b      	cmp	r2, #11
 80063a0:	d917      	bls.n	80063d2 <_malloc_r+0xc2>
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	6025      	str	r5, [r4, #0]
 80063a8:	bf18      	it	ne
 80063aa:	6059      	strne	r1, [r3, #4]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	bf08      	it	eq
 80063b0:	f8c8 1000 	streq.w	r1, [r8]
 80063b4:	5162      	str	r2, [r4, r5]
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 f82f 	bl	800641c <__malloc_unlock>
 80063be:	f104 000b 	add.w	r0, r4, #11
 80063c2:	1d23      	adds	r3, r4, #4
 80063c4:	f020 0007 	bic.w	r0, r0, #7
 80063c8:	1ac2      	subs	r2, r0, r3
 80063ca:	bf1c      	itt	ne
 80063cc:	1a1b      	subne	r3, r3, r0
 80063ce:	50a3      	strne	r3, [r4, r2]
 80063d0:	e7af      	b.n	8006332 <_malloc_r+0x22>
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	bf0c      	ite	eq
 80063d8:	f8c8 2000 	streq.w	r2, [r8]
 80063dc:	605a      	strne	r2, [r3, #4]
 80063de:	e7eb      	b.n	80063b8 <_malloc_r+0xa8>
 80063e0:	4623      	mov	r3, r4
 80063e2:	6864      	ldr	r4, [r4, #4]
 80063e4:	e7ae      	b.n	8006344 <_malloc_r+0x34>
 80063e6:	463c      	mov	r4, r7
 80063e8:	687f      	ldr	r7, [r7, #4]
 80063ea:	e7b6      	b.n	800635a <_malloc_r+0x4a>
 80063ec:	461a      	mov	r2, r3
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d1fb      	bne.n	80063ec <_malloc_r+0xdc>
 80063f4:	2300      	movs	r3, #0
 80063f6:	6053      	str	r3, [r2, #4]
 80063f8:	e7de      	b.n	80063b8 <_malloc_r+0xa8>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	4630      	mov	r0, r6
 8006400:	f000 f80c 	bl	800641c <__malloc_unlock>
 8006404:	e794      	b.n	8006330 <_malloc_r+0x20>
 8006406:	6005      	str	r5, [r0, #0]
 8006408:	e7d6      	b.n	80063b8 <_malloc_r+0xa8>
 800640a:	bf00      	nop
 800640c:	20000504 	.word	0x20000504

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_lock+0x8>)
 8006412:	f7ff b8ac 	b.w	800556e <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	200004fc 	.word	0x200004fc

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	@ (8006424 <__malloc_unlock+0x8>)
 800641e:	f7ff b8a7 	b.w	8005570 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	200004fc 	.word	0x200004fc

08006428 <_Balloc>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	69c6      	ldr	r6, [r0, #28]
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	b976      	cbnz	r6, 8006450 <_Balloc+0x28>
 8006432:	2010      	movs	r0, #16
 8006434:	f7ff ff42 	bl	80062bc <malloc>
 8006438:	4602      	mov	r2, r0
 800643a:	61e0      	str	r0, [r4, #28]
 800643c:	b920      	cbnz	r0, 8006448 <_Balloc+0x20>
 800643e:	4b18      	ldr	r3, [pc, #96]	@ (80064a0 <_Balloc+0x78>)
 8006440:	4818      	ldr	r0, [pc, #96]	@ (80064a4 <_Balloc+0x7c>)
 8006442:	216b      	movs	r1, #107	@ 0x6b
 8006444:	f000 fda6 	bl	8006f94 <__assert_func>
 8006448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800644c:	6006      	str	r6, [r0, #0]
 800644e:	60c6      	str	r6, [r0, #12]
 8006450:	69e6      	ldr	r6, [r4, #28]
 8006452:	68f3      	ldr	r3, [r6, #12]
 8006454:	b183      	cbz	r3, 8006478 <_Balloc+0x50>
 8006456:	69e3      	ldr	r3, [r4, #28]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800645e:	b9b8      	cbnz	r0, 8006490 <_Balloc+0x68>
 8006460:	2101      	movs	r1, #1
 8006462:	fa01 f605 	lsl.w	r6, r1, r5
 8006466:	1d72      	adds	r2, r6, #5
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fdb0 	bl	8006fd0 <_calloc_r>
 8006470:	b160      	cbz	r0, 800648c <_Balloc+0x64>
 8006472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006476:	e00e      	b.n	8006496 <_Balloc+0x6e>
 8006478:	2221      	movs	r2, #33	@ 0x21
 800647a:	2104      	movs	r1, #4
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fda7 	bl	8006fd0 <_calloc_r>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	60f0      	str	r0, [r6, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <_Balloc+0x2e>
 800648c:	2000      	movs	r0, #0
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	6802      	ldr	r2, [r0, #0]
 8006492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006496:	2300      	movs	r3, #0
 8006498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800649c:	e7f7      	b.n	800648e <_Balloc+0x66>
 800649e:	bf00      	nop
 80064a0:	080077c1 	.word	0x080077c1
 80064a4:	08007841 	.word	0x08007841

080064a8 <_Bfree>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	69c6      	ldr	r6, [r0, #28]
 80064ac:	4605      	mov	r5, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b976      	cbnz	r6, 80064d0 <_Bfree+0x28>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f7ff ff02 	bl	80062bc <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	61e8      	str	r0, [r5, #28]
 80064bc:	b920      	cbnz	r0, 80064c8 <_Bfree+0x20>
 80064be:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <_Bfree+0x3c>)
 80064c0:	4809      	ldr	r0, [pc, #36]	@ (80064e8 <_Bfree+0x40>)
 80064c2:	218f      	movs	r1, #143	@ 0x8f
 80064c4:	f000 fd66 	bl	8006f94 <__assert_func>
 80064c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064cc:	6006      	str	r6, [r0, #0]
 80064ce:	60c6      	str	r6, [r0, #12]
 80064d0:	b13c      	cbz	r4, 80064e2 <_Bfree+0x3a>
 80064d2:	69eb      	ldr	r3, [r5, #28]
 80064d4:	6862      	ldr	r2, [r4, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064dc:	6021      	str	r1, [r4, #0]
 80064de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	080077c1 	.word	0x080077c1
 80064e8:	08007841 	.word	0x08007841

080064ec <__multadd>:
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	690d      	ldr	r5, [r1, #16]
 80064f2:	4607      	mov	r7, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	461e      	mov	r6, r3
 80064f8:	f101 0c14 	add.w	ip, r1, #20
 80064fc:	2000      	movs	r0, #0
 80064fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006502:	b299      	uxth	r1, r3
 8006504:	fb02 6101 	mla	r1, r2, r1, r6
 8006508:	0c1e      	lsrs	r6, r3, #16
 800650a:	0c0b      	lsrs	r3, r1, #16
 800650c:	fb02 3306 	mla	r3, r2, r6, r3
 8006510:	b289      	uxth	r1, r1
 8006512:	3001      	adds	r0, #1
 8006514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006518:	4285      	cmp	r5, r0
 800651a:	f84c 1b04 	str.w	r1, [ip], #4
 800651e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006522:	dcec      	bgt.n	80064fe <__multadd+0x12>
 8006524:	b30e      	cbz	r6, 800656a <__multadd+0x7e>
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	42ab      	cmp	r3, r5
 800652a:	dc19      	bgt.n	8006560 <__multadd+0x74>
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4638      	mov	r0, r7
 8006530:	3101      	adds	r1, #1
 8006532:	f7ff ff79 	bl	8006428 <_Balloc>
 8006536:	4680      	mov	r8, r0
 8006538:	b928      	cbnz	r0, 8006546 <__multadd+0x5a>
 800653a:	4602      	mov	r2, r0
 800653c:	4b0c      	ldr	r3, [pc, #48]	@ (8006570 <__multadd+0x84>)
 800653e:	480d      	ldr	r0, [pc, #52]	@ (8006574 <__multadd+0x88>)
 8006540:	21ba      	movs	r1, #186	@ 0xba
 8006542:	f000 fd27 	bl	8006f94 <__assert_func>
 8006546:	6922      	ldr	r2, [r4, #16]
 8006548:	3202      	adds	r2, #2
 800654a:	f104 010c 	add.w	r1, r4, #12
 800654e:	0092      	lsls	r2, r2, #2
 8006550:	300c      	adds	r0, #12
 8006552:	f000 fd11 	bl	8006f78 <memcpy>
 8006556:	4621      	mov	r1, r4
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <_Bfree>
 800655e:	4644      	mov	r4, r8
 8006560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006564:	3501      	adds	r5, #1
 8006566:	615e      	str	r6, [r3, #20]
 8006568:	6125      	str	r5, [r4, #16]
 800656a:	4620      	mov	r0, r4
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	08007830 	.word	0x08007830
 8006574:	08007841 	.word	0x08007841

08006578 <__hi0bits>:
 8006578:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800657c:	4603      	mov	r3, r0
 800657e:	bf36      	itet	cc
 8006580:	0403      	lslcc	r3, r0, #16
 8006582:	2000      	movcs	r0, #0
 8006584:	2010      	movcc	r0, #16
 8006586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800658a:	bf3c      	itt	cc
 800658c:	021b      	lslcc	r3, r3, #8
 800658e:	3008      	addcc	r0, #8
 8006590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006594:	bf3c      	itt	cc
 8006596:	011b      	lslcc	r3, r3, #4
 8006598:	3004      	addcc	r0, #4
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659e:	bf3c      	itt	cc
 80065a0:	009b      	lslcc	r3, r3, #2
 80065a2:	3002      	addcc	r0, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	db05      	blt.n	80065b4 <__hi0bits+0x3c>
 80065a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065ac:	f100 0001 	add.w	r0, r0, #1
 80065b0:	bf08      	it	eq
 80065b2:	2020      	moveq	r0, #32
 80065b4:	4770      	bx	lr

080065b6 <__lo0bits>:
 80065b6:	6803      	ldr	r3, [r0, #0]
 80065b8:	4602      	mov	r2, r0
 80065ba:	f013 0007 	ands.w	r0, r3, #7
 80065be:	d00b      	beq.n	80065d8 <__lo0bits+0x22>
 80065c0:	07d9      	lsls	r1, r3, #31
 80065c2:	d421      	bmi.n	8006608 <__lo0bits+0x52>
 80065c4:	0798      	lsls	r0, r3, #30
 80065c6:	bf49      	itett	mi
 80065c8:	085b      	lsrmi	r3, r3, #1
 80065ca:	089b      	lsrpl	r3, r3, #2
 80065cc:	2001      	movmi	r0, #1
 80065ce:	6013      	strmi	r3, [r2, #0]
 80065d0:	bf5c      	itt	pl
 80065d2:	6013      	strpl	r3, [r2, #0]
 80065d4:	2002      	movpl	r0, #2
 80065d6:	4770      	bx	lr
 80065d8:	b299      	uxth	r1, r3
 80065da:	b909      	cbnz	r1, 80065e0 <__lo0bits+0x2a>
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	2010      	movs	r0, #16
 80065e0:	b2d9      	uxtb	r1, r3
 80065e2:	b909      	cbnz	r1, 80065e8 <__lo0bits+0x32>
 80065e4:	3008      	adds	r0, #8
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	0719      	lsls	r1, r3, #28
 80065ea:	bf04      	itt	eq
 80065ec:	091b      	lsreq	r3, r3, #4
 80065ee:	3004      	addeq	r0, #4
 80065f0:	0799      	lsls	r1, r3, #30
 80065f2:	bf04      	itt	eq
 80065f4:	089b      	lsreq	r3, r3, #2
 80065f6:	3002      	addeq	r0, #2
 80065f8:	07d9      	lsls	r1, r3, #31
 80065fa:	d403      	bmi.n	8006604 <__lo0bits+0x4e>
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	f100 0001 	add.w	r0, r0, #1
 8006602:	d003      	beq.n	800660c <__lo0bits+0x56>
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4770      	bx	lr
 8006608:	2000      	movs	r0, #0
 800660a:	4770      	bx	lr
 800660c:	2020      	movs	r0, #32
 800660e:	4770      	bx	lr

08006610 <__i2b>:
 8006610:	b510      	push	{r4, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	2101      	movs	r1, #1
 8006616:	f7ff ff07 	bl	8006428 <_Balloc>
 800661a:	4602      	mov	r2, r0
 800661c:	b928      	cbnz	r0, 800662a <__i2b+0x1a>
 800661e:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <__i2b+0x24>)
 8006620:	4805      	ldr	r0, [pc, #20]	@ (8006638 <__i2b+0x28>)
 8006622:	f240 1145 	movw	r1, #325	@ 0x145
 8006626:	f000 fcb5 	bl	8006f94 <__assert_func>
 800662a:	2301      	movs	r3, #1
 800662c:	6144      	str	r4, [r0, #20]
 800662e:	6103      	str	r3, [r0, #16]
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	08007830 	.word	0x08007830
 8006638:	08007841 	.word	0x08007841

0800663c <__multiply>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	4617      	mov	r7, r2
 8006642:	690a      	ldr	r2, [r1, #16]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	bfa8      	it	ge
 800664a:	463b      	movge	r3, r7
 800664c:	4689      	mov	r9, r1
 800664e:	bfa4      	itt	ge
 8006650:	460f      	movge	r7, r1
 8006652:	4699      	movge	r9, r3
 8006654:	693d      	ldr	r5, [r7, #16]
 8006656:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	eb05 060a 	add.w	r6, r5, sl
 8006662:	42b3      	cmp	r3, r6
 8006664:	b085      	sub	sp, #20
 8006666:	bfb8      	it	lt
 8006668:	3101      	addlt	r1, #1
 800666a:	f7ff fedd 	bl	8006428 <_Balloc>
 800666e:	b930      	cbnz	r0, 800667e <__multiply+0x42>
 8006670:	4602      	mov	r2, r0
 8006672:	4b41      	ldr	r3, [pc, #260]	@ (8006778 <__multiply+0x13c>)
 8006674:	4841      	ldr	r0, [pc, #260]	@ (800677c <__multiply+0x140>)
 8006676:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800667a:	f000 fc8b 	bl	8006f94 <__assert_func>
 800667e:	f100 0414 	add.w	r4, r0, #20
 8006682:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006686:	4623      	mov	r3, r4
 8006688:	2200      	movs	r2, #0
 800668a:	4573      	cmp	r3, lr
 800668c:	d320      	bcc.n	80066d0 <__multiply+0x94>
 800668e:	f107 0814 	add.w	r8, r7, #20
 8006692:	f109 0114 	add.w	r1, r9, #20
 8006696:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800669a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800669e:	9302      	str	r3, [sp, #8]
 80066a0:	1beb      	subs	r3, r5, r7
 80066a2:	3b15      	subs	r3, #21
 80066a4:	f023 0303 	bic.w	r3, r3, #3
 80066a8:	3304      	adds	r3, #4
 80066aa:	3715      	adds	r7, #21
 80066ac:	42bd      	cmp	r5, r7
 80066ae:	bf38      	it	cc
 80066b0:	2304      	movcc	r3, #4
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	9103      	str	r1, [sp, #12]
 80066b8:	428b      	cmp	r3, r1
 80066ba:	d80c      	bhi.n	80066d6 <__multiply+0x9a>
 80066bc:	2e00      	cmp	r6, #0
 80066be:	dd03      	ble.n	80066c8 <__multiply+0x8c>
 80066c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d055      	beq.n	8006774 <__multiply+0x138>
 80066c8:	6106      	str	r6, [r0, #16]
 80066ca:	b005      	add	sp, #20
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	f843 2b04 	str.w	r2, [r3], #4
 80066d4:	e7d9      	b.n	800668a <__multiply+0x4e>
 80066d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80066da:	f1ba 0f00 	cmp.w	sl, #0
 80066de:	d01f      	beq.n	8006720 <__multiply+0xe4>
 80066e0:	46c4      	mov	ip, r8
 80066e2:	46a1      	mov	r9, r4
 80066e4:	2700      	movs	r7, #0
 80066e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066ea:	f8d9 3000 	ldr.w	r3, [r9]
 80066ee:	fa1f fb82 	uxth.w	fp, r2
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80066f8:	443b      	add	r3, r7
 80066fa:	f8d9 7000 	ldr.w	r7, [r9]
 80066fe:	0c12      	lsrs	r2, r2, #16
 8006700:	0c3f      	lsrs	r7, r7, #16
 8006702:	fb0a 7202 	mla	r2, sl, r2, r7
 8006706:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006710:	4565      	cmp	r5, ip
 8006712:	f849 3b04 	str.w	r3, [r9], #4
 8006716:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800671a:	d8e4      	bhi.n	80066e6 <__multiply+0xaa>
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	50e7      	str	r7, [r4, r3]
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006726:	3104      	adds	r1, #4
 8006728:	f1b9 0f00 	cmp.w	r9, #0
 800672c:	d020      	beq.n	8006770 <__multiply+0x134>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	4647      	mov	r7, r8
 8006732:	46a4      	mov	ip, r4
 8006734:	f04f 0a00 	mov.w	sl, #0
 8006738:	f8b7 b000 	ldrh.w	fp, [r7]
 800673c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006740:	fb09 220b 	mla	r2, r9, fp, r2
 8006744:	4452      	add	r2, sl
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800674c:	f84c 3b04 	str.w	r3, [ip], #4
 8006750:	f857 3b04 	ldr.w	r3, [r7], #4
 8006754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006758:	f8bc 3000 	ldrh.w	r3, [ip]
 800675c:	fb09 330a 	mla	r3, r9, sl, r3
 8006760:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006764:	42bd      	cmp	r5, r7
 8006766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800676a:	d8e5      	bhi.n	8006738 <__multiply+0xfc>
 800676c:	9a01      	ldr	r2, [sp, #4]
 800676e:	50a3      	str	r3, [r4, r2]
 8006770:	3404      	adds	r4, #4
 8006772:	e79f      	b.n	80066b4 <__multiply+0x78>
 8006774:	3e01      	subs	r6, #1
 8006776:	e7a1      	b.n	80066bc <__multiply+0x80>
 8006778:	08007830 	.word	0x08007830
 800677c:	08007841 	.word	0x08007841

08006780 <__pow5mult>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	4615      	mov	r5, r2
 8006786:	f012 0203 	ands.w	r2, r2, #3
 800678a:	4607      	mov	r7, r0
 800678c:	460e      	mov	r6, r1
 800678e:	d007      	beq.n	80067a0 <__pow5mult+0x20>
 8006790:	4c25      	ldr	r4, [pc, #148]	@ (8006828 <__pow5mult+0xa8>)
 8006792:	3a01      	subs	r2, #1
 8006794:	2300      	movs	r3, #0
 8006796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800679a:	f7ff fea7 	bl	80064ec <__multadd>
 800679e:	4606      	mov	r6, r0
 80067a0:	10ad      	asrs	r5, r5, #2
 80067a2:	d03d      	beq.n	8006820 <__pow5mult+0xa0>
 80067a4:	69fc      	ldr	r4, [r7, #28]
 80067a6:	b97c      	cbnz	r4, 80067c8 <__pow5mult+0x48>
 80067a8:	2010      	movs	r0, #16
 80067aa:	f7ff fd87 	bl	80062bc <malloc>
 80067ae:	4602      	mov	r2, r0
 80067b0:	61f8      	str	r0, [r7, #28]
 80067b2:	b928      	cbnz	r0, 80067c0 <__pow5mult+0x40>
 80067b4:	4b1d      	ldr	r3, [pc, #116]	@ (800682c <__pow5mult+0xac>)
 80067b6:	481e      	ldr	r0, [pc, #120]	@ (8006830 <__pow5mult+0xb0>)
 80067b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067bc:	f000 fbea 	bl	8006f94 <__assert_func>
 80067c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067c4:	6004      	str	r4, [r0, #0]
 80067c6:	60c4      	str	r4, [r0, #12]
 80067c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067d0:	b94c      	cbnz	r4, 80067e6 <__pow5mult+0x66>
 80067d2:	f240 2171 	movw	r1, #625	@ 0x271
 80067d6:	4638      	mov	r0, r7
 80067d8:	f7ff ff1a 	bl	8006610 <__i2b>
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c8 0008 	str.w	r0, [r8, #8]
 80067e2:	4604      	mov	r4, r0
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	f04f 0900 	mov.w	r9, #0
 80067ea:	07eb      	lsls	r3, r5, #31
 80067ec:	d50a      	bpl.n	8006804 <__pow5mult+0x84>
 80067ee:	4631      	mov	r1, r6
 80067f0:	4622      	mov	r2, r4
 80067f2:	4638      	mov	r0, r7
 80067f4:	f7ff ff22 	bl	800663c <__multiply>
 80067f8:	4631      	mov	r1, r6
 80067fa:	4680      	mov	r8, r0
 80067fc:	4638      	mov	r0, r7
 80067fe:	f7ff fe53 	bl	80064a8 <_Bfree>
 8006802:	4646      	mov	r6, r8
 8006804:	106d      	asrs	r5, r5, #1
 8006806:	d00b      	beq.n	8006820 <__pow5mult+0xa0>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	b938      	cbnz	r0, 800681c <__pow5mult+0x9c>
 800680c:	4622      	mov	r2, r4
 800680e:	4621      	mov	r1, r4
 8006810:	4638      	mov	r0, r7
 8006812:	f7ff ff13 	bl	800663c <__multiply>
 8006816:	6020      	str	r0, [r4, #0]
 8006818:	f8c0 9000 	str.w	r9, [r0]
 800681c:	4604      	mov	r4, r0
 800681e:	e7e4      	b.n	80067ea <__pow5mult+0x6a>
 8006820:	4630      	mov	r0, r6
 8006822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006826:	bf00      	nop
 8006828:	080078f4 	.word	0x080078f4
 800682c:	080077c1 	.word	0x080077c1
 8006830:	08007841 	.word	0x08007841

08006834 <__lshift>:
 8006834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	6849      	ldr	r1, [r1, #4]
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	4607      	mov	r7, r0
 8006846:	4691      	mov	r9, r2
 8006848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800684c:	f108 0601 	add.w	r6, r8, #1
 8006850:	42b3      	cmp	r3, r6
 8006852:	db0b      	blt.n	800686c <__lshift+0x38>
 8006854:	4638      	mov	r0, r7
 8006856:	f7ff fde7 	bl	8006428 <_Balloc>
 800685a:	4605      	mov	r5, r0
 800685c:	b948      	cbnz	r0, 8006872 <__lshift+0x3e>
 800685e:	4602      	mov	r2, r0
 8006860:	4b28      	ldr	r3, [pc, #160]	@ (8006904 <__lshift+0xd0>)
 8006862:	4829      	ldr	r0, [pc, #164]	@ (8006908 <__lshift+0xd4>)
 8006864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006868:	f000 fb94 	bl	8006f94 <__assert_func>
 800686c:	3101      	adds	r1, #1
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	e7ee      	b.n	8006850 <__lshift+0x1c>
 8006872:	2300      	movs	r3, #0
 8006874:	f100 0114 	add.w	r1, r0, #20
 8006878:	f100 0210 	add.w	r2, r0, #16
 800687c:	4618      	mov	r0, r3
 800687e:	4553      	cmp	r3, sl
 8006880:	db33      	blt.n	80068ea <__lshift+0xb6>
 8006882:	6920      	ldr	r0, [r4, #16]
 8006884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006888:	f104 0314 	add.w	r3, r4, #20
 800688c:	f019 091f 	ands.w	r9, r9, #31
 8006890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006898:	d02b      	beq.n	80068f2 <__lshift+0xbe>
 800689a:	f1c9 0e20 	rsb	lr, r9, #32
 800689e:	468a      	mov	sl, r1
 80068a0:	2200      	movs	r2, #0
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	fa00 f009 	lsl.w	r0, r0, r9
 80068a8:	4310      	orrs	r0, r2
 80068aa:	f84a 0b04 	str.w	r0, [sl], #4
 80068ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b2:	459c      	cmp	ip, r3
 80068b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068b8:	d8f3      	bhi.n	80068a2 <__lshift+0x6e>
 80068ba:	ebac 0304 	sub.w	r3, ip, r4
 80068be:	3b15      	subs	r3, #21
 80068c0:	f023 0303 	bic.w	r3, r3, #3
 80068c4:	3304      	adds	r3, #4
 80068c6:	f104 0015 	add.w	r0, r4, #21
 80068ca:	4560      	cmp	r0, ip
 80068cc:	bf88      	it	hi
 80068ce:	2304      	movhi	r3, #4
 80068d0:	50ca      	str	r2, [r1, r3]
 80068d2:	b10a      	cbz	r2, 80068d8 <__lshift+0xa4>
 80068d4:	f108 0602 	add.w	r6, r8, #2
 80068d8:	3e01      	subs	r6, #1
 80068da:	4638      	mov	r0, r7
 80068dc:	612e      	str	r6, [r5, #16]
 80068de:	4621      	mov	r1, r4
 80068e0:	f7ff fde2 	bl	80064a8 <_Bfree>
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ee:	3301      	adds	r3, #1
 80068f0:	e7c5      	b.n	800687e <__lshift+0x4a>
 80068f2:	3904      	subs	r1, #4
 80068f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80068fc:	459c      	cmp	ip, r3
 80068fe:	d8f9      	bhi.n	80068f4 <__lshift+0xc0>
 8006900:	e7ea      	b.n	80068d8 <__lshift+0xa4>
 8006902:	bf00      	nop
 8006904:	08007830 	.word	0x08007830
 8006908:	08007841 	.word	0x08007841

0800690c <__mcmp>:
 800690c:	690a      	ldr	r2, [r1, #16]
 800690e:	4603      	mov	r3, r0
 8006910:	6900      	ldr	r0, [r0, #16]
 8006912:	1a80      	subs	r0, r0, r2
 8006914:	b530      	push	{r4, r5, lr}
 8006916:	d10e      	bne.n	8006936 <__mcmp+0x2a>
 8006918:	3314      	adds	r3, #20
 800691a:	3114      	adds	r1, #20
 800691c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800692c:	4295      	cmp	r5, r2
 800692e:	d003      	beq.n	8006938 <__mcmp+0x2c>
 8006930:	d205      	bcs.n	800693e <__mcmp+0x32>
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	bd30      	pop	{r4, r5, pc}
 8006938:	42a3      	cmp	r3, r4
 800693a:	d3f3      	bcc.n	8006924 <__mcmp+0x18>
 800693c:	e7fb      	b.n	8006936 <__mcmp+0x2a>
 800693e:	2001      	movs	r0, #1
 8006940:	e7f9      	b.n	8006936 <__mcmp+0x2a>
	...

08006944 <__mdiff>:
 8006944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	4689      	mov	r9, r1
 800694a:	4606      	mov	r6, r0
 800694c:	4611      	mov	r1, r2
 800694e:	4648      	mov	r0, r9
 8006950:	4614      	mov	r4, r2
 8006952:	f7ff ffdb 	bl	800690c <__mcmp>
 8006956:	1e05      	subs	r5, r0, #0
 8006958:	d112      	bne.n	8006980 <__mdiff+0x3c>
 800695a:	4629      	mov	r1, r5
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff fd63 	bl	8006428 <_Balloc>
 8006962:	4602      	mov	r2, r0
 8006964:	b928      	cbnz	r0, 8006972 <__mdiff+0x2e>
 8006966:	4b3f      	ldr	r3, [pc, #252]	@ (8006a64 <__mdiff+0x120>)
 8006968:	f240 2137 	movw	r1, #567	@ 0x237
 800696c:	483e      	ldr	r0, [pc, #248]	@ (8006a68 <__mdiff+0x124>)
 800696e:	f000 fb11 	bl	8006f94 <__assert_func>
 8006972:	2301      	movs	r3, #1
 8006974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006978:	4610      	mov	r0, r2
 800697a:	b003      	add	sp, #12
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	bfbc      	itt	lt
 8006982:	464b      	movlt	r3, r9
 8006984:	46a1      	movlt	r9, r4
 8006986:	4630      	mov	r0, r6
 8006988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800698c:	bfba      	itte	lt
 800698e:	461c      	movlt	r4, r3
 8006990:	2501      	movlt	r5, #1
 8006992:	2500      	movge	r5, #0
 8006994:	f7ff fd48 	bl	8006428 <_Balloc>
 8006998:	4602      	mov	r2, r0
 800699a:	b918      	cbnz	r0, 80069a4 <__mdiff+0x60>
 800699c:	4b31      	ldr	r3, [pc, #196]	@ (8006a64 <__mdiff+0x120>)
 800699e:	f240 2145 	movw	r1, #581	@ 0x245
 80069a2:	e7e3      	b.n	800696c <__mdiff+0x28>
 80069a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069a8:	6926      	ldr	r6, [r4, #16]
 80069aa:	60c5      	str	r5, [r0, #12]
 80069ac:	f109 0310 	add.w	r3, r9, #16
 80069b0:	f109 0514 	add.w	r5, r9, #20
 80069b4:	f104 0e14 	add.w	lr, r4, #20
 80069b8:	f100 0b14 	add.w	fp, r0, #20
 80069bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	46d9      	mov	r9, fp
 80069c8:	f04f 0c00 	mov.w	ip, #0
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	fa1f f38a 	uxth.w	r3, sl
 80069dc:	4619      	mov	r1, r3
 80069de:	b283      	uxth	r3, r0
 80069e0:	1acb      	subs	r3, r1, r3
 80069e2:	0c00      	lsrs	r0, r0, #16
 80069e4:	4463      	add	r3, ip
 80069e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069f4:	4576      	cmp	r6, lr
 80069f6:	f849 3b04 	str.w	r3, [r9], #4
 80069fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069fe:	d8e5      	bhi.n	80069cc <__mdiff+0x88>
 8006a00:	1b33      	subs	r3, r6, r4
 8006a02:	3b15      	subs	r3, #21
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	3415      	adds	r4, #21
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	42a6      	cmp	r6, r4
 8006a0e:	bf38      	it	cc
 8006a10:	2304      	movcc	r3, #4
 8006a12:	441d      	add	r5, r3
 8006a14:	445b      	add	r3, fp
 8006a16:	461e      	mov	r6, r3
 8006a18:	462c      	mov	r4, r5
 8006a1a:	4544      	cmp	r4, r8
 8006a1c:	d30e      	bcc.n	8006a3c <__mdiff+0xf8>
 8006a1e:	f108 0103 	add.w	r1, r8, #3
 8006a22:	1b49      	subs	r1, r1, r5
 8006a24:	f021 0103 	bic.w	r1, r1, #3
 8006a28:	3d03      	subs	r5, #3
 8006a2a:	45a8      	cmp	r8, r5
 8006a2c:	bf38      	it	cc
 8006a2e:	2100      	movcc	r1, #0
 8006a30:	440b      	add	r3, r1
 8006a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a36:	b191      	cbz	r1, 8006a5e <__mdiff+0x11a>
 8006a38:	6117      	str	r7, [r2, #16]
 8006a3a:	e79d      	b.n	8006978 <__mdiff+0x34>
 8006a3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a40:	46e6      	mov	lr, ip
 8006a42:	0c08      	lsrs	r0, r1, #16
 8006a44:	fa1c fc81 	uxtah	ip, ip, r1
 8006a48:	4471      	add	r1, lr
 8006a4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a4e:	b289      	uxth	r1, r1
 8006a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a54:	f846 1b04 	str.w	r1, [r6], #4
 8006a58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a5c:	e7dd      	b.n	8006a1a <__mdiff+0xd6>
 8006a5e:	3f01      	subs	r7, #1
 8006a60:	e7e7      	b.n	8006a32 <__mdiff+0xee>
 8006a62:	bf00      	nop
 8006a64:	08007830 	.word	0x08007830
 8006a68:	08007841 	.word	0x08007841

08006a6c <__d2b>:
 8006a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a70:	460f      	mov	r7, r1
 8006a72:	2101      	movs	r1, #1
 8006a74:	ec59 8b10 	vmov	r8, r9, d0
 8006a78:	4616      	mov	r6, r2
 8006a7a:	f7ff fcd5 	bl	8006428 <_Balloc>
 8006a7e:	4604      	mov	r4, r0
 8006a80:	b930      	cbnz	r0, 8006a90 <__d2b+0x24>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b23      	ldr	r3, [pc, #140]	@ (8006b14 <__d2b+0xa8>)
 8006a86:	4824      	ldr	r0, [pc, #144]	@ (8006b18 <__d2b+0xac>)
 8006a88:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a8c:	f000 fa82 	bl	8006f94 <__assert_func>
 8006a90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a98:	b10d      	cbz	r5, 8006a9e <__d2b+0x32>
 8006a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	f1b8 0300 	subs.w	r3, r8, #0
 8006aa4:	d023      	beq.n	8006aee <__d2b+0x82>
 8006aa6:	4668      	mov	r0, sp
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	f7ff fd84 	bl	80065b6 <__lo0bits>
 8006aae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ab2:	b1d0      	cbz	r0, 8006aea <__d2b+0x7e>
 8006ab4:	f1c0 0320 	rsb	r3, r0, #32
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	430b      	orrs	r3, r1
 8006abe:	40c2      	lsrs	r2, r0
 8006ac0:	6163      	str	r3, [r4, #20]
 8006ac2:	9201      	str	r2, [sp, #4]
 8006ac4:	9b01      	ldr	r3, [sp, #4]
 8006ac6:	61a3      	str	r3, [r4, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf0c      	ite	eq
 8006acc:	2201      	moveq	r2, #1
 8006ace:	2202      	movne	r2, #2
 8006ad0:	6122      	str	r2, [r4, #16]
 8006ad2:	b1a5      	cbz	r5, 8006afe <__d2b+0x92>
 8006ad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ad8:	4405      	add	r5, r0
 8006ada:	603d      	str	r5, [r7, #0]
 8006adc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ae0:	6030      	str	r0, [r6, #0]
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	b003      	add	sp, #12
 8006ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aea:	6161      	str	r1, [r4, #20]
 8006aec:	e7ea      	b.n	8006ac4 <__d2b+0x58>
 8006aee:	a801      	add	r0, sp, #4
 8006af0:	f7ff fd61 	bl	80065b6 <__lo0bits>
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	6163      	str	r3, [r4, #20]
 8006af8:	3020      	adds	r0, #32
 8006afa:	2201      	movs	r2, #1
 8006afc:	e7e8      	b.n	8006ad0 <__d2b+0x64>
 8006afe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b06:	6038      	str	r0, [r7, #0]
 8006b08:	6918      	ldr	r0, [r3, #16]
 8006b0a:	f7ff fd35 	bl	8006578 <__hi0bits>
 8006b0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b12:	e7e5      	b.n	8006ae0 <__d2b+0x74>
 8006b14:	08007830 	.word	0x08007830
 8006b18:	08007841 	.word	0x08007841

08006b1c <__ssputs_r>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	688e      	ldr	r6, [r1, #8]
 8006b22:	461f      	mov	r7, r3
 8006b24:	42be      	cmp	r6, r7
 8006b26:	680b      	ldr	r3, [r1, #0]
 8006b28:	4682      	mov	sl, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4690      	mov	r8, r2
 8006b2e:	d82d      	bhi.n	8006b8c <__ssputs_r+0x70>
 8006b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b38:	d026      	beq.n	8006b88 <__ssputs_r+0x6c>
 8006b3a:	6965      	ldr	r5, [r4, #20]
 8006b3c:	6909      	ldr	r1, [r1, #16]
 8006b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b42:	eba3 0901 	sub.w	r9, r3, r1
 8006b46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b4a:	1c7b      	adds	r3, r7, #1
 8006b4c:	444b      	add	r3, r9
 8006b4e:	106d      	asrs	r5, r5, #1
 8006b50:	429d      	cmp	r5, r3
 8006b52:	bf38      	it	cc
 8006b54:	461d      	movcc	r5, r3
 8006b56:	0553      	lsls	r3, r2, #21
 8006b58:	d527      	bpl.n	8006baa <__ssputs_r+0x8e>
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f7ff fbd8 	bl	8006310 <_malloc_r>
 8006b60:	4606      	mov	r6, r0
 8006b62:	b360      	cbz	r0, 8006bbe <__ssputs_r+0xa2>
 8006b64:	6921      	ldr	r1, [r4, #16]
 8006b66:	464a      	mov	r2, r9
 8006b68:	f000 fa06 	bl	8006f78 <memcpy>
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	6126      	str	r6, [r4, #16]
 8006b7a:	6165      	str	r5, [r4, #20]
 8006b7c:	444e      	add	r6, r9
 8006b7e:	eba5 0509 	sub.w	r5, r5, r9
 8006b82:	6026      	str	r6, [r4, #0]
 8006b84:	60a5      	str	r5, [r4, #8]
 8006b86:	463e      	mov	r6, r7
 8006b88:	42be      	cmp	r6, r7
 8006b8a:	d900      	bls.n	8006b8e <__ssputs_r+0x72>
 8006b8c:	463e      	mov	r6, r7
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	4632      	mov	r2, r6
 8006b92:	4641      	mov	r1, r8
 8006b94:	f000 f9c6 	bl	8006f24 <memmove>
 8006b98:	68a3      	ldr	r3, [r4, #8]
 8006b9a:	1b9b      	subs	r3, r3, r6
 8006b9c:	60a3      	str	r3, [r4, #8]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	4433      	add	r3, r6
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006baa:	462a      	mov	r2, r5
 8006bac:	f000 fa36 	bl	800701c <_realloc_r>
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d1e0      	bne.n	8006b78 <__ssputs_r+0x5c>
 8006bb6:	6921      	ldr	r1, [r4, #16]
 8006bb8:	4650      	mov	r0, sl
 8006bba:	f7ff fb35 	bl	8006228 <_free_r>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	f8ca 3000 	str.w	r3, [sl]
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	e7e9      	b.n	8006ba6 <__ssputs_r+0x8a>
	...

08006bd4 <_svfiprintf_r>:
 8006bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd8:	4698      	mov	r8, r3
 8006bda:	898b      	ldrh	r3, [r1, #12]
 8006bdc:	061b      	lsls	r3, r3, #24
 8006bde:	b09d      	sub	sp, #116	@ 0x74
 8006be0:	4607      	mov	r7, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	4614      	mov	r4, r2
 8006be6:	d510      	bpl.n	8006c0a <_svfiprintf_r+0x36>
 8006be8:	690b      	ldr	r3, [r1, #16]
 8006bea:	b973      	cbnz	r3, 8006c0a <_svfiprintf_r+0x36>
 8006bec:	2140      	movs	r1, #64	@ 0x40
 8006bee:	f7ff fb8f 	bl	8006310 <_malloc_r>
 8006bf2:	6028      	str	r0, [r5, #0]
 8006bf4:	6128      	str	r0, [r5, #16]
 8006bf6:	b930      	cbnz	r0, 8006c06 <_svfiprintf_r+0x32>
 8006bf8:	230c      	movs	r3, #12
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	b01d      	add	sp, #116	@ 0x74
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	2340      	movs	r3, #64	@ 0x40
 8006c08:	616b      	str	r3, [r5, #20]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c0e:	2320      	movs	r3, #32
 8006c10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c18:	2330      	movs	r3, #48	@ 0x30
 8006c1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006db8 <_svfiprintf_r+0x1e4>
 8006c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c22:	f04f 0901 	mov.w	r9, #1
 8006c26:	4623      	mov	r3, r4
 8006c28:	469a      	mov	sl, r3
 8006c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c2e:	b10a      	cbz	r2, 8006c34 <_svfiprintf_r+0x60>
 8006c30:	2a25      	cmp	r2, #37	@ 0x25
 8006c32:	d1f9      	bne.n	8006c28 <_svfiprintf_r+0x54>
 8006c34:	ebba 0b04 	subs.w	fp, sl, r4
 8006c38:	d00b      	beq.n	8006c52 <_svfiprintf_r+0x7e>
 8006c3a:	465b      	mov	r3, fp
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ff6b 	bl	8006b1c <__ssputs_r>
 8006c46:	3001      	adds	r0, #1
 8006c48:	f000 80a7 	beq.w	8006d9a <_svfiprintf_r+0x1c6>
 8006c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c4e:	445a      	add	r2, fp
 8006c50:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c52:	f89a 3000 	ldrb.w	r3, [sl]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 809f 	beq.w	8006d9a <_svfiprintf_r+0x1c6>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c66:	f10a 0a01 	add.w	sl, sl, #1
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	9307      	str	r3, [sp, #28]
 8006c6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c72:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c74:	4654      	mov	r4, sl
 8006c76:	2205      	movs	r2, #5
 8006c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7c:	484e      	ldr	r0, [pc, #312]	@ (8006db8 <_svfiprintf_r+0x1e4>)
 8006c7e:	f7f9 faaf 	bl	80001e0 <memchr>
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	b9d8      	cbnz	r0, 8006cbe <_svfiprintf_r+0xea>
 8006c86:	06d0      	lsls	r0, r2, #27
 8006c88:	bf44      	itt	mi
 8006c8a:	2320      	movmi	r3, #32
 8006c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c90:	0711      	lsls	r1, r2, #28
 8006c92:	bf44      	itt	mi
 8006c94:	232b      	movmi	r3, #43	@ 0x2b
 8006c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ca0:	d015      	beq.n	8006cce <_svfiprintf_r+0xfa>
 8006ca2:	9a07      	ldr	r2, [sp, #28]
 8006ca4:	4654      	mov	r4, sl
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	f04f 0c0a 	mov.w	ip, #10
 8006cac:	4621      	mov	r1, r4
 8006cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb2:	3b30      	subs	r3, #48	@ 0x30
 8006cb4:	2b09      	cmp	r3, #9
 8006cb6:	d94b      	bls.n	8006d50 <_svfiprintf_r+0x17c>
 8006cb8:	b1b0      	cbz	r0, 8006ce8 <_svfiprintf_r+0x114>
 8006cba:	9207      	str	r2, [sp, #28]
 8006cbc:	e014      	b.n	8006ce8 <_svfiprintf_r+0x114>
 8006cbe:	eba0 0308 	sub.w	r3, r0, r8
 8006cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	46a2      	mov	sl, r4
 8006ccc:	e7d2      	b.n	8006c74 <_svfiprintf_r+0xa0>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	1d19      	adds	r1, r3, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	9103      	str	r1, [sp, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfbb      	ittet	lt
 8006cda:	425b      	neglt	r3, r3
 8006cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce0:	9307      	strge	r3, [sp, #28]
 8006ce2:	9307      	strlt	r3, [sp, #28]
 8006ce4:	bfb8      	it	lt
 8006ce6:	9204      	strlt	r2, [sp, #16]
 8006ce8:	7823      	ldrb	r3, [r4, #0]
 8006cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cec:	d10a      	bne.n	8006d04 <_svfiprintf_r+0x130>
 8006cee:	7863      	ldrb	r3, [r4, #1]
 8006cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cf2:	d132      	bne.n	8006d5a <_svfiprintf_r+0x186>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	1d1a      	adds	r2, r3, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	9203      	str	r2, [sp, #12]
 8006cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d00:	3402      	adds	r4, #2
 8006d02:	9305      	str	r3, [sp, #20]
 8006d04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006dc8 <_svfiprintf_r+0x1f4>
 8006d08:	7821      	ldrb	r1, [r4, #0]
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	4650      	mov	r0, sl
 8006d0e:	f7f9 fa67 	bl	80001e0 <memchr>
 8006d12:	b138      	cbz	r0, 8006d24 <_svfiprintf_r+0x150>
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	eba0 000a 	sub.w	r0, r0, sl
 8006d1a:	2240      	movs	r2, #64	@ 0x40
 8006d1c:	4082      	lsls	r2, r0
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	3401      	adds	r4, #1
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	4824      	ldr	r0, [pc, #144]	@ (8006dbc <_svfiprintf_r+0x1e8>)
 8006d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d2e:	2206      	movs	r2, #6
 8006d30:	f7f9 fa56 	bl	80001e0 <memchr>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d036      	beq.n	8006da6 <_svfiprintf_r+0x1d2>
 8006d38:	4b21      	ldr	r3, [pc, #132]	@ (8006dc0 <_svfiprintf_r+0x1ec>)
 8006d3a:	bb1b      	cbnz	r3, 8006d84 <_svfiprintf_r+0x1b0>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	3307      	adds	r3, #7
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	3308      	adds	r3, #8
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d4a:	4433      	add	r3, r6
 8006d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4e:	e76a      	b.n	8006c26 <_svfiprintf_r+0x52>
 8006d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d54:	460c      	mov	r4, r1
 8006d56:	2001      	movs	r0, #1
 8006d58:	e7a8      	b.n	8006cac <_svfiprintf_r+0xd8>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	3401      	adds	r4, #1
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	4619      	mov	r1, r3
 8006d62:	f04f 0c0a 	mov.w	ip, #10
 8006d66:	4620      	mov	r0, r4
 8006d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6c:	3a30      	subs	r2, #48	@ 0x30
 8006d6e:	2a09      	cmp	r2, #9
 8006d70:	d903      	bls.n	8006d7a <_svfiprintf_r+0x1a6>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0c6      	beq.n	8006d04 <_svfiprintf_r+0x130>
 8006d76:	9105      	str	r1, [sp, #20]
 8006d78:	e7c4      	b.n	8006d04 <_svfiprintf_r+0x130>
 8006d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7e:	4604      	mov	r4, r0
 8006d80:	2301      	movs	r3, #1
 8006d82:	e7f0      	b.n	8006d66 <_svfiprintf_r+0x192>
 8006d84:	ab03      	add	r3, sp, #12
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	462a      	mov	r2, r5
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <_svfiprintf_r+0x1f0>)
 8006d8c:	a904      	add	r1, sp, #16
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7fd fe7c 	bl	8004a8c <_printf_float>
 8006d94:	1c42      	adds	r2, r0, #1
 8006d96:	4606      	mov	r6, r0
 8006d98:	d1d6      	bne.n	8006d48 <_svfiprintf_r+0x174>
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	065b      	lsls	r3, r3, #25
 8006d9e:	f53f af2d 	bmi.w	8006bfc <_svfiprintf_r+0x28>
 8006da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006da4:	e72c      	b.n	8006c00 <_svfiprintf_r+0x2c>
 8006da6:	ab03      	add	r3, sp, #12
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	462a      	mov	r2, r5
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <_svfiprintf_r+0x1f0>)
 8006dae:	a904      	add	r1, sp, #16
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7fe f903 	bl	8004fbc <_printf_i>
 8006db6:	e7ed      	b.n	8006d94 <_svfiprintf_r+0x1c0>
 8006db8:	0800789a 	.word	0x0800789a
 8006dbc:	080078a4 	.word	0x080078a4
 8006dc0:	08004a8d 	.word	0x08004a8d
 8006dc4:	08006b1d 	.word	0x08006b1d
 8006dc8:	080078a0 	.word	0x080078a0

08006dcc <__sflush_r>:
 8006dcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd4:	0716      	lsls	r6, r2, #28
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	460c      	mov	r4, r1
 8006dda:	d454      	bmi.n	8006e86 <__sflush_r+0xba>
 8006ddc:	684b      	ldr	r3, [r1, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dc02      	bgt.n	8006de8 <__sflush_r+0x1c>
 8006de2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dd48      	ble.n	8006e7a <__sflush_r+0xae>
 8006de8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	d045      	beq.n	8006e7a <__sflush_r+0xae>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006df4:	682f      	ldr	r7, [r5, #0]
 8006df6:	6a21      	ldr	r1, [r4, #32]
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	d030      	beq.n	8006e5e <__sflush_r+0x92>
 8006dfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	0759      	lsls	r1, r3, #29
 8006e02:	d505      	bpl.n	8006e10 <__sflush_r+0x44>
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	1ad2      	subs	r2, r2, r3
 8006e08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e0a:	b10b      	cbz	r3, 8006e10 <__sflush_r+0x44>
 8006e0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	2300      	movs	r3, #0
 8006e12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e14:	6a21      	ldr	r1, [r4, #32]
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b0      	blx	r6
 8006e1a:	1c43      	adds	r3, r0, #1
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	d106      	bne.n	8006e2e <__sflush_r+0x62>
 8006e20:	6829      	ldr	r1, [r5, #0]
 8006e22:	291d      	cmp	r1, #29
 8006e24:	d82b      	bhi.n	8006e7e <__sflush_r+0xb2>
 8006e26:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed0 <__sflush_r+0x104>)
 8006e28:	40ca      	lsrs	r2, r1
 8006e2a:	07d6      	lsls	r6, r2, #31
 8006e2c:	d527      	bpl.n	8006e7e <__sflush_r+0xb2>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	6062      	str	r2, [r4, #4]
 8006e32:	04d9      	lsls	r1, r3, #19
 8006e34:	6922      	ldr	r2, [r4, #16]
 8006e36:	6022      	str	r2, [r4, #0]
 8006e38:	d504      	bpl.n	8006e44 <__sflush_r+0x78>
 8006e3a:	1c42      	adds	r2, r0, #1
 8006e3c:	d101      	bne.n	8006e42 <__sflush_r+0x76>
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	b903      	cbnz	r3, 8006e44 <__sflush_r+0x78>
 8006e42:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e46:	602f      	str	r7, [r5, #0]
 8006e48:	b1b9      	cbz	r1, 8006e7a <__sflush_r+0xae>
 8006e4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	d002      	beq.n	8006e58 <__sflush_r+0x8c>
 8006e52:	4628      	mov	r0, r5
 8006e54:	f7ff f9e8 	bl	8006228 <_free_r>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e5c:	e00d      	b.n	8006e7a <__sflush_r+0xae>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b0      	blx	r6
 8006e64:	4602      	mov	r2, r0
 8006e66:	1c50      	adds	r0, r2, #1
 8006e68:	d1c9      	bne.n	8006dfe <__sflush_r+0x32>
 8006e6a:	682b      	ldr	r3, [r5, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0c6      	beq.n	8006dfe <__sflush_r+0x32>
 8006e70:	2b1d      	cmp	r3, #29
 8006e72:	d001      	beq.n	8006e78 <__sflush_r+0xac>
 8006e74:	2b16      	cmp	r3, #22
 8006e76:	d11e      	bne.n	8006eb6 <__sflush_r+0xea>
 8006e78:	602f      	str	r7, [r5, #0]
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e022      	b.n	8006ec4 <__sflush_r+0xf8>
 8006e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e82:	b21b      	sxth	r3, r3
 8006e84:	e01b      	b.n	8006ebe <__sflush_r+0xf2>
 8006e86:	690f      	ldr	r7, [r1, #16]
 8006e88:	2f00      	cmp	r7, #0
 8006e8a:	d0f6      	beq.n	8006e7a <__sflush_r+0xae>
 8006e8c:	0793      	lsls	r3, r2, #30
 8006e8e:	680e      	ldr	r6, [r1, #0]
 8006e90:	bf08      	it	eq
 8006e92:	694b      	ldreq	r3, [r1, #20]
 8006e94:	600f      	str	r7, [r1, #0]
 8006e96:	bf18      	it	ne
 8006e98:	2300      	movne	r3, #0
 8006e9a:	eba6 0807 	sub.w	r8, r6, r7
 8006e9e:	608b      	str	r3, [r1, #8]
 8006ea0:	f1b8 0f00 	cmp.w	r8, #0
 8006ea4:	dde9      	ble.n	8006e7a <__sflush_r+0xae>
 8006ea6:	6a21      	ldr	r1, [r4, #32]
 8006ea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006eaa:	4643      	mov	r3, r8
 8006eac:	463a      	mov	r2, r7
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b0      	blx	r6
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	dc08      	bgt.n	8006ec8 <__sflush_r+0xfc>
 8006eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec8:	4407      	add	r7, r0
 8006eca:	eba8 0800 	sub.w	r8, r8, r0
 8006ece:	e7e7      	b.n	8006ea0 <__sflush_r+0xd4>
 8006ed0:	20400001 	.word	0x20400001

08006ed4 <_fflush_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	690b      	ldr	r3, [r1, #16]
 8006ed8:	4605      	mov	r5, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	b913      	cbnz	r3, 8006ee4 <_fflush_r+0x10>
 8006ede:	2500      	movs	r5, #0
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	b118      	cbz	r0, 8006eee <_fflush_r+0x1a>
 8006ee6:	6a03      	ldr	r3, [r0, #32]
 8006ee8:	b90b      	cbnz	r3, 8006eee <_fflush_r+0x1a>
 8006eea:	f7fe fa11 	bl	8005310 <__sinit>
 8006eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0f3      	beq.n	8006ede <_fflush_r+0xa>
 8006ef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ef8:	07d0      	lsls	r0, r2, #31
 8006efa:	d404      	bmi.n	8006f06 <_fflush_r+0x32>
 8006efc:	0599      	lsls	r1, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_fflush_r+0x32>
 8006f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f02:	f7fe fb34 	bl	800556e <__retarget_lock_acquire_recursive>
 8006f06:	4628      	mov	r0, r5
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f7ff ff5f 	bl	8006dcc <__sflush_r>
 8006f0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f10:	07da      	lsls	r2, r3, #31
 8006f12:	4605      	mov	r5, r0
 8006f14:	d4e4      	bmi.n	8006ee0 <_fflush_r+0xc>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	059b      	lsls	r3, r3, #22
 8006f1a:	d4e1      	bmi.n	8006ee0 <_fflush_r+0xc>
 8006f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f1e:	f7fe fb27 	bl	8005570 <__retarget_lock_release_recursive>
 8006f22:	e7dd      	b.n	8006ee0 <_fflush_r+0xc>

08006f24 <memmove>:
 8006f24:	4288      	cmp	r0, r1
 8006f26:	b510      	push	{r4, lr}
 8006f28:	eb01 0402 	add.w	r4, r1, r2
 8006f2c:	d902      	bls.n	8006f34 <memmove+0x10>
 8006f2e:	4284      	cmp	r4, r0
 8006f30:	4623      	mov	r3, r4
 8006f32:	d807      	bhi.n	8006f44 <memmove+0x20>
 8006f34:	1e43      	subs	r3, r0, #1
 8006f36:	42a1      	cmp	r1, r4
 8006f38:	d008      	beq.n	8006f4c <memmove+0x28>
 8006f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f42:	e7f8      	b.n	8006f36 <memmove+0x12>
 8006f44:	4402      	add	r2, r0
 8006f46:	4601      	mov	r1, r0
 8006f48:	428a      	cmp	r2, r1
 8006f4a:	d100      	bne.n	8006f4e <memmove+0x2a>
 8006f4c:	bd10      	pop	{r4, pc}
 8006f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f56:	e7f7      	b.n	8006f48 <memmove+0x24>

08006f58 <_sbrk_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d06      	ldr	r5, [pc, #24]	@ (8006f74 <_sbrk_r+0x1c>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7fa feee 	bl	8001d44 <_sbrk>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_sbrk_r+0x1a>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_sbrk_r+0x1a>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	200004f8 	.word	0x200004f8

08006f78 <memcpy>:
 8006f78:	440a      	add	r2, r1
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f80:	d100      	bne.n	8006f84 <memcpy+0xc>
 8006f82:	4770      	bx	lr
 8006f84:	b510      	push	{r4, lr}
 8006f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f8e:	4291      	cmp	r1, r2
 8006f90:	d1f9      	bne.n	8006f86 <memcpy+0xe>
 8006f92:	bd10      	pop	{r4, pc}

08006f94 <__assert_func>:
 8006f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f96:	4614      	mov	r4, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4b09      	ldr	r3, [pc, #36]	@ (8006fc0 <__assert_func+0x2c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	68d8      	ldr	r0, [r3, #12]
 8006fa2:	b14c      	cbz	r4, 8006fb8 <__assert_func+0x24>
 8006fa4:	4b07      	ldr	r3, [pc, #28]	@ (8006fc4 <__assert_func+0x30>)
 8006fa6:	9100      	str	r1, [sp, #0]
 8006fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fac:	4906      	ldr	r1, [pc, #24]	@ (8006fc8 <__assert_func+0x34>)
 8006fae:	462b      	mov	r3, r5
 8006fb0:	f000 f870 	bl	8007094 <fiprintf>
 8006fb4:	f000 f880 	bl	80070b8 <abort>
 8006fb8:	4b04      	ldr	r3, [pc, #16]	@ (8006fcc <__assert_func+0x38>)
 8006fba:	461c      	mov	r4, r3
 8006fbc:	e7f3      	b.n	8006fa6 <__assert_func+0x12>
 8006fbe:	bf00      	nop
 8006fc0:	20000018 	.word	0x20000018
 8006fc4:	080078b5 	.word	0x080078b5
 8006fc8:	080078c2 	.word	0x080078c2
 8006fcc:	080078f0 	.word	0x080078f0

08006fd0 <_calloc_r>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	fba1 5402 	umull	r5, r4, r1, r2
 8006fd6:	b934      	cbnz	r4, 8006fe6 <_calloc_r+0x16>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7ff f999 	bl	8006310 <_malloc_r>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	b928      	cbnz	r0, 8006fee <_calloc_r+0x1e>
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
 8006fe6:	220c      	movs	r2, #12
 8006fe8:	6002      	str	r2, [r0, #0]
 8006fea:	2600      	movs	r6, #0
 8006fec:	e7f9      	b.n	8006fe2 <_calloc_r+0x12>
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f7fe fa28 	bl	8005446 <memset>
 8006ff6:	e7f4      	b.n	8006fe2 <_calloc_r+0x12>

08006ff8 <__ascii_mbtowc>:
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	b901      	cbnz	r1, 8006ffe <__ascii_mbtowc+0x6>
 8006ffc:	a901      	add	r1, sp, #4
 8006ffe:	b142      	cbz	r2, 8007012 <__ascii_mbtowc+0x1a>
 8007000:	b14b      	cbz	r3, 8007016 <__ascii_mbtowc+0x1e>
 8007002:	7813      	ldrb	r3, [r2, #0]
 8007004:	600b      	str	r3, [r1, #0]
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	1e10      	subs	r0, r2, #0
 800700a:	bf18      	it	ne
 800700c:	2001      	movne	r0, #1
 800700e:	b002      	add	sp, #8
 8007010:	4770      	bx	lr
 8007012:	4610      	mov	r0, r2
 8007014:	e7fb      	b.n	800700e <__ascii_mbtowc+0x16>
 8007016:	f06f 0001 	mvn.w	r0, #1
 800701a:	e7f8      	b.n	800700e <__ascii_mbtowc+0x16>

0800701c <_realloc_r>:
 800701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007020:	4607      	mov	r7, r0
 8007022:	4614      	mov	r4, r2
 8007024:	460d      	mov	r5, r1
 8007026:	b921      	cbnz	r1, 8007032 <_realloc_r+0x16>
 8007028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800702c:	4611      	mov	r1, r2
 800702e:	f7ff b96f 	b.w	8006310 <_malloc_r>
 8007032:	b92a      	cbnz	r2, 8007040 <_realloc_r+0x24>
 8007034:	f7ff f8f8 	bl	8006228 <_free_r>
 8007038:	4625      	mov	r5, r4
 800703a:	4628      	mov	r0, r5
 800703c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007040:	f000 f841 	bl	80070c6 <_malloc_usable_size_r>
 8007044:	4284      	cmp	r4, r0
 8007046:	4606      	mov	r6, r0
 8007048:	d802      	bhi.n	8007050 <_realloc_r+0x34>
 800704a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800704e:	d8f4      	bhi.n	800703a <_realloc_r+0x1e>
 8007050:	4621      	mov	r1, r4
 8007052:	4638      	mov	r0, r7
 8007054:	f7ff f95c 	bl	8006310 <_malloc_r>
 8007058:	4680      	mov	r8, r0
 800705a:	b908      	cbnz	r0, 8007060 <_realloc_r+0x44>
 800705c:	4645      	mov	r5, r8
 800705e:	e7ec      	b.n	800703a <_realloc_r+0x1e>
 8007060:	42b4      	cmp	r4, r6
 8007062:	4622      	mov	r2, r4
 8007064:	4629      	mov	r1, r5
 8007066:	bf28      	it	cs
 8007068:	4632      	movcs	r2, r6
 800706a:	f7ff ff85 	bl	8006f78 <memcpy>
 800706e:	4629      	mov	r1, r5
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff f8d9 	bl	8006228 <_free_r>
 8007076:	e7f1      	b.n	800705c <_realloc_r+0x40>

08007078 <__ascii_wctomb>:
 8007078:	4603      	mov	r3, r0
 800707a:	4608      	mov	r0, r1
 800707c:	b141      	cbz	r1, 8007090 <__ascii_wctomb+0x18>
 800707e:	2aff      	cmp	r2, #255	@ 0xff
 8007080:	d904      	bls.n	800708c <__ascii_wctomb+0x14>
 8007082:	228a      	movs	r2, #138	@ 0x8a
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	4770      	bx	lr
 800708c:	700a      	strb	r2, [r1, #0]
 800708e:	2001      	movs	r0, #1
 8007090:	4770      	bx	lr
	...

08007094 <fiprintf>:
 8007094:	b40e      	push	{r1, r2, r3}
 8007096:	b503      	push	{r0, r1, lr}
 8007098:	4601      	mov	r1, r0
 800709a:	ab03      	add	r3, sp, #12
 800709c:	4805      	ldr	r0, [pc, #20]	@ (80070b4 <fiprintf+0x20>)
 800709e:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a2:	6800      	ldr	r0, [r0, #0]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	f000 f83f 	bl	8007128 <_vfiprintf_r>
 80070aa:	b002      	add	sp, #8
 80070ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b0:	b003      	add	sp, #12
 80070b2:	4770      	bx	lr
 80070b4:	20000018 	.word	0x20000018

080070b8 <abort>:
 80070b8:	b508      	push	{r3, lr}
 80070ba:	2006      	movs	r0, #6
 80070bc:	f000 fa08 	bl	80074d0 <raise>
 80070c0:	2001      	movs	r0, #1
 80070c2:	f7fa fdc7 	bl	8001c54 <_exit>

080070c6 <_malloc_usable_size_r>:
 80070c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ca:	1f18      	subs	r0, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfbc      	itt	lt
 80070d0:	580b      	ldrlt	r3, [r1, r0]
 80070d2:	18c0      	addlt	r0, r0, r3
 80070d4:	4770      	bx	lr

080070d6 <__sfputc_r>:
 80070d6:	6893      	ldr	r3, [r2, #8]
 80070d8:	3b01      	subs	r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	b410      	push	{r4}
 80070de:	6093      	str	r3, [r2, #8]
 80070e0:	da08      	bge.n	80070f4 <__sfputc_r+0x1e>
 80070e2:	6994      	ldr	r4, [r2, #24]
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	db01      	blt.n	80070ec <__sfputc_r+0x16>
 80070e8:	290a      	cmp	r1, #10
 80070ea:	d103      	bne.n	80070f4 <__sfputc_r+0x1e>
 80070ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f0:	f000 b932 	b.w	8007358 <__swbuf_r>
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	1c58      	adds	r0, r3, #1
 80070f8:	6010      	str	r0, [r2, #0]
 80070fa:	7019      	strb	r1, [r3, #0]
 80070fc:	4608      	mov	r0, r1
 80070fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007102:	4770      	bx	lr

08007104 <__sfputs_r>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	4606      	mov	r6, r0
 8007108:	460f      	mov	r7, r1
 800710a:	4614      	mov	r4, r2
 800710c:	18d5      	adds	r5, r2, r3
 800710e:	42ac      	cmp	r4, r5
 8007110:	d101      	bne.n	8007116 <__sfputs_r+0x12>
 8007112:	2000      	movs	r0, #0
 8007114:	e007      	b.n	8007126 <__sfputs_r+0x22>
 8007116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711a:	463a      	mov	r2, r7
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffda 	bl	80070d6 <__sfputc_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d1f3      	bne.n	800710e <__sfputs_r+0xa>
 8007126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007128 <_vfiprintf_r>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	460d      	mov	r5, r1
 800712e:	b09d      	sub	sp, #116	@ 0x74
 8007130:	4614      	mov	r4, r2
 8007132:	4698      	mov	r8, r3
 8007134:	4606      	mov	r6, r0
 8007136:	b118      	cbz	r0, 8007140 <_vfiprintf_r+0x18>
 8007138:	6a03      	ldr	r3, [r0, #32]
 800713a:	b90b      	cbnz	r3, 8007140 <_vfiprintf_r+0x18>
 800713c:	f7fe f8e8 	bl	8005310 <__sinit>
 8007140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007142:	07d9      	lsls	r1, r3, #31
 8007144:	d405      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	059a      	lsls	r2, r3, #22
 800714a:	d402      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 800714c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800714e:	f7fe fa0e 	bl	800556e <__retarget_lock_acquire_recursive>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	d501      	bpl.n	800715c <_vfiprintf_r+0x34>
 8007158:	692b      	ldr	r3, [r5, #16]
 800715a:	b99b      	cbnz	r3, 8007184 <_vfiprintf_r+0x5c>
 800715c:	4629      	mov	r1, r5
 800715e:	4630      	mov	r0, r6
 8007160:	f000 f938 	bl	80073d4 <__swsetup_r>
 8007164:	b170      	cbz	r0, 8007184 <_vfiprintf_r+0x5c>
 8007166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007168:	07dc      	lsls	r4, r3, #31
 800716a:	d504      	bpl.n	8007176 <_vfiprintf_r+0x4e>
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	b01d      	add	sp, #116	@ 0x74
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	0598      	lsls	r0, r3, #22
 800717a:	d4f7      	bmi.n	800716c <_vfiprintf_r+0x44>
 800717c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800717e:	f7fe f9f7 	bl	8005570 <__retarget_lock_release_recursive>
 8007182:	e7f3      	b.n	800716c <_vfiprintf_r+0x44>
 8007184:	2300      	movs	r3, #0
 8007186:	9309      	str	r3, [sp, #36]	@ 0x24
 8007188:	2320      	movs	r3, #32
 800718a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800718e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007192:	2330      	movs	r3, #48	@ 0x30
 8007194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007344 <_vfiprintf_r+0x21c>
 8007198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800719c:	f04f 0901 	mov.w	r9, #1
 80071a0:	4623      	mov	r3, r4
 80071a2:	469a      	mov	sl, r3
 80071a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a8:	b10a      	cbz	r2, 80071ae <_vfiprintf_r+0x86>
 80071aa:	2a25      	cmp	r2, #37	@ 0x25
 80071ac:	d1f9      	bne.n	80071a2 <_vfiprintf_r+0x7a>
 80071ae:	ebba 0b04 	subs.w	fp, sl, r4
 80071b2:	d00b      	beq.n	80071cc <_vfiprintf_r+0xa4>
 80071b4:	465b      	mov	r3, fp
 80071b6:	4622      	mov	r2, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ffa2 	bl	8007104 <__sfputs_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	f000 80a7 	beq.w	8007314 <_vfiprintf_r+0x1ec>
 80071c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071c8:	445a      	add	r2, fp
 80071ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80071cc:	f89a 3000 	ldrb.w	r3, [sl]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 809f 	beq.w	8007314 <_vfiprintf_r+0x1ec>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e0:	f10a 0a01 	add.w	sl, sl, #1
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80071ee:	4654      	mov	r4, sl
 80071f0:	2205      	movs	r2, #5
 80071f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f6:	4853      	ldr	r0, [pc, #332]	@ (8007344 <_vfiprintf_r+0x21c>)
 80071f8:	f7f8 fff2 	bl	80001e0 <memchr>
 80071fc:	9a04      	ldr	r2, [sp, #16]
 80071fe:	b9d8      	cbnz	r0, 8007238 <_vfiprintf_r+0x110>
 8007200:	06d1      	lsls	r1, r2, #27
 8007202:	bf44      	itt	mi
 8007204:	2320      	movmi	r3, #32
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800720a:	0713      	lsls	r3, r2, #28
 800720c:	bf44      	itt	mi
 800720e:	232b      	movmi	r3, #43	@ 0x2b
 8007210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007214:	f89a 3000 	ldrb.w	r3, [sl]
 8007218:	2b2a      	cmp	r3, #42	@ 0x2a
 800721a:	d015      	beq.n	8007248 <_vfiprintf_r+0x120>
 800721c:	9a07      	ldr	r2, [sp, #28]
 800721e:	4654      	mov	r4, sl
 8007220:	2000      	movs	r0, #0
 8007222:	f04f 0c0a 	mov.w	ip, #10
 8007226:	4621      	mov	r1, r4
 8007228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722c:	3b30      	subs	r3, #48	@ 0x30
 800722e:	2b09      	cmp	r3, #9
 8007230:	d94b      	bls.n	80072ca <_vfiprintf_r+0x1a2>
 8007232:	b1b0      	cbz	r0, 8007262 <_vfiprintf_r+0x13a>
 8007234:	9207      	str	r2, [sp, #28]
 8007236:	e014      	b.n	8007262 <_vfiprintf_r+0x13a>
 8007238:	eba0 0308 	sub.w	r3, r0, r8
 800723c:	fa09 f303 	lsl.w	r3, r9, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	46a2      	mov	sl, r4
 8007246:	e7d2      	b.n	80071ee <_vfiprintf_r+0xc6>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d19      	adds	r1, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9103      	str	r1, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfbb      	ittet	lt
 8007254:	425b      	neglt	r3, r3
 8007256:	f042 0202 	orrlt.w	r2, r2, #2
 800725a:	9307      	strge	r3, [sp, #28]
 800725c:	9307      	strlt	r3, [sp, #28]
 800725e:	bfb8      	it	lt
 8007260:	9204      	strlt	r2, [sp, #16]
 8007262:	7823      	ldrb	r3, [r4, #0]
 8007264:	2b2e      	cmp	r3, #46	@ 0x2e
 8007266:	d10a      	bne.n	800727e <_vfiprintf_r+0x156>
 8007268:	7863      	ldrb	r3, [r4, #1]
 800726a:	2b2a      	cmp	r3, #42	@ 0x2a
 800726c:	d132      	bne.n	80072d4 <_vfiprintf_r+0x1ac>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	1d1a      	adds	r2, r3, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	9203      	str	r2, [sp, #12]
 8007276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800727a:	3402      	adds	r4, #2
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007354 <_vfiprintf_r+0x22c>
 8007282:	7821      	ldrb	r1, [r4, #0]
 8007284:	2203      	movs	r2, #3
 8007286:	4650      	mov	r0, sl
 8007288:	f7f8 ffaa 	bl	80001e0 <memchr>
 800728c:	b138      	cbz	r0, 800729e <_vfiprintf_r+0x176>
 800728e:	9b04      	ldr	r3, [sp, #16]
 8007290:	eba0 000a 	sub.w	r0, r0, sl
 8007294:	2240      	movs	r2, #64	@ 0x40
 8007296:	4082      	lsls	r2, r0
 8007298:	4313      	orrs	r3, r2
 800729a:	3401      	adds	r4, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	4829      	ldr	r0, [pc, #164]	@ (8007348 <_vfiprintf_r+0x220>)
 80072a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072a8:	2206      	movs	r2, #6
 80072aa:	f7f8 ff99 	bl	80001e0 <memchr>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d03f      	beq.n	8007332 <_vfiprintf_r+0x20a>
 80072b2:	4b26      	ldr	r3, [pc, #152]	@ (800734c <_vfiprintf_r+0x224>)
 80072b4:	bb1b      	cbnz	r3, 80072fe <_vfiprintf_r+0x1d6>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	3307      	adds	r3, #7
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	3308      	adds	r3, #8
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c4:	443b      	add	r3, r7
 80072c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c8:	e76a      	b.n	80071a0 <_vfiprintf_r+0x78>
 80072ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ce:	460c      	mov	r4, r1
 80072d0:	2001      	movs	r0, #1
 80072d2:	e7a8      	b.n	8007226 <_vfiprintf_r+0xfe>
 80072d4:	2300      	movs	r3, #0
 80072d6:	3401      	adds	r4, #1
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	4619      	mov	r1, r3
 80072dc:	f04f 0c0a 	mov.w	ip, #10
 80072e0:	4620      	mov	r0, r4
 80072e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e6:	3a30      	subs	r2, #48	@ 0x30
 80072e8:	2a09      	cmp	r2, #9
 80072ea:	d903      	bls.n	80072f4 <_vfiprintf_r+0x1cc>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0c6      	beq.n	800727e <_vfiprintf_r+0x156>
 80072f0:	9105      	str	r1, [sp, #20]
 80072f2:	e7c4      	b.n	800727e <_vfiprintf_r+0x156>
 80072f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f8:	4604      	mov	r4, r0
 80072fa:	2301      	movs	r3, #1
 80072fc:	e7f0      	b.n	80072e0 <_vfiprintf_r+0x1b8>
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	462a      	mov	r2, r5
 8007304:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <_vfiprintf_r+0x228>)
 8007306:	a904      	add	r1, sp, #16
 8007308:	4630      	mov	r0, r6
 800730a:	f7fd fbbf 	bl	8004a8c <_printf_float>
 800730e:	4607      	mov	r7, r0
 8007310:	1c78      	adds	r0, r7, #1
 8007312:	d1d6      	bne.n	80072c2 <_vfiprintf_r+0x19a>
 8007314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007316:	07d9      	lsls	r1, r3, #31
 8007318:	d405      	bmi.n	8007326 <_vfiprintf_r+0x1fe>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	059a      	lsls	r2, r3, #22
 800731e:	d402      	bmi.n	8007326 <_vfiprintf_r+0x1fe>
 8007320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007322:	f7fe f925 	bl	8005570 <__retarget_lock_release_recursive>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	065b      	lsls	r3, r3, #25
 800732a:	f53f af1f 	bmi.w	800716c <_vfiprintf_r+0x44>
 800732e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007330:	e71e      	b.n	8007170 <_vfiprintf_r+0x48>
 8007332:	ab03      	add	r3, sp, #12
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	462a      	mov	r2, r5
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <_vfiprintf_r+0x228>)
 800733a:	a904      	add	r1, sp, #16
 800733c:	4630      	mov	r0, r6
 800733e:	f7fd fe3d 	bl	8004fbc <_printf_i>
 8007342:	e7e4      	b.n	800730e <_vfiprintf_r+0x1e6>
 8007344:	0800789a 	.word	0x0800789a
 8007348:	080078a4 	.word	0x080078a4
 800734c:	08004a8d 	.word	0x08004a8d
 8007350:	08007105 	.word	0x08007105
 8007354:	080078a0 	.word	0x080078a0

08007358 <__swbuf_r>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	460e      	mov	r6, r1
 800735c:	4614      	mov	r4, r2
 800735e:	4605      	mov	r5, r0
 8007360:	b118      	cbz	r0, 800736a <__swbuf_r+0x12>
 8007362:	6a03      	ldr	r3, [r0, #32]
 8007364:	b90b      	cbnz	r3, 800736a <__swbuf_r+0x12>
 8007366:	f7fd ffd3 	bl	8005310 <__sinit>
 800736a:	69a3      	ldr	r3, [r4, #24]
 800736c:	60a3      	str	r3, [r4, #8]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	071a      	lsls	r2, r3, #28
 8007372:	d501      	bpl.n	8007378 <__swbuf_r+0x20>
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	b943      	cbnz	r3, 800738a <__swbuf_r+0x32>
 8007378:	4621      	mov	r1, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f000 f82a 	bl	80073d4 <__swsetup_r>
 8007380:	b118      	cbz	r0, 800738a <__swbuf_r+0x32>
 8007382:	f04f 37ff 	mov.w	r7, #4294967295
 8007386:	4638      	mov	r0, r7
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	6922      	ldr	r2, [r4, #16]
 800738e:	1a98      	subs	r0, r3, r2
 8007390:	6963      	ldr	r3, [r4, #20]
 8007392:	b2f6      	uxtb	r6, r6
 8007394:	4283      	cmp	r3, r0
 8007396:	4637      	mov	r7, r6
 8007398:	dc05      	bgt.n	80073a6 <__swbuf_r+0x4e>
 800739a:	4621      	mov	r1, r4
 800739c:	4628      	mov	r0, r5
 800739e:	f7ff fd99 	bl	8006ed4 <_fflush_r>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d1ed      	bne.n	8007382 <__swbuf_r+0x2a>
 80073a6:	68a3      	ldr	r3, [r4, #8]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	60a3      	str	r3, [r4, #8]
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	6022      	str	r2, [r4, #0]
 80073b2:	701e      	strb	r6, [r3, #0]
 80073b4:	6962      	ldr	r2, [r4, #20]
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d004      	beq.n	80073c6 <__swbuf_r+0x6e>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	07db      	lsls	r3, r3, #31
 80073c0:	d5e1      	bpl.n	8007386 <__swbuf_r+0x2e>
 80073c2:	2e0a      	cmp	r6, #10
 80073c4:	d1df      	bne.n	8007386 <__swbuf_r+0x2e>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	f7ff fd83 	bl	8006ed4 <_fflush_r>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d0d9      	beq.n	8007386 <__swbuf_r+0x2e>
 80073d2:	e7d6      	b.n	8007382 <__swbuf_r+0x2a>

080073d4 <__swsetup_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4b29      	ldr	r3, [pc, #164]	@ (800747c <__swsetup_r+0xa8>)
 80073d8:	4605      	mov	r5, r0
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	460c      	mov	r4, r1
 80073de:	b118      	cbz	r0, 80073e8 <__swsetup_r+0x14>
 80073e0:	6a03      	ldr	r3, [r0, #32]
 80073e2:	b90b      	cbnz	r3, 80073e8 <__swsetup_r+0x14>
 80073e4:	f7fd ff94 	bl	8005310 <__sinit>
 80073e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ec:	0719      	lsls	r1, r3, #28
 80073ee:	d422      	bmi.n	8007436 <__swsetup_r+0x62>
 80073f0:	06da      	lsls	r2, r3, #27
 80073f2:	d407      	bmi.n	8007404 <__swsetup_r+0x30>
 80073f4:	2209      	movs	r2, #9
 80073f6:	602a      	str	r2, [r5, #0]
 80073f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fc:	81a3      	strh	r3, [r4, #12]
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007402:	e033      	b.n	800746c <__swsetup_r+0x98>
 8007404:	0758      	lsls	r0, r3, #29
 8007406:	d512      	bpl.n	800742e <__swsetup_r+0x5a>
 8007408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800740a:	b141      	cbz	r1, 800741e <__swsetup_r+0x4a>
 800740c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007410:	4299      	cmp	r1, r3
 8007412:	d002      	beq.n	800741a <__swsetup_r+0x46>
 8007414:	4628      	mov	r0, r5
 8007416:	f7fe ff07 	bl	8006228 <_free_r>
 800741a:	2300      	movs	r3, #0
 800741c:	6363      	str	r3, [r4, #52]	@ 0x34
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007424:	81a3      	strh	r3, [r4, #12]
 8007426:	2300      	movs	r3, #0
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	f043 0308 	orr.w	r3, r3, #8
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	b94b      	cbnz	r3, 800744e <__swsetup_r+0x7a>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007444:	d003      	beq.n	800744e <__swsetup_r+0x7a>
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f000 f883 	bl	8007554 <__smakebuf_r>
 800744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007452:	f013 0201 	ands.w	r2, r3, #1
 8007456:	d00a      	beq.n	800746e <__swsetup_r+0x9a>
 8007458:	2200      	movs	r2, #0
 800745a:	60a2      	str	r2, [r4, #8]
 800745c:	6962      	ldr	r2, [r4, #20]
 800745e:	4252      	negs	r2, r2
 8007460:	61a2      	str	r2, [r4, #24]
 8007462:	6922      	ldr	r2, [r4, #16]
 8007464:	b942      	cbnz	r2, 8007478 <__swsetup_r+0xa4>
 8007466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800746a:	d1c5      	bne.n	80073f8 <__swsetup_r+0x24>
 800746c:	bd38      	pop	{r3, r4, r5, pc}
 800746e:	0799      	lsls	r1, r3, #30
 8007470:	bf58      	it	pl
 8007472:	6962      	ldrpl	r2, [r4, #20]
 8007474:	60a2      	str	r2, [r4, #8]
 8007476:	e7f4      	b.n	8007462 <__swsetup_r+0x8e>
 8007478:	2000      	movs	r0, #0
 800747a:	e7f7      	b.n	800746c <__swsetup_r+0x98>
 800747c:	20000018 	.word	0x20000018

08007480 <_raise_r>:
 8007480:	291f      	cmp	r1, #31
 8007482:	b538      	push	{r3, r4, r5, lr}
 8007484:	4605      	mov	r5, r0
 8007486:	460c      	mov	r4, r1
 8007488:	d904      	bls.n	8007494 <_raise_r+0x14>
 800748a:	2316      	movs	r3, #22
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	f04f 30ff 	mov.w	r0, #4294967295
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007496:	b112      	cbz	r2, 800749e <_raise_r+0x1e>
 8007498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800749c:	b94b      	cbnz	r3, 80074b2 <_raise_r+0x32>
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 f830 	bl	8007504 <_getpid_r>
 80074a4:	4622      	mov	r2, r4
 80074a6:	4601      	mov	r1, r0
 80074a8:	4628      	mov	r0, r5
 80074aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ae:	f000 b817 	b.w	80074e0 <_kill_r>
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d00a      	beq.n	80074cc <_raise_r+0x4c>
 80074b6:	1c59      	adds	r1, r3, #1
 80074b8:	d103      	bne.n	80074c2 <_raise_r+0x42>
 80074ba:	2316      	movs	r3, #22
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	2001      	movs	r0, #1
 80074c0:	e7e7      	b.n	8007492 <_raise_r+0x12>
 80074c2:	2100      	movs	r1, #0
 80074c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074c8:	4620      	mov	r0, r4
 80074ca:	4798      	blx	r3
 80074cc:	2000      	movs	r0, #0
 80074ce:	e7e0      	b.n	8007492 <_raise_r+0x12>

080074d0 <raise>:
 80074d0:	4b02      	ldr	r3, [pc, #8]	@ (80074dc <raise+0xc>)
 80074d2:	4601      	mov	r1, r0
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f7ff bfd3 	b.w	8007480 <_raise_r>
 80074da:	bf00      	nop
 80074dc:	20000018 	.word	0x20000018

080074e0 <_kill_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	@ (8007500 <_kill_r+0x20>)
 80074e4:	2300      	movs	r3, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	f7fa fba1 	bl	8001c34 <_kill>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	d102      	bne.n	80074fc <_kill_r+0x1c>
 80074f6:	682b      	ldr	r3, [r5, #0]
 80074f8:	b103      	cbz	r3, 80074fc <_kill_r+0x1c>
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	bf00      	nop
 8007500:	200004f8 	.word	0x200004f8

08007504 <_getpid_r>:
 8007504:	f7fa bb8e 	b.w	8001c24 <_getpid>

08007508 <__swhatbuf_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	460c      	mov	r4, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	2900      	cmp	r1, #0
 8007512:	b096      	sub	sp, #88	@ 0x58
 8007514:	4615      	mov	r5, r2
 8007516:	461e      	mov	r6, r3
 8007518:	da0d      	bge.n	8007536 <__swhatbuf_r+0x2e>
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007520:	f04f 0100 	mov.w	r1, #0
 8007524:	bf14      	ite	ne
 8007526:	2340      	movne	r3, #64	@ 0x40
 8007528:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800752c:	2000      	movs	r0, #0
 800752e:	6031      	str	r1, [r6, #0]
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	b016      	add	sp, #88	@ 0x58
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	466a      	mov	r2, sp
 8007538:	f000 f848 	bl	80075cc <_fstat_r>
 800753c:	2800      	cmp	r0, #0
 800753e:	dbec      	blt.n	800751a <__swhatbuf_r+0x12>
 8007540:	9901      	ldr	r1, [sp, #4]
 8007542:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007546:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800754a:	4259      	negs	r1, r3
 800754c:	4159      	adcs	r1, r3
 800754e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007552:	e7eb      	b.n	800752c <__swhatbuf_r+0x24>

08007554 <__smakebuf_r>:
 8007554:	898b      	ldrh	r3, [r1, #12]
 8007556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007558:	079d      	lsls	r5, r3, #30
 800755a:	4606      	mov	r6, r0
 800755c:	460c      	mov	r4, r1
 800755e:	d507      	bpl.n	8007570 <__smakebuf_r+0x1c>
 8007560:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	6123      	str	r3, [r4, #16]
 8007568:	2301      	movs	r3, #1
 800756a:	6163      	str	r3, [r4, #20]
 800756c:	b003      	add	sp, #12
 800756e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007570:	ab01      	add	r3, sp, #4
 8007572:	466a      	mov	r2, sp
 8007574:	f7ff ffc8 	bl	8007508 <__swhatbuf_r>
 8007578:	9f00      	ldr	r7, [sp, #0]
 800757a:	4605      	mov	r5, r0
 800757c:	4639      	mov	r1, r7
 800757e:	4630      	mov	r0, r6
 8007580:	f7fe fec6 	bl	8006310 <_malloc_r>
 8007584:	b948      	cbnz	r0, 800759a <__smakebuf_r+0x46>
 8007586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758a:	059a      	lsls	r2, r3, #22
 800758c:	d4ee      	bmi.n	800756c <__smakebuf_r+0x18>
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	f043 0302 	orr.w	r3, r3, #2
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	e7e2      	b.n	8007560 <__smakebuf_r+0xc>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	6020      	str	r0, [r4, #0]
 800759e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075aa:	b15b      	cbz	r3, 80075c4 <__smakebuf_r+0x70>
 80075ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b0:	4630      	mov	r0, r6
 80075b2:	f000 f81d 	bl	80075f0 <_isatty_r>
 80075b6:	b128      	cbz	r0, 80075c4 <__smakebuf_r+0x70>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	431d      	orrs	r5, r3
 80075c8:	81a5      	strh	r5, [r4, #12]
 80075ca:	e7cf      	b.n	800756c <__smakebuf_r+0x18>

080075cc <_fstat_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	@ (80075ec <_fstat_r+0x20>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f7fa fb8b 	bl	8001cf4 <_fstat>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d102      	bne.n	80075e8 <_fstat_r+0x1c>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	b103      	cbz	r3, 80075e8 <_fstat_r+0x1c>
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	bd38      	pop	{r3, r4, r5, pc}
 80075ea:	bf00      	nop
 80075ec:	200004f8 	.word	0x200004f8

080075f0 <_isatty_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d06      	ldr	r5, [pc, #24]	@ (800760c <_isatty_r+0x1c>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7fa fb8a 	bl	8001d14 <_isatty>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_isatty_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_isatty_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200004f8 	.word	0x200004f8

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
