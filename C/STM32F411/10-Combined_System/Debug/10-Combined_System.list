
10-Combined_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009110  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080092b0  080092b0  0000a2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009794  08009794  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009794  08009794  0000a794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800979c  0800979c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800979c  0800979c  0000a79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097a0  080097a0  0000a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080097a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200001d4  08009978  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08009978  0000b654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012698  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290f  00000000  00000000  0001d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000201b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfb  00000000  00000000  00021378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019422  00000000  00000000  00022173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001569d  00000000  00000000  0003b595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb35  00000000  00000000  00050c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d30  00000000  00000000  000ef7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f54dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009298 	.word	0x08009298

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009298 	.word	0x08009298

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Set_Pin_Mode>:
  * @brief  The internal function is used as gpio pin mode
  * @param  DHT		DHTxx_Drv_t
  * @param  Mode	Input or Output
  */
static void Set_Pin_Mode(DHTxx_Drv_t *DHT, PinMode Mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetPinMode(DHT->DataPort, DHT->DataPin, LL_GPIO_MODE_INPUT);
	}else{
		LL_GPIO_SetPinMode(DHT->DataPort, DHT->DataPin, LL_GPIO_MODE_OUTPUT);
	}
#else
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT->DataPin;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	889b      	ldrh	r3, [r3, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]
	if(Mode == Input)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <Set_Pin_Mode+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e001      	b.n	8000fb6 <Set_Pin_Mode+0x32>
	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(DHT->DataPort, &GPIO_InitStruct);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f107 020c 	add.w	r2, r7, #12
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 f941 	bl	8003248 <HAL_GPIO_Init>
#endif
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <Set_Pin_Level>:
  * @brief  The internal function is used as gpio pin level
  * @param  DHT		DHTxx_Drv_t
  * @param  Mode	Level: Set/High = 1, Reset/Low = 0
  */
static void Set_Pin_Level(DHTxx_Drv_t *DHT, uint8_t Level)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetOutputPin(DHT->DataPort, DHT->DataPin);
	}else{
		LL_GPIO_ResetOutputPin(DHT->DataPort, DHT->DataPin);
	}
#else
	HAL_GPIO_WritePin(DHT->DataPort, DHT->DataPin, Level);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f002 facb 	bl	8003580 <HAL_GPIO_WritePin>
#endif
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <Bus_Read>:
  * @brief  The internal function is used to read data pin
  * @retval Pin level status
  * @param  DHT		DHTxx_Drv_t
  */
static uint8_t Bus_Read(DHTxx_Drv_t *DHT)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
#ifdef LL_Driver
	return ((DHT->DataPort->IDR & DHT->DataPin) != 0x00U) ? 1 : 0;
#else
	return HAL_GPIO_ReadPin(DHT->DataPort, DHT->DataPin);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f002 faa3 	bl	8003550 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
#endif
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <DHT_Check_Response>:
  * @brief  The internal function is used to check sensor response
  * @param  DHT		DHTxx_Drv_t
  * @retval OK = 1, Failed = -1
  */
static uint8_t DHT_Check_Response(DHTxx_Drv_t *DHT)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

	/* Set Data pin as Output */
	Set_Pin_Mode(DHT, Output);
 8001020:	2101      	movs	r1, #1
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffae 	bl	8000f84 <Set_Pin_Mode>
	/* Reset Data Pin */
	Set_Pin_Level(DHT, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffcf 	bl	8000fce <Set_Pin_Level>

	/* Delay waiting
	 * DHT22 = 1.2ms(give extra delay)
	 * DHT11 = 18ms
	 */
	DwtDelay_us((DHT->Type == DHT22) ? 1500 : 18000);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <DHT_Check_Response+0x2a>
 8001038:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800103c:	e001      	b.n	8001042 <DHT_Check_Response+0x2e>
 800103e:	f244 6350 	movw	r3, #18000	@ 0x4650
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f918 	bl	8001278 <DwtDelay_us>

	/* Set Data Pin */
	Set_Pin_Level(DHT, 1);
 8001048:	2101      	movs	r1, #1
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffbf 	bl	8000fce <Set_Pin_Level>
	/* Delay 20us */
	DwtDelay_us(20);
 8001050:	2014      	movs	r0, #20
 8001052:	f000 f911 	bl	8001278 <DwtDelay_us>
	/* Set Data pin as Input */
	Set_Pin_Mode(DHT, Input);
 8001056:	2100      	movs	r1, #0
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff93 	bl	8000f84 <Set_Pin_Mode>
	/* Delay 40us */
	DwtDelay_us(40);
 800105e:	2028      	movs	r0, #40	@ 0x28
 8001060:	f000 f90a 	bl	8001278 <DwtDelay_us>

	if(!Bus_Read(DHT))
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffc4 	bl	8000ff2 <Bus_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10c      	bne.n	800108a <DHT_Check_Response+0x76>
	{
		DwtDelay_us(80);
 8001070:	2050      	movs	r0, #80	@ 0x50
 8001072:	f000 f901 	bl	8001278 <DwtDelay_us>
		/* if the pin is high, response is ok */
		Response = (Bus_Read(DHT)) ? 1 : -1;
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffbb 	bl	8000ff2 <Bus_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <DHT_Check_Response+0x72>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <DHT_Check_Response+0x74>
 8001086:	23ff      	movs	r3, #255	@ 0xff
 8001088:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait for the pin to go reset */
	while(Bus_Read(DHT)) {};
 800108a:	bf00      	nop
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffb0 	bl	8000ff2 <Bus_Read>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f9      	bne.n	800108c <DHT_Check_Response+0x78>

	return Response;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <DHT_Read>:
/**
  * @brief  The internal function is used to read sensor data and return as byte
  * @param  DHT		DHTxx_Drv_t
  */
static uint8_t DHT_Read(DHTxx_Drv_t *DHT)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	uint8_t i, j;
	for(j = 0; j < 8; j++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	73bb      	strb	r3, [r7, #14]
 80010ae:	e034      	b.n	800111a <DHT_Read+0x78>
	{
		/* Wait for pin to go high */
		while(!Bus_Read(DHT));
 80010b0:	bf00      	nop
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff9d 	bl	8000ff2 <Bus_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f9      	beq.n	80010b2 <DHT_Read+0x10>
		/* Delay 40us */
		DwtDelay_us(40);
 80010be:	2028      	movs	r0, #40	@ 0x28
 80010c0:	f000 f8da 	bl	8001278 <DwtDelay_us>

		/* If the pin go reset */
		if(!Bus_Read(DHT))
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff94 	bl	8000ff2 <Bus_Read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10e      	bne.n	80010ee <DHT_Read+0x4c>
		{
			i &= ~(1 << (7 - j));   // write 0
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4013      	ands	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e00b      	b.n	8001106 <DHT_Read+0x64>
		}else{
			i |= (1 << (7 - j));  // if the pin is high, write 1
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	f1c3 0307 	rsb	r3, r3, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	73fb      	strb	r3, [r7, #15]
		}

		/* Wait the pin go reset */
		while(Bus_Read(DHT));
 8001106:	bf00      	nop
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff72 	bl	8000ff2 <Bus_Read>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f9      	bne.n	8001108 <DHT_Read+0x66>
	for(j = 0; j < 8; j++)
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	3301      	adds	r3, #1
 8001118:	73bb      	strb	r3, [r7, #14]
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d9c7      	bls.n	80010b0 <DHT_Read+0xe>
	}
	return i;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <DHT_GetData>:
  * @brief  The function is used as get temperature and humidity and return in
  * 		data structure
  * @param  DHT		DHTxx_Drv_t
  */
void DHT_GetData(DHTxx_Drv_t *DHT)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if(DHT_Check_Response(DHT))
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff6d 	bl	8001014 <DHT_Check_Response>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d061      	beq.n	8001204 <DHT_GetData+0xd8>
	{
		DHT->Data.Rh1 = DHT_Read(DHT);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffae 	bl	80010a2 <DHT_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	721a      	strb	r2, [r3, #8]
		DHT->Data.Rh2 = DHT_Read(DHT);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa7 	bl	80010a2 <DHT_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	725a      	strb	r2, [r3, #9]
		DHT->Data.Tp1 = DHT_Read(DHT);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffa0 	bl	80010a2 <DHT_Read>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	729a      	strb	r2, [r3, #10]
		DHT->Data.Tp2 = DHT_Read(DHT);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff99 	bl	80010a2 <DHT_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	72da      	strb	r2, [r3, #11]
		DHT->Data.Sum = DHT_Read(DHT);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff92 	bl	80010a2 <DHT_Read>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	819a      	strh	r2, [r3, #12]

		/* Check if data valid */
		if(DHT->Data.Sum == (DHT->Data.Rh1 + DHT->Data.Rh2 + DHT->Data.Tp1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	899b      	ldrh	r3, [r3, #12]
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7a1b      	ldrb	r3, [r3, #8]
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7a5b      	ldrb	r3, [r3, #9]
 8001196:	4413      	add	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	7a92      	ldrb	r2, [r2, #10]
 800119c:	4413      	add	r3, r2
				+ DHT->Data.Tp2))
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	7ad2      	ldrb	r2, [r2, #11]
 80011a2:	4413      	add	r3, r2
		if(DHT->Data.Sum == (DHT->Data.Rh1 + DHT->Data.Rh2 + DHT->Data.Tp1
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d12d      	bne.n	8001204 <DHT_GetData+0xd8>
		{
			DHT->Temperature = ((DHT->Data.Tp1 << 8) | DHT->Data.Tp2) / 10.0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7a9b      	ldrb	r3, [r3, #10]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	7ad2      	ldrb	r2, [r2, #11]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9bd 	bl	8000534 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <DHT_GetData+0xe0>)
 80011c0:	f7ff fb4c 	bl	800085c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fcf4 	bl	8000bb8 <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
			DHT->Humidity = ((DHT->Data.Rh1 << 8) | DHT->Data.Rh2) / 10.0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a1b      	ldrb	r3, [r3, #8]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	7a52      	ldrb	r2, [r2, #9]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9a6 	bl	8000534 <__aeabi_i2d>
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <DHT_GetData+0xe0>)
 80011ee:	f7ff fb35 	bl	800085c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcdd 	bl	8000bb8 <__aeabi_d2f>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	615a      	str	r2, [r3, #20]
		}
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40240000 	.word	0x40240000

08001210 <DwtInit>:

/**
  * @brief  Initialize DWT
  */
void DwtInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	SysCClk 		= (SystemCoreClock / 1000000);	// Calculate in us
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <DwtInit+0x48>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <DwtInit+0x4c>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <DwtInit+0x50>)
 8001222:	6013      	str	r3, [r2, #0]
	DWT_LAR			|= DWT_LAR_UNLOCK;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <DwtInit+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	490e      	ldr	r1, [pc, #56]	@ (8001264 <DwtInit+0x54>)
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <DwtInit+0x58>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
	DEM_CR			|= (uint32_t)DEM_CR_TRCENA;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <DwtInit+0x5c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <DwtInit+0x5c>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800123a:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT		= (uint32_t)0u;					// Reset the clock counter
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <DwtInit+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	DWT_CR			|= (uint32_t)DWT_CR_CYCCNTENA;
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <DwtInit+0x64>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <DwtInit+0x64>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20000000 	.word	0x20000000
 800125c:	431bde83 	.word	0x431bde83
 8001260:	200001f0 	.word	0x200001f0
 8001264:	e0001fb0 	.word	0xe0001fb0
 8001268:	c5acce55 	.word	0xc5acce55
 800126c:	e000edfc 	.word	0xe000edfc
 8001270:	e0001004 	.word	0xe0001004
 8001274:	e0001000 	.word	0xe0001000

08001278 <DwtDelay_us>:
/**
  * @brief  Function to delay in microsecond
  * @param	usec	Period in microsecond
  */
inline void DwtDelay_us(uint32_t usec)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	start = DWT_CYCCNT;
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <DwtDelay_us+0x38>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <DwtDelay_us+0x3c>)
 8001286:	6013      	str	r3, [r2, #0]
	while(((DWT_CYCCNT - start) / SysCClk) < usec) {};
 8001288:	bf00      	nop
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <DwtDelay_us+0x38>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <DwtDelay_us+0x3c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <DwtDelay_us+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fbb2 f3f3 	udiv	r3, r2, r3
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d8f3      	bhi.n	800128a <DwtDelay_us+0x12>
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e0001004 	.word	0xe0001004
 80012b4:	200001f4 	.word	0x200001f4
 80012b8:	200001f0 	.word	0x200001f0

080012bc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	f023 030f 	bic.w	r3, r3, #15
 80012ce:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 030c 	orr.w	r3, r3, #12
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	f043 030c 	orr.w	r3, r3, #12
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	4619      	mov	r1, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	2364      	movs	r3, #100	@ 0x64
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	f002 fa93 	bl	800383c <HAL_I2C_Master_Transmit>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af02      	add	r7, sp, #8
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	f023 030f 	bic.w	r3, r3, #15
 8001330:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	f043 030d 	orr.w	r3, r3, #13
 800133e:	b2db      	uxtb	r3, r3
 8001340:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	f043 0309 	orr.w	r3, r3, #9
 8001348:	b2db      	uxtb	r3, r3
 800134a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	f043 030d 	orr.w	r3, r3, #13
 8001352:	b2db      	uxtb	r3, r3
 8001354:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	f043 0309 	orr.w	r3, r3, #9
 800135c:	b2db      	uxtb	r3, r3
 800135e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	791b      	ldrb	r3, [r3, #4]
 8001368:	4619      	mov	r1, r3
 800136a:	f107 0208 	add.w	r2, r7, #8
 800136e:	2364      	movs	r3, #100	@ 0x64
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2304      	movs	r3, #4
 8001374:	f002 fa62 	bl	800383c <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff96 	bl	80012bc <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e006      	b.n	80013a4 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001396:	2120      	movs	r1, #32
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffc0 	bl	800131e <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80013a8:	ddf5      	ble.n	8001396 <lcd_clear+0x16>
    }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d824      	bhi.n	8001410 <lcd_gotoxy+0x5c>
 80013c6:	a201      	add	r2, pc, #4	@ (adr r2, 80013cc <lcd_gotoxy+0x18>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013e7 	.word	0x080013e7
 80013d4:	080013f1 	.word	0x080013f1
 80013d8:	080013fb 	.word	0x080013fb
    {
        case 0: address = 0x80 + col; break;  // First row
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	3b80      	subs	r3, #128	@ 0x80
 80013e2:	75fb      	strb	r3, [r7, #23]
 80013e4:	e00e      	b.n	8001404 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	3b40      	subs	r3, #64	@ 0x40
 80013ec:	75fb      	strb	r3, [r7, #23]
 80013ee:	e009      	b.n	8001404 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3b6c      	subs	r3, #108	@ 0x6c
 80013f6:	75fb      	strb	r3, [r7, #23]
 80013f8:	e004      	b.n	8001404 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b2c      	subs	r3, #44	@ 0x2c
 8001400:	75fb      	strb	r3, [r7, #23]
 8001402:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	4619      	mov	r1, r3
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff ff57 	bl	80012bc <lcd_send_cmd>
 800140e:	e000      	b.n	8001412 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001410:	bf00      	nop
}
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8001420:	2032      	movs	r0, #50	@ 0x32
 8001422:	f000 ffed 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001426:	2130      	movs	r1, #48	@ 0x30
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f000 ffe6 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001434:	2130      	movs	r1, #48	@ 0x30
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff40 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f000 ffdf 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001442:	2130      	movs	r1, #48	@ 0x30
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff39 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f000 ffd8 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001450:	2120      	movs	r1, #32
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff32 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(10);
 8001458:	200a      	movs	r0, #10
 800145a:	f000 ffd1 	bl	8002400 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800145e:	2128      	movs	r1, #40	@ 0x28
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2b 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001466:	2001      	movs	r0, #1
 8001468:	f000 ffca 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800146c:	2108      	movs	r1, #8
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff24 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 ffc3 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800147a:	2101      	movs	r1, #1
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff1d 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(2);
 8001482:	2002      	movs	r0, #2
 8001484:	f000 ffbc 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001488:	2106      	movs	r1, #6
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff16 	bl	80012bc <lcd_send_cmd>
    HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 ffb5 	bl	8002400 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001496:	210c      	movs	r1, #12
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff0f 	bl	80012bc <lcd_send_cmd>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80014b0:	e007      	b.n	80014c2 <lcd_puts+0x1c>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	603a      	str	r2, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff2e 	bl	800131e <lcd_send_data>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f3      	bne.n	80014b2 <lcd_puts+0xc>
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <LCD_Init_Custom>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LCD_Init_Custom()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  lcd.hi2c = &hi2c1;
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <LCD_Init_Custom+0x1c>)
 80014da:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <LCD_Init_Custom+0x20>)
 80014dc:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <LCD_Init_Custom+0x1c>)
 80014e0:	224e      	movs	r2, #78	@ 0x4e
 80014e2:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <LCD_Init_Custom+0x1c>)
 80014e6:	f7ff ff97 	bl	8001418 <lcd_init>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200003cc 	.word	0x200003cc
 80014f4:	200002a0 	.word	0x200002a0

080014f8 <send_at_command>:

int send_at_command(const char* command, const char* expected_response, uint32_t timeout)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    memset(response_buffer, 0, sizeof(response_buffer));
 8001504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001508:	2100      	movs	r1, #0
 800150a:	4815      	ldr	r0, [pc, #84]	@ (8001560 <send_at_command+0x68>)
 800150c:	f005 fddf 	bl	80070ce <memset>
    response_index = 0;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <send_at_command+0x6c>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart6, (uint8_t*)command, strlen(command), 1000);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7fe feb2 	bl	8000280 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001524:	68f9      	ldr	r1, [r7, #12]
 8001526:	4810      	ldr	r0, [pc, #64]	@ (8001568 <send_at_command+0x70>)
 8001528:	f004 f838 	bl	800559c <HAL_UART_Transmit>

    uint32_t start_time = HAL_GetTick();
 800152c:	f000 ff5c 	bl	80023e8 <HAL_GetTick>
 8001530:	6178      	str	r0, [r7, #20]
    while (HAL_GetTick() - start_time < timeout)
 8001532:	e008      	b.n	8001546 <send_at_command+0x4e>
    {
        if (strstr(response_buffer, expected_response) != NULL)
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <send_at_command+0x68>)
 8001538:	f005 fdd1 	bl	80070de <strstr>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <send_at_command+0x4e>
        {
            return 1;
 8001542:	2301      	movs	r3, #1
 8001544:	e008      	b.n	8001558 <send_at_command+0x60>
    while (HAL_GetTick() - start_time < timeout)
 8001546:	f000 ff4f 	bl	80023e8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d8ee      	bhi.n	8001534 <send_at_command+0x3c>
        }
    }
    return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200003f8 	.word	0x200003f8
 8001564:	200004f8 	.word	0x200004f8
 8001568:	20000384 	.word	0x20000384

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8001572:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f000 fed2 	bl	800231c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f916 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f000 fafa 	bl	8001b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001580:	f000 fad8 	bl	8001b34 <MX_DMA_Init>
  MX_ADC1_Init();
 8001584:	f000 f978 	bl	8001878 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001588:	f000 f9d6 	bl	8001938 <MX_I2C1_Init>
  MX_TIM2_Init();
 800158c:	f000 fa02 	bl	8001994 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001590:	f000 fa58 	bl	8001a44 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001594:	f000 faa4 	bl	8001ae0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // Khởi tạo module
    LCD_Init_Custom();
 8001598:	f7ff ff9c 	bl	80014d4 <LCD_Init_Custom>
    DwtInit();
 800159c:	f7ff fe38 	bl	8001210 <DwtInit>
    dht22.DataPort = DHT22_GPIO_Port;
 80015a0:	4b67      	ldr	r3, [pc, #412]	@ (8001740 <main+0x1d4>)
 80015a2:	4a68      	ldr	r2, [pc, #416]	@ (8001744 <main+0x1d8>)
 80015a4:	601a      	str	r2, [r3, #0]
    dht22.DataPin = DHT22_Pin;
 80015a6:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <main+0x1d4>)
 80015a8:	2220      	movs	r2, #32
 80015aa:	809a      	strh	r2, [r3, #4]
    dht22.Type = DHT22;
 80015ac:	4b64      	ldr	r3, [pc, #400]	@ (8001740 <main+0x1d4>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	719a      	strb	r2, [r3, #6]
    HAL_UART_Receive_IT(&huart6, &uart_rx_byte, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	4964      	ldr	r1, [pc, #400]	@ (8001748 <main+0x1dc>)
 80015b6:	4865      	ldr	r0, [pc, #404]	@ (800174c <main+0x1e0>)
 80015b8:	f004 f87b 	bl	80056b2 <HAL_UART_Receive_IT>

    // --- KẾT NỐI WI-FI ---
    lcd_puts(&lcd, "Connecting WiFi...");
 80015bc:	4964      	ldr	r1, [pc, #400]	@ (8001750 <main+0x1e4>)
 80015be:	4865      	ldr	r0, [pc, #404]	@ (8001754 <main+0x1e8>)
 80015c0:	f7ff ff71 	bl	80014a6 <lcd_puts>
    send_at_command("AT+RST\r\n", "ready", 5000);
 80015c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c8:	4963      	ldr	r1, [pc, #396]	@ (8001758 <main+0x1ec>)
 80015ca:	4864      	ldr	r0, [pc, #400]	@ (800175c <main+0x1f0>)
 80015cc:	f7ff ff94 	bl	80014f8 <send_at_command>
    HAL_Delay(2000);
 80015d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015d4:	f000 ff14 	bl	8002400 <HAL_Delay>
    send_at_command("ATE0\r\n", "OK", 1000);
 80015d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015dc:	4960      	ldr	r1, [pc, #384]	@ (8001760 <main+0x1f4>)
 80015de:	4861      	ldr	r0, [pc, #388]	@ (8001764 <main+0x1f8>)
 80015e0:	f7ff ff8a 	bl	80014f8 <send_at_command>
    HAL_Delay(500);
 80015e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015e8:	f000 ff0a 	bl	8002400 <HAL_Delay>
    send_at_command("AT+WMODE=1,1\r\n", "OK", 3000);
 80015ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80015f0:	495b      	ldr	r1, [pc, #364]	@ (8001760 <main+0x1f4>)
 80015f2:	485d      	ldr	r0, [pc, #372]	@ (8001768 <main+0x1fc>)
 80015f4:	f7ff ff80 	bl	80014f8 <send_at_command>
    HAL_Delay(500);
 80015f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015fc:	f000 ff00 	bl	8002400 <HAL_Delay>

    char connect_command[100];
    sprintf(connect_command, "AT+WJAP=\"%s\",\"%s\"\r\n", WIFI_SSID, WIFI_PASSWORD);
 8001600:	f507 70de 	add.w	r0, r7, #444	@ 0x1bc
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <main+0x200>)
 8001606:	4a5a      	ldr	r2, [pc, #360]	@ (8001770 <main+0x204>)
 8001608:	495a      	ldr	r1, [pc, #360]	@ (8001774 <main+0x208>)
 800160a:	f005 fcfb 	bl	8007004 <siprintf>

    if (!send_at_command(connect_command, "+EVENT:WIFI_GOT_IP", 15000))
 800160e:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8001612:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001616:	4958      	ldr	r1, [pc, #352]	@ (8001778 <main+0x20c>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff6d 	bl	80014f8 <send_at_command>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d108      	bne.n	8001636 <main+0xca>
    {
      lcd_clear(&lcd);
 8001624:	484b      	ldr	r0, [pc, #300]	@ (8001754 <main+0x1e8>)
 8001626:	f7ff feab 	bl	8001380 <lcd_clear>
      lcd_puts(&lcd, "WiFi Failed!");
 800162a:	4954      	ldr	r1, [pc, #336]	@ (800177c <main+0x210>)
 800162c:	4849      	ldr	r0, [pc, #292]	@ (8001754 <main+0x1e8>)
 800162e:	f7ff ff3a 	bl	80014a6 <lcd_puts>
      while(1);
 8001632:	bf00      	nop
 8001634:	e7fd      	b.n	8001632 <main+0xc6>
    }

    lcd_clear(&lcd);
 8001636:	4847      	ldr	r0, [pc, #284]	@ (8001754 <main+0x1e8>)
 8001638:	f7ff fea2 	bl	8001380 <lcd_clear>
    lcd_puts(&lcd, "WiFi Connected!");
 800163c:	4950      	ldr	r1, [pc, #320]	@ (8001780 <main+0x214>)
 800163e:	4845      	ldr	r0, [pc, #276]	@ (8001754 <main+0x1e8>)
 8001640:	f7ff ff31 	bl	80014a6 <lcd_puts>
    HAL_Delay(2000);
 8001644:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001648:	f000 feda 	bl	8002400 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
      {
        // 1. Đọc cảm biến
        DHT_GetData(&dht22);
 800164c:	483c      	ldr	r0, [pc, #240]	@ (8001740 <main+0x1d4>)
 800164e:	f7ff fd6d 	bl	800112c <DHT_GetData>
        temperature = dht22.Temperature;
 8001652:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <main+0x1d4>)
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	4a4b      	ldr	r2, [pc, #300]	@ (8001784 <main+0x218>)
 8001658:	6013      	str	r3, [r2, #0]
        humidity = dht22.Humidity;
 800165a:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <main+0x1d4>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a4a      	ldr	r2, [pc, #296]	@ (8001788 <main+0x21c>)
 8001660:	6013      	str	r3, [r2, #0]

        // Hiển thị lên LCD
        lcd_clear(&lcd);
 8001662:	483c      	ldr	r0, [pc, #240]	@ (8001754 <main+0x1e8>)
 8001664:	f7ff fe8c 	bl	8001380 <lcd_clear>
        char line1_str[20], line2_str[20];
        sprintf(line1_str, "Temp: %.1f C", temperature);
 8001668:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <main+0x218>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff73 	bl	8000558 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	f507 70d4 	add.w	r0, r7, #424	@ 0x1a8
 800167a:	4944      	ldr	r1, [pc, #272]	@ (800178c <main+0x220>)
 800167c:	f005 fcc2 	bl	8007004 <siprintf>
        sprintf(line2_str, "Humi: %.1f %%", humidity);
 8001680:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <main+0x21c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff67 	bl	8000558 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 8001692:	493f      	ldr	r1, [pc, #252]	@ (8001790 <main+0x224>)
 8001694:	f005 fcb6 	bl	8007004 <siprintf>
        lcd_puts(&lcd, line1_str);
 8001698:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800169c:	4619      	mov	r1, r3
 800169e:	482d      	ldr	r0, [pc, #180]	@ (8001754 <main+0x1e8>)
 80016a0:	f7ff ff01 	bl	80014a6 <lcd_puts>
        lcd_gotoxy(&lcd, 0, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2100      	movs	r1, #0
 80016a8:	482a      	ldr	r0, [pc, #168]	@ (8001754 <main+0x1e8>)
 80016aa:	f7ff fe83 	bl	80013b4 <lcd_gotoxy>
        lcd_puts(&lcd, line2_str);
 80016ae:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80016b2:	4619      	mov	r1, r3
 80016b4:	4827      	ldr	r0, [pc, #156]	@ (8001754 <main+0x1e8>)
 80016b6:	f7ff fef6 	bl	80014a6 <lcd_puts>

        // 2. Chuẩn bị và gửi API
        char json_payload[100];
        // Tạo chuỗi JSON, ký tự \ dùng để escape dấu " trong chuỗi C
        sprintf(json_payload, "{\\\"temperature\\\":%.1f,\\\"humidity\\\":%.1f}", temperature, humidity);
 80016ba:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <main+0x218>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_f2d>
 80016c4:	4604      	mov	r4, r0
 80016c6:	460d      	mov	r5, r1
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <main+0x21c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff43 	bl	8000558 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	1d38      	adds	r0, r7, #4
 80016d8:	e9cd 2300 	strd	r2, r3, [sp]
 80016dc:	4622      	mov	r2, r4
 80016de:	462b      	mov	r3, r5
 80016e0:	492c      	ldr	r1, [pc, #176]	@ (8001794 <main+0x228>)
 80016e2:	f005 fc8f 	bl	8007004 <siprintf>

        char http_command[300]; // Tăng kích thước buffer một chút
        // Thêm cặp dấu ngoặc kép "" bao quanh tham số data cuối cùng
        sprintf(http_command, "AT+HTTPCLIENTLINE=1,3,\"application/json\",\"%s\",%d,\"/api/data\",\"%s\"\r\n",
 80016e6:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <main+0x22c>)
 80016f4:	4929      	ldr	r1, [pc, #164]	@ (800179c <main+0x230>)
 80016f6:	f005 fc85 	bl	8007004 <siprintf>
                LOCAL_API_IP, LOCAL_API_PORT, json_payload);

        // 3. Gửi dữ liệu và hiển thị trạng thái
        lcd_gotoxy(&lcd, 12, 1);
 80016fa:	2201      	movs	r2, #1
 80016fc:	210c      	movs	r1, #12
 80016fe:	4815      	ldr	r0, [pc, #84]	@ (8001754 <main+0x1e8>)
 8001700:	f7ff fe58 	bl	80013b4 <lcd_gotoxy>
        lcd_puts(&lcd, "->");
 8001704:	4926      	ldr	r1, [pc, #152]	@ (80017a0 <main+0x234>)
 8001706:	4813      	ldr	r0, [pc, #76]	@ (8001754 <main+0x1e8>)
 8001708:	f7ff fecd 	bl	80014a6 <lcd_puts>
        if(send_at_command(http_command, "OK", 10000)) {
 800170c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001710:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001714:	4912      	ldr	r1, [pc, #72]	@ (8001760 <main+0x1f4>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff feee 	bl	80014f8 <send_at_command>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <main+0x1c0>
            lcd_puts(&lcd, "OK");
 8001722:	490f      	ldr	r1, [pc, #60]	@ (8001760 <main+0x1f4>)
 8001724:	480b      	ldr	r0, [pc, #44]	@ (8001754 <main+0x1e8>)
 8001726:	f7ff febe 	bl	80014a6 <lcd_puts>
 800172a:	e003      	b.n	8001734 <main+0x1c8>
        } else {
            lcd_puts(&lcd, "FAIL");
 800172c:	491d      	ldr	r1, [pc, #116]	@ (80017a4 <main+0x238>)
 800172e:	4809      	ldr	r0, [pc, #36]	@ (8001754 <main+0x1e8>)
 8001730:	f7ff feb9 	bl	80014a6 <lcd_puts>
        }

        HAL_Delay(10000);
 8001734:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001738:	f000 fe62 	bl	8002400 <HAL_Delay>
      {
 800173c:	e786      	b.n	800164c <main+0xe0>
 800173e:	bf00      	nop
 8001740:	200003d4 	.word	0x200003d4
 8001744:	40020000 	.word	0x40020000
 8001748:	200003f4 	.word	0x200003f4
 800174c:	20000384 	.word	0x20000384
 8001750:	080092b0 	.word	0x080092b0
 8001754:	200003cc 	.word	0x200003cc
 8001758:	080092c4 	.word	0x080092c4
 800175c:	080092cc 	.word	0x080092cc
 8001760:	080092d8 	.word	0x080092d8
 8001764:	080092dc 	.word	0x080092dc
 8001768:	080092e4 	.word	0x080092e4
 800176c:	080092f4 	.word	0x080092f4
 8001770:	08009300 	.word	0x08009300
 8001774:	0800930c 	.word	0x0800930c
 8001778:	08009320 	.word	0x08009320
 800177c:	08009334 	.word	0x08009334
 8001780:	08009344 	.word	0x08009344
 8001784:	200003ec 	.word	0x200003ec
 8001788:	200003f0 	.word	0x200003f0
 800178c:	08009354 	.word	0x08009354
 8001790:	08009364 	.word	0x08009364
 8001794:	08009374 	.word	0x08009374
 8001798:	080093a0 	.word	0x080093a0
 800179c:	080093b0 	.word	0x080093b0
 80017a0:	080093f4 	.word	0x080093f4
 80017a4:	080093f8 	.word	0x080093f8

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	@ 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	@ 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fc89 	bl	80070ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <SystemClock_Config+0xc8>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <SystemClock_Config+0xc8>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	@ 0x40
 80017dc:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <SystemClock_Config+0xc8>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <SystemClock_Config+0xcc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a20      	ldr	r2, [pc, #128]	@ (8001874 <SystemClock_Config+0xcc>)
 80017f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <SystemClock_Config+0xcc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001804:	2301      	movs	r3, #1
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001818:	2304      	movs	r3, #4
 800181a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800181c:	2364      	movs	r3, #100	@ 0x64
 800181e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fb5f 	bl	8003ef0 <HAL_RCC_OscConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001838:	f000 fa4a 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001840:	2302      	movs	r3, #2
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2103      	movs	r1, #3
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fdc1 	bl	80043e0 <HAL_RCC_ClockConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001864:	f000 fa34 	bl	8001cd0 <Error_Handler>
  }
}
 8001868:	bf00      	nop
 800186a:	3750      	adds	r7, #80	@ 0x50
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40007000 	.word	0x40007000

08001878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187e:	463b      	mov	r3, r7
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800188a:	4b28      	ldr	r3, [pc, #160]	@ (800192c <MX_ADC1_Init+0xb4>)
 800188c:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <MX_ADC1_Init+0xb8>)
 800188e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <MX_ADC1_Init+0xb4>)
 8001892:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001896:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001898:	4b24      	ldr	r3, [pc, #144]	@ (800192c <MX_ADC1_Init+0xb4>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018a4:	4b21      	ldr	r3, [pc, #132]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001934 <MX_ADC1_Init+0xbc>)
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80018c4:	4b19      	ldr	r3, [pc, #100]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018c6:	2202      	movs	r2, #2
 80018c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d2:	4b16      	ldr	r3, [pc, #88]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018d8:	4814      	ldr	r0, [pc, #80]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018da:	f000 fdb5 	bl	8002448 <HAL_ADC_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018e4:	f000 f9f4 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80018f0:	2304      	movs	r3, #4
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <MX_ADC1_Init+0xb4>)
 80018fa:	f000 fde9 	bl	80024d0 <HAL_ADC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001904:	f000 f9e4 	bl	8001cd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001908:	2301      	movs	r3, #1
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800190c:	2302      	movs	r3, #2
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	@ (800192c <MX_ADC1_Init+0xb4>)
 8001916:	f000 fddb 	bl	80024d0 <HAL_ADC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001920:	f000 f9d6 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200001f8 	.word	0x200001f8
 8001930:	40012000 	.word	0x40012000
 8001934:	0f000001 	.word	0x0f000001

08001938 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_I2C1_Init+0x50>)
 800193e:	4a13      	ldr	r2, [pc, #76]	@ (800198c <MX_I2C1_Init+0x54>)
 8001940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_I2C1_Init+0x50>)
 8001944:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <MX_I2C1_Init+0x58>)
 8001946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_I2C1_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_I2C1_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_I2C1_Init+0x50>)
 8001956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800195a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <MX_I2C1_Init+0x50>)
 8001976:	f001 fe1d 	bl	80035b4 <HAL_I2C_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001980:	f000 f9a6 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002a0 	.word	0x200002a0
 800198c:	40005400 	.word	0x40005400
 8001990:	000186a0 	.word	0x000186a0

08001994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b6:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80019be:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019c0:	2263      	movs	r2, #99	@ 0x63
 80019c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019cc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019de:	4818      	ldr	r0, [pc, #96]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019e0:	f002 ff6d 	bl	80048be <HAL_TIM_PWM_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019ea:	f000 f971 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	4619      	mov	r1, r3
 80019fc:	4810      	ldr	r0, [pc, #64]	@ (8001a40 <MX_TIM2_Init+0xac>)
 80019fe:	f003 fcfb 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a08:	f000 f962 	bl	8001cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	@ 0x60
 8001a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2208      	movs	r2, #8
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	@ (8001a40 <MX_TIM2_Init+0xac>)
 8001a24:	f003 f88a 	bl	8004b3c <HAL_TIM_PWM_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a2e:	f000 f94f 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a32:	4803      	ldr	r0, [pc, #12]	@ (8001a40 <MX_TIM2_Init+0xac>)
 8001a34:	f000 fa82 	bl	8001f3c <HAL_TIM_MspPostInit>

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	@ 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200002f4 	.word	0x200002f4

08001a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001a62:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <MX_TIM4_Init+0x98>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001a68:	2263      	movs	r2, #99	@ 0x63
 8001a6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001a74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a86:	4814      	ldr	r0, [pc, #80]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001a88:	f002 feca 	bl	8004820 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a92:	f000 f91d 	bl	8001cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001aa4:	f003 f90c 	bl	8004cc0 <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f000 f90f 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	@ (8001ad8 <MX_TIM4_Init+0x94>)
 8001ac0:	f003 fc9a 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001aca:	f000 f901 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000033c 	.word	0x2000033c
 8001adc:	40000800 	.word	0x40000800

08001ae0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <MX_USART6_UART_Init+0x50>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_USART6_UART_Init+0x4c>)
 8001b18:	f003 fcf0 	bl	80054fc <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b22:	f000 f8d5 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000384 	.word	0x20000384
 8001b30:	40011400 	.word	0x40011400

08001b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <MX_DMA_Init+0x3c>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <MX_DMA_Init+0x3c>)
 8001b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <MX_DMA_Init+0x3c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2038      	movs	r0, #56	@ 0x38
 8001b5c:	f000 ffc1 	bl	8002ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b60:	2038      	movs	r0, #56	@ 0x38
 8001b62:	f000 ffda 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a2c      	ldr	r2, [pc, #176]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a25      	ldr	r2, [pc, #148]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <MX_GPIO_Init+0xd0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c00:	4811      	ldr	r0, [pc, #68]	@ (8001c48 <MX_GPIO_Init+0xd4>)
 8001c02:	f001 fcbd 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIR_Pin DHT22_Pin */
  GPIO_InitStruct.Pin = PIR_Pin|DHT22_Pin;
 8001c06:	2330      	movs	r3, #48	@ 0x30
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	480b      	ldr	r0, [pc, #44]	@ (8001c48 <MX_GPIO_Init+0xd4>)
 8001c1a:	f001 fb15 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ON_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_ON_BOARD_Pin;
 8001c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ON_BOARD_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <MX_GPIO_Init+0xd4>)
 8001c38:	f001 fb06 	bl	8003248 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	@ 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x6c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d127      	bne.n	8001cae <HAL_UART_RxCpltCallback+0x62>
  {
    // Chỉ ghép ký tự vào bộ đệm, không đặt cờ báo nữa
    if (response_index < sizeof(response_buffer) - 1)
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_UART_RxCpltCallback+0x70>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2bff      	cmp	r3, #255	@ 0xff
 8001c64:	d01b      	beq.n	8001c9e <HAL_UART_RxCpltCallback+0x52>
    {
      // Thay thế ký tự xuống dòng bằng dấu cách để dễ hiển thị trên 1 dòng
      if(uart_rx_byte == '\r' || uart_rx_byte == '\n')
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x74>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b0d      	cmp	r3, #13
 8001c6c:	d003      	beq.n	8001c76 <HAL_UART_RxCpltCallback+0x2a>
 8001c6e:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x74>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b0a      	cmp	r3, #10
 8001c74:	d107      	bne.n	8001c86 <HAL_UART_RxCpltCallback+0x3a>
      {
          if (response_index > 0) // Chỉ đặt cờ nếu đã có dữ liệu
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_UART_RxCpltCallback+0x70>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <HAL_UART_RxCpltCallback+0x58>
          {
        	  data_received_flag = 1;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x78>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
          if (response_index > 0) // Chỉ đặt cờ nếu đã có dữ liệu
 8001c84:	e00e      	b.n	8001ca4 <HAL_UART_RxCpltCallback+0x58>
          }
      }
      else
      {
          response_buffer[response_index++] = uart_rx_byte;
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_UART_RxCpltCallback+0x70>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	b2d1      	uxtb	r1, r2
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <HAL_UART_RxCpltCallback+0x70>)
 8001c90:	7011      	strb	r1, [r2, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x74>)
 8001c96:	7819      	ldrb	r1, [r3, #0]
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x7c>)
 8001c9a:	5499      	strb	r1, [r3, r2]
 8001c9c:	e002      	b.n	8001ca4 <HAL_UART_RxCpltCallback+0x58>
      }
    } else {
    	// Tràn bộ đệm, reset lại
    	response_index = 0;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <HAL_UART_RxCpltCallback+0x70>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
    }

    // Luôn lắng nghe byte tiếp theo
    HAL_UART_Receive_IT(&huart6, &uart_rx_byte, 1);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4906      	ldr	r1, [pc, #24]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x74>)
 8001ca8:	4808      	ldr	r0, [pc, #32]	@ (8001ccc <HAL_UART_RxCpltCallback+0x80>)
 8001caa:	f003 fd02 	bl	80056b2 <HAL_UART_Receive_IT>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40011400 	.word	0x40011400
 8001cbc:	200004f8 	.word	0x200004f8
 8001cc0:	200003f4 	.word	0x200003f4
 8001cc4:	200004f9 	.word	0x200004f9
 8001cc8:	200003f8 	.word	0x200003f8
 8001ccc:	20000384 	.word	0x20000384

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <Error_Handler+0x8>

08001cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	4a0f      	ldr	r2, [pc, #60]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2f      	ldr	r2, [pc, #188]	@ (8001e08 <HAL_ADC_MspInit+0xdc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d157      	bne.n	8001dfe <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <HAL_ADC_MspInit+0xe0>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a2d      	ldr	r2, [pc, #180]	@ (8001e0c <HAL_ADC_MspInit+0xe0>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <HAL_ADC_MspInit+0xe0>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b27      	ldr	r3, [pc, #156]	@ (8001e0c <HAL_ADC_MspInit+0xe0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a26      	ldr	r2, [pc, #152]	@ (8001e0c <HAL_ADC_MspInit+0xe0>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <HAL_ADC_MspInit+0xe0>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ_2_Pin|MQ_135_Pin;
 8001d86:	2303      	movs	r3, #3
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	481d      	ldr	r0, [pc, #116]	@ (8001e10 <HAL_ADC_MspInit+0xe4>)
 8001d9a:	f001 fa55 	bl	8003248 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001da0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e18 <HAL_ADC_MspInit+0xec>)
 8001da2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001db8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001dc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001de2:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001de4:	f000 feb4 	bl	8002b50 <HAL_DMA_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001dee:	f7ff ff6f 	bl	8001cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001df6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_ADC_MspInit+0xe8>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	@ 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40012000 	.word	0x40012000
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	20000240 	.word	0x20000240
 8001e18:	40026410 	.word	0x40026410

08001e1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <HAL_I2C_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12b      	bne.n	8001e96 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a17      	ldr	r2, [pc, #92]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e5a:	23c0      	movs	r3, #192	@ 0xc0
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <HAL_I2C_MspInit+0x8c>)
 8001e76:	f001 f9e7 	bl	8003248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	@ 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400

08001eac <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ebc:	d10d      	bne.n	8001eda <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d115      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_TIM_Base_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <HAL_TIM_Base_MspInit+0x4c>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_TIM_Base_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	201e      	movs	r0, #30
 8001f20:	f000 fddf 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f24:	201e      	movs	r0, #30
 8001f26:	f000 fdf8 	bl	8002b1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40023800 	.word	0x40023800

08001f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5c:	d11d      	bne.n	8001f9a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <HAL_TIM_MspPostInit+0x6c>)
 8001f96:	f001 f957 	bl	8003248 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000

08001fac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <HAL_UART_MspInit+0x94>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d133      	bne.n	8002036 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <HAL_UART_MspInit+0x98>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <HAL_UART_MspInit+0x98>)
 8001fd8:	f043 0320 	orr.w	r3, r3, #32
 8001fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_UART_MspInit+0x98>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_UART_MspInit+0x98>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <HAL_UART_MspInit+0x98>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_UART_MspInit+0x98>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 8002006:	23c0      	movs	r3, #192	@ 0xc0
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002016:	2308      	movs	r3, #8
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4809      	ldr	r0, [pc, #36]	@ (8002048 <HAL_UART_MspInit+0x9c>)
 8002022:	f001 f911 	bl	8003248 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2047      	movs	r0, #71	@ 0x47
 800202c:	f000 fd59 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002030:	2047      	movs	r0, #71	@ 0x47
 8002032:	f000 fd72 	bl	8002b1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40011400 	.word	0x40011400
 8002044:	40023800 	.word	0x40023800
 8002048:	40020800 	.word	0x40020800

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <NMI_Handler+0x4>

08002054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <MemManage_Handler+0x4>

08002064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <UsageFault_Handler+0x4>

08002074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a2:	f000 f98d 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <TIM4_IRQHandler+0x10>)
 80020b2:	f002 fc53 	bl	800495c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000033c 	.word	0x2000033c

080020c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <DMA2_Stream0_IRQHandler+0x10>)
 80020c6:	f000 fe83 	bl	8002dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000240 	.word	0x20000240

080020d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <USART6_IRQHandler+0x10>)
 80020da:	f003 fb0f 	bl	80056fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000384 	.word	0x20000384

080020e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  // Kiểm tra xem ngắt có phải đến từ TIM4 không
  if (htim->Instance == TIM4)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a06      	ldr	r2, [pc, #24]	@ (8002110 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d104      	bne.n	8002104 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    ms_ticks++; // Tăng biến đếm "nhịp tim" mỗi mili-giây
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002102:	6013      	str	r3, [r2, #0]
  }
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40000800 	.word	0x40000800
 8002114:	200004fc 	.word	0x200004fc

08002118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return 1;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_kill>:

int _kill(int pid, int sig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002132:	f005 f835 	bl	80071a0 <__errno>
 8002136:	4603      	mov	r3, r0
 8002138:	2216      	movs	r2, #22
 800213a:	601a      	str	r2, [r3, #0]
  return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_exit>:

void _exit (int status)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ffe7 	bl	8002128 <_kill>
  while (1) {}    /* Make sure we hang here */
 800215a:	bf00      	nop
 800215c:	e7fd      	b.n	800215a <_exit+0x12>

0800215e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e00a      	b.n	8002186 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002170:	f3af 8000 	nop.w
 8002174:	4601      	mov	r1, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	60ba      	str	r2, [r7, #8]
 800217c:	b2ca      	uxtb	r2, r1
 800217e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	dbf0      	blt.n	8002170 <_read+0x12>
  }

  return len;
 800218e:	687b      	ldr	r3, [r7, #4]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e009      	b.n	80021be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbf1      	blt.n	80021aa <_write+0x12>
  }
  return len;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_close>:

int _close(int file)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f8:	605a      	str	r2, [r3, #4]
  return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_isatty>:

int _isatty(int file)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	@ (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f004 ff9a 	bl	80071a0 <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20020000 	.word	0x20020000
 8002298:	00000400 	.word	0x00000400
 800229c:	20000500 	.word	0x20000500
 80022a0:	20000658 	.word	0x20000658

080022a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002300 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022cc:	f7ff ffea 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d2:	490d      	ldr	r1, [pc, #52]	@ (8002308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f6:	f004 ff59 	bl	80071ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fa:	f7ff f937 	bl	800156c <main>
  bx  lr    
 80022fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800230c:	080097a4 	.word	0x080097a4
  ldr r2, =_sbss
 8002310:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002314:	20000654 	.word	0x20000654

08002318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC_IRQHandler>
	...

0800231c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0d      	ldr	r2, [pc, #52]	@ (800235c <HAL_Init+0x40>)
 8002326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_Init+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <HAL_Init+0x40>)
 8002332:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a07      	ldr	r2, [pc, #28]	@ (800235c <HAL_Init+0x40>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002344:	2003      	movs	r0, #3
 8002346:	f000 fbc1 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234a:	200f      	movs	r0, #15
 800234c:	f000 f808 	bl	8002360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002350:	f7ff fcc4 	bl	8001cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023c00 	.word	0x40023c00

08002360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_InitTick+0x54>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_InitTick+0x58>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002376:	fbb3 f3f1 	udiv	r3, r3, r1
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fbd9 	bl	8002b36 <HAL_SYSTICK_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00e      	b.n	80023ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b0f      	cmp	r3, #15
 8002392:	d80a      	bhi.n	80023aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002394:	2200      	movs	r2, #0
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f000 fba1 	bl	8002ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a0:	4a06      	ldr	r2, [pc, #24]	@ (80023bc <HAL_InitTick+0x5c>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000008 	.word	0x20000008
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_IncTick+0x20>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_IncTick+0x24>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_IncTick+0x24>)
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000008 	.word	0x20000008
 80023e4:	20000504 	.word	0x20000504

080023e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return uwTick;
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <HAL_GetTick+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000504 	.word	0x20000504

08002400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff ffee 	bl	80023e8 <HAL_GetTick>
 800240c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d005      	beq.n	8002426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800241a:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <HAL_Delay+0x44>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002426:	bf00      	nop
 8002428:	f7ff ffde 	bl	80023e8 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	429a      	cmp	r2, r3
 8002436:	d8f7      	bhi.n	8002428 <HAL_Delay+0x28>
  {
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000008 	.word	0x20000008

08002448 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e033      	b.n	80024c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fc60 	bl	8001d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800248e:	f023 0302 	bic.w	r3, r3, #2
 8002492:	f043 0202 	orr.w	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f94a 	bl	8002734 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80024b6:	e001      	b.n	80024bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1c>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e113      	b.n	8002714 <HAL_ADC_ConfigChannel+0x244>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	d925      	bls.n	8002548 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68d9      	ldr	r1, [r3, #12]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43da      	mvns	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	400a      	ands	r2, r1
 8002520:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68d9      	ldr	r1, [r3, #12]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	4603      	mov	r3, r0
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4403      	add	r3, r0
 800253a:	3b1e      	subs	r3, #30
 800253c:	409a      	lsls	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	e022      	b.n	800258e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6919      	ldr	r1, [r3, #16]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	2207      	movs	r2, #7
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	400a      	ands	r2, r1
 800256a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	4618      	mov	r0, r3
 800257e:	4603      	mov	r3, r0
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4403      	add	r3, r0
 8002584:	409a      	lsls	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d824      	bhi.n	80025e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b05      	subs	r3, #5
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b05      	subs	r3, #5
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80025de:	e04c      	b.n	800267a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	d824      	bhi.n	8002632 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b23      	subs	r3, #35	@ 0x23
 80025fa:	221f      	movs	r2, #31
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43da      	mvns	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	400a      	ands	r2, r1
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b23      	subs	r3, #35	@ 0x23
 8002624:	fa00 f203 	lsl.w	r2, r0, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002630:	e023      	b.n	800267a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b41      	subs	r3, #65	@ 0x41
 8002644:	221f      	movs	r2, #31
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	400a      	ands	r2, r1
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	3b41      	subs	r3, #65	@ 0x41
 800266e:	fa00 f203 	lsl.w	r2, r0, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_ADC_ConfigChannel+0x250>)
 800267c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a28      	ldr	r2, [pc, #160]	@ (8002724 <HAL_ADC_ConfigChannel+0x254>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10f      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b12      	cmp	r3, #18
 800268e:	d10b      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_ADC_ConfigChannel+0x254>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d12b      	bne.n	800270a <HAL_ADC_ConfigChannel+0x23a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <HAL_ADC_ConfigChannel+0x258>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x1f4>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d122      	bne.n	800270a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a11      	ldr	r2, [pc, #68]	@ (8002728 <HAL_ADC_ConfigChannel+0x258>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d111      	bne.n	800270a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026e6:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_ADC_ConfigChannel+0x25c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_ADC_ConfigChannel+0x260>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	0c9a      	lsrs	r2, r3, #18
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	40012000 	.word	0x40012000
 8002728:	10000012 	.word	0x10000012
 800272c:	20000000 	.word	0x20000000
 8002730:	431bde83 	.word	0x431bde83

08002734 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800273c:	4b79      	ldr	r3, [pc, #484]	@ (8002924 <ADC_Init+0x1f0>)
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	431a      	orrs	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	021a      	lsls	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800278c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c6:	4a58      	ldr	r2, [pc, #352]	@ (8002928 <ADC_Init+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	e00f      	b.n	8002832 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002830:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0202 	bic.w	r2, r2, #2
 8002840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7e1b      	ldrb	r3, [r3, #24]
 800284c:	005a      	lsls	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800286e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800287e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	3b01      	subs	r3, #1
 800288c:	035a      	lsls	r2, r3, #13
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	e007      	b.n	80028a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	051a      	lsls	r2, r3, #20
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ea:	025a      	lsls	r2, r3, #9
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	029a      	lsls	r2, r3, #10
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40012300 	.word	0x40012300
 8002928:	0f000001 	.word	0x0f000001

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	@ (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff29 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af4:	f7ff ff3e 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff8e 	bl	8002a20 <NVIC_EncodePriority>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	bf00      	nop
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff31 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffa2 	bl	8002a88 <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff fc44 	bl	80023e8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e099      	b.n	8002ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8c:	e00f      	b.n	8002bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8e:	f7ff fc2b 	bl	80023e8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d908      	bls.n	8002bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e078      	b.n	8002ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e8      	bne.n	8002b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <HAL_DMA_Init+0x158>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	4313      	orrs	r3, r2
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0307 	bic.w	r3, r3, #7
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d117      	bne.n	8002c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fa7b 	bl	8003150 <DMA_CheckFifoParam>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2240      	movs	r2, #64	@ 0x40
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e016      	b.n	8002ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa32 	bl	80030e4 <DMA_CalcBaseAndBitshift>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	223f      	movs	r2, #63	@ 0x3f
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	f010803f 	.word	0xf010803f

08002cac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cba:	f7ff fb95 	bl	80023e8 <HAL_GetTick>
 8002cbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d008      	beq.n	8002cde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2280      	movs	r2, #128	@ 0x80
 8002cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e052      	b.n	8002d84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0216 	bic.w	r2, r2, #22
 8002cec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <HAL_DMA_Abort+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0208 	bic.w	r2, r2, #8
 8002d1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2e:	e013      	b.n	8002d58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d30:	f7ff fb5a 	bl	80023e8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d90c      	bls.n	8002d58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2203      	movs	r2, #3
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e015      	b.n	8002d84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e4      	bne.n	8002d30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	223f      	movs	r2, #63	@ 0x3f
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d004      	beq.n	8002daa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2280      	movs	r2, #128	@ 0x80
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00c      	b.n	8002dc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2205      	movs	r2, #5
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ddc:	4b8e      	ldr	r3, [pc, #568]	@ (8003018 <HAL_DMA_IRQHandler+0x248>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a8e      	ldr	r2, [pc, #568]	@ (800301c <HAL_DMA_IRQHandler+0x24c>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0a9b      	lsrs	r3, r3, #10
 8002de8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01a      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0204 	bic.w	r2, r2, #4
 8002e22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	2208      	movs	r2, #8
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e40:	2201      	movs	r2, #1
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	2201      	movs	r2, #1
 8002e60:	409a      	lsls	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	f043 0202 	orr.w	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e76:	2204      	movs	r2, #4
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d012      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	2204      	movs	r2, #4
 8002e96:	409a      	lsls	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f043 0204 	orr.w	r2, r3, #4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	2210      	movs	r2, #16
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d043      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d03c      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	2210      	movs	r2, #16
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d018      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d024      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
 8002efe:	e01f      	b.n	8002f40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
 8002f10:	e016      	b.n	8002f40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0208 	bic.w	r2, r2, #8
 8002f2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f44:	2220      	movs	r2, #32
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 808f 	beq.w	8003070 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8087 	beq.w	8003070 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f66:	2220      	movs	r2, #32
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d136      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0216 	bic.w	r2, r2, #22
 8002f88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_DMA_IRQHandler+0x1da>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0208 	bic.w	r2, r2, #8
 8002fb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	223f      	movs	r2, #63	@ 0x3f
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d07e      	beq.n	80030dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
        }
        return;
 8002fe6:	e079      	b.n	80030dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01d      	beq.n	8003032 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	2b00      	cmp	r3, #0
 800300a:	d031      	beq.n	8003070 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
 8003014:	e02c      	b.n	8003070 <HAL_DMA_IRQHandler+0x2a0>
 8003016:	bf00      	nop
 8003018:	20000000 	.word	0x20000000
 800301c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d023      	beq.n	8003070 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e01e      	b.n	8003070 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10f      	bne.n	8003060 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0210 	bic.w	r2, r2, #16
 800304e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	2b00      	cmp	r3, #0
 8003076:	d032      	beq.n	80030de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2205      	movs	r2, #5
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3301      	adds	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d307      	bcc.n	80030b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f2      	bne.n	800309c <HAL_DMA_IRQHandler+0x2cc>
 80030b6:	e000      	b.n	80030ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
 80030da:	e000      	b.n	80030de <HAL_DMA_IRQHandler+0x30e>
        return;
 80030dc:	bf00      	nop
    }
  }
}
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3b10      	subs	r3, #16
 80030f4:	4a14      	ldr	r2, [pc, #80]	@ (8003148 <DMA_CalcBaseAndBitshift+0x64>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030fe:	4a13      	ldr	r2, [pc, #76]	@ (800314c <DMA_CalcBaseAndBitshift+0x68>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d909      	bls.n	8003126 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58
 8003124:	e007      	b.n	8003136 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	aaaaaaab 	.word	0xaaaaaaab
 800314c:	08009418 	.word	0x08009418

08003150 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d11f      	bne.n	80031aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d856      	bhi.n	800321e <DMA_CheckFifoParam+0xce>
 8003170:	a201      	add	r2, pc, #4	@ (adr r2, 8003178 <DMA_CheckFifoParam+0x28>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	08003189 	.word	0x08003189
 800317c:	0800319b 	.word	0x0800319b
 8003180:	08003189 	.word	0x08003189
 8003184:	0800321f 	.word	0x0800321f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d046      	beq.n	8003222 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003198:	e043      	b.n	8003222 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031a2:	d140      	bne.n	8003226 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a8:	e03d      	b.n	8003226 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b2:	d121      	bne.n	80031f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d837      	bhi.n	800322a <DMA_CheckFifoParam+0xda>
 80031ba:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <DMA_CheckFifoParam+0x70>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	080031d1 	.word	0x080031d1
 80031c4:	080031d7 	.word	0x080031d7
 80031c8:	080031d1 	.word	0x080031d1
 80031cc:	080031e9 	.word	0x080031e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      break;
 80031d4:	e030      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d025      	beq.n	800322e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e6:	e022      	b.n	800322e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031f0:	d11f      	bne.n	8003232 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031f6:	e01c      	b.n	8003232 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d903      	bls.n	8003206 <DMA_CheckFifoParam+0xb6>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d003      	beq.n	800320c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003204:	e018      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
      break;
 800320a:	e015      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00e      	beq.n	8003236 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e00b      	b.n	8003236 <DMA_CheckFifoParam+0xe6>
      break;
 800321e:	bf00      	nop
 8003220:	e00a      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e008      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e006      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;   
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <DMA_CheckFifoParam+0xe8>
      break;
 8003236:	bf00      	nop
    }
  } 
  
  return status; 
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	@ 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e159      	b.n	8003518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 8148 	bne.w	8003512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d005      	beq.n	800329a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003296:	2b02      	cmp	r3, #2
 8003298:	d130      	bne.n	80032fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 0201 	and.w	r2, r3, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b03      	cmp	r3, #3
 8003306:	d017      	beq.n	8003338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d123      	bne.n	800338c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a2 	beq.w	8003512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b57      	ldr	r3, [pc, #348]	@ (8003530 <HAL_GPIO_Init+0x2e8>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	4a56      	ldr	r2, [pc, #344]	@ (8003530 <HAL_GPIO_Init+0x2e8>)
 80033d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033de:	4b54      	ldr	r3, [pc, #336]	@ (8003530 <HAL_GPIO_Init+0x2e8>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ea:	4a52      	ldr	r2, [pc, #328]	@ (8003534 <HAL_GPIO_Init+0x2ec>)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3302      	adds	r3, #2
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	220f      	movs	r2, #15
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a49      	ldr	r2, [pc, #292]	@ (8003538 <HAL_GPIO_Init+0x2f0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d019      	beq.n	800344a <HAL_GPIO_Init+0x202>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a48      	ldr	r2, [pc, #288]	@ (800353c <HAL_GPIO_Init+0x2f4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0x1fe>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a47      	ldr	r2, [pc, #284]	@ (8003540 <HAL_GPIO_Init+0x2f8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00d      	beq.n	8003442 <HAL_GPIO_Init+0x1fa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a46      	ldr	r2, [pc, #280]	@ (8003544 <HAL_GPIO_Init+0x2fc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x1f6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a45      	ldr	r2, [pc, #276]	@ (8003548 <HAL_GPIO_Init+0x300>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_GPIO_Init+0x1f2>
 8003436:	2304      	movs	r3, #4
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x204>
 800343a:	2307      	movs	r3, #7
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x204>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x204>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x204>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x204>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4935      	ldr	r1, [pc, #212]	@ (8003534 <HAL_GPIO_Init+0x2ec>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346a:	4b38      	ldr	r3, [pc, #224]	@ (800354c <HAL_GPIO_Init+0x304>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800348e:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <HAL_GPIO_Init+0x304>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003494:	4b2d      	ldr	r3, [pc, #180]	@ (800354c <HAL_GPIO_Init+0x304>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b8:	4a24      	ldr	r2, [pc, #144]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034be:	4b23      	ldr	r3, [pc, #140]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e2:	4a1a      	ldr	r2, [pc, #104]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e8:	4b18      	ldr	r3, [pc, #96]	@ (800354c <HAL_GPIO_Init+0x304>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800350c:	4a0f      	ldr	r2, [pc, #60]	@ (800354c <HAL_GPIO_Init+0x304>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f aea2 	bls.w	8003264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3724      	adds	r7, #36	@ 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40013800 	.word	0x40013800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020400 	.word	0x40020400
 8003540:	40020800 	.word	0x40020800
 8003544:	40020c00 	.word	0x40020c00
 8003548:	40021000 	.word	0x40021000
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e001      	b.n	8003572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e12b      	b.n	800381e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fc1e 	bl	8001e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	@ 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003618:	f001 f8da 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a81      	ldr	r2, [pc, #516]	@ (8003828 <HAL_I2C_Init+0x274>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d807      	bhi.n	8003638 <HAL_I2C_Init+0x84>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a80      	ldr	r2, [pc, #512]	@ (800382c <HAL_I2C_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	bf94      	ite	ls
 8003630:	2301      	movls	r3, #1
 8003632:	2300      	movhi	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e006      	b.n	8003646 <HAL_I2C_Init+0x92>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a7d      	ldr	r2, [pc, #500]	@ (8003830 <HAL_I2C_Init+0x27c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0e7      	b.n	800381e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a78      	ldr	r2, [pc, #480]	@ (8003834 <HAL_I2C_Init+0x280>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a6a      	ldr	r2, [pc, #424]	@ (8003828 <HAL_I2C_Init+0x274>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d802      	bhi.n	8003688 <HAL_I2C_Init+0xd4>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	e009      	b.n	800369c <HAL_I2C_Init+0xe8>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a69      	ldr	r2, [pc, #420]	@ (8003838 <HAL_I2C_Init+0x284>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	3301      	adds	r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	495c      	ldr	r1, [pc, #368]	@ (8003828 <HAL_I2C_Init+0x274>)
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d819      	bhi.n	80036f0 <HAL_I2C_Init+0x13c>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e59      	subs	r1, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036d0:	400b      	ands	r3, r1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_I2C_Init+0x138>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e59      	subs	r1, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	e051      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e04f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d111      	bne.n	800371c <HAL_I2C_Init+0x168>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e012      	b.n	8003742 <HAL_I2C_Init+0x18e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Init+0x196>
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <HAL_I2C_Init+0x1bc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e58      	subs	r0, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	fbb0 f3f3 	udiv	r3, r0, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800376e:	e00f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	0099      	lsls	r1, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	6809      	ldr	r1, [r1, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6911      	ldr	r1, [r2, #16]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	000186a0 	.word	0x000186a0
 800382c:	001e847f 	.word	0x001e847f
 8003830:	003d08ff 	.word	0x003d08ff
 8003834:	431bde83 	.word	0x431bde83
 8003838:	10624dd3 	.word	0x10624dd3

0800383c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	461a      	mov	r2, r3
 8003848:	460b      	mov	r3, r1
 800384a:	817b      	strh	r3, [r7, #10]
 800384c:	4613      	mov	r3, r2
 800384e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003850:	f7fe fdca 	bl	80023e8 <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	f040 80e0 	bne.w	8003a24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2319      	movs	r3, #25
 800386a:	2201      	movs	r2, #1
 800386c:	4970      	ldr	r1, [pc, #448]	@ (8003a30 <HAL_I2C_Master_Transmit+0x1f4>)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f964 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
 800387c:	e0d3      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2C_Master_Transmit+0x50>
 8003888:	2302      	movs	r3, #2
 800388a:	e0cc      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d007      	beq.n	80038b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2221      	movs	r2, #33	@ 0x21
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2210      	movs	r2, #16
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	893a      	ldrh	r2, [r7, #8]
 80038e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a50      	ldr	r2, [pc, #320]	@ (8003a34 <HAL_I2C_Master_Transmit+0x1f8>)
 80038f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038f4:	8979      	ldrh	r1, [r7, #10]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f89c 	bl	8003a38 <I2C_MasterRequestWrite>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e08d      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003920:	e066      	b.n	80039f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	6a39      	ldr	r1, [r7, #32]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fa22 	bl	8003d70 <I2C_WaitOnTXEFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	2b04      	cmp	r3, #4
 8003938:	d107      	bne.n	800394a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06b      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d11b      	bne.n	80039c4 <HAL_I2C_Master_Transmit+0x188>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d017      	beq.n	80039c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	6a39      	ldr	r1, [r7, #32]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa19 	bl	8003e00 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d107      	bne.n	80039ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e01a      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d194      	bne.n	8003922 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	00100002 	.word	0x00100002
 8003a34:	ffff0000 	.word	0xffff0000

08003a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d006      	beq.n	8003a62 <I2C_MasterRequestWrite+0x2a>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d003      	beq.n	8003a62 <I2C_MasterRequestWrite+0x2a>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a60:	d108      	bne.n	8003a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00b      	b.n	8003a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	2b12      	cmp	r3, #18
 8003a7a:	d107      	bne.n	8003a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f84f 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab2:	d103      	bne.n	8003abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e035      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac8:	d108      	bne.n	8003adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aca:	897b      	ldrh	r3, [r7, #10]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ad8:	611a      	str	r2, [r3, #16]
 8003ada:	e01b      	b.n	8003b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	11db      	asrs	r3, r3, #7
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0306 	and.w	r3, r3, #6
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f063 030f 	orn	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	490e      	ldr	r1, [pc, #56]	@ (8003b34 <I2C_MasterRequestWrite+0xfc>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f898 	bl	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e010      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <I2C_MasterRequestWrite+0x100>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f888 	bl	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	00010008 	.word	0x00010008
 8003b38:	00010002 	.word	0x00010002

08003b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4c:	e048      	b.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d044      	beq.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe fc47 	bl	80023e8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d139      	bne.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10d      	bne.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	e00c      	b.n	8003bac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d116      	bne.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e023      	b.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10d      	bne.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	e00c      	b.n	8003c20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d093      	beq.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c3e:	e071      	b.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4e:	d123      	bne.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e067      	b.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d041      	beq.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca0:	f7fe fba2 	bl	80023e8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d302      	bcc.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d136      	bne.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10c      	bne.n	8003cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e00b      	b.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e021      	b.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10c      	bne.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e00b      	b.n	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f af6d 	bne.w	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d7c:	e034      	b.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f886 	bl	8003e90 <I2C_IsAcknowledgeFailed>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e034      	b.n	8003df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d028      	beq.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d96:	f7fe fb27 	bl	80023e8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11d      	bne.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d016      	beq.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e007      	b.n	8003df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d1c3      	bne.n	8003d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e0c:	e034      	b.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f83e 	bl	8003e90 <I2C_IsAcknowledgeFailed>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e034      	b.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d028      	beq.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe fadf 	bl	80023e8 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d11d      	bne.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d016      	beq.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e007      	b.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d1c3      	bne.n	8003e0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d11b      	bne.n	8003ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	f043 0204 	orr.w	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e267      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d075      	beq.n	8003ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f0e:	4b88      	ldr	r3, [pc, #544]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1a:	4b85      	ldr	r3, [pc, #532]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d112      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b82      	ldr	r3, [pc, #520]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f32:	d10b      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	4b7e      	ldr	r3, [pc, #504]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05b      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x108>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d157      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e242      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x74>
 8003f56:	4b76      	ldr	r3, [pc, #472]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a75      	ldr	r2, [pc, #468]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x98>
 8003f6e:	4b70      	ldr	r3, [pc, #448]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6f      	ldr	r2, [pc, #444]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6c      	ldr	r2, [pc, #432]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f88:	4b69      	ldr	r3, [pc, #420]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a68      	ldr	r2, [pc, #416]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b66      	ldr	r3, [pc, #408]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a65      	ldr	r2, [pc, #404]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fa1e 	bl	80023e8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe fa1a 	bl	80023e8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e207      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xc0>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fa0a 	bl	80023e8 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fe fa06 	bl	80023e8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	@ 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1f3      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	4b51      	ldr	r3, [pc, #324]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xe8>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004006:	4b4a      	ldr	r3, [pc, #296]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800401a:	2b08      	cmp	r3, #8
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e1c7      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4937      	ldr	r1, [pc, #220]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	e03a      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004060:	4b34      	ldr	r3, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0x244>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fe f9bf 	bl	80023e8 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406e:	f7fe f9bb 	bl	80023e8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1a8      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408c:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4925      	ldr	r1, [pc, #148]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	e015      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a2:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <HAL_RCC_OscConfig+0x244>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fe f99e 	bl	80023e8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b0:	f7fe f99a 	bl	80023e8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e187      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d036      	beq.n	8004148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e2:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <HAL_RCC_OscConfig+0x248>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fe f97e 	bl	80023e8 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f0:	f7fe f97a 	bl	80023e8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e167      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_OscConfig+0x240>)
 8004104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x200>
 800410e:	e01b      	b.n	8004148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004110:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <HAL_RCC_OscConfig+0x248>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fe f967 	bl	80023e8 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	e00e      	b.n	800413c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411e:	f7fe f963 	bl	80023e8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d907      	bls.n	800413c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e150      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
 8004130:	40023800 	.word	0x40023800
 8004134:	42470000 	.word	0x42470000
 8004138:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	4b88      	ldr	r3, [pc, #544]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ea      	bne.n	800411e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8097 	beq.w	8004284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	4b81      	ldr	r3, [pc, #516]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	4b7d      	ldr	r3, [pc, #500]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	4a7c      	ldr	r2, [pc, #496]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	@ 0x40
 8004176:	4b7a      	ldr	r3, [pc, #488]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b77      	ldr	r3, [pc, #476]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d118      	bne.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b74      	ldr	r3, [pc, #464]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a73      	ldr	r2, [pc, #460]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fe f923 	bl	80023e8 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fe f91f 	bl	80023e8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e10c      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004364 <HAL_RCC_OscConfig+0x474>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x2ea>
 80041cc:	4b64      	ldr	r3, [pc, #400]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d0:	4a63      	ldr	r2, [pc, #396]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d8:	e01c      	b.n	8004214 <HAL_RCC_OscConfig+0x324>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x30c>
 80041e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0x324>
 80041fc:	4b58      	ldr	r3, [pc, #352]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004200:	4a57      	ldr	r2, [pc, #348]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	6713      	str	r3, [r2, #112]	@ 0x70
 8004208:	4b55      	ldr	r3, [pc, #340]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420c:	4a54      	ldr	r2, [pc, #336]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fe f8e4 	bl	80023e8 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	e00a      	b.n	800423a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fe f8e0 	bl	80023e8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0cb      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	4b49      	ldr	r3, [pc, #292]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ee      	beq.n	8004224 <HAL_RCC_OscConfig+0x334>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fe f8ce 	bl	80023e8 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fe f8ca 	bl	80023e8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0b5      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	4b3e      	ldr	r3, [pc, #248]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ee      	bne.n	8004250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b39      	ldr	r3, [pc, #228]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	4a38      	ldr	r2, [pc, #224]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800427e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004282:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a1 	beq.w	80043d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800428e:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d05c      	beq.n	8004354 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d141      	bne.n	8004326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <HAL_RCC_OscConfig+0x478>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe f89e 	bl	80023e8 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fe f89a 	bl	80023e8 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e087      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b27      	ldr	r3, [pc, #156]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	491b      	ldr	r1, [pc, #108]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004368 <HAL_RCC_OscConfig+0x478>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7fe f873 	bl	80023e8 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004306:	f7fe f86f 	bl	80023e8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e05c      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x416>
 8004324:	e054      	b.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <HAL_RCC_OscConfig+0x478>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fe f85c 	bl	80023e8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fe f858 	bl	80023e8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e045      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_RCC_OscConfig+0x470>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x444>
 8004352:	e03d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e038      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
 8004360:	40023800 	.word	0x40023800
 8004364:	40007000 	.word	0x40007000
 8004368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800436c:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <HAL_RCC_OscConfig+0x4ec>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d028      	beq.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d121      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d11a      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800439c:	4013      	ands	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d111      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	3b01      	subs	r3, #1
 80043b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cc      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b68      	ldr	r3, [pc, #416]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d90c      	bls.n	800441c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b65      	ldr	r3, [pc, #404]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b63      	ldr	r3, [pc, #396]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0b8      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004434:	4b59      	ldr	r3, [pc, #356]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a58      	ldr	r2, [pc, #352]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800443e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800444c:	4b53      	ldr	r3, [pc, #332]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a52      	ldr	r2, [pc, #328]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b50      	ldr	r3, [pc, #320]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	494d      	ldr	r1, [pc, #308]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d044      	beq.n	8004500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	4b47      	ldr	r3, [pc, #284]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d119      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d003      	beq.n	800449e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	2b03      	cmp	r3, #3
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	4b3f      	ldr	r3, [pc, #252]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b3b      	ldr	r3, [pc, #236]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e067      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b37      	ldr	r3, [pc, #220]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4934      	ldr	r1, [pc, #208]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d0:	f7fd ff8a 	bl	80023e8 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fd ff86 	bl	80023e8 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b2b      	ldr	r3, [pc, #172]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d20c      	bcs.n	8004528 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b22      	ldr	r3, [pc, #136]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e032      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004534:	4b19      	ldr	r3, [pc, #100]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4916      	ldr	r1, [pc, #88]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004552:	4b12      	ldr	r3, [pc, #72]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	490e      	ldr	r1, [pc, #56]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004566:	f000 f821 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 800456a:	4602      	mov	r2, r0
 800456c:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	490a      	ldr	r1, [pc, #40]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	5ccb      	ldrb	r3, [r1, r3]
 800457a:	fa22 f303 	lsr.w	r3, r2, r3
 800457e:	4a09      	ldr	r2, [pc, #36]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004582:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd feea 	bl	8002360 <HAL_InitTick>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023c00 	.word	0x40023c00
 800459c:	40023800 	.word	0x40023800
 80045a0:	08009400 	.word	0x08009400
 80045a4:	20000000 	.word	0x20000000
 80045a8:	20000004 	.word	0x20000004

080045ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b0:	b094      	sub	sp, #80	@ 0x50
 80045b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c4:	4b79      	ldr	r3, [pc, #484]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d00d      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x40>
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	f200 80e1 	bhi.w	8004798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x34>
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045de:	e0db      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b73      	ldr	r3, [pc, #460]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045e4:	e0db      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045e6:	4b73      	ldr	r3, [pc, #460]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80045e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ea:	e0d8      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ec:	4b6f      	ldr	r3, [pc, #444]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045f6:	4b6d      	ldr	r3, [pc, #436]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d063      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004602:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	2200      	movs	r2, #0
 800460a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800460c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004614:	633b      	str	r3, [r7, #48]	@ 0x30
 8004616:	2300      	movs	r3, #0
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
 800461a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	0159      	lsls	r1, r3, #5
 800462c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004630:	0150      	lsls	r0, r2, #5
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4621      	mov	r1, r4
 8004638:	1a51      	subs	r1, r2, r1
 800463a:	6139      	str	r1, [r7, #16]
 800463c:	4629      	mov	r1, r5
 800463e:	eb63 0301 	sbc.w	r3, r3, r1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004650:	4659      	mov	r1, fp
 8004652:	018b      	lsls	r3, r1, #6
 8004654:	4651      	mov	r1, sl
 8004656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800465a:	4651      	mov	r1, sl
 800465c:	018a      	lsls	r2, r1, #6
 800465e:	4651      	mov	r1, sl
 8004660:	ebb2 0801 	subs.w	r8, r2, r1
 8004664:	4659      	mov	r1, fp
 8004666:	eb63 0901 	sbc.w	r9, r3, r1
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800467e:	4690      	mov	r8, r2
 8004680:	4699      	mov	r9, r3
 8004682:	4623      	mov	r3, r4
 8004684:	eb18 0303 	adds.w	r3, r8, r3
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	462b      	mov	r3, r5
 800468c:	eb49 0303 	adc.w	r3, r9, r3
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800469e:	4629      	mov	r1, r5
 80046a0:	024b      	lsls	r3, r1, #9
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046a8:	4621      	mov	r1, r4
 80046aa:	024a      	lsls	r2, r1, #9
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046b2:	2200      	movs	r2, #0
 80046b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046bc:	f7fc facc 	bl	8000c58 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c8:	e058      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ca:	4b38      	ldr	r3, [pc, #224]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	4611      	mov	r1, r2
 80046d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	2300      	movs	r3, #0
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	0159      	lsls	r1, r3, #5
 80046f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f6:	0150      	lsls	r0, r2, #5
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4641      	mov	r1, r8
 80046fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004702:	4649      	mov	r1, r9
 8004704:	eb63 0b01 	sbc.w	fp, r3, r1
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800471c:	ebb2 040a 	subs.w	r4, r2, sl
 8004720:	eb63 050b 	sbc.w	r5, r3, fp
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	00eb      	lsls	r3, r5, #3
 800472e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004732:	00e2      	lsls	r2, r4, #3
 8004734:	4614      	mov	r4, r2
 8004736:	461d      	mov	r5, r3
 8004738:	4643      	mov	r3, r8
 800473a:	18e3      	adds	r3, r4, r3
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	464b      	mov	r3, r9
 8004740:	eb45 0303 	adc.w	r3, r5, r3
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004752:	4629      	mov	r1, r5
 8004754:	028b      	lsls	r3, r1, #10
 8004756:	4621      	mov	r1, r4
 8004758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800475c:	4621      	mov	r1, r4
 800475e:	028a      	lsls	r2, r1, #10
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004766:	2200      	movs	r2, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	61fa      	str	r2, [r7, #28]
 800476c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004770:	f7fc fa72 	bl	8000c58 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	3301      	adds	r3, #1
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800478c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004796:	e002      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800479a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800479c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800479e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3750      	adds	r7, #80	@ 0x50
 80047a4:	46bd      	mov	sp, r7
 80047a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	007a1200 	.word	0x007a1200

080047b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000000 	.word	0x20000000

080047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047d4:	f7ff fff0 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	@ (80047f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0a9b      	lsrs	r3, r3, #10
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	@ (80047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	08009410 	.word	0x08009410

080047f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047fc:	f7ff ffdc 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0b5b      	lsrs	r3, r3, #13
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	@ (800481c <HAL_RCC_GetPCLK2Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	08009410 	.word	0x08009410

08004820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e041      	b.n	80048b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd fb50 	bl	8001eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 fb1e 	bl	8004ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e041      	b.n	8004954 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7fd fae1 	bl	8001eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 facf 	bl	8004ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d020      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0202 	mvn.w	r2, #2
 8004990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fa5b 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa4d 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fa5e 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0204 	mvn.w	r2, #4
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa35 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa27 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fa38 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0208 	mvn.w	r2, #8
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa0f 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fa01 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fa12 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0210 	mvn.w	r2, #16
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f9e9 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f9db 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f9ec 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0201 	mvn.w	r2, #1
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd fb10 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00c      	beq.n	8004aec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fcfe 	bl	80054e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f9bd 	bl	8004e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0220 	mvn.w	r2, #32
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fcd0 	bl	80054d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e0ae      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	f200 809f 	bhi.w	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004ca9 	.word	0x08004ca9
 8004b78:	08004ca9 	.word	0x08004ca9
 8004b7c:	08004ca9 	.word	0x08004ca9
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004ca9 	.word	0x08004ca9
 8004b88:	08004ca9 	.word	0x08004ca9
 8004b8c:	08004ca9 	.word	0x08004ca9
 8004b90:	08004c27 	.word	0x08004c27
 8004b94:	08004ca9 	.word	0x08004ca9
 8004b98:	08004ca9 	.word	0x08004ca9
 8004b9c:	08004ca9 	.word	0x08004ca9
 8004ba0:	08004c67 	.word	0x08004c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f9fe 	bl	8004fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0208 	orr.w	r2, r2, #8
 8004bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0204 	bic.w	r2, r2, #4
 8004bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6999      	ldr	r1, [r3, #24]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	619a      	str	r2, [r3, #24]
      break;
 8004be2:	e064      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa44 	bl	8005078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	619a      	str	r2, [r3, #24]
      break;
 8004c24:	e043      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fa8f 	bl	8005150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0208 	orr.w	r2, r2, #8
 8004c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0204 	bic.w	r2, r2, #4
 8004c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69d9      	ldr	r1, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	61da      	str	r2, [r3, #28]
      break;
 8004c64:	e023      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fad9 	bl	8005224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	021a      	lsls	r2, r3, #8
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	61da      	str	r2, [r3, #28]
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIM_ConfigClockSource+0x1c>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e0b4      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x186>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d14:	d03e      	beq.n	8004d94 <HAL_TIM_ConfigClockSource+0xd4>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d1a:	f200 8087 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d22:	f000 8086 	beq.w	8004e32 <HAL_TIM_ConfigClockSource+0x172>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2a:	d87f      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b70      	cmp	r3, #112	@ 0x70
 8004d2e:	d01a      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0xa6>
 8004d30:	2b70      	cmp	r3, #112	@ 0x70
 8004d32:	d87b      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b60      	cmp	r3, #96	@ 0x60
 8004d36:	d050      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x11a>
 8004d38:	2b60      	cmp	r3, #96	@ 0x60
 8004d3a:	d877      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b50      	cmp	r3, #80	@ 0x50
 8004d3e:	d03c      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0xfa>
 8004d40:	2b50      	cmp	r3, #80	@ 0x50
 8004d42:	d873      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b40      	cmp	r3, #64	@ 0x40
 8004d46:	d058      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x13a>
 8004d48:	2b40      	cmp	r3, #64	@ 0x40
 8004d4a:	d86f      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b30      	cmp	r3, #48	@ 0x30
 8004d4e:	d064      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	2b30      	cmp	r3, #48	@ 0x30
 8004d52:	d86b      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d060      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d867      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05c      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d05a      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	e062      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d76:	f000 fb1f 	bl	80053b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	609a      	str	r2, [r3, #8]
      break;
 8004d92:	e04f      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	f000 fb08 	bl	80053b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004db6:	609a      	str	r2, [r3, #8]
      break;
 8004db8:	e03c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f000 fa7c 	bl	80052c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2150      	movs	r1, #80	@ 0x50
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fad5 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8004dd8:	e02c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de6:	461a      	mov	r2, r3
 8004de8:	f000 fa9b 	bl	8005322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2160      	movs	r1, #96	@ 0x60
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fac5 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8004df8:	e01c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 fa5c 	bl	80052c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2140      	movs	r1, #64	@ 0x40
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fab5 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8004e18:	e00c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f000 faac 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 8004e2a:	e003      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e30:	e000      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a37      	ldr	r2, [pc, #220]	@ (8004f90 <TIM_Base_SetConfig+0xf0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00f      	beq.n	8004ed8 <TIM_Base_SetConfig+0x38>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebe:	d00b      	beq.n	8004ed8 <TIM_Base_SetConfig+0x38>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a34      	ldr	r2, [pc, #208]	@ (8004f94 <TIM_Base_SetConfig+0xf4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <TIM_Base_SetConfig+0x38>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a33      	ldr	r2, [pc, #204]	@ (8004f98 <TIM_Base_SetConfig+0xf8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_Base_SetConfig+0x38>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a32      	ldr	r2, [pc, #200]	@ (8004f9c <TIM_Base_SetConfig+0xfc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d108      	bne.n	8004eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a28      	ldr	r2, [pc, #160]	@ (8004f90 <TIM_Base_SetConfig+0xf0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01b      	beq.n	8004f2a <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef8:	d017      	beq.n	8004f2a <TIM_Base_SetConfig+0x8a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a25      	ldr	r2, [pc, #148]	@ (8004f94 <TIM_Base_SetConfig+0xf4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_Base_SetConfig+0x8a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a24      	ldr	r2, [pc, #144]	@ (8004f98 <TIM_Base_SetConfig+0xf8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00f      	beq.n	8004f2a <TIM_Base_SetConfig+0x8a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a23      	ldr	r2, [pc, #140]	@ (8004f9c <TIM_Base_SetConfig+0xfc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0x8a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a22      	ldr	r2, [pc, #136]	@ (8004fa0 <TIM_Base_SetConfig+0x100>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0x8a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a21      	ldr	r2, [pc, #132]	@ (8004fa4 <TIM_Base_SetConfig+0x104>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0x8a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a20      	ldr	r2, [pc, #128]	@ (8004fa8 <TIM_Base_SetConfig+0x108>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f90 <TIM_Base_SetConfig+0xf0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d103      	bne.n	8004f6a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f043 0204 	orr.w	r2, r3, #4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f023 0201 	bic.w	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 0302 	bic.w	r3, r3, #2
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1c      	ldr	r2, [pc, #112]	@ (8005074 <TIM_OC1_SetConfig+0xc8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10c      	bne.n	8005022 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0308 	bic.w	r3, r3, #8
 800500e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a13      	ldr	r2, [pc, #76]	@ (8005074 <TIM_OC1_SetConfig+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d111      	bne.n	800504e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40010000 	.word	0x40010000

08005078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f023 0210 	bic.w	r2, r3, #16
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0320 	bic.w	r3, r3, #32
 80050c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <TIM_OC2_SetConfig+0xd4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10d      	bne.n	80050f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a15      	ldr	r2, [pc, #84]	@ (800514c <TIM_OC2_SetConfig+0xd4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d113      	bne.n	8005124 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800510a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000

08005150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <TIM_OC3_SetConfig+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10d      	bne.n	80051ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a14      	ldr	r2, [pc, #80]	@ (8005220 <TIM_OC3_SetConfig+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d113      	bne.n	80051fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40010000 	.word	0x40010000

08005224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800526e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	031b      	lsls	r3, r3, #12
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a10      	ldr	r2, [pc, #64]	@ (80052c0 <TIM_OC4_SetConfig+0x9c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d109      	bne.n	8005298 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800528a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000

080052c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0201 	bic.w	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 030a 	bic.w	r3, r3, #10
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	621a      	str	r2, [r3, #32]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f023 0210 	bic.w	r2, r3, #16
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800534c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	f043 0307 	orr.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	431a      	orrs	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e050      	b.n	80054b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1c      	ldr	r2, [pc, #112]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d018      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545c:	d013      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a18      	ldr	r2, [pc, #96]	@ (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a16      	ldr	r2, [pc, #88]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a15      	ldr	r2, [pc, #84]	@ (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10c      	bne.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800548c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	4313      	orrs	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40014000 	.word	0x40014000

080054d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e042      	b.n	8005594 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fc fd42 	bl	8001fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2224      	movs	r2, #36	@ 0x24
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800553e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fdd3 	bl	80060ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	@ 0x28
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d175      	bne.n	80056a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_Transmit+0x2c>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e06e      	b.n	80056aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2221      	movs	r2, #33	@ 0x21
 80055d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055da:	f7fc ff05 	bl	80023e8 <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f4:	d108      	bne.n	8005608 <HAL_UART_Transmit+0x6c>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	e003      	b.n	8005610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005610:	e02e      	b.n	8005670 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2200      	movs	r2, #0
 800561a:	2180      	movs	r1, #128	@ 0x80
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb37 	bl	8005c90 <UART_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e03a      	b.n	80056aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	3302      	adds	r3, #2
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e007      	b.n	8005662 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1cb      	bne.n	8005612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	2140      	movs	r1, #64	@ 0x40
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fb03 	bl	8005c90 <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e000      	b.n	80056aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
  }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	4613      	mov	r3, r2
 80056be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d112      	bne.n	80056f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_UART_Receive_IT+0x26>
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e00b      	b.n	80056f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	461a      	mov	r2, r3
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fb2a 	bl	8005d42 <UART_Start_Receive_IT>
 80056ee:	4603      	mov	r3, r0
 80056f0:	e000      	b.n	80056f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800573a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fc07 	bl	8005f6e <UART_Receive_IT>
      return;
 8005760:	e273      	b.n	8005c4a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80de 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
 800576c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80d1 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
 80057b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f043 0202 	orr.w	r2, r3, #2
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d011      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
 80057fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f043 0208 	orr.w	r2, r3, #8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 820a 	beq.w	8005c40 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb92 	bl	8005f6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_UART_IRQHandler+0x17a>
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d04f      	beq.n	8005916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa9d 	bl	8005db6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005886:	2b40      	cmp	r3, #64	@ 0x40
 8005888:	d141      	bne.n	800590e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1d9      	bne.n	800588a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d013      	beq.n	8005906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e2:	4a8a      	ldr	r2, [pc, #552]	@ (8005b0c <HAL_UART_IRQHandler+0x410>)
 80058e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd fa4e 	bl	8002d8c <HAL_DMA_Abort_IT>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	e00e      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9ac 	bl	8005c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	e00a      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f9a8 	bl	8005c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e006      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9a4 	bl	8005c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005922:	e18d      	b.n	8005c40 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	bf00      	nop
    return;
 8005926:	e18b      	b.n	8005c40 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 8167 	bne.w	8005c00 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8160 	beq.w	8005c00 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8159 	beq.w	8005c00 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	f040 80ce 	bne.w	8005b10 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80a9 	beq.w	8005adc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800598e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005992:	429a      	cmp	r2, r3
 8005994:	f080 80a2 	bcs.w	8005adc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800599e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059aa:	f000 8088 	beq.w	8005abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1d9      	bne.n	80059ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e1      	bne.n	80059fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e3      	bne.n	8005a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005aa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aa2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e3      	bne.n	8005a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fd f8f7 	bl	8002cac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8cf 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005ada:	e0b3      	b.n	8005c44 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ae0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	f040 80ad 	bne.w	8005c44 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005af4:	f040 80a6 	bne.w	8005c44 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f8b7 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
      return;
 8005b0a:	e09b      	b.n	8005c44 <HAL_UART_IRQHandler+0x548>
 8005b0c:	08005e7d 	.word	0x08005e7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 808e 	beq.w	8005c48 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8089 	beq.w	8005c48 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e3      	bne.n	8005b36 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3314      	adds	r3, #20
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b92:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e3      	bne.n	8005b6e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0310 	bic.w	r3, r3, #16
 8005bca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	330c      	adds	r3, #12
 8005bd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bd8:	61fa      	str	r2, [r7, #28]
 8005bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	617b      	str	r3, [r7, #20]
   return(result);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e3      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f83d 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bfe:	e023      	b.n	8005c48 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_UART_IRQHandler+0x524>
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f940 	bl	8005e9e <UART_Transmit_IT>
    return;
 8005c1e:	e014      	b.n	8005c4a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00e      	beq.n	8005c4a <HAL_UART_IRQHandler+0x54e>
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f980 	bl	8005f3e <UART_EndTransmit_IT>
    return;
 8005c3e:	e004      	b.n	8005c4a <HAL_UART_IRQHandler+0x54e>
    return;
 8005c40:	bf00      	nop
 8005c42:	e002      	b.n	8005c4a <HAL_UART_IRQHandler+0x54e>
      return;
 8005c44:	bf00      	nop
 8005c46:	e000      	b.n	8005c4a <HAL_UART_IRQHandler+0x54e>
      return;
 8005c48:	bf00      	nop
  }
}
 8005c4a:	37e8      	adds	r7, #232	@ 0xe8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca0:	e03b      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d037      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005caa:	f7fc fb9d 	bl	80023e8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	6a3a      	ldr	r2, [r7, #32]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e03a      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d023      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b80      	cmp	r3, #128	@ 0x80
 8005cd6:	d020      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b40      	cmp	r3, #64	@ 0x40
 8005cdc:	d01d      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d116      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f857 	bl	8005db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2208      	movs	r2, #8
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e00f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d0b4      	beq.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	88fa      	ldrh	r2, [r7, #6]
 8005d5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2222      	movs	r2, #34	@ 0x22
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0220 	orr.w	r2, r2, #32
 8005da6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b095      	sub	sp, #84	@ 0x54
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dde:	643a      	str	r2, [r7, #64]	@ 0x40
 8005de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d119      	bne.n	8005e62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f023 0310 	bic.w	r3, r3, #16
 8005e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e4e:	61ba      	str	r2, [r7, #24]
 8005e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e70:	bf00      	nop
 8005e72:	3754      	adds	r7, #84	@ 0x54
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff fee7 	bl	8005c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b21      	cmp	r3, #33	@ 0x21
 8005eb0:	d13e      	bne.n	8005f30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eba:	d114      	bne.n	8005ee6 <UART_Transmit_IT+0x48>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d110      	bne.n	8005ee6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ed8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	1c9a      	adds	r2, r3, #2
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	621a      	str	r2, [r3, #32]
 8005ee4:	e008      	b.n	8005ef8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6211      	str	r1, [r2, #32]
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10f      	bne.n	8005f2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fe76 	bl	8005c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08c      	sub	sp, #48	@ 0x30
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b22      	cmp	r3, #34	@ 0x22
 8005f88:	f040 80aa 	bne.w	80060e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f94:	d115      	bne.n	8005fc2 <UART_Receive_IT+0x54>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d111      	bne.n	8005fc2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fc0:	e024      	b.n	800600c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd0:	d007      	beq.n	8005fe2 <UART_Receive_IT+0x74>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <UART_Receive_IT+0x82>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e008      	b.n	8006002 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006000:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29b      	uxth	r3, r3
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4619      	mov	r1, r3
 800601a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800601c:	2b00      	cmp	r3, #0
 800601e:	d15d      	bne.n	80060dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0220 	bic.w	r2, r2, #32
 800602e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800603e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695a      	ldr	r2, [r3, #20]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0201 	bic.w	r2, r2, #1
 800604e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	2b01      	cmp	r3, #1
 8006064:	d135      	bne.n	80060d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	613b      	str	r3, [r7, #16]
   return(result);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 0310 	bic.w	r3, r3, #16
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800608c:	623a      	str	r2, [r7, #32]
 800608e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	69f9      	ldr	r1, [r7, #28]
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	61bb      	str	r3, [r7, #24]
   return(result);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b10      	cmp	r3, #16
 80060ac:	d10a      	bne.n	80060c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fdd4 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
 80060d0:	e002      	b.n	80060d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fb fdba 	bl	8001c4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e002      	b.n	80060e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3730      	adds	r7, #48	@ 0x30
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f0:	b0c0      	sub	sp, #256	@ 0x100
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	68d9      	ldr	r1, [r3, #12]
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	ea40 0301 	orr.w	r3, r0, r1
 8006114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	431a      	orrs	r2, r3
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	431a      	orrs	r2, r3
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006144:	f021 010c 	bic.w	r1, r1, #12
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006152:	430b      	orrs	r3, r1
 8006154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006166:	6999      	ldr	r1, [r3, #24]
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	ea40 0301 	orr.w	r3, r0, r1
 8006172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b8f      	ldr	r3, [pc, #572]	@ (80063b8 <UART_SetConfig+0x2cc>)
 800617c:	429a      	cmp	r2, r3
 800617e:	d005      	beq.n	800618c <UART_SetConfig+0xa0>
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b8d      	ldr	r3, [pc, #564]	@ (80063bc <UART_SetConfig+0x2d0>)
 8006188:	429a      	cmp	r2, r3
 800618a:	d104      	bne.n	8006196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7fe fb34 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 8006190:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006194:	e003      	b.n	800619e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006196:	f7fe fb1b 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 800619a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800619e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a8:	f040 810c 	bne.w	80063c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061be:	4622      	mov	r2, r4
 80061c0:	462b      	mov	r3, r5
 80061c2:	1891      	adds	r1, r2, r2
 80061c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061c6:	415b      	adcs	r3, r3
 80061c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061ce:	4621      	mov	r1, r4
 80061d0:	eb12 0801 	adds.w	r8, r2, r1
 80061d4:	4629      	mov	r1, r5
 80061d6:	eb43 0901 	adc.w	r9, r3, r1
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ee:	4690      	mov	r8, r2
 80061f0:	4699      	mov	r9, r3
 80061f2:	4623      	mov	r3, r4
 80061f4:	eb18 0303 	adds.w	r3, r8, r3
 80061f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061fc:	462b      	mov	r3, r5
 80061fe:	eb49 0303 	adc.w	r3, r9, r3
 8006202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006212:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800621a:	460b      	mov	r3, r1
 800621c:	18db      	adds	r3, r3, r3
 800621e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006220:	4613      	mov	r3, r2
 8006222:	eb42 0303 	adc.w	r3, r2, r3
 8006226:	657b      	str	r3, [r7, #84]	@ 0x54
 8006228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800622c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006230:	f7fa fd12 	bl	8000c58 <__aeabi_uldivmod>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4b61      	ldr	r3, [pc, #388]	@ (80063c0 <UART_SetConfig+0x2d4>)
 800623a:	fba3 2302 	umull	r2, r3, r3, r2
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	011c      	lsls	r4, r3, #4
 8006242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006246:	2200      	movs	r2, #0
 8006248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800624c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006254:	4642      	mov	r2, r8
 8006256:	464b      	mov	r3, r9
 8006258:	1891      	adds	r1, r2, r2
 800625a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800625c:	415b      	adcs	r3, r3
 800625e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006264:	4641      	mov	r1, r8
 8006266:	eb12 0a01 	adds.w	sl, r2, r1
 800626a:	4649      	mov	r1, r9
 800626c:	eb43 0b01 	adc.w	fp, r3, r1
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800627c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006284:	4692      	mov	sl, r2
 8006286:	469b      	mov	fp, r3
 8006288:	4643      	mov	r3, r8
 800628a:	eb1a 0303 	adds.w	r3, sl, r3
 800628e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006292:	464b      	mov	r3, r9
 8006294:	eb4b 0303 	adc.w	r3, fp, r3
 8006298:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062b0:	460b      	mov	r3, r1
 80062b2:	18db      	adds	r3, r3, r3
 80062b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062b6:	4613      	mov	r3, r2
 80062b8:	eb42 0303 	adc.w	r3, r2, r3
 80062bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062c6:	f7fa fcc7 	bl	8000c58 <__aeabi_uldivmod>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	4b3b      	ldr	r3, [pc, #236]	@ (80063c0 <UART_SetConfig+0x2d4>)
 80062d2:	fba3 2301 	umull	r2, r3, r3, r1
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	2264      	movs	r2, #100	@ 0x64
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	1acb      	subs	r3, r1, r3
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062e6:	4b36      	ldr	r3, [pc, #216]	@ (80063c0 <UART_SetConfig+0x2d4>)
 80062e8:	fba3 2302 	umull	r2, r3, r3, r2
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062f4:	441c      	add	r4, r3
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006300:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006310:	415b      	adcs	r3, r3
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006318:	4641      	mov	r1, r8
 800631a:	1851      	adds	r1, r2, r1
 800631c:	6339      	str	r1, [r7, #48]	@ 0x30
 800631e:	4649      	mov	r1, r9
 8006320:	414b      	adcs	r3, r1
 8006322:	637b      	str	r3, [r7, #52]	@ 0x34
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006330:	4659      	mov	r1, fp
 8006332:	00cb      	lsls	r3, r1, #3
 8006334:	4651      	mov	r1, sl
 8006336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800633a:	4651      	mov	r1, sl
 800633c:	00ca      	lsls	r2, r1, #3
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	4603      	mov	r3, r0
 8006344:	4642      	mov	r2, r8
 8006346:	189b      	adds	r3, r3, r2
 8006348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800634c:	464b      	mov	r3, r9
 800634e:	460a      	mov	r2, r1
 8006350:	eb42 0303 	adc.w	r3, r2, r3
 8006354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006364:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800636c:	460b      	mov	r3, r1
 800636e:	18db      	adds	r3, r3, r3
 8006370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006372:	4613      	mov	r3, r2
 8006374:	eb42 0303 	adc.w	r3, r2, r3
 8006378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800637a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800637e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006382:	f7fa fc69 	bl	8000c58 <__aeabi_uldivmod>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4b0d      	ldr	r3, [pc, #52]	@ (80063c0 <UART_SetConfig+0x2d4>)
 800638c:	fba3 1302 	umull	r1, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	2164      	movs	r1, #100	@ 0x64
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	3332      	adds	r3, #50	@ 0x32
 800639e:	4a08      	ldr	r2, [pc, #32]	@ (80063c0 <UART_SetConfig+0x2d4>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	f003 0207 	and.w	r2, r3, #7
 80063aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4422      	add	r2, r4
 80063b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063b4:	e106      	b.n	80065c4 <UART_SetConfig+0x4d8>
 80063b6:	bf00      	nop
 80063b8:	40011000 	.word	0x40011000
 80063bc:	40011400 	.word	0x40011400
 80063c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063d6:	4642      	mov	r2, r8
 80063d8:	464b      	mov	r3, r9
 80063da:	1891      	adds	r1, r2, r2
 80063dc:	6239      	str	r1, [r7, #32]
 80063de:	415b      	adcs	r3, r3
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063e6:	4641      	mov	r1, r8
 80063e8:	1854      	adds	r4, r2, r1
 80063ea:	4649      	mov	r1, r9
 80063ec:	eb43 0501 	adc.w	r5, r3, r1
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	00eb      	lsls	r3, r5, #3
 80063fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063fe:	00e2      	lsls	r2, r4, #3
 8006400:	4614      	mov	r4, r2
 8006402:	461d      	mov	r5, r3
 8006404:	4643      	mov	r3, r8
 8006406:	18e3      	adds	r3, r4, r3
 8006408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800640c:	464b      	mov	r3, r9
 800640e:	eb45 0303 	adc.w	r3, r5, r3
 8006412:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006422:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006432:	4629      	mov	r1, r5
 8006434:	008b      	lsls	r3, r1, #2
 8006436:	4621      	mov	r1, r4
 8006438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800643c:	4621      	mov	r1, r4
 800643e:	008a      	lsls	r2, r1, #2
 8006440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006444:	f7fa fc08 	bl	8000c58 <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4b60      	ldr	r3, [pc, #384]	@ (80065d0 <UART_SetConfig+0x4e4>)
 800644e:	fba3 2302 	umull	r2, r3, r3, r2
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	011c      	lsls	r4, r3, #4
 8006456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800645a:	2200      	movs	r2, #0
 800645c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006460:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	1891      	adds	r1, r2, r2
 800646e:	61b9      	str	r1, [r7, #24]
 8006470:	415b      	adcs	r3, r3
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006478:	4641      	mov	r1, r8
 800647a:	1851      	adds	r1, r2, r1
 800647c:	6139      	str	r1, [r7, #16]
 800647e:	4649      	mov	r1, r9
 8006480:	414b      	adcs	r3, r1
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006490:	4659      	mov	r1, fp
 8006492:	00cb      	lsls	r3, r1, #3
 8006494:	4651      	mov	r1, sl
 8006496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649a:	4651      	mov	r1, sl
 800649c:	00ca      	lsls	r2, r1, #3
 800649e:	4610      	mov	r0, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	4642      	mov	r2, r8
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064ac:	464b      	mov	r3, r9
 80064ae:	460a      	mov	r2, r1
 80064b0:	eb42 0303 	adc.w	r3, r2, r3
 80064b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064d0:	4649      	mov	r1, r9
 80064d2:	008b      	lsls	r3, r1, #2
 80064d4:	4641      	mov	r1, r8
 80064d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064da:	4641      	mov	r1, r8
 80064dc:	008a      	lsls	r2, r1, #2
 80064de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064e2:	f7fa fbb9 	bl	8000c58 <__aeabi_uldivmod>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	4b38      	ldr	r3, [pc, #224]	@ (80065d0 <UART_SetConfig+0x4e4>)
 80064ee:	fba3 2301 	umull	r2, r3, r3, r1
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	2264      	movs	r2, #100	@ 0x64
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	1acb      	subs	r3, r1, r3
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	3332      	adds	r3, #50	@ 0x32
 8006500:	4a33      	ldr	r2, [pc, #204]	@ (80065d0 <UART_SetConfig+0x4e4>)
 8006502:	fba2 2303 	umull	r2, r3, r2, r3
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800650c:	441c      	add	r4, r3
 800650e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006512:	2200      	movs	r2, #0
 8006514:	673b      	str	r3, [r7, #112]	@ 0x70
 8006516:	677a      	str	r2, [r7, #116]	@ 0x74
 8006518:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	1891      	adds	r1, r2, r2
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	415b      	adcs	r3, r3
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800652c:	4641      	mov	r1, r8
 800652e:	1851      	adds	r1, r2, r1
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	4649      	mov	r1, r9
 8006534:	414b      	adcs	r3, r1
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006544:	4659      	mov	r1, fp
 8006546:	00cb      	lsls	r3, r1, #3
 8006548:	4651      	mov	r1, sl
 800654a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800654e:	4651      	mov	r1, sl
 8006550:	00ca      	lsls	r2, r1, #3
 8006552:	4610      	mov	r0, r2
 8006554:	4619      	mov	r1, r3
 8006556:	4603      	mov	r3, r0
 8006558:	4642      	mov	r2, r8
 800655a:	189b      	adds	r3, r3, r2
 800655c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800655e:	464b      	mov	r3, r9
 8006560:	460a      	mov	r2, r1
 8006562:	eb42 0303 	adc.w	r3, r2, r3
 8006566:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	663b      	str	r3, [r7, #96]	@ 0x60
 8006572:	667a      	str	r2, [r7, #100]	@ 0x64
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006580:	4649      	mov	r1, r9
 8006582:	008b      	lsls	r3, r1, #2
 8006584:	4641      	mov	r1, r8
 8006586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658a:	4641      	mov	r1, r8
 800658c:	008a      	lsls	r2, r1, #2
 800658e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006592:	f7fa fb61 	bl	8000c58 <__aeabi_uldivmod>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <UART_SetConfig+0x4e4>)
 800659c:	fba3 1302 	umull	r1, r3, r3, r2
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	2164      	movs	r1, #100	@ 0x64
 80065a4:	fb01 f303 	mul.w	r3, r1, r3
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	3332      	adds	r3, #50	@ 0x32
 80065ae:	4a08      	ldr	r2, [pc, #32]	@ (80065d0 <UART_SetConfig+0x4e4>)
 80065b0:	fba2 2303 	umull	r2, r3, r2, r3
 80065b4:	095b      	lsrs	r3, r3, #5
 80065b6:	f003 020f 	and.w	r2, r3, #15
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4422      	add	r2, r4
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065ca:	46bd      	mov	sp, r7
 80065cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d0:	51eb851f 	.word	0x51eb851f

080065d4 <__cvt>:
 80065d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	ec57 6b10 	vmov	r6, r7, d0
 80065dc:	2f00      	cmp	r7, #0
 80065de:	460c      	mov	r4, r1
 80065e0:	4619      	mov	r1, r3
 80065e2:	463b      	mov	r3, r7
 80065e4:	bfbb      	ittet	lt
 80065e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065ea:	461f      	movlt	r7, r3
 80065ec:	2300      	movge	r3, #0
 80065ee:	232d      	movlt	r3, #45	@ 0x2d
 80065f0:	700b      	strb	r3, [r1, #0]
 80065f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065f8:	4691      	mov	r9, r2
 80065fa:	f023 0820 	bic.w	r8, r3, #32
 80065fe:	bfbc      	itt	lt
 8006600:	4632      	movlt	r2, r6
 8006602:	4616      	movlt	r6, r2
 8006604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006608:	d005      	beq.n	8006616 <__cvt+0x42>
 800660a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800660e:	d100      	bne.n	8006612 <__cvt+0x3e>
 8006610:	3401      	adds	r4, #1
 8006612:	2102      	movs	r1, #2
 8006614:	e000      	b.n	8006618 <__cvt+0x44>
 8006616:	2103      	movs	r1, #3
 8006618:	ab03      	add	r3, sp, #12
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	ab02      	add	r3, sp, #8
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	ec47 6b10 	vmov	d0, r6, r7
 8006624:	4653      	mov	r3, sl
 8006626:	4622      	mov	r2, r4
 8006628:	f000 fe72 	bl	8007310 <_dtoa_r>
 800662c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006630:	4605      	mov	r5, r0
 8006632:	d119      	bne.n	8006668 <__cvt+0x94>
 8006634:	f019 0f01 	tst.w	r9, #1
 8006638:	d00e      	beq.n	8006658 <__cvt+0x84>
 800663a:	eb00 0904 	add.w	r9, r0, r4
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	4630      	mov	r0, r6
 8006644:	4639      	mov	r1, r7
 8006646:	f7fa fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800664a:	b108      	cbz	r0, 8006650 <__cvt+0x7c>
 800664c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006650:	2230      	movs	r2, #48	@ 0x30
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	454b      	cmp	r3, r9
 8006656:	d31e      	bcc.n	8006696 <__cvt+0xc2>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800665c:	1b5b      	subs	r3, r3, r5
 800665e:	4628      	mov	r0, r5
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	b004      	add	sp, #16
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800666c:	eb00 0904 	add.w	r9, r0, r4
 8006670:	d1e5      	bne.n	800663e <__cvt+0x6a>
 8006672:	7803      	ldrb	r3, [r0, #0]
 8006674:	2b30      	cmp	r3, #48	@ 0x30
 8006676:	d10a      	bne.n	800668e <__cvt+0xba>
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	4630      	mov	r0, r6
 800667e:	4639      	mov	r1, r7
 8006680:	f7fa fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006684:	b918      	cbnz	r0, 800668e <__cvt+0xba>
 8006686:	f1c4 0401 	rsb	r4, r4, #1
 800668a:	f8ca 4000 	str.w	r4, [sl]
 800668e:	f8da 3000 	ldr.w	r3, [sl]
 8006692:	4499      	add	r9, r3
 8006694:	e7d3      	b.n	800663e <__cvt+0x6a>
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	9103      	str	r1, [sp, #12]
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e7d9      	b.n	8006652 <__cvt+0x7e>

0800669e <__exponent>:
 800669e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066a0:	2900      	cmp	r1, #0
 80066a2:	bfba      	itte	lt
 80066a4:	4249      	neglt	r1, r1
 80066a6:	232d      	movlt	r3, #45	@ 0x2d
 80066a8:	232b      	movge	r3, #43	@ 0x2b
 80066aa:	2909      	cmp	r1, #9
 80066ac:	7002      	strb	r2, [r0, #0]
 80066ae:	7043      	strb	r3, [r0, #1]
 80066b0:	dd29      	ble.n	8006706 <__exponent+0x68>
 80066b2:	f10d 0307 	add.w	r3, sp, #7
 80066b6:	461d      	mov	r5, r3
 80066b8:	270a      	movs	r7, #10
 80066ba:	461a      	mov	r2, r3
 80066bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80066c0:	fb07 1416 	mls	r4, r7, r6, r1
 80066c4:	3430      	adds	r4, #48	@ 0x30
 80066c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066ca:	460c      	mov	r4, r1
 80066cc:	2c63      	cmp	r4, #99	@ 0x63
 80066ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80066d2:	4631      	mov	r1, r6
 80066d4:	dcf1      	bgt.n	80066ba <__exponent+0x1c>
 80066d6:	3130      	adds	r1, #48	@ 0x30
 80066d8:	1e94      	subs	r4, r2, #2
 80066da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066de:	1c41      	adds	r1, r0, #1
 80066e0:	4623      	mov	r3, r4
 80066e2:	42ab      	cmp	r3, r5
 80066e4:	d30a      	bcc.n	80066fc <__exponent+0x5e>
 80066e6:	f10d 0309 	add.w	r3, sp, #9
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	42ac      	cmp	r4, r5
 80066ee:	bf88      	it	hi
 80066f0:	2300      	movhi	r3, #0
 80066f2:	3302      	adds	r3, #2
 80066f4:	4403      	add	r3, r0
 80066f6:	1a18      	subs	r0, r3, r0
 80066f8:	b003      	add	sp, #12
 80066fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006700:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006704:	e7ed      	b.n	80066e2 <__exponent+0x44>
 8006706:	2330      	movs	r3, #48	@ 0x30
 8006708:	3130      	adds	r1, #48	@ 0x30
 800670a:	7083      	strb	r3, [r0, #2]
 800670c:	70c1      	strb	r1, [r0, #3]
 800670e:	1d03      	adds	r3, r0, #4
 8006710:	e7f1      	b.n	80066f6 <__exponent+0x58>
	...

08006714 <_printf_float>:
 8006714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	b08d      	sub	sp, #52	@ 0x34
 800671a:	460c      	mov	r4, r1
 800671c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006720:	4616      	mov	r6, r2
 8006722:	461f      	mov	r7, r3
 8006724:	4605      	mov	r5, r0
 8006726:	f000 fcf1 	bl	800710c <_localeconv_r>
 800672a:	6803      	ldr	r3, [r0, #0]
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	4618      	mov	r0, r3
 8006730:	f7f9 fda6 	bl	8000280 <strlen>
 8006734:	2300      	movs	r3, #0
 8006736:	930a      	str	r3, [sp, #40]	@ 0x28
 8006738:	f8d8 3000 	ldr.w	r3, [r8]
 800673c:	9005      	str	r0, [sp, #20]
 800673e:	3307      	adds	r3, #7
 8006740:	f023 0307 	bic.w	r3, r3, #7
 8006744:	f103 0208 	add.w	r2, r3, #8
 8006748:	f894 a018 	ldrb.w	sl, [r4, #24]
 800674c:	f8d4 b000 	ldr.w	fp, [r4]
 8006750:	f8c8 2000 	str.w	r2, [r8]
 8006754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006758:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800675c:	9307      	str	r3, [sp, #28]
 800675e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006762:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800676a:	4b9c      	ldr	r3, [pc, #624]	@ (80069dc <_printf_float+0x2c8>)
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	f7fa f9e4 	bl	8000b3c <__aeabi_dcmpun>
 8006774:	bb70      	cbnz	r0, 80067d4 <_printf_float+0xc0>
 8006776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677a:	4b98      	ldr	r3, [pc, #608]	@ (80069dc <_printf_float+0x2c8>)
 800677c:	f04f 32ff 	mov.w	r2, #4294967295
 8006780:	f7fa f9be 	bl	8000b00 <__aeabi_dcmple>
 8006784:	bb30      	cbnz	r0, 80067d4 <_printf_float+0xc0>
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	4640      	mov	r0, r8
 800678c:	4649      	mov	r1, r9
 800678e:	f7fa f9ad 	bl	8000aec <__aeabi_dcmplt>
 8006792:	b110      	cbz	r0, 800679a <_printf_float+0x86>
 8006794:	232d      	movs	r3, #45	@ 0x2d
 8006796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800679a:	4a91      	ldr	r2, [pc, #580]	@ (80069e0 <_printf_float+0x2cc>)
 800679c:	4b91      	ldr	r3, [pc, #580]	@ (80069e4 <_printf_float+0x2d0>)
 800679e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067a2:	bf8c      	ite	hi
 80067a4:	4690      	movhi	r8, r2
 80067a6:	4698      	movls	r8, r3
 80067a8:	2303      	movs	r3, #3
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	f02b 0304 	bic.w	r3, fp, #4
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	f04f 0900 	mov.w	r9, #0
 80067b6:	9700      	str	r7, [sp, #0]
 80067b8:	4633      	mov	r3, r6
 80067ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067bc:	4621      	mov	r1, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 f9d2 	bl	8006b68 <_printf_common>
 80067c4:	3001      	adds	r0, #1
 80067c6:	f040 808d 	bne.w	80068e4 <_printf_float+0x1d0>
 80067ca:	f04f 30ff 	mov.w	r0, #4294967295
 80067ce:	b00d      	add	sp, #52	@ 0x34
 80067d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7fa f9ae 	bl	8000b3c <__aeabi_dcmpun>
 80067e0:	b140      	cbz	r0, 80067f4 <_printf_float+0xe0>
 80067e2:	464b      	mov	r3, r9
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bfbc      	itt	lt
 80067e8:	232d      	movlt	r3, #45	@ 0x2d
 80067ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067ee:	4a7e      	ldr	r2, [pc, #504]	@ (80069e8 <_printf_float+0x2d4>)
 80067f0:	4b7e      	ldr	r3, [pc, #504]	@ (80069ec <_printf_float+0x2d8>)
 80067f2:	e7d4      	b.n	800679e <_printf_float+0x8a>
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067fa:	9206      	str	r2, [sp, #24]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	d13b      	bne.n	8006878 <_printf_float+0x164>
 8006800:	2306      	movs	r3, #6
 8006802:	6063      	str	r3, [r4, #4]
 8006804:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006808:	2300      	movs	r3, #0
 800680a:	6022      	str	r2, [r4, #0]
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006810:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006814:	ab09      	add	r3, sp, #36	@ 0x24
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	6861      	ldr	r1, [r4, #4]
 800681a:	ec49 8b10 	vmov	d0, r8, r9
 800681e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006822:	4628      	mov	r0, r5
 8006824:	f7ff fed6 	bl	80065d4 <__cvt>
 8006828:	9b06      	ldr	r3, [sp, #24]
 800682a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800682c:	2b47      	cmp	r3, #71	@ 0x47
 800682e:	4680      	mov	r8, r0
 8006830:	d129      	bne.n	8006886 <_printf_float+0x172>
 8006832:	1cc8      	adds	r0, r1, #3
 8006834:	db02      	blt.n	800683c <_printf_float+0x128>
 8006836:	6863      	ldr	r3, [r4, #4]
 8006838:	4299      	cmp	r1, r3
 800683a:	dd41      	ble.n	80068c0 <_printf_float+0x1ac>
 800683c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006840:	fa5f fa8a 	uxtb.w	sl, sl
 8006844:	3901      	subs	r1, #1
 8006846:	4652      	mov	r2, sl
 8006848:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800684c:	9109      	str	r1, [sp, #36]	@ 0x24
 800684e:	f7ff ff26 	bl	800669e <__exponent>
 8006852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006854:	1813      	adds	r3, r2, r0
 8006856:	2a01      	cmp	r2, #1
 8006858:	4681      	mov	r9, r0
 800685a:	6123      	str	r3, [r4, #16]
 800685c:	dc02      	bgt.n	8006864 <_printf_float+0x150>
 800685e:	6822      	ldr	r2, [r4, #0]
 8006860:	07d2      	lsls	r2, r2, #31
 8006862:	d501      	bpl.n	8006868 <_printf_float+0x154>
 8006864:	3301      	adds	r3, #1
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0a2      	beq.n	80067b6 <_printf_float+0xa2>
 8006870:	232d      	movs	r3, #45	@ 0x2d
 8006872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006876:	e79e      	b.n	80067b6 <_printf_float+0xa2>
 8006878:	9a06      	ldr	r2, [sp, #24]
 800687a:	2a47      	cmp	r2, #71	@ 0x47
 800687c:	d1c2      	bne.n	8006804 <_printf_float+0xf0>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1c0      	bne.n	8006804 <_printf_float+0xf0>
 8006882:	2301      	movs	r3, #1
 8006884:	e7bd      	b.n	8006802 <_printf_float+0xee>
 8006886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800688a:	d9db      	bls.n	8006844 <_printf_float+0x130>
 800688c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006890:	d118      	bne.n	80068c4 <_printf_float+0x1b0>
 8006892:	2900      	cmp	r1, #0
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	dd0b      	ble.n	80068b0 <_printf_float+0x19c>
 8006898:	6121      	str	r1, [r4, #16]
 800689a:	b913      	cbnz	r3, 80068a2 <_printf_float+0x18e>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	07d0      	lsls	r0, r2, #31
 80068a0:	d502      	bpl.n	80068a8 <_printf_float+0x194>
 80068a2:	3301      	adds	r3, #1
 80068a4:	440b      	add	r3, r1
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068aa:	f04f 0900 	mov.w	r9, #0
 80068ae:	e7db      	b.n	8006868 <_printf_float+0x154>
 80068b0:	b913      	cbnz	r3, 80068b8 <_printf_float+0x1a4>
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	07d2      	lsls	r2, r2, #31
 80068b6:	d501      	bpl.n	80068bc <_printf_float+0x1a8>
 80068b8:	3302      	adds	r3, #2
 80068ba:	e7f4      	b.n	80068a6 <_printf_float+0x192>
 80068bc:	2301      	movs	r3, #1
 80068be:	e7f2      	b.n	80068a6 <_printf_float+0x192>
 80068c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068c6:	4299      	cmp	r1, r3
 80068c8:	db05      	blt.n	80068d6 <_printf_float+0x1c2>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	6121      	str	r1, [r4, #16]
 80068ce:	07d8      	lsls	r0, r3, #31
 80068d0:	d5ea      	bpl.n	80068a8 <_printf_float+0x194>
 80068d2:	1c4b      	adds	r3, r1, #1
 80068d4:	e7e7      	b.n	80068a6 <_printf_float+0x192>
 80068d6:	2900      	cmp	r1, #0
 80068d8:	bfd4      	ite	le
 80068da:	f1c1 0202 	rsble	r2, r1, #2
 80068de:	2201      	movgt	r2, #1
 80068e0:	4413      	add	r3, r2
 80068e2:	e7e0      	b.n	80068a6 <_printf_float+0x192>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	055a      	lsls	r2, r3, #21
 80068e8:	d407      	bmi.n	80068fa <_printf_float+0x1e6>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	4642      	mov	r2, r8
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	d12b      	bne.n	8006950 <_printf_float+0x23c>
 80068f8:	e767      	b.n	80067ca <_printf_float+0xb6>
 80068fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068fe:	f240 80dd 	bls.w	8006abc <_printf_float+0x3a8>
 8006902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006906:	2200      	movs	r2, #0
 8006908:	2300      	movs	r3, #0
 800690a:	f7fa f8e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800690e:	2800      	cmp	r0, #0
 8006910:	d033      	beq.n	800697a <_printf_float+0x266>
 8006912:	4a37      	ldr	r2, [pc, #220]	@ (80069f0 <_printf_float+0x2dc>)
 8006914:	2301      	movs	r3, #1
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f af54 	beq.w	80067ca <_printf_float+0xb6>
 8006922:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006926:	4543      	cmp	r3, r8
 8006928:	db02      	blt.n	8006930 <_printf_float+0x21c>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	07d8      	lsls	r0, r3, #31
 800692e:	d50f      	bpl.n	8006950 <_printf_float+0x23c>
 8006930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af45 	beq.w	80067ca <_printf_float+0xb6>
 8006940:	f04f 0900 	mov.w	r9, #0
 8006944:	f108 38ff 	add.w	r8, r8, #4294967295
 8006948:	f104 0a1a 	add.w	sl, r4, #26
 800694c:	45c8      	cmp	r8, r9
 800694e:	dc09      	bgt.n	8006964 <_printf_float+0x250>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	079b      	lsls	r3, r3, #30
 8006954:	f100 8103 	bmi.w	8006b5e <_printf_float+0x44a>
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800695c:	4298      	cmp	r0, r3
 800695e:	bfb8      	it	lt
 8006960:	4618      	movlt	r0, r3
 8006962:	e734      	b.n	80067ce <_printf_float+0xba>
 8006964:	2301      	movs	r3, #1
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af2b 	beq.w	80067ca <_printf_float+0xb6>
 8006974:	f109 0901 	add.w	r9, r9, #1
 8006978:	e7e8      	b.n	800694c <_printf_float+0x238>
 800697a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	dc39      	bgt.n	80069f4 <_printf_float+0x2e0>
 8006980:	4a1b      	ldr	r2, [pc, #108]	@ (80069f0 <_printf_float+0x2dc>)
 8006982:	2301      	movs	r3, #1
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af1d 	beq.w	80067ca <_printf_float+0xb6>
 8006990:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006994:	ea59 0303 	orrs.w	r3, r9, r3
 8006998:	d102      	bne.n	80069a0 <_printf_float+0x28c>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	07d9      	lsls	r1, r3, #31
 800699e:	d5d7      	bpl.n	8006950 <_printf_float+0x23c>
 80069a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f af0d 	beq.w	80067ca <_printf_float+0xb6>
 80069b0:	f04f 0a00 	mov.w	sl, #0
 80069b4:	f104 0b1a 	add.w	fp, r4, #26
 80069b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ba:	425b      	negs	r3, r3
 80069bc:	4553      	cmp	r3, sl
 80069be:	dc01      	bgt.n	80069c4 <_printf_float+0x2b0>
 80069c0:	464b      	mov	r3, r9
 80069c2:	e793      	b.n	80068ec <_printf_float+0x1d8>
 80069c4:	2301      	movs	r3, #1
 80069c6:	465a      	mov	r2, fp
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f aefb 	beq.w	80067ca <_printf_float+0xb6>
 80069d4:	f10a 0a01 	add.w	sl, sl, #1
 80069d8:	e7ee      	b.n	80069b8 <_printf_float+0x2a4>
 80069da:	bf00      	nop
 80069dc:	7fefffff 	.word	0x7fefffff
 80069e0:	08009424 	.word	0x08009424
 80069e4:	08009420 	.word	0x08009420
 80069e8:	0800942c 	.word	0x0800942c
 80069ec:	08009428 	.word	0x08009428
 80069f0:	08009430 	.word	0x08009430
 80069f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069fa:	4553      	cmp	r3, sl
 80069fc:	bfa8      	it	ge
 80069fe:	4653      	movge	r3, sl
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	4699      	mov	r9, r3
 8006a04:	dc36      	bgt.n	8006a74 <_printf_float+0x360>
 8006a06:	f04f 0b00 	mov.w	fp, #0
 8006a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0e:	f104 021a 	add.w	r2, r4, #26
 8006a12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a14:	9306      	str	r3, [sp, #24]
 8006a16:	eba3 0309 	sub.w	r3, r3, r9
 8006a1a:	455b      	cmp	r3, fp
 8006a1c:	dc31      	bgt.n	8006a82 <_printf_float+0x36e>
 8006a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a20:	459a      	cmp	sl, r3
 8006a22:	dc3a      	bgt.n	8006a9a <_printf_float+0x386>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	07da      	lsls	r2, r3, #31
 8006a28:	d437      	bmi.n	8006a9a <_printf_float+0x386>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2c:	ebaa 0903 	sub.w	r9, sl, r3
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	ebaa 0303 	sub.w	r3, sl, r3
 8006a36:	4599      	cmp	r9, r3
 8006a38:	bfa8      	it	ge
 8006a3a:	4699      	movge	r9, r3
 8006a3c:	f1b9 0f00 	cmp.w	r9, #0
 8006a40:	dc33      	bgt.n	8006aaa <_printf_float+0x396>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a4a:	f104 0b1a 	add.w	fp, r4, #26
 8006a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a50:	ebaa 0303 	sub.w	r3, sl, r3
 8006a54:	eba3 0309 	sub.w	r3, r3, r9
 8006a58:	4543      	cmp	r3, r8
 8006a5a:	f77f af79 	ble.w	8006950 <_printf_float+0x23c>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	465a      	mov	r2, fp
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f aeae 	beq.w	80067ca <_printf_float+0xb6>
 8006a6e:	f108 0801 	add.w	r8, r8, #1
 8006a72:	e7ec      	b.n	8006a4e <_printf_float+0x33a>
 8006a74:	4642      	mov	r2, r8
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d1c2      	bne.n	8006a06 <_printf_float+0x2f2>
 8006a80:	e6a3      	b.n	80067ca <_printf_float+0xb6>
 8006a82:	2301      	movs	r3, #1
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	9206      	str	r2, [sp, #24]
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	f43f ae9c 	beq.w	80067ca <_printf_float+0xb6>
 8006a92:	9a06      	ldr	r2, [sp, #24]
 8006a94:	f10b 0b01 	add.w	fp, fp, #1
 8006a98:	e7bb      	b.n	8006a12 <_printf_float+0x2fe>
 8006a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d1c0      	bne.n	8006a2a <_printf_float+0x316>
 8006aa8:	e68f      	b.n	80067ca <_printf_float+0xb6>
 8006aaa:	9a06      	ldr	r2, [sp, #24]
 8006aac:	464b      	mov	r3, r9
 8006aae:	4442      	add	r2, r8
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d1c3      	bne.n	8006a42 <_printf_float+0x32e>
 8006aba:	e686      	b.n	80067ca <_printf_float+0xb6>
 8006abc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ac0:	f1ba 0f01 	cmp.w	sl, #1
 8006ac4:	dc01      	bgt.n	8006aca <_printf_float+0x3b6>
 8006ac6:	07db      	lsls	r3, r3, #31
 8006ac8:	d536      	bpl.n	8006b38 <_printf_float+0x424>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4642      	mov	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	f43f ae78 	beq.w	80067ca <_printf_float+0xb6>
 8006ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f ae70 	beq.w	80067ca <_printf_float+0xb6>
 8006aea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aee:	2200      	movs	r2, #0
 8006af0:	2300      	movs	r3, #0
 8006af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006af6:	f7f9 ffef 	bl	8000ad8 <__aeabi_dcmpeq>
 8006afa:	b9c0      	cbnz	r0, 8006b2e <_printf_float+0x41a>
 8006afc:	4653      	mov	r3, sl
 8006afe:	f108 0201 	add.w	r2, r8, #1
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d10c      	bne.n	8006b26 <_printf_float+0x412>
 8006b0c:	e65d      	b.n	80067ca <_printf_float+0xb6>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	465a      	mov	r2, fp
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae56 	beq.w	80067ca <_printf_float+0xb6>
 8006b1e:	f108 0801 	add.w	r8, r8, #1
 8006b22:	45d0      	cmp	r8, sl
 8006b24:	dbf3      	blt.n	8006b0e <_printf_float+0x3fa>
 8006b26:	464b      	mov	r3, r9
 8006b28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b2c:	e6df      	b.n	80068ee <_printf_float+0x1da>
 8006b2e:	f04f 0800 	mov.w	r8, #0
 8006b32:	f104 0b1a 	add.w	fp, r4, #26
 8006b36:	e7f4      	b.n	8006b22 <_printf_float+0x40e>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	e7e1      	b.n	8006b02 <_printf_float+0x3ee>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	464a      	mov	r2, r9
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f43f ae3e 	beq.w	80067ca <_printf_float+0xb6>
 8006b4e:	f108 0801 	add.w	r8, r8, #1
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b56:	1a5b      	subs	r3, r3, r1
 8006b58:	4543      	cmp	r3, r8
 8006b5a:	dcf0      	bgt.n	8006b3e <_printf_float+0x42a>
 8006b5c:	e6fc      	b.n	8006958 <_printf_float+0x244>
 8006b5e:	f04f 0800 	mov.w	r8, #0
 8006b62:	f104 0919 	add.w	r9, r4, #25
 8006b66:	e7f4      	b.n	8006b52 <_printf_float+0x43e>

08006b68 <_printf_common>:
 8006b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	4616      	mov	r6, r2
 8006b6e:	4698      	mov	r8, r3
 8006b70:	688a      	ldr	r2, [r1, #8]
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	bfb8      	it	lt
 8006b7c:	4613      	movlt	r3, r2
 8006b7e:	6033      	str	r3, [r6, #0]
 8006b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b84:	4607      	mov	r7, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	b10a      	cbz	r2, 8006b8e <_printf_common+0x26>
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	0699      	lsls	r1, r3, #26
 8006b92:	bf42      	ittt	mi
 8006b94:	6833      	ldrmi	r3, [r6, #0]
 8006b96:	3302      	addmi	r3, #2
 8006b98:	6033      	strmi	r3, [r6, #0]
 8006b9a:	6825      	ldr	r5, [r4, #0]
 8006b9c:	f015 0506 	ands.w	r5, r5, #6
 8006ba0:	d106      	bne.n	8006bb0 <_printf_common+0x48>
 8006ba2:	f104 0a19 	add.w	sl, r4, #25
 8006ba6:	68e3      	ldr	r3, [r4, #12]
 8006ba8:	6832      	ldr	r2, [r6, #0]
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	42ab      	cmp	r3, r5
 8006bae:	dc26      	bgt.n	8006bfe <_printf_common+0x96>
 8006bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bb4:	6822      	ldr	r2, [r4, #0]
 8006bb6:	3b00      	subs	r3, #0
 8006bb8:	bf18      	it	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	0692      	lsls	r2, r2, #26
 8006bbe:	d42b      	bmi.n	8006c18 <_printf_common+0xb0>
 8006bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bc4:	4641      	mov	r1, r8
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	47c8      	blx	r9
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d01e      	beq.n	8006c0c <_printf_common+0xa4>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	6922      	ldr	r2, [r4, #16]
 8006bd2:	f003 0306 	and.w	r3, r3, #6
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	bf02      	ittt	eq
 8006bda:	68e5      	ldreq	r5, [r4, #12]
 8006bdc:	6833      	ldreq	r3, [r6, #0]
 8006bde:	1aed      	subeq	r5, r5, r3
 8006be0:	68a3      	ldr	r3, [r4, #8]
 8006be2:	bf0c      	ite	eq
 8006be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be8:	2500      	movne	r5, #0
 8006bea:	4293      	cmp	r3, r2
 8006bec:	bfc4      	itt	gt
 8006bee:	1a9b      	subgt	r3, r3, r2
 8006bf0:	18ed      	addgt	r5, r5, r3
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	341a      	adds	r4, #26
 8006bf6:	42b5      	cmp	r5, r6
 8006bf8:	d11a      	bne.n	8006c30 <_printf_common+0xc8>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e008      	b.n	8006c10 <_printf_common+0xa8>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4652      	mov	r2, sl
 8006c02:	4641      	mov	r1, r8
 8006c04:	4638      	mov	r0, r7
 8006c06:	47c8      	blx	r9
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d103      	bne.n	8006c14 <_printf_common+0xac>
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c14:	3501      	adds	r5, #1
 8006c16:	e7c6      	b.n	8006ba6 <_printf_common+0x3e>
 8006c18:	18e1      	adds	r1, r4, r3
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	2030      	movs	r0, #48	@ 0x30
 8006c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c22:	4422      	add	r2, r4
 8006c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c2c:	3302      	adds	r3, #2
 8006c2e:	e7c7      	b.n	8006bc0 <_printf_common+0x58>
 8006c30:	2301      	movs	r3, #1
 8006c32:	4622      	mov	r2, r4
 8006c34:	4641      	mov	r1, r8
 8006c36:	4638      	mov	r0, r7
 8006c38:	47c8      	blx	r9
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d0e6      	beq.n	8006c0c <_printf_common+0xa4>
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7d9      	b.n	8006bf6 <_printf_common+0x8e>
	...

08006c44 <_printf_i>:
 8006c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	7e0f      	ldrb	r7, [r1, #24]
 8006c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c4c:	2f78      	cmp	r7, #120	@ 0x78
 8006c4e:	4691      	mov	r9, r2
 8006c50:	4680      	mov	r8, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	469a      	mov	sl, r3
 8006c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c5a:	d807      	bhi.n	8006c6c <_printf_i+0x28>
 8006c5c:	2f62      	cmp	r7, #98	@ 0x62
 8006c5e:	d80a      	bhi.n	8006c76 <_printf_i+0x32>
 8006c60:	2f00      	cmp	r7, #0
 8006c62:	f000 80d1 	beq.w	8006e08 <_printf_i+0x1c4>
 8006c66:	2f58      	cmp	r7, #88	@ 0x58
 8006c68:	f000 80b8 	beq.w	8006ddc <_printf_i+0x198>
 8006c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c74:	e03a      	b.n	8006cec <_printf_i+0xa8>
 8006c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c7a:	2b15      	cmp	r3, #21
 8006c7c:	d8f6      	bhi.n	8006c6c <_printf_i+0x28>
 8006c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c84 <_printf_i+0x40>)
 8006c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c84:	08006cdd 	.word	0x08006cdd
 8006c88:	08006cf1 	.word	0x08006cf1
 8006c8c:	08006c6d 	.word	0x08006c6d
 8006c90:	08006c6d 	.word	0x08006c6d
 8006c94:	08006c6d 	.word	0x08006c6d
 8006c98:	08006c6d 	.word	0x08006c6d
 8006c9c:	08006cf1 	.word	0x08006cf1
 8006ca0:	08006c6d 	.word	0x08006c6d
 8006ca4:	08006c6d 	.word	0x08006c6d
 8006ca8:	08006c6d 	.word	0x08006c6d
 8006cac:	08006c6d 	.word	0x08006c6d
 8006cb0:	08006def 	.word	0x08006def
 8006cb4:	08006d1b 	.word	0x08006d1b
 8006cb8:	08006da9 	.word	0x08006da9
 8006cbc:	08006c6d 	.word	0x08006c6d
 8006cc0:	08006c6d 	.word	0x08006c6d
 8006cc4:	08006e11 	.word	0x08006e11
 8006cc8:	08006c6d 	.word	0x08006c6d
 8006ccc:	08006d1b 	.word	0x08006d1b
 8006cd0:	08006c6d 	.word	0x08006c6d
 8006cd4:	08006c6d 	.word	0x08006c6d
 8006cd8:	08006db1 	.word	0x08006db1
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	1d1a      	adds	r2, r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6032      	str	r2, [r6, #0]
 8006ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cec:	2301      	movs	r3, #1
 8006cee:	e09c      	b.n	8006e2a <_printf_i+0x1e6>
 8006cf0:	6833      	ldr	r3, [r6, #0]
 8006cf2:	6820      	ldr	r0, [r4, #0]
 8006cf4:	1d19      	adds	r1, r3, #4
 8006cf6:	6031      	str	r1, [r6, #0]
 8006cf8:	0606      	lsls	r6, r0, #24
 8006cfa:	d501      	bpl.n	8006d00 <_printf_i+0xbc>
 8006cfc:	681d      	ldr	r5, [r3, #0]
 8006cfe:	e003      	b.n	8006d08 <_printf_i+0xc4>
 8006d00:	0645      	lsls	r5, r0, #25
 8006d02:	d5fb      	bpl.n	8006cfc <_printf_i+0xb8>
 8006d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	da03      	bge.n	8006d14 <_printf_i+0xd0>
 8006d0c:	232d      	movs	r3, #45	@ 0x2d
 8006d0e:	426d      	negs	r5, r5
 8006d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d14:	4858      	ldr	r0, [pc, #352]	@ (8006e78 <_printf_i+0x234>)
 8006d16:	230a      	movs	r3, #10
 8006d18:	e011      	b.n	8006d3e <_printf_i+0xfa>
 8006d1a:	6821      	ldr	r1, [r4, #0]
 8006d1c:	6833      	ldr	r3, [r6, #0]
 8006d1e:	0608      	lsls	r0, r1, #24
 8006d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d24:	d402      	bmi.n	8006d2c <_printf_i+0xe8>
 8006d26:	0649      	lsls	r1, r1, #25
 8006d28:	bf48      	it	mi
 8006d2a:	b2ad      	uxthmi	r5, r5
 8006d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d2e:	4852      	ldr	r0, [pc, #328]	@ (8006e78 <_printf_i+0x234>)
 8006d30:	6033      	str	r3, [r6, #0]
 8006d32:	bf14      	ite	ne
 8006d34:	230a      	movne	r3, #10
 8006d36:	2308      	moveq	r3, #8
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d3e:	6866      	ldr	r6, [r4, #4]
 8006d40:	60a6      	str	r6, [r4, #8]
 8006d42:	2e00      	cmp	r6, #0
 8006d44:	db05      	blt.n	8006d52 <_printf_i+0x10e>
 8006d46:	6821      	ldr	r1, [r4, #0]
 8006d48:	432e      	orrs	r6, r5
 8006d4a:	f021 0104 	bic.w	r1, r1, #4
 8006d4e:	6021      	str	r1, [r4, #0]
 8006d50:	d04b      	beq.n	8006dea <_printf_i+0x1a6>
 8006d52:	4616      	mov	r6, r2
 8006d54:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d58:	fb03 5711 	mls	r7, r3, r1, r5
 8006d5c:	5dc7      	ldrb	r7, [r0, r7]
 8006d5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d62:	462f      	mov	r7, r5
 8006d64:	42bb      	cmp	r3, r7
 8006d66:	460d      	mov	r5, r1
 8006d68:	d9f4      	bls.n	8006d54 <_printf_i+0x110>
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d10b      	bne.n	8006d86 <_printf_i+0x142>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	07df      	lsls	r7, r3, #31
 8006d72:	d508      	bpl.n	8006d86 <_printf_i+0x142>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	6861      	ldr	r1, [r4, #4]
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	bfde      	ittt	le
 8006d7c:	2330      	movle	r3, #48	@ 0x30
 8006d7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d86:	1b92      	subs	r2, r2, r6
 8006d88:	6122      	str	r2, [r4, #16]
 8006d8a:	f8cd a000 	str.w	sl, [sp]
 8006d8e:	464b      	mov	r3, r9
 8006d90:	aa03      	add	r2, sp, #12
 8006d92:	4621      	mov	r1, r4
 8006d94:	4640      	mov	r0, r8
 8006d96:	f7ff fee7 	bl	8006b68 <_printf_common>
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d14a      	bne.n	8006e34 <_printf_i+0x1f0>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	b004      	add	sp, #16
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	f043 0320 	orr.w	r3, r3, #32
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	4832      	ldr	r0, [pc, #200]	@ (8006e7c <_printf_i+0x238>)
 8006db2:	2778      	movs	r7, #120	@ 0x78
 8006db4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	6831      	ldr	r1, [r6, #0]
 8006dbc:	061f      	lsls	r7, r3, #24
 8006dbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dc2:	d402      	bmi.n	8006dca <_printf_i+0x186>
 8006dc4:	065f      	lsls	r7, r3, #25
 8006dc6:	bf48      	it	mi
 8006dc8:	b2ad      	uxthmi	r5, r5
 8006dca:	6031      	str	r1, [r6, #0]
 8006dcc:	07d9      	lsls	r1, r3, #31
 8006dce:	bf44      	itt	mi
 8006dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd4:	6023      	strmi	r3, [r4, #0]
 8006dd6:	b11d      	cbz	r5, 8006de0 <_printf_i+0x19c>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	e7ad      	b.n	8006d38 <_printf_i+0xf4>
 8006ddc:	4826      	ldr	r0, [pc, #152]	@ (8006e78 <_printf_i+0x234>)
 8006dde:	e7e9      	b.n	8006db4 <_printf_i+0x170>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	f023 0320 	bic.w	r3, r3, #32
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	e7f6      	b.n	8006dd8 <_printf_i+0x194>
 8006dea:	4616      	mov	r6, r2
 8006dec:	e7bd      	b.n	8006d6a <_printf_i+0x126>
 8006dee:	6833      	ldr	r3, [r6, #0]
 8006df0:	6825      	ldr	r5, [r4, #0]
 8006df2:	6961      	ldr	r1, [r4, #20]
 8006df4:	1d18      	adds	r0, r3, #4
 8006df6:	6030      	str	r0, [r6, #0]
 8006df8:	062e      	lsls	r6, r5, #24
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	d501      	bpl.n	8006e02 <_printf_i+0x1be>
 8006dfe:	6019      	str	r1, [r3, #0]
 8006e00:	e002      	b.n	8006e08 <_printf_i+0x1c4>
 8006e02:	0668      	lsls	r0, r5, #25
 8006e04:	d5fb      	bpl.n	8006dfe <_printf_i+0x1ba>
 8006e06:	8019      	strh	r1, [r3, #0]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6123      	str	r3, [r4, #16]
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	e7bc      	b.n	8006d8a <_printf_i+0x146>
 8006e10:	6833      	ldr	r3, [r6, #0]
 8006e12:	1d1a      	adds	r2, r3, #4
 8006e14:	6032      	str	r2, [r6, #0]
 8006e16:	681e      	ldr	r6, [r3, #0]
 8006e18:	6862      	ldr	r2, [r4, #4]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f7f9 f9df 	bl	80001e0 <memchr>
 8006e22:	b108      	cbz	r0, 8006e28 <_printf_i+0x1e4>
 8006e24:	1b80      	subs	r0, r0, r6
 8006e26:	6060      	str	r0, [r4, #4]
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e32:	e7aa      	b.n	8006d8a <_printf_i+0x146>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	4632      	mov	r2, r6
 8006e38:	4649      	mov	r1, r9
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	47d0      	blx	sl
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d0ad      	beq.n	8006d9e <_printf_i+0x15a>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	079b      	lsls	r3, r3, #30
 8006e46:	d413      	bmi.n	8006e70 <_printf_i+0x22c>
 8006e48:	68e0      	ldr	r0, [r4, #12]
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	4298      	cmp	r0, r3
 8006e4e:	bfb8      	it	lt
 8006e50:	4618      	movlt	r0, r3
 8006e52:	e7a6      	b.n	8006da2 <_printf_i+0x15e>
 8006e54:	2301      	movs	r3, #1
 8006e56:	4632      	mov	r2, r6
 8006e58:	4649      	mov	r1, r9
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	47d0      	blx	sl
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d09d      	beq.n	8006d9e <_printf_i+0x15a>
 8006e62:	3501      	adds	r5, #1
 8006e64:	68e3      	ldr	r3, [r4, #12]
 8006e66:	9903      	ldr	r1, [sp, #12]
 8006e68:	1a5b      	subs	r3, r3, r1
 8006e6a:	42ab      	cmp	r3, r5
 8006e6c:	dcf2      	bgt.n	8006e54 <_printf_i+0x210>
 8006e6e:	e7eb      	b.n	8006e48 <_printf_i+0x204>
 8006e70:	2500      	movs	r5, #0
 8006e72:	f104 0619 	add.w	r6, r4, #25
 8006e76:	e7f5      	b.n	8006e64 <_printf_i+0x220>
 8006e78:	08009432 	.word	0x08009432
 8006e7c:	08009443 	.word	0x08009443

08006e80 <std>:
 8006e80:	2300      	movs	r3, #0
 8006e82:	b510      	push	{r4, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	e9c0 3300 	strd	r3, r3, [r0]
 8006e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e8e:	6083      	str	r3, [r0, #8]
 8006e90:	8181      	strh	r1, [r0, #12]
 8006e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e94:	81c2      	strh	r2, [r0, #14]
 8006e96:	6183      	str	r3, [r0, #24]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	305c      	adds	r0, #92	@ 0x5c
 8006e9e:	f000 f916 	bl	80070ce <memset>
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <std+0x58>)
 8006ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <std+0x5c>)
 8006ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <std+0x60>)
 8006eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <std+0x64>)
 8006eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <std+0x68>)
 8006eb4:	6224      	str	r4, [r4, #32]
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d006      	beq.n	8006ec8 <std+0x48>
 8006eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ebe:	4294      	cmp	r4, r2
 8006ec0:	d002      	beq.n	8006ec8 <std+0x48>
 8006ec2:	33d0      	adds	r3, #208	@ 0xd0
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d105      	bne.n	8006ed4 <std+0x54>
 8006ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f000 b990 	b.w	80071f4 <__retarget_lock_init_recursive>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	08007049 	.word	0x08007049
 8006edc:	0800706b 	.word	0x0800706b
 8006ee0:	080070a3 	.word	0x080070a3
 8006ee4:	080070c7 	.word	0x080070c7
 8006ee8:	20000508 	.word	0x20000508

08006eec <stdio_exit_handler>:
 8006eec:	4a02      	ldr	r2, [pc, #8]	@ (8006ef8 <stdio_exit_handler+0xc>)
 8006eee:	4903      	ldr	r1, [pc, #12]	@ (8006efc <stdio_exit_handler+0x10>)
 8006ef0:	4803      	ldr	r0, [pc, #12]	@ (8006f00 <stdio_exit_handler+0x14>)
 8006ef2:	f000 b869 	b.w	8006fc8 <_fwalk_sglue>
 8006ef6:	bf00      	nop
 8006ef8:	2000000c 	.word	0x2000000c
 8006efc:	08008b5d 	.word	0x08008b5d
 8006f00:	2000001c 	.word	0x2000001c

08006f04 <cleanup_stdio>:
 8006f04:	6841      	ldr	r1, [r0, #4]
 8006f06:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <cleanup_stdio+0x34>)
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	d001      	beq.n	8006f14 <cleanup_stdio+0x10>
 8006f10:	f001 fe24 	bl	8008b5c <_fflush_r>
 8006f14:	68a1      	ldr	r1, [r4, #8]
 8006f16:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <cleanup_stdio+0x38>)
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <cleanup_stdio+0x1e>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f001 fe1d 	bl	8008b5c <_fflush_r>
 8006f22:	68e1      	ldr	r1, [r4, #12]
 8006f24:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <cleanup_stdio+0x3c>)
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d004      	beq.n	8006f34 <cleanup_stdio+0x30>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f30:	f001 be14 	b.w	8008b5c <_fflush_r>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	20000508 	.word	0x20000508
 8006f3c:	20000570 	.word	0x20000570
 8006f40:	200005d8 	.word	0x200005d8

08006f44 <global_stdio_init.part.0>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <global_stdio_init.part.0+0x30>)
 8006f48:	4c0b      	ldr	r4, [pc, #44]	@ (8006f78 <global_stdio_init.part.0+0x34>)
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f7c <global_stdio_init.part.0+0x38>)
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	2200      	movs	r2, #0
 8006f52:	2104      	movs	r1, #4
 8006f54:	f7ff ff94 	bl	8006e80 <std>
 8006f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	2109      	movs	r1, #9
 8006f60:	f7ff ff8e 	bl	8006e80 <std>
 8006f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f68:	2202      	movs	r2, #2
 8006f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6e:	2112      	movs	r1, #18
 8006f70:	f7ff bf86 	b.w	8006e80 <std>
 8006f74:	20000640 	.word	0x20000640
 8006f78:	20000508 	.word	0x20000508
 8006f7c:	08006eed 	.word	0x08006eed

08006f80 <__sfp_lock_acquire>:
 8006f80:	4801      	ldr	r0, [pc, #4]	@ (8006f88 <__sfp_lock_acquire+0x8>)
 8006f82:	f000 b938 	b.w	80071f6 <__retarget_lock_acquire_recursive>
 8006f86:	bf00      	nop
 8006f88:	20000649 	.word	0x20000649

08006f8c <__sfp_lock_release>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	@ (8006f94 <__sfp_lock_release+0x8>)
 8006f8e:	f000 b933 	b.w	80071f8 <__retarget_lock_release_recursive>
 8006f92:	bf00      	nop
 8006f94:	20000649 	.word	0x20000649

08006f98 <__sinit>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	f7ff fff0 	bl	8006f80 <__sfp_lock_acquire>
 8006fa0:	6a23      	ldr	r3, [r4, #32]
 8006fa2:	b11b      	cbz	r3, 8006fac <__sinit+0x14>
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f7ff bff0 	b.w	8006f8c <__sfp_lock_release>
 8006fac:	4b04      	ldr	r3, [pc, #16]	@ (8006fc0 <__sinit+0x28>)
 8006fae:	6223      	str	r3, [r4, #32]
 8006fb0:	4b04      	ldr	r3, [pc, #16]	@ (8006fc4 <__sinit+0x2c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f5      	bne.n	8006fa4 <__sinit+0xc>
 8006fb8:	f7ff ffc4 	bl	8006f44 <global_stdio_init.part.0>
 8006fbc:	e7f2      	b.n	8006fa4 <__sinit+0xc>
 8006fbe:	bf00      	nop
 8006fc0:	08006f05 	.word	0x08006f05
 8006fc4:	20000640 	.word	0x20000640

08006fc8 <_fwalk_sglue>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4607      	mov	r7, r0
 8006fce:	4688      	mov	r8, r1
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fdc:	d505      	bpl.n	8006fea <_fwalk_sglue+0x22>
 8006fde:	6824      	ldr	r4, [r4, #0]
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	d1f7      	bne.n	8006fd4 <_fwalk_sglue+0xc>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d907      	bls.n	8007000 <_fwalk_sglue+0x38>
 8006ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	d003      	beq.n	8007000 <_fwalk_sglue+0x38>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c0      	blx	r8
 8006ffe:	4306      	orrs	r6, r0
 8007000:	3568      	adds	r5, #104	@ 0x68
 8007002:	e7e9      	b.n	8006fd8 <_fwalk_sglue+0x10>

08007004 <siprintf>:
 8007004:	b40e      	push	{r1, r2, r3}
 8007006:	b510      	push	{r4, lr}
 8007008:	b09d      	sub	sp, #116	@ 0x74
 800700a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800700c:	9002      	str	r0, [sp, #8]
 800700e:	9006      	str	r0, [sp, #24]
 8007010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007014:	480a      	ldr	r0, [pc, #40]	@ (8007040 <siprintf+0x3c>)
 8007016:	9107      	str	r1, [sp, #28]
 8007018:	9104      	str	r1, [sp, #16]
 800701a:	490a      	ldr	r1, [pc, #40]	@ (8007044 <siprintf+0x40>)
 800701c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007020:	9105      	str	r1, [sp, #20]
 8007022:	2400      	movs	r4, #0
 8007024:	a902      	add	r1, sp, #8
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800702c:	f001 fc16 	bl	800885c <_svfiprintf_r>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	701c      	strb	r4, [r3, #0]
 8007034:	b01d      	add	sp, #116	@ 0x74
 8007036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703a:	b003      	add	sp, #12
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000018 	.word	0x20000018
 8007044:	ffff0208 	.word	0xffff0208

08007048 <__sread>:
 8007048:	b510      	push	{r4, lr}
 800704a:	460c      	mov	r4, r1
 800704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007050:	f000 f882 	bl	8007158 <_read_r>
 8007054:	2800      	cmp	r0, #0
 8007056:	bfab      	itete	ge
 8007058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800705a:	89a3      	ldrhlt	r3, [r4, #12]
 800705c:	181b      	addge	r3, r3, r0
 800705e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007062:	bfac      	ite	ge
 8007064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007066:	81a3      	strhlt	r3, [r4, #12]
 8007068:	bd10      	pop	{r4, pc}

0800706a <__swrite>:
 800706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	461f      	mov	r7, r3
 8007070:	898b      	ldrh	r3, [r1, #12]
 8007072:	05db      	lsls	r3, r3, #23
 8007074:	4605      	mov	r5, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4616      	mov	r6, r2
 800707a:	d505      	bpl.n	8007088 <__swrite+0x1e>
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	2302      	movs	r3, #2
 8007082:	2200      	movs	r2, #0
 8007084:	f000 f856 	bl	8007134 <_lseek_r>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800708e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	4632      	mov	r2, r6
 8007096:	463b      	mov	r3, r7
 8007098:	4628      	mov	r0, r5
 800709a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800709e:	f000 b86d 	b.w	800717c <_write_r>

080070a2 <__sseek>:
 80070a2:	b510      	push	{r4, lr}
 80070a4:	460c      	mov	r4, r1
 80070a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070aa:	f000 f843 	bl	8007134 <_lseek_r>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	bf15      	itete	ne
 80070b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070be:	81a3      	strheq	r3, [r4, #12]
 80070c0:	bf18      	it	ne
 80070c2:	81a3      	strhne	r3, [r4, #12]
 80070c4:	bd10      	pop	{r4, pc}

080070c6 <__sclose>:
 80070c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ca:	f000 b823 	b.w	8007114 <_close_r>

080070ce <memset>:
 80070ce:	4402      	add	r2, r0
 80070d0:	4603      	mov	r3, r0
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d100      	bne.n	80070d8 <memset+0xa>
 80070d6:	4770      	bx	lr
 80070d8:	f803 1b01 	strb.w	r1, [r3], #1
 80070dc:	e7f9      	b.n	80070d2 <memset+0x4>

080070de <strstr>:
 80070de:	780a      	ldrb	r2, [r1, #0]
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	b96a      	cbnz	r2, 8007100 <strstr+0x22>
 80070e4:	bd70      	pop	{r4, r5, r6, pc}
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d109      	bne.n	80070fe <strstr+0x20>
 80070ea:	460c      	mov	r4, r1
 80070ec:	4605      	mov	r5, r0
 80070ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0f6      	beq.n	80070e4 <strstr+0x6>
 80070f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80070fa:	429e      	cmp	r6, r3
 80070fc:	d0f7      	beq.n	80070ee <strstr+0x10>
 80070fe:	3001      	adds	r0, #1
 8007100:	7803      	ldrb	r3, [r0, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ef      	bne.n	80070e6 <strstr+0x8>
 8007106:	4618      	mov	r0, r3
 8007108:	e7ec      	b.n	80070e4 <strstr+0x6>
	...

0800710c <_localeconv_r>:
 800710c:	4800      	ldr	r0, [pc, #0]	@ (8007110 <_localeconv_r+0x4>)
 800710e:	4770      	bx	lr
 8007110:	20000158 	.word	0x20000158

08007114 <_close_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d06      	ldr	r5, [pc, #24]	@ (8007130 <_close_r+0x1c>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	f7fb f856 	bl	80021d0 <_close>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_close_r+0x1a>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_close_r+0x1a>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	20000644 	.word	0x20000644

08007134 <_lseek_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	@ (8007154 <_lseek_r+0x20>)
 8007138:	4604      	mov	r4, r0
 800713a:	4608      	mov	r0, r1
 800713c:	4611      	mov	r1, r2
 800713e:	2200      	movs	r2, #0
 8007140:	602a      	str	r2, [r5, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	f7fb f86b 	bl	800221e <_lseek>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_lseek_r+0x1e>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_lseek_r+0x1e>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	20000644 	.word	0x20000644

08007158 <_read_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	@ (8007178 <_read_r+0x20>)
 800715c:	4604      	mov	r4, r0
 800715e:	4608      	mov	r0, r1
 8007160:	4611      	mov	r1, r2
 8007162:	2200      	movs	r2, #0
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f7fa fff9 	bl	800215e <_read>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_read_r+0x1e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_read_r+0x1e>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	20000644 	.word	0x20000644

0800717c <_write_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d07      	ldr	r5, [pc, #28]	@ (800719c <_write_r+0x20>)
 8007180:	4604      	mov	r4, r0
 8007182:	4608      	mov	r0, r1
 8007184:	4611      	mov	r1, r2
 8007186:	2200      	movs	r2, #0
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7fb f804 	bl	8002198 <_write>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_write_r+0x1e>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_write_r+0x1e>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20000644 	.word	0x20000644

080071a0 <__errno>:
 80071a0:	4b01      	ldr	r3, [pc, #4]	@ (80071a8 <__errno+0x8>)
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000018 	.word	0x20000018

080071ac <__libc_init_array>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	4d0d      	ldr	r5, [pc, #52]	@ (80071e4 <__libc_init_array+0x38>)
 80071b0:	4c0d      	ldr	r4, [pc, #52]	@ (80071e8 <__libc_init_array+0x3c>)
 80071b2:	1b64      	subs	r4, r4, r5
 80071b4:	10a4      	asrs	r4, r4, #2
 80071b6:	2600      	movs	r6, #0
 80071b8:	42a6      	cmp	r6, r4
 80071ba:	d109      	bne.n	80071d0 <__libc_init_array+0x24>
 80071bc:	4d0b      	ldr	r5, [pc, #44]	@ (80071ec <__libc_init_array+0x40>)
 80071be:	4c0c      	ldr	r4, [pc, #48]	@ (80071f0 <__libc_init_array+0x44>)
 80071c0:	f002 f86a 	bl	8009298 <_init>
 80071c4:	1b64      	subs	r4, r4, r5
 80071c6:	10a4      	asrs	r4, r4, #2
 80071c8:	2600      	movs	r6, #0
 80071ca:	42a6      	cmp	r6, r4
 80071cc:	d105      	bne.n	80071da <__libc_init_array+0x2e>
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d4:	4798      	blx	r3
 80071d6:	3601      	adds	r6, #1
 80071d8:	e7ee      	b.n	80071b8 <__libc_init_array+0xc>
 80071da:	f855 3b04 	ldr.w	r3, [r5], #4
 80071de:	4798      	blx	r3
 80071e0:	3601      	adds	r6, #1
 80071e2:	e7f2      	b.n	80071ca <__libc_init_array+0x1e>
 80071e4:	0800979c 	.word	0x0800979c
 80071e8:	0800979c 	.word	0x0800979c
 80071ec:	0800979c 	.word	0x0800979c
 80071f0:	080097a0 	.word	0x080097a0

080071f4 <__retarget_lock_init_recursive>:
 80071f4:	4770      	bx	lr

080071f6 <__retarget_lock_acquire_recursive>:
 80071f6:	4770      	bx	lr

080071f8 <__retarget_lock_release_recursive>:
 80071f8:	4770      	bx	lr

080071fa <quorem>:
 80071fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fe:	6903      	ldr	r3, [r0, #16]
 8007200:	690c      	ldr	r4, [r1, #16]
 8007202:	42a3      	cmp	r3, r4
 8007204:	4607      	mov	r7, r0
 8007206:	db7e      	blt.n	8007306 <quorem+0x10c>
 8007208:	3c01      	subs	r4, #1
 800720a:	f101 0814 	add.w	r8, r1, #20
 800720e:	00a3      	lsls	r3, r4, #2
 8007210:	f100 0514 	add.w	r5, r0, #20
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007220:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007224:	3301      	adds	r3, #1
 8007226:	429a      	cmp	r2, r3
 8007228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800722c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007230:	d32e      	bcc.n	8007290 <quorem+0x96>
 8007232:	f04f 0a00 	mov.w	sl, #0
 8007236:	46c4      	mov	ip, r8
 8007238:	46ae      	mov	lr, r5
 800723a:	46d3      	mov	fp, sl
 800723c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007240:	b298      	uxth	r0, r3
 8007242:	fb06 a000 	mla	r0, r6, r0, sl
 8007246:	0c02      	lsrs	r2, r0, #16
 8007248:	0c1b      	lsrs	r3, r3, #16
 800724a:	fb06 2303 	mla	r3, r6, r3, r2
 800724e:	f8de 2000 	ldr.w	r2, [lr]
 8007252:	b280      	uxth	r0, r0
 8007254:	b292      	uxth	r2, r2
 8007256:	1a12      	subs	r2, r2, r0
 8007258:	445a      	add	r2, fp
 800725a:	f8de 0000 	ldr.w	r0, [lr]
 800725e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007262:	b29b      	uxth	r3, r3
 8007264:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007268:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800726c:	b292      	uxth	r2, r2
 800726e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007272:	45e1      	cmp	r9, ip
 8007274:	f84e 2b04 	str.w	r2, [lr], #4
 8007278:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800727c:	d2de      	bcs.n	800723c <quorem+0x42>
 800727e:	9b00      	ldr	r3, [sp, #0]
 8007280:	58eb      	ldr	r3, [r5, r3]
 8007282:	b92b      	cbnz	r3, 8007290 <quorem+0x96>
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	3b04      	subs	r3, #4
 8007288:	429d      	cmp	r5, r3
 800728a:	461a      	mov	r2, r3
 800728c:	d32f      	bcc.n	80072ee <quorem+0xf4>
 800728e:	613c      	str	r4, [r7, #16]
 8007290:	4638      	mov	r0, r7
 8007292:	f001 f97f 	bl	8008594 <__mcmp>
 8007296:	2800      	cmp	r0, #0
 8007298:	db25      	blt.n	80072e6 <quorem+0xec>
 800729a:	4629      	mov	r1, r5
 800729c:	2000      	movs	r0, #0
 800729e:	f858 2b04 	ldr.w	r2, [r8], #4
 80072a2:	f8d1 c000 	ldr.w	ip, [r1]
 80072a6:	fa1f fe82 	uxth.w	lr, r2
 80072aa:	fa1f f38c 	uxth.w	r3, ip
 80072ae:	eba3 030e 	sub.w	r3, r3, lr
 80072b2:	4403      	add	r3, r0
 80072b4:	0c12      	lsrs	r2, r2, #16
 80072b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072c4:	45c1      	cmp	r9, r8
 80072c6:	f841 3b04 	str.w	r3, [r1], #4
 80072ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072ce:	d2e6      	bcs.n	800729e <quorem+0xa4>
 80072d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d8:	b922      	cbnz	r2, 80072e4 <quorem+0xea>
 80072da:	3b04      	subs	r3, #4
 80072dc:	429d      	cmp	r5, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	d30b      	bcc.n	80072fa <quorem+0x100>
 80072e2:	613c      	str	r4, [r7, #16]
 80072e4:	3601      	adds	r6, #1
 80072e6:	4630      	mov	r0, r6
 80072e8:	b003      	add	sp, #12
 80072ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	3b04      	subs	r3, #4
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	d1cb      	bne.n	800728e <quorem+0x94>
 80072f6:	3c01      	subs	r4, #1
 80072f8:	e7c6      	b.n	8007288 <quorem+0x8e>
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	3b04      	subs	r3, #4
 80072fe:	2a00      	cmp	r2, #0
 8007300:	d1ef      	bne.n	80072e2 <quorem+0xe8>
 8007302:	3c01      	subs	r4, #1
 8007304:	e7ea      	b.n	80072dc <quorem+0xe2>
 8007306:	2000      	movs	r0, #0
 8007308:	e7ee      	b.n	80072e8 <quorem+0xee>
 800730a:	0000      	movs	r0, r0
 800730c:	0000      	movs	r0, r0
	...

08007310 <_dtoa_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	69c7      	ldr	r7, [r0, #28]
 8007316:	b097      	sub	sp, #92	@ 0x5c
 8007318:	ed8d 0b04 	vstr	d0, [sp, #16]
 800731c:	ec55 4b10 	vmov	r4, r5, d0
 8007320:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007322:	9107      	str	r1, [sp, #28]
 8007324:	4681      	mov	r9, r0
 8007326:	920c      	str	r2, [sp, #48]	@ 0x30
 8007328:	9311      	str	r3, [sp, #68]	@ 0x44
 800732a:	b97f      	cbnz	r7, 800734c <_dtoa_r+0x3c>
 800732c:	2010      	movs	r0, #16
 800732e:	f000 fe09 	bl	8007f44 <malloc>
 8007332:	4602      	mov	r2, r0
 8007334:	f8c9 001c 	str.w	r0, [r9, #28]
 8007338:	b920      	cbnz	r0, 8007344 <_dtoa_r+0x34>
 800733a:	4ba9      	ldr	r3, [pc, #676]	@ (80075e0 <_dtoa_r+0x2d0>)
 800733c:	21ef      	movs	r1, #239	@ 0xef
 800733e:	48a9      	ldr	r0, [pc, #676]	@ (80075e4 <_dtoa_r+0x2d4>)
 8007340:	f001 fc6c 	bl	8008c1c <__assert_func>
 8007344:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007348:	6007      	str	r7, [r0, #0]
 800734a:	60c7      	str	r7, [r0, #12]
 800734c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007350:	6819      	ldr	r1, [r3, #0]
 8007352:	b159      	cbz	r1, 800736c <_dtoa_r+0x5c>
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	604a      	str	r2, [r1, #4]
 8007358:	2301      	movs	r3, #1
 800735a:	4093      	lsls	r3, r2
 800735c:	608b      	str	r3, [r1, #8]
 800735e:	4648      	mov	r0, r9
 8007360:	f000 fee6 	bl	8008130 <_Bfree>
 8007364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	1e2b      	subs	r3, r5, #0
 800736e:	bfb9      	ittee	lt
 8007370:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007374:	9305      	strlt	r3, [sp, #20]
 8007376:	2300      	movge	r3, #0
 8007378:	6033      	strge	r3, [r6, #0]
 800737a:	9f05      	ldr	r7, [sp, #20]
 800737c:	4b9a      	ldr	r3, [pc, #616]	@ (80075e8 <_dtoa_r+0x2d8>)
 800737e:	bfbc      	itt	lt
 8007380:	2201      	movlt	r2, #1
 8007382:	6032      	strlt	r2, [r6, #0]
 8007384:	43bb      	bics	r3, r7
 8007386:	d112      	bne.n	80073ae <_dtoa_r+0x9e>
 8007388:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800738a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007394:	4323      	orrs	r3, r4
 8007396:	f000 855a 	beq.w	8007e4e <_dtoa_r+0xb3e>
 800739a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800739c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80075fc <_dtoa_r+0x2ec>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 855c 	beq.w	8007e5e <_dtoa_r+0xb4e>
 80073a6:	f10a 0303 	add.w	r3, sl, #3
 80073aa:	f000 bd56 	b.w	8007e5a <_dtoa_r+0xb4a>
 80073ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80073b2:	2200      	movs	r2, #0
 80073b4:	ec51 0b17 	vmov	r0, r1, d7
 80073b8:	2300      	movs	r3, #0
 80073ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80073be:	f7f9 fb8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80073c2:	4680      	mov	r8, r0
 80073c4:	b158      	cbz	r0, 80073de <_dtoa_r+0xce>
 80073c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073c8:	2301      	movs	r3, #1
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073ce:	b113      	cbz	r3, 80073d6 <_dtoa_r+0xc6>
 80073d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073d2:	4b86      	ldr	r3, [pc, #536]	@ (80075ec <_dtoa_r+0x2dc>)
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007600 <_dtoa_r+0x2f0>
 80073da:	f000 bd40 	b.w	8007e5e <_dtoa_r+0xb4e>
 80073de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80073e2:	aa14      	add	r2, sp, #80	@ 0x50
 80073e4:	a915      	add	r1, sp, #84	@ 0x54
 80073e6:	4648      	mov	r0, r9
 80073e8:	f001 f984 	bl	80086f4 <__d2b>
 80073ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073f0:	9002      	str	r0, [sp, #8]
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d078      	beq.n	80074e8 <_dtoa_r+0x1d8>
 80073f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80073fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007404:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007408:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800740c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007410:	4619      	mov	r1, r3
 8007412:	2200      	movs	r2, #0
 8007414:	4b76      	ldr	r3, [pc, #472]	@ (80075f0 <_dtoa_r+0x2e0>)
 8007416:	f7f8 ff3f 	bl	8000298 <__aeabi_dsub>
 800741a:	a36b      	add	r3, pc, #428	@ (adr r3, 80075c8 <_dtoa_r+0x2b8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f9 f8f2 	bl	8000608 <__aeabi_dmul>
 8007424:	a36a      	add	r3, pc, #424	@ (adr r3, 80075d0 <_dtoa_r+0x2c0>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f8 ff37 	bl	800029c <__adddf3>
 800742e:	4604      	mov	r4, r0
 8007430:	4630      	mov	r0, r6
 8007432:	460d      	mov	r5, r1
 8007434:	f7f9 f87e 	bl	8000534 <__aeabi_i2d>
 8007438:	a367      	add	r3, pc, #412	@ (adr r3, 80075d8 <_dtoa_r+0x2c8>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f8e3 	bl	8000608 <__aeabi_dmul>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f8 ff27 	bl	800029c <__adddf3>
 800744e:	4604      	mov	r4, r0
 8007450:	460d      	mov	r5, r1
 8007452:	f7f9 fb89 	bl	8000b68 <__aeabi_d2iz>
 8007456:	2200      	movs	r2, #0
 8007458:	4607      	mov	r7, r0
 800745a:	2300      	movs	r3, #0
 800745c:	4620      	mov	r0, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7f9 fb44 	bl	8000aec <__aeabi_dcmplt>
 8007464:	b140      	cbz	r0, 8007478 <_dtoa_r+0x168>
 8007466:	4638      	mov	r0, r7
 8007468:	f7f9 f864 	bl	8000534 <__aeabi_i2d>
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	f7f9 fb32 	bl	8000ad8 <__aeabi_dcmpeq>
 8007474:	b900      	cbnz	r0, 8007478 <_dtoa_r+0x168>
 8007476:	3f01      	subs	r7, #1
 8007478:	2f16      	cmp	r7, #22
 800747a:	d852      	bhi.n	8007522 <_dtoa_r+0x212>
 800747c:	4b5d      	ldr	r3, [pc, #372]	@ (80075f4 <_dtoa_r+0x2e4>)
 800747e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800748a:	f7f9 fb2f 	bl	8000aec <__aeabi_dcmplt>
 800748e:	2800      	cmp	r0, #0
 8007490:	d049      	beq.n	8007526 <_dtoa_r+0x216>
 8007492:	3f01      	subs	r7, #1
 8007494:	2300      	movs	r3, #0
 8007496:	9310      	str	r3, [sp, #64]	@ 0x40
 8007498:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800749a:	1b9b      	subs	r3, r3, r6
 800749c:	1e5a      	subs	r2, r3, #1
 800749e:	bf45      	ittet	mi
 80074a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80074a4:	9300      	strmi	r3, [sp, #0]
 80074a6:	2300      	movpl	r3, #0
 80074a8:	2300      	movmi	r3, #0
 80074aa:	9206      	str	r2, [sp, #24]
 80074ac:	bf54      	ite	pl
 80074ae:	9300      	strpl	r3, [sp, #0]
 80074b0:	9306      	strmi	r3, [sp, #24]
 80074b2:	2f00      	cmp	r7, #0
 80074b4:	db39      	blt.n	800752a <_dtoa_r+0x21a>
 80074b6:	9b06      	ldr	r3, [sp, #24]
 80074b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80074ba:	443b      	add	r3, r7
 80074bc:	9306      	str	r3, [sp, #24]
 80074be:	2300      	movs	r3, #0
 80074c0:	9308      	str	r3, [sp, #32]
 80074c2:	9b07      	ldr	r3, [sp, #28]
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	d863      	bhi.n	8007590 <_dtoa_r+0x280>
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	bfc4      	itt	gt
 80074cc:	3b04      	subgt	r3, #4
 80074ce:	9307      	strgt	r3, [sp, #28]
 80074d0:	9b07      	ldr	r3, [sp, #28]
 80074d2:	f1a3 0302 	sub.w	r3, r3, #2
 80074d6:	bfcc      	ite	gt
 80074d8:	2400      	movgt	r4, #0
 80074da:	2401      	movle	r4, #1
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d863      	bhi.n	80075a8 <_dtoa_r+0x298>
 80074e0:	e8df f003 	tbb	[pc, r3]
 80074e4:	2b375452 	.word	0x2b375452
 80074e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074ec:	441e      	add	r6, r3
 80074ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	bfc1      	itttt	gt
 80074f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074fa:	409f      	lslgt	r7, r3
 80074fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007500:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007504:	bfd6      	itet	le
 8007506:	f1c3 0320 	rsble	r3, r3, #32
 800750a:	ea47 0003 	orrgt.w	r0, r7, r3
 800750e:	fa04 f003 	lslle.w	r0, r4, r3
 8007512:	f7f8 ffff 	bl	8000514 <__aeabi_ui2d>
 8007516:	2201      	movs	r2, #1
 8007518:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800751c:	3e01      	subs	r6, #1
 800751e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007520:	e776      	b.n	8007410 <_dtoa_r+0x100>
 8007522:	2301      	movs	r3, #1
 8007524:	e7b7      	b.n	8007496 <_dtoa_r+0x186>
 8007526:	9010      	str	r0, [sp, #64]	@ 0x40
 8007528:	e7b6      	b.n	8007498 <_dtoa_r+0x188>
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	1bdb      	subs	r3, r3, r7
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	427b      	negs	r3, r7
 8007532:	9308      	str	r3, [sp, #32]
 8007534:	2300      	movs	r3, #0
 8007536:	930d      	str	r3, [sp, #52]	@ 0x34
 8007538:	e7c3      	b.n	80074c2 <_dtoa_r+0x1b2>
 800753a:	2301      	movs	r3, #1
 800753c:	9309      	str	r3, [sp, #36]	@ 0x24
 800753e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007540:	eb07 0b03 	add.w	fp, r7, r3
 8007544:	f10b 0301 	add.w	r3, fp, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	9303      	str	r3, [sp, #12]
 800754c:	bfb8      	it	lt
 800754e:	2301      	movlt	r3, #1
 8007550:	e006      	b.n	8007560 <_dtoa_r+0x250>
 8007552:	2301      	movs	r3, #1
 8007554:	9309      	str	r3, [sp, #36]	@ 0x24
 8007556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007558:	2b00      	cmp	r3, #0
 800755a:	dd28      	ble.n	80075ae <_dtoa_r+0x29e>
 800755c:	469b      	mov	fp, r3
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007564:	2100      	movs	r1, #0
 8007566:	2204      	movs	r2, #4
 8007568:	f102 0514 	add.w	r5, r2, #20
 800756c:	429d      	cmp	r5, r3
 800756e:	d926      	bls.n	80075be <_dtoa_r+0x2ae>
 8007570:	6041      	str	r1, [r0, #4]
 8007572:	4648      	mov	r0, r9
 8007574:	f000 fd9c 	bl	80080b0 <_Balloc>
 8007578:	4682      	mov	sl, r0
 800757a:	2800      	cmp	r0, #0
 800757c:	d142      	bne.n	8007604 <_dtoa_r+0x2f4>
 800757e:	4b1e      	ldr	r3, [pc, #120]	@ (80075f8 <_dtoa_r+0x2e8>)
 8007580:	4602      	mov	r2, r0
 8007582:	f240 11af 	movw	r1, #431	@ 0x1af
 8007586:	e6da      	b.n	800733e <_dtoa_r+0x2e>
 8007588:	2300      	movs	r3, #0
 800758a:	e7e3      	b.n	8007554 <_dtoa_r+0x244>
 800758c:	2300      	movs	r3, #0
 800758e:	e7d5      	b.n	800753c <_dtoa_r+0x22c>
 8007590:	2401      	movs	r4, #1
 8007592:	2300      	movs	r3, #0
 8007594:	9307      	str	r3, [sp, #28]
 8007596:	9409      	str	r4, [sp, #36]	@ 0x24
 8007598:	f04f 3bff 	mov.w	fp, #4294967295
 800759c:	2200      	movs	r2, #0
 800759e:	f8cd b00c 	str.w	fp, [sp, #12]
 80075a2:	2312      	movs	r3, #18
 80075a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80075a6:	e7db      	b.n	8007560 <_dtoa_r+0x250>
 80075a8:	2301      	movs	r3, #1
 80075aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ac:	e7f4      	b.n	8007598 <_dtoa_r+0x288>
 80075ae:	f04f 0b01 	mov.w	fp, #1
 80075b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80075b6:	465b      	mov	r3, fp
 80075b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80075bc:	e7d0      	b.n	8007560 <_dtoa_r+0x250>
 80075be:	3101      	adds	r1, #1
 80075c0:	0052      	lsls	r2, r2, #1
 80075c2:	e7d1      	b.n	8007568 <_dtoa_r+0x258>
 80075c4:	f3af 8000 	nop.w
 80075c8:	636f4361 	.word	0x636f4361
 80075cc:	3fd287a7 	.word	0x3fd287a7
 80075d0:	8b60c8b3 	.word	0x8b60c8b3
 80075d4:	3fc68a28 	.word	0x3fc68a28
 80075d8:	509f79fb 	.word	0x509f79fb
 80075dc:	3fd34413 	.word	0x3fd34413
 80075e0:	08009461 	.word	0x08009461
 80075e4:	08009478 	.word	0x08009478
 80075e8:	7ff00000 	.word	0x7ff00000
 80075ec:	08009431 	.word	0x08009431
 80075f0:	3ff80000 	.word	0x3ff80000
 80075f4:	080095c8 	.word	0x080095c8
 80075f8:	080094d0 	.word	0x080094d0
 80075fc:	0800945d 	.word	0x0800945d
 8007600:	08009430 	.word	0x08009430
 8007604:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	9b03      	ldr	r3, [sp, #12]
 800760c:	2b0e      	cmp	r3, #14
 800760e:	f200 80a1 	bhi.w	8007754 <_dtoa_r+0x444>
 8007612:	2c00      	cmp	r4, #0
 8007614:	f000 809e 	beq.w	8007754 <_dtoa_r+0x444>
 8007618:	2f00      	cmp	r7, #0
 800761a:	dd33      	ble.n	8007684 <_dtoa_r+0x374>
 800761c:	4b9c      	ldr	r3, [pc, #624]	@ (8007890 <_dtoa_r+0x580>)
 800761e:	f007 020f 	and.w	r2, r7, #15
 8007622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007626:	ed93 7b00 	vldr	d7, [r3]
 800762a:	05f8      	lsls	r0, r7, #23
 800762c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007630:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007634:	d516      	bpl.n	8007664 <_dtoa_r+0x354>
 8007636:	4b97      	ldr	r3, [pc, #604]	@ (8007894 <_dtoa_r+0x584>)
 8007638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800763c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007640:	f7f9 f90c 	bl	800085c <__aeabi_ddiv>
 8007644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007648:	f004 040f 	and.w	r4, r4, #15
 800764c:	2603      	movs	r6, #3
 800764e:	4d91      	ldr	r5, [pc, #580]	@ (8007894 <_dtoa_r+0x584>)
 8007650:	b954      	cbnz	r4, 8007668 <_dtoa_r+0x358>
 8007652:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800765a:	f7f9 f8ff 	bl	800085c <__aeabi_ddiv>
 800765e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007662:	e028      	b.n	80076b6 <_dtoa_r+0x3a6>
 8007664:	2602      	movs	r6, #2
 8007666:	e7f2      	b.n	800764e <_dtoa_r+0x33e>
 8007668:	07e1      	lsls	r1, r4, #31
 800766a:	d508      	bpl.n	800767e <_dtoa_r+0x36e>
 800766c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007670:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007674:	f7f8 ffc8 	bl	8000608 <__aeabi_dmul>
 8007678:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800767c:	3601      	adds	r6, #1
 800767e:	1064      	asrs	r4, r4, #1
 8007680:	3508      	adds	r5, #8
 8007682:	e7e5      	b.n	8007650 <_dtoa_r+0x340>
 8007684:	f000 80af 	beq.w	80077e6 <_dtoa_r+0x4d6>
 8007688:	427c      	negs	r4, r7
 800768a:	4b81      	ldr	r3, [pc, #516]	@ (8007890 <_dtoa_r+0x580>)
 800768c:	4d81      	ldr	r5, [pc, #516]	@ (8007894 <_dtoa_r+0x584>)
 800768e:	f004 020f 	and.w	r2, r4, #15
 8007692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a6:	1124      	asrs	r4, r4, #4
 80076a8:	2300      	movs	r3, #0
 80076aa:	2602      	movs	r6, #2
 80076ac:	2c00      	cmp	r4, #0
 80076ae:	f040 808f 	bne.w	80077d0 <_dtoa_r+0x4c0>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1d3      	bne.n	800765e <_dtoa_r+0x34e>
 80076b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 8094 	beq.w	80077ea <_dtoa_r+0x4da>
 80076c2:	4b75      	ldr	r3, [pc, #468]	@ (8007898 <_dtoa_r+0x588>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f9 fa0f 	bl	8000aec <__aeabi_dcmplt>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f000 808b 	beq.w	80077ea <_dtoa_r+0x4da>
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8087 	beq.w	80077ea <_dtoa_r+0x4da>
 80076dc:	f1bb 0f00 	cmp.w	fp, #0
 80076e0:	dd34      	ble.n	800774c <_dtoa_r+0x43c>
 80076e2:	4620      	mov	r0, r4
 80076e4:	4b6d      	ldr	r3, [pc, #436]	@ (800789c <_dtoa_r+0x58c>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f8 ff8d 	bl	8000608 <__aeabi_dmul>
 80076ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80076f6:	3601      	adds	r6, #1
 80076f8:	465c      	mov	r4, fp
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7f8 ff1a 	bl	8000534 <__aeabi_i2d>
 8007700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007704:	f7f8 ff80 	bl	8000608 <__aeabi_dmul>
 8007708:	4b65      	ldr	r3, [pc, #404]	@ (80078a0 <_dtoa_r+0x590>)
 800770a:	2200      	movs	r2, #0
 800770c:	f7f8 fdc6 	bl	800029c <__adddf3>
 8007710:	4605      	mov	r5, r0
 8007712:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007716:	2c00      	cmp	r4, #0
 8007718:	d16a      	bne.n	80077f0 <_dtoa_r+0x4e0>
 800771a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771e:	4b61      	ldr	r3, [pc, #388]	@ (80078a4 <_dtoa_r+0x594>)
 8007720:	2200      	movs	r2, #0
 8007722:	f7f8 fdb9 	bl	8000298 <__aeabi_dsub>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800772e:	462a      	mov	r2, r5
 8007730:	4633      	mov	r3, r6
 8007732:	f7f9 f9f9 	bl	8000b28 <__aeabi_dcmpgt>
 8007736:	2800      	cmp	r0, #0
 8007738:	f040 8298 	bne.w	8007c6c <_dtoa_r+0x95c>
 800773c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007740:	462a      	mov	r2, r5
 8007742:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007746:	f7f9 f9d1 	bl	8000aec <__aeabi_dcmplt>
 800774a:	bb38      	cbnz	r0, 800779c <_dtoa_r+0x48c>
 800774c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007750:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007754:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007756:	2b00      	cmp	r3, #0
 8007758:	f2c0 8157 	blt.w	8007a0a <_dtoa_r+0x6fa>
 800775c:	2f0e      	cmp	r7, #14
 800775e:	f300 8154 	bgt.w	8007a0a <_dtoa_r+0x6fa>
 8007762:	4b4b      	ldr	r3, [pc, #300]	@ (8007890 <_dtoa_r+0x580>)
 8007764:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007768:	ed93 7b00 	vldr	d7, [r3]
 800776c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800776e:	2b00      	cmp	r3, #0
 8007770:	ed8d 7b00 	vstr	d7, [sp]
 8007774:	f280 80e5 	bge.w	8007942 <_dtoa_r+0x632>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f300 80e1 	bgt.w	8007942 <_dtoa_r+0x632>
 8007780:	d10c      	bne.n	800779c <_dtoa_r+0x48c>
 8007782:	4b48      	ldr	r3, [pc, #288]	@ (80078a4 <_dtoa_r+0x594>)
 8007784:	2200      	movs	r2, #0
 8007786:	ec51 0b17 	vmov	r0, r1, d7
 800778a:	f7f8 ff3d 	bl	8000608 <__aeabi_dmul>
 800778e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007792:	f7f9 f9bf 	bl	8000b14 <__aeabi_dcmpge>
 8007796:	2800      	cmp	r0, #0
 8007798:	f000 8266 	beq.w	8007c68 <_dtoa_r+0x958>
 800779c:	2400      	movs	r4, #0
 800779e:	4625      	mov	r5, r4
 80077a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077a2:	4656      	mov	r6, sl
 80077a4:	ea6f 0803 	mvn.w	r8, r3
 80077a8:	2700      	movs	r7, #0
 80077aa:	4621      	mov	r1, r4
 80077ac:	4648      	mov	r0, r9
 80077ae:	f000 fcbf 	bl	8008130 <_Bfree>
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	f000 80bd 	beq.w	8007932 <_dtoa_r+0x622>
 80077b8:	b12f      	cbz	r7, 80077c6 <_dtoa_r+0x4b6>
 80077ba:	42af      	cmp	r7, r5
 80077bc:	d003      	beq.n	80077c6 <_dtoa_r+0x4b6>
 80077be:	4639      	mov	r1, r7
 80077c0:	4648      	mov	r0, r9
 80077c2:	f000 fcb5 	bl	8008130 <_Bfree>
 80077c6:	4629      	mov	r1, r5
 80077c8:	4648      	mov	r0, r9
 80077ca:	f000 fcb1 	bl	8008130 <_Bfree>
 80077ce:	e0b0      	b.n	8007932 <_dtoa_r+0x622>
 80077d0:	07e2      	lsls	r2, r4, #31
 80077d2:	d505      	bpl.n	80077e0 <_dtoa_r+0x4d0>
 80077d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077d8:	f7f8 ff16 	bl	8000608 <__aeabi_dmul>
 80077dc:	3601      	adds	r6, #1
 80077de:	2301      	movs	r3, #1
 80077e0:	1064      	asrs	r4, r4, #1
 80077e2:	3508      	adds	r5, #8
 80077e4:	e762      	b.n	80076ac <_dtoa_r+0x39c>
 80077e6:	2602      	movs	r6, #2
 80077e8:	e765      	b.n	80076b6 <_dtoa_r+0x3a6>
 80077ea:	9c03      	ldr	r4, [sp, #12]
 80077ec:	46b8      	mov	r8, r7
 80077ee:	e784      	b.n	80076fa <_dtoa_r+0x3ea>
 80077f0:	4b27      	ldr	r3, [pc, #156]	@ (8007890 <_dtoa_r+0x580>)
 80077f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077fc:	4454      	add	r4, sl
 80077fe:	2900      	cmp	r1, #0
 8007800:	d054      	beq.n	80078ac <_dtoa_r+0x59c>
 8007802:	4929      	ldr	r1, [pc, #164]	@ (80078a8 <_dtoa_r+0x598>)
 8007804:	2000      	movs	r0, #0
 8007806:	f7f9 f829 	bl	800085c <__aeabi_ddiv>
 800780a:	4633      	mov	r3, r6
 800780c:	462a      	mov	r2, r5
 800780e:	f7f8 fd43 	bl	8000298 <__aeabi_dsub>
 8007812:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007816:	4656      	mov	r6, sl
 8007818:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800781c:	f7f9 f9a4 	bl	8000b68 <__aeabi_d2iz>
 8007820:	4605      	mov	r5, r0
 8007822:	f7f8 fe87 	bl	8000534 <__aeabi_i2d>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800782e:	f7f8 fd33 	bl	8000298 <__aeabi_dsub>
 8007832:	3530      	adds	r5, #48	@ 0x30
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800783c:	f806 5b01 	strb.w	r5, [r6], #1
 8007840:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007844:	f7f9 f952 	bl	8000aec <__aeabi_dcmplt>
 8007848:	2800      	cmp	r0, #0
 800784a:	d172      	bne.n	8007932 <_dtoa_r+0x622>
 800784c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007850:	4911      	ldr	r1, [pc, #68]	@ (8007898 <_dtoa_r+0x588>)
 8007852:	2000      	movs	r0, #0
 8007854:	f7f8 fd20 	bl	8000298 <__aeabi_dsub>
 8007858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800785c:	f7f9 f946 	bl	8000aec <__aeabi_dcmplt>
 8007860:	2800      	cmp	r0, #0
 8007862:	f040 80b4 	bne.w	80079ce <_dtoa_r+0x6be>
 8007866:	42a6      	cmp	r6, r4
 8007868:	f43f af70 	beq.w	800774c <_dtoa_r+0x43c>
 800786c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007870:	4b0a      	ldr	r3, [pc, #40]	@ (800789c <_dtoa_r+0x58c>)
 8007872:	2200      	movs	r2, #0
 8007874:	f7f8 fec8 	bl	8000608 <__aeabi_dmul>
 8007878:	4b08      	ldr	r3, [pc, #32]	@ (800789c <_dtoa_r+0x58c>)
 800787a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800787e:	2200      	movs	r2, #0
 8007880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007884:	f7f8 fec0 	bl	8000608 <__aeabi_dmul>
 8007888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800788c:	e7c4      	b.n	8007818 <_dtoa_r+0x508>
 800788e:	bf00      	nop
 8007890:	080095c8 	.word	0x080095c8
 8007894:	080095a0 	.word	0x080095a0
 8007898:	3ff00000 	.word	0x3ff00000
 800789c:	40240000 	.word	0x40240000
 80078a0:	401c0000 	.word	0x401c0000
 80078a4:	40140000 	.word	0x40140000
 80078a8:	3fe00000 	.word	0x3fe00000
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7f8 feaa 	bl	8000608 <__aeabi_dmul>
 80078b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80078b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078ba:	4656      	mov	r6, sl
 80078bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c0:	f7f9 f952 	bl	8000b68 <__aeabi_d2iz>
 80078c4:	4605      	mov	r5, r0
 80078c6:	f7f8 fe35 	bl	8000534 <__aeabi_i2d>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078d2:	f7f8 fce1 	bl	8000298 <__aeabi_dsub>
 80078d6:	3530      	adds	r5, #48	@ 0x30
 80078d8:	f806 5b01 	strb.w	r5, [r6], #1
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	42a6      	cmp	r6, r4
 80078e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	d124      	bne.n	8007936 <_dtoa_r+0x626>
 80078ec:	4baf      	ldr	r3, [pc, #700]	@ (8007bac <_dtoa_r+0x89c>)
 80078ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80078f2:	f7f8 fcd3 	bl	800029c <__adddf3>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078fe:	f7f9 f913 	bl	8000b28 <__aeabi_dcmpgt>
 8007902:	2800      	cmp	r0, #0
 8007904:	d163      	bne.n	80079ce <_dtoa_r+0x6be>
 8007906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800790a:	49a8      	ldr	r1, [pc, #672]	@ (8007bac <_dtoa_r+0x89c>)
 800790c:	2000      	movs	r0, #0
 800790e:	f7f8 fcc3 	bl	8000298 <__aeabi_dsub>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800791a:	f7f9 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f43f af14 	beq.w	800774c <_dtoa_r+0x43c>
 8007924:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007926:	1e73      	subs	r3, r6, #1
 8007928:	9313      	str	r3, [sp, #76]	@ 0x4c
 800792a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800792e:	2b30      	cmp	r3, #48	@ 0x30
 8007930:	d0f8      	beq.n	8007924 <_dtoa_r+0x614>
 8007932:	4647      	mov	r7, r8
 8007934:	e03b      	b.n	80079ae <_dtoa_r+0x69e>
 8007936:	4b9e      	ldr	r3, [pc, #632]	@ (8007bb0 <_dtoa_r+0x8a0>)
 8007938:	f7f8 fe66 	bl	8000608 <__aeabi_dmul>
 800793c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007940:	e7bc      	b.n	80078bc <_dtoa_r+0x5ac>
 8007942:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007946:	4656      	mov	r6, sl
 8007948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800794c:	4620      	mov	r0, r4
 800794e:	4629      	mov	r1, r5
 8007950:	f7f8 ff84 	bl	800085c <__aeabi_ddiv>
 8007954:	f7f9 f908 	bl	8000b68 <__aeabi_d2iz>
 8007958:	4680      	mov	r8, r0
 800795a:	f7f8 fdeb 	bl	8000534 <__aeabi_i2d>
 800795e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007962:	f7f8 fe51 	bl	8000608 <__aeabi_dmul>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007972:	f7f8 fc91 	bl	8000298 <__aeabi_dsub>
 8007976:	f806 4b01 	strb.w	r4, [r6], #1
 800797a:	9d03      	ldr	r5, [sp, #12]
 800797c:	eba6 040a 	sub.w	r4, r6, sl
 8007980:	42a5      	cmp	r5, r4
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	d133      	bne.n	80079f0 <_dtoa_r+0x6e0>
 8007988:	f7f8 fc88 	bl	800029c <__adddf3>
 800798c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007990:	4604      	mov	r4, r0
 8007992:	460d      	mov	r5, r1
 8007994:	f7f9 f8c8 	bl	8000b28 <__aeabi_dcmpgt>
 8007998:	b9c0      	cbnz	r0, 80079cc <_dtoa_r+0x6bc>
 800799a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f9 f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a6:	b110      	cbz	r0, 80079ae <_dtoa_r+0x69e>
 80079a8:	f018 0f01 	tst.w	r8, #1
 80079ac:	d10e      	bne.n	80079cc <_dtoa_r+0x6bc>
 80079ae:	9902      	ldr	r1, [sp, #8]
 80079b0:	4648      	mov	r0, r9
 80079b2:	f000 fbbd 	bl	8008130 <_Bfree>
 80079b6:	2300      	movs	r3, #0
 80079b8:	7033      	strb	r3, [r6, #0]
 80079ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079bc:	3701      	adds	r7, #1
 80079be:	601f      	str	r7, [r3, #0]
 80079c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 824b 	beq.w	8007e5e <_dtoa_r+0xb4e>
 80079c8:	601e      	str	r6, [r3, #0]
 80079ca:	e248      	b.n	8007e5e <_dtoa_r+0xb4e>
 80079cc:	46b8      	mov	r8, r7
 80079ce:	4633      	mov	r3, r6
 80079d0:	461e      	mov	r6, r3
 80079d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079d6:	2a39      	cmp	r2, #57	@ 0x39
 80079d8:	d106      	bne.n	80079e8 <_dtoa_r+0x6d8>
 80079da:	459a      	cmp	sl, r3
 80079dc:	d1f8      	bne.n	80079d0 <_dtoa_r+0x6c0>
 80079de:	2230      	movs	r2, #48	@ 0x30
 80079e0:	f108 0801 	add.w	r8, r8, #1
 80079e4:	f88a 2000 	strb.w	r2, [sl]
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	3201      	adds	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e7a0      	b.n	8007932 <_dtoa_r+0x622>
 80079f0:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb0 <_dtoa_r+0x8a0>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	f7f8 fe08 	bl	8000608 <__aeabi_dmul>
 80079f8:	2200      	movs	r2, #0
 80079fa:	2300      	movs	r3, #0
 80079fc:	4604      	mov	r4, r0
 80079fe:	460d      	mov	r5, r1
 8007a00:	f7f9 f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d09f      	beq.n	8007948 <_dtoa_r+0x638>
 8007a08:	e7d1      	b.n	80079ae <_dtoa_r+0x69e>
 8007a0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	f000 80ea 	beq.w	8007be6 <_dtoa_r+0x8d6>
 8007a12:	9a07      	ldr	r2, [sp, #28]
 8007a14:	2a01      	cmp	r2, #1
 8007a16:	f300 80cd 	bgt.w	8007bb4 <_dtoa_r+0x8a4>
 8007a1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	f000 80c1 	beq.w	8007ba4 <_dtoa_r+0x894>
 8007a22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a26:	9c08      	ldr	r4, [sp, #32]
 8007a28:	9e00      	ldr	r6, [sp, #0]
 8007a2a:	9a00      	ldr	r2, [sp, #0]
 8007a2c:	441a      	add	r2, r3
 8007a2e:	9200      	str	r2, [sp, #0]
 8007a30:	9a06      	ldr	r2, [sp, #24]
 8007a32:	2101      	movs	r1, #1
 8007a34:	441a      	add	r2, r3
 8007a36:	4648      	mov	r0, r9
 8007a38:	9206      	str	r2, [sp, #24]
 8007a3a:	f000 fc2d 	bl	8008298 <__i2b>
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b166      	cbz	r6, 8007a5c <_dtoa_r+0x74c>
 8007a42:	9b06      	ldr	r3, [sp, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dd09      	ble.n	8007a5c <_dtoa_r+0x74c>
 8007a48:	42b3      	cmp	r3, r6
 8007a4a:	9a00      	ldr	r2, [sp, #0]
 8007a4c:	bfa8      	it	ge
 8007a4e:	4633      	movge	r3, r6
 8007a50:	1ad2      	subs	r2, r2, r3
 8007a52:	9200      	str	r2, [sp, #0]
 8007a54:	9a06      	ldr	r2, [sp, #24]
 8007a56:	1af6      	subs	r6, r6, r3
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	9306      	str	r3, [sp, #24]
 8007a5c:	9b08      	ldr	r3, [sp, #32]
 8007a5e:	b30b      	cbz	r3, 8007aa4 <_dtoa_r+0x794>
 8007a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80c6 	beq.w	8007bf4 <_dtoa_r+0x8e4>
 8007a68:	2c00      	cmp	r4, #0
 8007a6a:	f000 80c0 	beq.w	8007bee <_dtoa_r+0x8de>
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4622      	mov	r2, r4
 8007a72:	4648      	mov	r0, r9
 8007a74:	f000 fcc8 	bl	8008408 <__pow5mult>
 8007a78:	9a02      	ldr	r2, [sp, #8]
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	4648      	mov	r0, r9
 8007a80:	f000 fc20 	bl	80082c4 <__multiply>
 8007a84:	9902      	ldr	r1, [sp, #8]
 8007a86:	4680      	mov	r8, r0
 8007a88:	4648      	mov	r0, r9
 8007a8a:	f000 fb51 	bl	8008130 <_Bfree>
 8007a8e:	9b08      	ldr	r3, [sp, #32]
 8007a90:	1b1b      	subs	r3, r3, r4
 8007a92:	9308      	str	r3, [sp, #32]
 8007a94:	f000 80b1 	beq.w	8007bfa <_dtoa_r+0x8ea>
 8007a98:	9a08      	ldr	r2, [sp, #32]
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	4648      	mov	r0, r9
 8007a9e:	f000 fcb3 	bl	8008408 <__pow5mult>
 8007aa2:	9002      	str	r0, [sp, #8]
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	f000 fbf6 	bl	8008298 <__i2b>
 8007aac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007aae:	4604      	mov	r4, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 81d8 	beq.w	8007e66 <_dtoa_r+0xb56>
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4601      	mov	r1, r0
 8007aba:	4648      	mov	r0, r9
 8007abc:	f000 fca4 	bl	8008408 <__pow5mult>
 8007ac0:	9b07      	ldr	r3, [sp, #28]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	f300 809f 	bgt.w	8007c08 <_dtoa_r+0x8f8>
 8007aca:	9b04      	ldr	r3, [sp, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f040 8097 	bne.w	8007c00 <_dtoa_r+0x8f0>
 8007ad2:	9b05      	ldr	r3, [sp, #20]
 8007ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f040 8093 	bne.w	8007c04 <_dtoa_r+0x8f4>
 8007ade:	9b05      	ldr	r3, [sp, #20]
 8007ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ae4:	0d1b      	lsrs	r3, r3, #20
 8007ae6:	051b      	lsls	r3, r3, #20
 8007ae8:	b133      	cbz	r3, 8007af8 <_dtoa_r+0x7e8>
 8007aea:	9b00      	ldr	r3, [sp, #0]
 8007aec:	3301      	adds	r3, #1
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	9b06      	ldr	r3, [sp, #24]
 8007af2:	3301      	adds	r3, #1
 8007af4:	9306      	str	r3, [sp, #24]
 8007af6:	2301      	movs	r3, #1
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 81b8 	beq.w	8007e72 <_dtoa_r+0xb62>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b08:	6918      	ldr	r0, [r3, #16]
 8007b0a:	f000 fb79 	bl	8008200 <__hi0bits>
 8007b0e:	f1c0 0020 	rsb	r0, r0, #32
 8007b12:	9b06      	ldr	r3, [sp, #24]
 8007b14:	4418      	add	r0, r3
 8007b16:	f010 001f 	ands.w	r0, r0, #31
 8007b1a:	f000 8082 	beq.w	8007c22 <_dtoa_r+0x912>
 8007b1e:	f1c0 0320 	rsb	r3, r0, #32
 8007b22:	2b04      	cmp	r3, #4
 8007b24:	dd73      	ble.n	8007c0e <_dtoa_r+0x8fe>
 8007b26:	9b00      	ldr	r3, [sp, #0]
 8007b28:	f1c0 001c 	rsb	r0, r0, #28
 8007b2c:	4403      	add	r3, r0
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	4403      	add	r3, r0
 8007b34:	4406      	add	r6, r0
 8007b36:	9306      	str	r3, [sp, #24]
 8007b38:	9b00      	ldr	r3, [sp, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dd05      	ble.n	8007b4a <_dtoa_r+0x83a>
 8007b3e:	9902      	ldr	r1, [sp, #8]
 8007b40:	461a      	mov	r2, r3
 8007b42:	4648      	mov	r0, r9
 8007b44:	f000 fcba 	bl	80084bc <__lshift>
 8007b48:	9002      	str	r0, [sp, #8]
 8007b4a:	9b06      	ldr	r3, [sp, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	dd05      	ble.n	8007b5c <_dtoa_r+0x84c>
 8007b50:	4621      	mov	r1, r4
 8007b52:	461a      	mov	r2, r3
 8007b54:	4648      	mov	r0, r9
 8007b56:	f000 fcb1 	bl	80084bc <__lshift>
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d061      	beq.n	8007c26 <_dtoa_r+0x916>
 8007b62:	9802      	ldr	r0, [sp, #8]
 8007b64:	4621      	mov	r1, r4
 8007b66:	f000 fd15 	bl	8008594 <__mcmp>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	da5b      	bge.n	8007c26 <_dtoa_r+0x916>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	9902      	ldr	r1, [sp, #8]
 8007b72:	220a      	movs	r2, #10
 8007b74:	4648      	mov	r0, r9
 8007b76:	f000 fafd 	bl	8008174 <__multadd>
 8007b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7c:	9002      	str	r0, [sp, #8]
 8007b7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8177 	beq.w	8007e76 <_dtoa_r+0xb66>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	220a      	movs	r2, #10
 8007b8e:	4648      	mov	r0, r9
 8007b90:	f000 faf0 	bl	8008174 <__multadd>
 8007b94:	f1bb 0f00 	cmp.w	fp, #0
 8007b98:	4605      	mov	r5, r0
 8007b9a:	dc6f      	bgt.n	8007c7c <_dtoa_r+0x96c>
 8007b9c:	9b07      	ldr	r3, [sp, #28]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	dc49      	bgt.n	8007c36 <_dtoa_r+0x926>
 8007ba2:	e06b      	b.n	8007c7c <_dtoa_r+0x96c>
 8007ba4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ba6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007baa:	e73c      	b.n	8007a26 <_dtoa_r+0x716>
 8007bac:	3fe00000 	.word	0x3fe00000
 8007bb0:	40240000 	.word	0x40240000
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	1e5c      	subs	r4, r3, #1
 8007bb8:	9b08      	ldr	r3, [sp, #32]
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	db09      	blt.n	8007bd2 <_dtoa_r+0x8c2>
 8007bbe:	1b1c      	subs	r4, r3, r4
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f6bf af30 	bge.w	8007a28 <_dtoa_r+0x718>
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	9a03      	ldr	r2, [sp, #12]
 8007bcc:	1a9e      	subs	r6, r3, r2
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e72b      	b.n	8007a2a <_dtoa_r+0x71a>
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bd6:	9408      	str	r4, [sp, #32]
 8007bd8:	1ae3      	subs	r3, r4, r3
 8007bda:	441a      	add	r2, r3
 8007bdc:	9e00      	ldr	r6, [sp, #0]
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007be2:	2400      	movs	r4, #0
 8007be4:	e721      	b.n	8007a2a <_dtoa_r+0x71a>
 8007be6:	9c08      	ldr	r4, [sp, #32]
 8007be8:	9e00      	ldr	r6, [sp, #0]
 8007bea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007bec:	e728      	b.n	8007a40 <_dtoa_r+0x730>
 8007bee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007bf2:	e751      	b.n	8007a98 <_dtoa_r+0x788>
 8007bf4:	9a08      	ldr	r2, [sp, #32]
 8007bf6:	9902      	ldr	r1, [sp, #8]
 8007bf8:	e750      	b.n	8007a9c <_dtoa_r+0x78c>
 8007bfa:	f8cd 8008 	str.w	r8, [sp, #8]
 8007bfe:	e751      	b.n	8007aa4 <_dtoa_r+0x794>
 8007c00:	2300      	movs	r3, #0
 8007c02:	e779      	b.n	8007af8 <_dtoa_r+0x7e8>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	e777      	b.n	8007af8 <_dtoa_r+0x7e8>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9308      	str	r3, [sp, #32]
 8007c0c:	e779      	b.n	8007b02 <_dtoa_r+0x7f2>
 8007c0e:	d093      	beq.n	8007b38 <_dtoa_r+0x828>
 8007c10:	9a00      	ldr	r2, [sp, #0]
 8007c12:	331c      	adds	r3, #28
 8007c14:	441a      	add	r2, r3
 8007c16:	9200      	str	r2, [sp, #0]
 8007c18:	9a06      	ldr	r2, [sp, #24]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	441e      	add	r6, r3
 8007c1e:	9206      	str	r2, [sp, #24]
 8007c20:	e78a      	b.n	8007b38 <_dtoa_r+0x828>
 8007c22:	4603      	mov	r3, r0
 8007c24:	e7f4      	b.n	8007c10 <_dtoa_r+0x900>
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	46b8      	mov	r8, r7
 8007c2c:	dc20      	bgt.n	8007c70 <_dtoa_r+0x960>
 8007c2e:	469b      	mov	fp, r3
 8007c30:	9b07      	ldr	r3, [sp, #28]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	dd1e      	ble.n	8007c74 <_dtoa_r+0x964>
 8007c36:	f1bb 0f00 	cmp.w	fp, #0
 8007c3a:	f47f adb1 	bne.w	80077a0 <_dtoa_r+0x490>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	465b      	mov	r3, fp
 8007c42:	2205      	movs	r2, #5
 8007c44:	4648      	mov	r0, r9
 8007c46:	f000 fa95 	bl	8008174 <__multadd>
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	9802      	ldr	r0, [sp, #8]
 8007c50:	f000 fca0 	bl	8008594 <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f77f ada3 	ble.w	80077a0 <_dtoa_r+0x490>
 8007c5a:	4656      	mov	r6, sl
 8007c5c:	2331      	movs	r3, #49	@ 0x31
 8007c5e:	f806 3b01 	strb.w	r3, [r6], #1
 8007c62:	f108 0801 	add.w	r8, r8, #1
 8007c66:	e59f      	b.n	80077a8 <_dtoa_r+0x498>
 8007c68:	9c03      	ldr	r4, [sp, #12]
 8007c6a:	46b8      	mov	r8, r7
 8007c6c:	4625      	mov	r5, r4
 8007c6e:	e7f4      	b.n	8007c5a <_dtoa_r+0x94a>
 8007c70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 8101 	beq.w	8007e7e <_dtoa_r+0xb6e>
 8007c7c:	2e00      	cmp	r6, #0
 8007c7e:	dd05      	ble.n	8007c8c <_dtoa_r+0x97c>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4632      	mov	r2, r6
 8007c84:	4648      	mov	r0, r9
 8007c86:	f000 fc19 	bl	80084bc <__lshift>
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	9b08      	ldr	r3, [sp, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d05c      	beq.n	8007d4c <_dtoa_r+0xa3c>
 8007c92:	6869      	ldr	r1, [r5, #4]
 8007c94:	4648      	mov	r0, r9
 8007c96:	f000 fa0b 	bl	80080b0 <_Balloc>
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	b928      	cbnz	r0, 8007caa <_dtoa_r+0x99a>
 8007c9e:	4b82      	ldr	r3, [pc, #520]	@ (8007ea8 <_dtoa_r+0xb98>)
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ca6:	f7ff bb4a 	b.w	800733e <_dtoa_r+0x2e>
 8007caa:	692a      	ldr	r2, [r5, #16]
 8007cac:	3202      	adds	r2, #2
 8007cae:	0092      	lsls	r2, r2, #2
 8007cb0:	f105 010c 	add.w	r1, r5, #12
 8007cb4:	300c      	adds	r0, #12
 8007cb6:	f000 ffa3 	bl	8008c00 <memcpy>
 8007cba:	2201      	movs	r2, #1
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4648      	mov	r0, r9
 8007cc0:	f000 fbfc 	bl	80084bc <__lshift>
 8007cc4:	f10a 0301 	add.w	r3, sl, #1
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	eb0a 030b 	add.w	r3, sl, fp
 8007cce:	9308      	str	r3, [sp, #32]
 8007cd0:	9b04      	ldr	r3, [sp, #16]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	462f      	mov	r7, r5
 8007cd8:	9306      	str	r3, [sp, #24]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	9802      	ldr	r0, [sp, #8]
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ce6:	f7ff fa88 	bl	80071fa <quorem>
 8007cea:	4603      	mov	r3, r0
 8007cec:	3330      	adds	r3, #48	@ 0x30
 8007cee:	9003      	str	r0, [sp, #12]
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	9802      	ldr	r0, [sp, #8]
 8007cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf6:	f000 fc4d 	bl	8008594 <__mcmp>
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	9004      	str	r0, [sp, #16]
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4648      	mov	r0, r9
 8007d02:	f000 fc63 	bl	80085cc <__mdiff>
 8007d06:	68c2      	ldr	r2, [r0, #12]
 8007d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	bb02      	cbnz	r2, 8007d50 <_dtoa_r+0xa40>
 8007d0e:	4601      	mov	r1, r0
 8007d10:	9802      	ldr	r0, [sp, #8]
 8007d12:	f000 fc3f 	bl	8008594 <__mcmp>
 8007d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d18:	4602      	mov	r2, r0
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4648      	mov	r0, r9
 8007d1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d22:	f000 fa05 	bl	8008130 <_Bfree>
 8007d26:	9b07      	ldr	r3, [sp, #28]
 8007d28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d2a:	9e00      	ldr	r6, [sp, #0]
 8007d2c:	ea42 0103 	orr.w	r1, r2, r3
 8007d30:	9b06      	ldr	r3, [sp, #24]
 8007d32:	4319      	orrs	r1, r3
 8007d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d36:	d10d      	bne.n	8007d54 <_dtoa_r+0xa44>
 8007d38:	2b39      	cmp	r3, #57	@ 0x39
 8007d3a:	d027      	beq.n	8007d8c <_dtoa_r+0xa7c>
 8007d3c:	9a04      	ldr	r2, [sp, #16]
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	dd01      	ble.n	8007d46 <_dtoa_r+0xa36>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	3331      	adds	r3, #49	@ 0x31
 8007d46:	f88b 3000 	strb.w	r3, [fp]
 8007d4a:	e52e      	b.n	80077aa <_dtoa_r+0x49a>
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	e7b9      	b.n	8007cc4 <_dtoa_r+0x9b4>
 8007d50:	2201      	movs	r2, #1
 8007d52:	e7e2      	b.n	8007d1a <_dtoa_r+0xa0a>
 8007d54:	9904      	ldr	r1, [sp, #16]
 8007d56:	2900      	cmp	r1, #0
 8007d58:	db04      	blt.n	8007d64 <_dtoa_r+0xa54>
 8007d5a:	9807      	ldr	r0, [sp, #28]
 8007d5c:	4301      	orrs	r1, r0
 8007d5e:	9806      	ldr	r0, [sp, #24]
 8007d60:	4301      	orrs	r1, r0
 8007d62:	d120      	bne.n	8007da6 <_dtoa_r+0xa96>
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	ddee      	ble.n	8007d46 <_dtoa_r+0xa36>
 8007d68:	9902      	ldr	r1, [sp, #8]
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4648      	mov	r0, r9
 8007d70:	f000 fba4 	bl	80084bc <__lshift>
 8007d74:	4621      	mov	r1, r4
 8007d76:	9002      	str	r0, [sp, #8]
 8007d78:	f000 fc0c 	bl	8008594 <__mcmp>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	dc02      	bgt.n	8007d88 <_dtoa_r+0xa78>
 8007d82:	d1e0      	bne.n	8007d46 <_dtoa_r+0xa36>
 8007d84:	07da      	lsls	r2, r3, #31
 8007d86:	d5de      	bpl.n	8007d46 <_dtoa_r+0xa36>
 8007d88:	2b39      	cmp	r3, #57	@ 0x39
 8007d8a:	d1da      	bne.n	8007d42 <_dtoa_r+0xa32>
 8007d8c:	2339      	movs	r3, #57	@ 0x39
 8007d8e:	f88b 3000 	strb.w	r3, [fp]
 8007d92:	4633      	mov	r3, r6
 8007d94:	461e      	mov	r6, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d9c:	2a39      	cmp	r2, #57	@ 0x39
 8007d9e:	d04e      	beq.n	8007e3e <_dtoa_r+0xb2e>
 8007da0:	3201      	adds	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	e501      	b.n	80077aa <_dtoa_r+0x49a>
 8007da6:	2a00      	cmp	r2, #0
 8007da8:	dd03      	ble.n	8007db2 <_dtoa_r+0xaa2>
 8007daa:	2b39      	cmp	r3, #57	@ 0x39
 8007dac:	d0ee      	beq.n	8007d8c <_dtoa_r+0xa7c>
 8007dae:	3301      	adds	r3, #1
 8007db0:	e7c9      	b.n	8007d46 <_dtoa_r+0xa36>
 8007db2:	9a00      	ldr	r2, [sp, #0]
 8007db4:	9908      	ldr	r1, [sp, #32]
 8007db6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007dba:	428a      	cmp	r2, r1
 8007dbc:	d028      	beq.n	8007e10 <_dtoa_r+0xb00>
 8007dbe:	9902      	ldr	r1, [sp, #8]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	220a      	movs	r2, #10
 8007dc4:	4648      	mov	r0, r9
 8007dc6:	f000 f9d5 	bl	8008174 <__multadd>
 8007dca:	42af      	cmp	r7, r5
 8007dcc:	9002      	str	r0, [sp, #8]
 8007dce:	f04f 0300 	mov.w	r3, #0
 8007dd2:	f04f 020a 	mov.w	r2, #10
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	4648      	mov	r0, r9
 8007dda:	d107      	bne.n	8007dec <_dtoa_r+0xadc>
 8007ddc:	f000 f9ca 	bl	8008174 <__multadd>
 8007de0:	4607      	mov	r7, r0
 8007de2:	4605      	mov	r5, r0
 8007de4:	9b00      	ldr	r3, [sp, #0]
 8007de6:	3301      	adds	r3, #1
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	e777      	b.n	8007cdc <_dtoa_r+0x9cc>
 8007dec:	f000 f9c2 	bl	8008174 <__multadd>
 8007df0:	4629      	mov	r1, r5
 8007df2:	4607      	mov	r7, r0
 8007df4:	2300      	movs	r3, #0
 8007df6:	220a      	movs	r2, #10
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f000 f9bb 	bl	8008174 <__multadd>
 8007dfe:	4605      	mov	r5, r0
 8007e00:	e7f0      	b.n	8007de4 <_dtoa_r+0xad4>
 8007e02:	f1bb 0f00 	cmp.w	fp, #0
 8007e06:	bfcc      	ite	gt
 8007e08:	465e      	movgt	r6, fp
 8007e0a:	2601      	movle	r6, #1
 8007e0c:	4456      	add	r6, sl
 8007e0e:	2700      	movs	r7, #0
 8007e10:	9902      	ldr	r1, [sp, #8]
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	4648      	mov	r0, r9
 8007e18:	f000 fb50 	bl	80084bc <__lshift>
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	9002      	str	r0, [sp, #8]
 8007e20:	f000 fbb8 	bl	8008594 <__mcmp>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	dcb4      	bgt.n	8007d92 <_dtoa_r+0xa82>
 8007e28:	d102      	bne.n	8007e30 <_dtoa_r+0xb20>
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	07db      	lsls	r3, r3, #31
 8007e2e:	d4b0      	bmi.n	8007d92 <_dtoa_r+0xa82>
 8007e30:	4633      	mov	r3, r6
 8007e32:	461e      	mov	r6, r3
 8007e34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e38:	2a30      	cmp	r2, #48	@ 0x30
 8007e3a:	d0fa      	beq.n	8007e32 <_dtoa_r+0xb22>
 8007e3c:	e4b5      	b.n	80077aa <_dtoa_r+0x49a>
 8007e3e:	459a      	cmp	sl, r3
 8007e40:	d1a8      	bne.n	8007d94 <_dtoa_r+0xa84>
 8007e42:	2331      	movs	r3, #49	@ 0x31
 8007e44:	f108 0801 	add.w	r8, r8, #1
 8007e48:	f88a 3000 	strb.w	r3, [sl]
 8007e4c:	e4ad      	b.n	80077aa <_dtoa_r+0x49a>
 8007e4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007eac <_dtoa_r+0xb9c>
 8007e54:	b11b      	cbz	r3, 8007e5e <_dtoa_r+0xb4e>
 8007e56:	f10a 0308 	add.w	r3, sl, #8
 8007e5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	4650      	mov	r0, sl
 8007e60:	b017      	add	sp, #92	@ 0x5c
 8007e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e66:	9b07      	ldr	r3, [sp, #28]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	f77f ae2e 	ble.w	8007aca <_dtoa_r+0x7ba>
 8007e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e70:	9308      	str	r3, [sp, #32]
 8007e72:	2001      	movs	r0, #1
 8007e74:	e64d      	b.n	8007b12 <_dtoa_r+0x802>
 8007e76:	f1bb 0f00 	cmp.w	fp, #0
 8007e7a:	f77f aed9 	ble.w	8007c30 <_dtoa_r+0x920>
 8007e7e:	4656      	mov	r6, sl
 8007e80:	9802      	ldr	r0, [sp, #8]
 8007e82:	4621      	mov	r1, r4
 8007e84:	f7ff f9b9 	bl	80071fa <quorem>
 8007e88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e90:	eba6 020a 	sub.w	r2, r6, sl
 8007e94:	4593      	cmp	fp, r2
 8007e96:	ddb4      	ble.n	8007e02 <_dtoa_r+0xaf2>
 8007e98:	9902      	ldr	r1, [sp, #8]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	4648      	mov	r0, r9
 8007ea0:	f000 f968 	bl	8008174 <__multadd>
 8007ea4:	9002      	str	r0, [sp, #8]
 8007ea6:	e7eb      	b.n	8007e80 <_dtoa_r+0xb70>
 8007ea8:	080094d0 	.word	0x080094d0
 8007eac:	08009454 	.word	0x08009454

08007eb0 <_free_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	2900      	cmp	r1, #0
 8007eb6:	d041      	beq.n	8007f3c <_free_r+0x8c>
 8007eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ebc:	1f0c      	subs	r4, r1, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfb8      	it	lt
 8007ec2:	18e4      	addlt	r4, r4, r3
 8007ec4:	f000 f8e8 	bl	8008098 <__malloc_lock>
 8007ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f40 <_free_r+0x90>)
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	b933      	cbnz	r3, 8007edc <_free_r+0x2c>
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed8:	f000 b8e4 	b.w	80080a4 <__malloc_unlock>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d908      	bls.n	8007ef2 <_free_r+0x42>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	1821      	adds	r1, r4, r0
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf01      	itttt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	1809      	addeq	r1, r1, r0
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	e7ed      	b.n	8007ece <_free_r+0x1e>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b10b      	cbz	r3, 8007efc <_free_r+0x4c>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d9fa      	bls.n	8007ef2 <_free_r+0x42>
 8007efc:	6811      	ldr	r1, [r2, #0]
 8007efe:	1850      	adds	r0, r2, r1
 8007f00:	42a0      	cmp	r0, r4
 8007f02:	d10b      	bne.n	8007f1c <_free_r+0x6c>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	4401      	add	r1, r0
 8007f08:	1850      	adds	r0, r2, r1
 8007f0a:	4283      	cmp	r3, r0
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	d1e0      	bne.n	8007ed2 <_free_r+0x22>
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	6053      	str	r3, [r2, #4]
 8007f16:	4408      	add	r0, r1
 8007f18:	6010      	str	r0, [r2, #0]
 8007f1a:	e7da      	b.n	8007ed2 <_free_r+0x22>
 8007f1c:	d902      	bls.n	8007f24 <_free_r+0x74>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	e7d6      	b.n	8007ed2 <_free_r+0x22>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	1821      	adds	r1, r4, r0
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf04      	itt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	bf04      	itt	eq
 8007f34:	1809      	addeq	r1, r1, r0
 8007f36:	6021      	streq	r1, [r4, #0]
 8007f38:	6054      	str	r4, [r2, #4]
 8007f3a:	e7ca      	b.n	8007ed2 <_free_r+0x22>
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000650 	.word	0x20000650

08007f44 <malloc>:
 8007f44:	4b02      	ldr	r3, [pc, #8]	@ (8007f50 <malloc+0xc>)
 8007f46:	4601      	mov	r1, r0
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	f000 b825 	b.w	8007f98 <_malloc_r>
 8007f4e:	bf00      	nop
 8007f50:	20000018 	.word	0x20000018

08007f54 <sbrk_aligned>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4e0f      	ldr	r6, [pc, #60]	@ (8007f94 <sbrk_aligned+0x40>)
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6831      	ldr	r1, [r6, #0]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	b911      	cbnz	r1, 8007f66 <sbrk_aligned+0x12>
 8007f60:	f000 fe3e 	bl	8008be0 <_sbrk_r>
 8007f64:	6030      	str	r0, [r6, #0]
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f000 fe39 	bl	8008be0 <_sbrk_r>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d103      	bne.n	8007f7a <sbrk_aligned+0x26>
 8007f72:	f04f 34ff 	mov.w	r4, #4294967295
 8007f76:	4620      	mov	r0, r4
 8007f78:	bd70      	pop	{r4, r5, r6, pc}
 8007f7a:	1cc4      	adds	r4, r0, #3
 8007f7c:	f024 0403 	bic.w	r4, r4, #3
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d0f8      	beq.n	8007f76 <sbrk_aligned+0x22>
 8007f84:	1a21      	subs	r1, r4, r0
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 fe2a 	bl	8008be0 <_sbrk_r>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d1f2      	bne.n	8007f76 <sbrk_aligned+0x22>
 8007f90:	e7ef      	b.n	8007f72 <sbrk_aligned+0x1e>
 8007f92:	bf00      	nop
 8007f94:	2000064c 	.word	0x2000064c

08007f98 <_malloc_r>:
 8007f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f9c:	1ccd      	adds	r5, r1, #3
 8007f9e:	f025 0503 	bic.w	r5, r5, #3
 8007fa2:	3508      	adds	r5, #8
 8007fa4:	2d0c      	cmp	r5, #12
 8007fa6:	bf38      	it	cc
 8007fa8:	250c      	movcc	r5, #12
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	4606      	mov	r6, r0
 8007fae:	db01      	blt.n	8007fb4 <_malloc_r+0x1c>
 8007fb0:	42a9      	cmp	r1, r5
 8007fb2:	d904      	bls.n	8007fbe <_malloc_r+0x26>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	6033      	str	r3, [r6, #0]
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008094 <_malloc_r+0xfc>
 8007fc2:	f000 f869 	bl	8008098 <__malloc_lock>
 8007fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fca:	461c      	mov	r4, r3
 8007fcc:	bb44      	cbnz	r4, 8008020 <_malloc_r+0x88>
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff ffbf 	bl	8007f54 <sbrk_aligned>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	4604      	mov	r4, r0
 8007fda:	d158      	bne.n	800808e <_malloc_r+0xf6>
 8007fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8007fe0:	4627      	mov	r7, r4
 8007fe2:	2f00      	cmp	r7, #0
 8007fe4:	d143      	bne.n	800806e <_malloc_r+0xd6>
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	d04b      	beq.n	8008082 <_malloc_r+0xea>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	4639      	mov	r1, r7
 8007fee:	4630      	mov	r0, r6
 8007ff0:	eb04 0903 	add.w	r9, r4, r3
 8007ff4:	f000 fdf4 	bl	8008be0 <_sbrk_r>
 8007ff8:	4581      	cmp	r9, r0
 8007ffa:	d142      	bne.n	8008082 <_malloc_r+0xea>
 8007ffc:	6821      	ldr	r1, [r4, #0]
 8007ffe:	1a6d      	subs	r5, r5, r1
 8008000:	4629      	mov	r1, r5
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff ffa6 	bl	8007f54 <sbrk_aligned>
 8008008:	3001      	adds	r0, #1
 800800a:	d03a      	beq.n	8008082 <_malloc_r+0xea>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	442b      	add	r3, r5
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	f8d8 3000 	ldr.w	r3, [r8]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	bb62      	cbnz	r2, 8008074 <_malloc_r+0xdc>
 800801a:	f8c8 7000 	str.w	r7, [r8]
 800801e:	e00f      	b.n	8008040 <_malloc_r+0xa8>
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	1b52      	subs	r2, r2, r5
 8008024:	d420      	bmi.n	8008068 <_malloc_r+0xd0>
 8008026:	2a0b      	cmp	r2, #11
 8008028:	d917      	bls.n	800805a <_malloc_r+0xc2>
 800802a:	1961      	adds	r1, r4, r5
 800802c:	42a3      	cmp	r3, r4
 800802e:	6025      	str	r5, [r4, #0]
 8008030:	bf18      	it	ne
 8008032:	6059      	strne	r1, [r3, #4]
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	bf08      	it	eq
 8008038:	f8c8 1000 	streq.w	r1, [r8]
 800803c:	5162      	str	r2, [r4, r5]
 800803e:	604b      	str	r3, [r1, #4]
 8008040:	4630      	mov	r0, r6
 8008042:	f000 f82f 	bl	80080a4 <__malloc_unlock>
 8008046:	f104 000b 	add.w	r0, r4, #11
 800804a:	1d23      	adds	r3, r4, #4
 800804c:	f020 0007 	bic.w	r0, r0, #7
 8008050:	1ac2      	subs	r2, r0, r3
 8008052:	bf1c      	itt	ne
 8008054:	1a1b      	subne	r3, r3, r0
 8008056:	50a3      	strne	r3, [r4, r2]
 8008058:	e7af      	b.n	8007fba <_malloc_r+0x22>
 800805a:	6862      	ldr	r2, [r4, #4]
 800805c:	42a3      	cmp	r3, r4
 800805e:	bf0c      	ite	eq
 8008060:	f8c8 2000 	streq.w	r2, [r8]
 8008064:	605a      	strne	r2, [r3, #4]
 8008066:	e7eb      	b.n	8008040 <_malloc_r+0xa8>
 8008068:	4623      	mov	r3, r4
 800806a:	6864      	ldr	r4, [r4, #4]
 800806c:	e7ae      	b.n	8007fcc <_malloc_r+0x34>
 800806e:	463c      	mov	r4, r7
 8008070:	687f      	ldr	r7, [r7, #4]
 8008072:	e7b6      	b.n	8007fe2 <_malloc_r+0x4a>
 8008074:	461a      	mov	r2, r3
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	42a3      	cmp	r3, r4
 800807a:	d1fb      	bne.n	8008074 <_malloc_r+0xdc>
 800807c:	2300      	movs	r3, #0
 800807e:	6053      	str	r3, [r2, #4]
 8008080:	e7de      	b.n	8008040 <_malloc_r+0xa8>
 8008082:	230c      	movs	r3, #12
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	4630      	mov	r0, r6
 8008088:	f000 f80c 	bl	80080a4 <__malloc_unlock>
 800808c:	e794      	b.n	8007fb8 <_malloc_r+0x20>
 800808e:	6005      	str	r5, [r0, #0]
 8008090:	e7d6      	b.n	8008040 <_malloc_r+0xa8>
 8008092:	bf00      	nop
 8008094:	20000650 	.word	0x20000650

08008098 <__malloc_lock>:
 8008098:	4801      	ldr	r0, [pc, #4]	@ (80080a0 <__malloc_lock+0x8>)
 800809a:	f7ff b8ac 	b.w	80071f6 <__retarget_lock_acquire_recursive>
 800809e:	bf00      	nop
 80080a0:	20000648 	.word	0x20000648

080080a4 <__malloc_unlock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__malloc_unlock+0x8>)
 80080a6:	f7ff b8a7 	b.w	80071f8 <__retarget_lock_release_recursive>
 80080aa:	bf00      	nop
 80080ac:	20000648 	.word	0x20000648

080080b0 <_Balloc>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	69c6      	ldr	r6, [r0, #28]
 80080b4:	4604      	mov	r4, r0
 80080b6:	460d      	mov	r5, r1
 80080b8:	b976      	cbnz	r6, 80080d8 <_Balloc+0x28>
 80080ba:	2010      	movs	r0, #16
 80080bc:	f7ff ff42 	bl	8007f44 <malloc>
 80080c0:	4602      	mov	r2, r0
 80080c2:	61e0      	str	r0, [r4, #28]
 80080c4:	b920      	cbnz	r0, 80080d0 <_Balloc+0x20>
 80080c6:	4b18      	ldr	r3, [pc, #96]	@ (8008128 <_Balloc+0x78>)
 80080c8:	4818      	ldr	r0, [pc, #96]	@ (800812c <_Balloc+0x7c>)
 80080ca:	216b      	movs	r1, #107	@ 0x6b
 80080cc:	f000 fda6 	bl	8008c1c <__assert_func>
 80080d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080d4:	6006      	str	r6, [r0, #0]
 80080d6:	60c6      	str	r6, [r0, #12]
 80080d8:	69e6      	ldr	r6, [r4, #28]
 80080da:	68f3      	ldr	r3, [r6, #12]
 80080dc:	b183      	cbz	r3, 8008100 <_Balloc+0x50>
 80080de:	69e3      	ldr	r3, [r4, #28]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080e6:	b9b8      	cbnz	r0, 8008118 <_Balloc+0x68>
 80080e8:	2101      	movs	r1, #1
 80080ea:	fa01 f605 	lsl.w	r6, r1, r5
 80080ee:	1d72      	adds	r2, r6, #5
 80080f0:	0092      	lsls	r2, r2, #2
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 fdb0 	bl	8008c58 <_calloc_r>
 80080f8:	b160      	cbz	r0, 8008114 <_Balloc+0x64>
 80080fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080fe:	e00e      	b.n	800811e <_Balloc+0x6e>
 8008100:	2221      	movs	r2, #33	@ 0x21
 8008102:	2104      	movs	r1, #4
 8008104:	4620      	mov	r0, r4
 8008106:	f000 fda7 	bl	8008c58 <_calloc_r>
 800810a:	69e3      	ldr	r3, [r4, #28]
 800810c:	60f0      	str	r0, [r6, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e4      	bne.n	80080de <_Balloc+0x2e>
 8008114:	2000      	movs	r0, #0
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	6802      	ldr	r2, [r0, #0]
 800811a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800811e:	2300      	movs	r3, #0
 8008120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008124:	e7f7      	b.n	8008116 <_Balloc+0x66>
 8008126:	bf00      	nop
 8008128:	08009461 	.word	0x08009461
 800812c:	080094e1 	.word	0x080094e1

08008130 <_Bfree>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	69c6      	ldr	r6, [r0, #28]
 8008134:	4605      	mov	r5, r0
 8008136:	460c      	mov	r4, r1
 8008138:	b976      	cbnz	r6, 8008158 <_Bfree+0x28>
 800813a:	2010      	movs	r0, #16
 800813c:	f7ff ff02 	bl	8007f44 <malloc>
 8008140:	4602      	mov	r2, r0
 8008142:	61e8      	str	r0, [r5, #28]
 8008144:	b920      	cbnz	r0, 8008150 <_Bfree+0x20>
 8008146:	4b09      	ldr	r3, [pc, #36]	@ (800816c <_Bfree+0x3c>)
 8008148:	4809      	ldr	r0, [pc, #36]	@ (8008170 <_Bfree+0x40>)
 800814a:	218f      	movs	r1, #143	@ 0x8f
 800814c:	f000 fd66 	bl	8008c1c <__assert_func>
 8008150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008154:	6006      	str	r6, [r0, #0]
 8008156:	60c6      	str	r6, [r0, #12]
 8008158:	b13c      	cbz	r4, 800816a <_Bfree+0x3a>
 800815a:	69eb      	ldr	r3, [r5, #28]
 800815c:	6862      	ldr	r2, [r4, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008164:	6021      	str	r1, [r4, #0]
 8008166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	08009461 	.word	0x08009461
 8008170:	080094e1 	.word	0x080094e1

08008174 <__multadd>:
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	690d      	ldr	r5, [r1, #16]
 800817a:	4607      	mov	r7, r0
 800817c:	460c      	mov	r4, r1
 800817e:	461e      	mov	r6, r3
 8008180:	f101 0c14 	add.w	ip, r1, #20
 8008184:	2000      	movs	r0, #0
 8008186:	f8dc 3000 	ldr.w	r3, [ip]
 800818a:	b299      	uxth	r1, r3
 800818c:	fb02 6101 	mla	r1, r2, r1, r6
 8008190:	0c1e      	lsrs	r6, r3, #16
 8008192:	0c0b      	lsrs	r3, r1, #16
 8008194:	fb02 3306 	mla	r3, r2, r6, r3
 8008198:	b289      	uxth	r1, r1
 800819a:	3001      	adds	r0, #1
 800819c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081a0:	4285      	cmp	r5, r0
 80081a2:	f84c 1b04 	str.w	r1, [ip], #4
 80081a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081aa:	dcec      	bgt.n	8008186 <__multadd+0x12>
 80081ac:	b30e      	cbz	r6, 80081f2 <__multadd+0x7e>
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dc19      	bgt.n	80081e8 <__multadd+0x74>
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	4638      	mov	r0, r7
 80081b8:	3101      	adds	r1, #1
 80081ba:	f7ff ff79 	bl	80080b0 <_Balloc>
 80081be:	4680      	mov	r8, r0
 80081c0:	b928      	cbnz	r0, 80081ce <__multadd+0x5a>
 80081c2:	4602      	mov	r2, r0
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <__multadd+0x84>)
 80081c6:	480d      	ldr	r0, [pc, #52]	@ (80081fc <__multadd+0x88>)
 80081c8:	21ba      	movs	r1, #186	@ 0xba
 80081ca:	f000 fd27 	bl	8008c1c <__assert_func>
 80081ce:	6922      	ldr	r2, [r4, #16]
 80081d0:	3202      	adds	r2, #2
 80081d2:	f104 010c 	add.w	r1, r4, #12
 80081d6:	0092      	lsls	r2, r2, #2
 80081d8:	300c      	adds	r0, #12
 80081da:	f000 fd11 	bl	8008c00 <memcpy>
 80081de:	4621      	mov	r1, r4
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff ffa5 	bl	8008130 <_Bfree>
 80081e6:	4644      	mov	r4, r8
 80081e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081ec:	3501      	adds	r5, #1
 80081ee:	615e      	str	r6, [r3, #20]
 80081f0:	6125      	str	r5, [r4, #16]
 80081f2:	4620      	mov	r0, r4
 80081f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f8:	080094d0 	.word	0x080094d0
 80081fc:	080094e1 	.word	0x080094e1

08008200 <__hi0bits>:
 8008200:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008204:	4603      	mov	r3, r0
 8008206:	bf36      	itet	cc
 8008208:	0403      	lslcc	r3, r0, #16
 800820a:	2000      	movcs	r0, #0
 800820c:	2010      	movcc	r0, #16
 800820e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008212:	bf3c      	itt	cc
 8008214:	021b      	lslcc	r3, r3, #8
 8008216:	3008      	addcc	r0, #8
 8008218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800821c:	bf3c      	itt	cc
 800821e:	011b      	lslcc	r3, r3, #4
 8008220:	3004      	addcc	r0, #4
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008226:	bf3c      	itt	cc
 8008228:	009b      	lslcc	r3, r3, #2
 800822a:	3002      	addcc	r0, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	db05      	blt.n	800823c <__hi0bits+0x3c>
 8008230:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008234:	f100 0001 	add.w	r0, r0, #1
 8008238:	bf08      	it	eq
 800823a:	2020      	moveq	r0, #32
 800823c:	4770      	bx	lr

0800823e <__lo0bits>:
 800823e:	6803      	ldr	r3, [r0, #0]
 8008240:	4602      	mov	r2, r0
 8008242:	f013 0007 	ands.w	r0, r3, #7
 8008246:	d00b      	beq.n	8008260 <__lo0bits+0x22>
 8008248:	07d9      	lsls	r1, r3, #31
 800824a:	d421      	bmi.n	8008290 <__lo0bits+0x52>
 800824c:	0798      	lsls	r0, r3, #30
 800824e:	bf49      	itett	mi
 8008250:	085b      	lsrmi	r3, r3, #1
 8008252:	089b      	lsrpl	r3, r3, #2
 8008254:	2001      	movmi	r0, #1
 8008256:	6013      	strmi	r3, [r2, #0]
 8008258:	bf5c      	itt	pl
 800825a:	6013      	strpl	r3, [r2, #0]
 800825c:	2002      	movpl	r0, #2
 800825e:	4770      	bx	lr
 8008260:	b299      	uxth	r1, r3
 8008262:	b909      	cbnz	r1, 8008268 <__lo0bits+0x2a>
 8008264:	0c1b      	lsrs	r3, r3, #16
 8008266:	2010      	movs	r0, #16
 8008268:	b2d9      	uxtb	r1, r3
 800826a:	b909      	cbnz	r1, 8008270 <__lo0bits+0x32>
 800826c:	3008      	adds	r0, #8
 800826e:	0a1b      	lsrs	r3, r3, #8
 8008270:	0719      	lsls	r1, r3, #28
 8008272:	bf04      	itt	eq
 8008274:	091b      	lsreq	r3, r3, #4
 8008276:	3004      	addeq	r0, #4
 8008278:	0799      	lsls	r1, r3, #30
 800827a:	bf04      	itt	eq
 800827c:	089b      	lsreq	r3, r3, #2
 800827e:	3002      	addeq	r0, #2
 8008280:	07d9      	lsls	r1, r3, #31
 8008282:	d403      	bmi.n	800828c <__lo0bits+0x4e>
 8008284:	085b      	lsrs	r3, r3, #1
 8008286:	f100 0001 	add.w	r0, r0, #1
 800828a:	d003      	beq.n	8008294 <__lo0bits+0x56>
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	4770      	bx	lr
 8008290:	2000      	movs	r0, #0
 8008292:	4770      	bx	lr
 8008294:	2020      	movs	r0, #32
 8008296:	4770      	bx	lr

08008298 <__i2b>:
 8008298:	b510      	push	{r4, lr}
 800829a:	460c      	mov	r4, r1
 800829c:	2101      	movs	r1, #1
 800829e:	f7ff ff07 	bl	80080b0 <_Balloc>
 80082a2:	4602      	mov	r2, r0
 80082a4:	b928      	cbnz	r0, 80082b2 <__i2b+0x1a>
 80082a6:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <__i2b+0x24>)
 80082a8:	4805      	ldr	r0, [pc, #20]	@ (80082c0 <__i2b+0x28>)
 80082aa:	f240 1145 	movw	r1, #325	@ 0x145
 80082ae:	f000 fcb5 	bl	8008c1c <__assert_func>
 80082b2:	2301      	movs	r3, #1
 80082b4:	6144      	str	r4, [r0, #20]
 80082b6:	6103      	str	r3, [r0, #16]
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	bf00      	nop
 80082bc:	080094d0 	.word	0x080094d0
 80082c0:	080094e1 	.word	0x080094e1

080082c4 <__multiply>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	4617      	mov	r7, r2
 80082ca:	690a      	ldr	r2, [r1, #16]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	bfa8      	it	ge
 80082d2:	463b      	movge	r3, r7
 80082d4:	4689      	mov	r9, r1
 80082d6:	bfa4      	itt	ge
 80082d8:	460f      	movge	r7, r1
 80082da:	4699      	movge	r9, r3
 80082dc:	693d      	ldr	r5, [r7, #16]
 80082de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	eb05 060a 	add.w	r6, r5, sl
 80082ea:	42b3      	cmp	r3, r6
 80082ec:	b085      	sub	sp, #20
 80082ee:	bfb8      	it	lt
 80082f0:	3101      	addlt	r1, #1
 80082f2:	f7ff fedd 	bl	80080b0 <_Balloc>
 80082f6:	b930      	cbnz	r0, 8008306 <__multiply+0x42>
 80082f8:	4602      	mov	r2, r0
 80082fa:	4b41      	ldr	r3, [pc, #260]	@ (8008400 <__multiply+0x13c>)
 80082fc:	4841      	ldr	r0, [pc, #260]	@ (8008404 <__multiply+0x140>)
 80082fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008302:	f000 fc8b 	bl	8008c1c <__assert_func>
 8008306:	f100 0414 	add.w	r4, r0, #20
 800830a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800830e:	4623      	mov	r3, r4
 8008310:	2200      	movs	r2, #0
 8008312:	4573      	cmp	r3, lr
 8008314:	d320      	bcc.n	8008358 <__multiply+0x94>
 8008316:	f107 0814 	add.w	r8, r7, #20
 800831a:	f109 0114 	add.w	r1, r9, #20
 800831e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008322:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008326:	9302      	str	r3, [sp, #8]
 8008328:	1beb      	subs	r3, r5, r7
 800832a:	3b15      	subs	r3, #21
 800832c:	f023 0303 	bic.w	r3, r3, #3
 8008330:	3304      	adds	r3, #4
 8008332:	3715      	adds	r7, #21
 8008334:	42bd      	cmp	r5, r7
 8008336:	bf38      	it	cc
 8008338:	2304      	movcc	r3, #4
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	9b02      	ldr	r3, [sp, #8]
 800833e:	9103      	str	r1, [sp, #12]
 8008340:	428b      	cmp	r3, r1
 8008342:	d80c      	bhi.n	800835e <__multiply+0x9a>
 8008344:	2e00      	cmp	r6, #0
 8008346:	dd03      	ble.n	8008350 <__multiply+0x8c>
 8008348:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800834c:	2b00      	cmp	r3, #0
 800834e:	d055      	beq.n	80083fc <__multiply+0x138>
 8008350:	6106      	str	r6, [r0, #16]
 8008352:	b005      	add	sp, #20
 8008354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008358:	f843 2b04 	str.w	r2, [r3], #4
 800835c:	e7d9      	b.n	8008312 <__multiply+0x4e>
 800835e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008362:	f1ba 0f00 	cmp.w	sl, #0
 8008366:	d01f      	beq.n	80083a8 <__multiply+0xe4>
 8008368:	46c4      	mov	ip, r8
 800836a:	46a1      	mov	r9, r4
 800836c:	2700      	movs	r7, #0
 800836e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008372:	f8d9 3000 	ldr.w	r3, [r9]
 8008376:	fa1f fb82 	uxth.w	fp, r2
 800837a:	b29b      	uxth	r3, r3
 800837c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008380:	443b      	add	r3, r7
 8008382:	f8d9 7000 	ldr.w	r7, [r9]
 8008386:	0c12      	lsrs	r2, r2, #16
 8008388:	0c3f      	lsrs	r7, r7, #16
 800838a:	fb0a 7202 	mla	r2, sl, r2, r7
 800838e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008392:	b29b      	uxth	r3, r3
 8008394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008398:	4565      	cmp	r5, ip
 800839a:	f849 3b04 	str.w	r3, [r9], #4
 800839e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80083a2:	d8e4      	bhi.n	800836e <__multiply+0xaa>
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	50e7      	str	r7, [r4, r3]
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80083ae:	3104      	adds	r1, #4
 80083b0:	f1b9 0f00 	cmp.w	r9, #0
 80083b4:	d020      	beq.n	80083f8 <__multiply+0x134>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	4647      	mov	r7, r8
 80083ba:	46a4      	mov	ip, r4
 80083bc:	f04f 0a00 	mov.w	sl, #0
 80083c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80083c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80083c8:	fb09 220b 	mla	r2, r9, fp, r2
 80083cc:	4452      	add	r2, sl
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083d4:	f84c 3b04 	str.w	r3, [ip], #4
 80083d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80083dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80083e4:	fb09 330a 	mla	r3, r9, sl, r3
 80083e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80083ec:	42bd      	cmp	r5, r7
 80083ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083f2:	d8e5      	bhi.n	80083c0 <__multiply+0xfc>
 80083f4:	9a01      	ldr	r2, [sp, #4]
 80083f6:	50a3      	str	r3, [r4, r2]
 80083f8:	3404      	adds	r4, #4
 80083fa:	e79f      	b.n	800833c <__multiply+0x78>
 80083fc:	3e01      	subs	r6, #1
 80083fe:	e7a1      	b.n	8008344 <__multiply+0x80>
 8008400:	080094d0 	.word	0x080094d0
 8008404:	080094e1 	.word	0x080094e1

08008408 <__pow5mult>:
 8008408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840c:	4615      	mov	r5, r2
 800840e:	f012 0203 	ands.w	r2, r2, #3
 8008412:	4607      	mov	r7, r0
 8008414:	460e      	mov	r6, r1
 8008416:	d007      	beq.n	8008428 <__pow5mult+0x20>
 8008418:	4c25      	ldr	r4, [pc, #148]	@ (80084b0 <__pow5mult+0xa8>)
 800841a:	3a01      	subs	r2, #1
 800841c:	2300      	movs	r3, #0
 800841e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008422:	f7ff fea7 	bl	8008174 <__multadd>
 8008426:	4606      	mov	r6, r0
 8008428:	10ad      	asrs	r5, r5, #2
 800842a:	d03d      	beq.n	80084a8 <__pow5mult+0xa0>
 800842c:	69fc      	ldr	r4, [r7, #28]
 800842e:	b97c      	cbnz	r4, 8008450 <__pow5mult+0x48>
 8008430:	2010      	movs	r0, #16
 8008432:	f7ff fd87 	bl	8007f44 <malloc>
 8008436:	4602      	mov	r2, r0
 8008438:	61f8      	str	r0, [r7, #28]
 800843a:	b928      	cbnz	r0, 8008448 <__pow5mult+0x40>
 800843c:	4b1d      	ldr	r3, [pc, #116]	@ (80084b4 <__pow5mult+0xac>)
 800843e:	481e      	ldr	r0, [pc, #120]	@ (80084b8 <__pow5mult+0xb0>)
 8008440:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008444:	f000 fbea 	bl	8008c1c <__assert_func>
 8008448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800844c:	6004      	str	r4, [r0, #0]
 800844e:	60c4      	str	r4, [r0, #12]
 8008450:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008458:	b94c      	cbnz	r4, 800846e <__pow5mult+0x66>
 800845a:	f240 2171 	movw	r1, #625	@ 0x271
 800845e:	4638      	mov	r0, r7
 8008460:	f7ff ff1a 	bl	8008298 <__i2b>
 8008464:	2300      	movs	r3, #0
 8008466:	f8c8 0008 	str.w	r0, [r8, #8]
 800846a:	4604      	mov	r4, r0
 800846c:	6003      	str	r3, [r0, #0]
 800846e:	f04f 0900 	mov.w	r9, #0
 8008472:	07eb      	lsls	r3, r5, #31
 8008474:	d50a      	bpl.n	800848c <__pow5mult+0x84>
 8008476:	4631      	mov	r1, r6
 8008478:	4622      	mov	r2, r4
 800847a:	4638      	mov	r0, r7
 800847c:	f7ff ff22 	bl	80082c4 <__multiply>
 8008480:	4631      	mov	r1, r6
 8008482:	4680      	mov	r8, r0
 8008484:	4638      	mov	r0, r7
 8008486:	f7ff fe53 	bl	8008130 <_Bfree>
 800848a:	4646      	mov	r6, r8
 800848c:	106d      	asrs	r5, r5, #1
 800848e:	d00b      	beq.n	80084a8 <__pow5mult+0xa0>
 8008490:	6820      	ldr	r0, [r4, #0]
 8008492:	b938      	cbnz	r0, 80084a4 <__pow5mult+0x9c>
 8008494:	4622      	mov	r2, r4
 8008496:	4621      	mov	r1, r4
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ff13 	bl	80082c4 <__multiply>
 800849e:	6020      	str	r0, [r4, #0]
 80084a0:	f8c0 9000 	str.w	r9, [r0]
 80084a4:	4604      	mov	r4, r0
 80084a6:	e7e4      	b.n	8008472 <__pow5mult+0x6a>
 80084a8:	4630      	mov	r0, r6
 80084aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ae:	bf00      	nop
 80084b0:	08009594 	.word	0x08009594
 80084b4:	08009461 	.word	0x08009461
 80084b8:	080094e1 	.word	0x080094e1

080084bc <__lshift>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	460c      	mov	r4, r1
 80084c2:	6849      	ldr	r1, [r1, #4]
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	4607      	mov	r7, r0
 80084ce:	4691      	mov	r9, r2
 80084d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084d4:	f108 0601 	add.w	r6, r8, #1
 80084d8:	42b3      	cmp	r3, r6
 80084da:	db0b      	blt.n	80084f4 <__lshift+0x38>
 80084dc:	4638      	mov	r0, r7
 80084de:	f7ff fde7 	bl	80080b0 <_Balloc>
 80084e2:	4605      	mov	r5, r0
 80084e4:	b948      	cbnz	r0, 80084fa <__lshift+0x3e>
 80084e6:	4602      	mov	r2, r0
 80084e8:	4b28      	ldr	r3, [pc, #160]	@ (800858c <__lshift+0xd0>)
 80084ea:	4829      	ldr	r0, [pc, #164]	@ (8008590 <__lshift+0xd4>)
 80084ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084f0:	f000 fb94 	bl	8008c1c <__assert_func>
 80084f4:	3101      	adds	r1, #1
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	e7ee      	b.n	80084d8 <__lshift+0x1c>
 80084fa:	2300      	movs	r3, #0
 80084fc:	f100 0114 	add.w	r1, r0, #20
 8008500:	f100 0210 	add.w	r2, r0, #16
 8008504:	4618      	mov	r0, r3
 8008506:	4553      	cmp	r3, sl
 8008508:	db33      	blt.n	8008572 <__lshift+0xb6>
 800850a:	6920      	ldr	r0, [r4, #16]
 800850c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008510:	f104 0314 	add.w	r3, r4, #20
 8008514:	f019 091f 	ands.w	r9, r9, #31
 8008518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800851c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008520:	d02b      	beq.n	800857a <__lshift+0xbe>
 8008522:	f1c9 0e20 	rsb	lr, r9, #32
 8008526:	468a      	mov	sl, r1
 8008528:	2200      	movs	r2, #0
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	fa00 f009 	lsl.w	r0, r0, r9
 8008530:	4310      	orrs	r0, r2
 8008532:	f84a 0b04 	str.w	r0, [sl], #4
 8008536:	f853 2b04 	ldr.w	r2, [r3], #4
 800853a:	459c      	cmp	ip, r3
 800853c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008540:	d8f3      	bhi.n	800852a <__lshift+0x6e>
 8008542:	ebac 0304 	sub.w	r3, ip, r4
 8008546:	3b15      	subs	r3, #21
 8008548:	f023 0303 	bic.w	r3, r3, #3
 800854c:	3304      	adds	r3, #4
 800854e:	f104 0015 	add.w	r0, r4, #21
 8008552:	4560      	cmp	r0, ip
 8008554:	bf88      	it	hi
 8008556:	2304      	movhi	r3, #4
 8008558:	50ca      	str	r2, [r1, r3]
 800855a:	b10a      	cbz	r2, 8008560 <__lshift+0xa4>
 800855c:	f108 0602 	add.w	r6, r8, #2
 8008560:	3e01      	subs	r6, #1
 8008562:	4638      	mov	r0, r7
 8008564:	612e      	str	r6, [r5, #16]
 8008566:	4621      	mov	r1, r4
 8008568:	f7ff fde2 	bl	8008130 <_Bfree>
 800856c:	4628      	mov	r0, r5
 800856e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008572:	f842 0f04 	str.w	r0, [r2, #4]!
 8008576:	3301      	adds	r3, #1
 8008578:	e7c5      	b.n	8008506 <__lshift+0x4a>
 800857a:	3904      	subs	r1, #4
 800857c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008580:	f841 2f04 	str.w	r2, [r1, #4]!
 8008584:	459c      	cmp	ip, r3
 8008586:	d8f9      	bhi.n	800857c <__lshift+0xc0>
 8008588:	e7ea      	b.n	8008560 <__lshift+0xa4>
 800858a:	bf00      	nop
 800858c:	080094d0 	.word	0x080094d0
 8008590:	080094e1 	.word	0x080094e1

08008594 <__mcmp>:
 8008594:	690a      	ldr	r2, [r1, #16]
 8008596:	4603      	mov	r3, r0
 8008598:	6900      	ldr	r0, [r0, #16]
 800859a:	1a80      	subs	r0, r0, r2
 800859c:	b530      	push	{r4, r5, lr}
 800859e:	d10e      	bne.n	80085be <__mcmp+0x2a>
 80085a0:	3314      	adds	r3, #20
 80085a2:	3114      	adds	r1, #20
 80085a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085b4:	4295      	cmp	r5, r2
 80085b6:	d003      	beq.n	80085c0 <__mcmp+0x2c>
 80085b8:	d205      	bcs.n	80085c6 <__mcmp+0x32>
 80085ba:	f04f 30ff 	mov.w	r0, #4294967295
 80085be:	bd30      	pop	{r4, r5, pc}
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d3f3      	bcc.n	80085ac <__mcmp+0x18>
 80085c4:	e7fb      	b.n	80085be <__mcmp+0x2a>
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7f9      	b.n	80085be <__mcmp+0x2a>
	...

080085cc <__mdiff>:
 80085cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	4689      	mov	r9, r1
 80085d2:	4606      	mov	r6, r0
 80085d4:	4611      	mov	r1, r2
 80085d6:	4648      	mov	r0, r9
 80085d8:	4614      	mov	r4, r2
 80085da:	f7ff ffdb 	bl	8008594 <__mcmp>
 80085de:	1e05      	subs	r5, r0, #0
 80085e0:	d112      	bne.n	8008608 <__mdiff+0x3c>
 80085e2:	4629      	mov	r1, r5
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7ff fd63 	bl	80080b0 <_Balloc>
 80085ea:	4602      	mov	r2, r0
 80085ec:	b928      	cbnz	r0, 80085fa <__mdiff+0x2e>
 80085ee:	4b3f      	ldr	r3, [pc, #252]	@ (80086ec <__mdiff+0x120>)
 80085f0:	f240 2137 	movw	r1, #567	@ 0x237
 80085f4:	483e      	ldr	r0, [pc, #248]	@ (80086f0 <__mdiff+0x124>)
 80085f6:	f000 fb11 	bl	8008c1c <__assert_func>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008600:	4610      	mov	r0, r2
 8008602:	b003      	add	sp, #12
 8008604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008608:	bfbc      	itt	lt
 800860a:	464b      	movlt	r3, r9
 800860c:	46a1      	movlt	r9, r4
 800860e:	4630      	mov	r0, r6
 8008610:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008614:	bfba      	itte	lt
 8008616:	461c      	movlt	r4, r3
 8008618:	2501      	movlt	r5, #1
 800861a:	2500      	movge	r5, #0
 800861c:	f7ff fd48 	bl	80080b0 <_Balloc>
 8008620:	4602      	mov	r2, r0
 8008622:	b918      	cbnz	r0, 800862c <__mdiff+0x60>
 8008624:	4b31      	ldr	r3, [pc, #196]	@ (80086ec <__mdiff+0x120>)
 8008626:	f240 2145 	movw	r1, #581	@ 0x245
 800862a:	e7e3      	b.n	80085f4 <__mdiff+0x28>
 800862c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008630:	6926      	ldr	r6, [r4, #16]
 8008632:	60c5      	str	r5, [r0, #12]
 8008634:	f109 0310 	add.w	r3, r9, #16
 8008638:	f109 0514 	add.w	r5, r9, #20
 800863c:	f104 0e14 	add.w	lr, r4, #20
 8008640:	f100 0b14 	add.w	fp, r0, #20
 8008644:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008648:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	46d9      	mov	r9, fp
 8008650:	f04f 0c00 	mov.w	ip, #0
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	f85e 0b04 	ldr.w	r0, [lr], #4
 800865a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	fa1f f38a 	uxth.w	r3, sl
 8008664:	4619      	mov	r1, r3
 8008666:	b283      	uxth	r3, r0
 8008668:	1acb      	subs	r3, r1, r3
 800866a:	0c00      	lsrs	r0, r0, #16
 800866c:	4463      	add	r3, ip
 800866e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008672:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008676:	b29b      	uxth	r3, r3
 8008678:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800867c:	4576      	cmp	r6, lr
 800867e:	f849 3b04 	str.w	r3, [r9], #4
 8008682:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008686:	d8e5      	bhi.n	8008654 <__mdiff+0x88>
 8008688:	1b33      	subs	r3, r6, r4
 800868a:	3b15      	subs	r3, #21
 800868c:	f023 0303 	bic.w	r3, r3, #3
 8008690:	3415      	adds	r4, #21
 8008692:	3304      	adds	r3, #4
 8008694:	42a6      	cmp	r6, r4
 8008696:	bf38      	it	cc
 8008698:	2304      	movcc	r3, #4
 800869a:	441d      	add	r5, r3
 800869c:	445b      	add	r3, fp
 800869e:	461e      	mov	r6, r3
 80086a0:	462c      	mov	r4, r5
 80086a2:	4544      	cmp	r4, r8
 80086a4:	d30e      	bcc.n	80086c4 <__mdiff+0xf8>
 80086a6:	f108 0103 	add.w	r1, r8, #3
 80086aa:	1b49      	subs	r1, r1, r5
 80086ac:	f021 0103 	bic.w	r1, r1, #3
 80086b0:	3d03      	subs	r5, #3
 80086b2:	45a8      	cmp	r8, r5
 80086b4:	bf38      	it	cc
 80086b6:	2100      	movcc	r1, #0
 80086b8:	440b      	add	r3, r1
 80086ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086be:	b191      	cbz	r1, 80086e6 <__mdiff+0x11a>
 80086c0:	6117      	str	r7, [r2, #16]
 80086c2:	e79d      	b.n	8008600 <__mdiff+0x34>
 80086c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80086c8:	46e6      	mov	lr, ip
 80086ca:	0c08      	lsrs	r0, r1, #16
 80086cc:	fa1c fc81 	uxtah	ip, ip, r1
 80086d0:	4471      	add	r1, lr
 80086d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086d6:	b289      	uxth	r1, r1
 80086d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086dc:	f846 1b04 	str.w	r1, [r6], #4
 80086e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086e4:	e7dd      	b.n	80086a2 <__mdiff+0xd6>
 80086e6:	3f01      	subs	r7, #1
 80086e8:	e7e7      	b.n	80086ba <__mdiff+0xee>
 80086ea:	bf00      	nop
 80086ec:	080094d0 	.word	0x080094d0
 80086f0:	080094e1 	.word	0x080094e1

080086f4 <__d2b>:
 80086f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	460f      	mov	r7, r1
 80086fa:	2101      	movs	r1, #1
 80086fc:	ec59 8b10 	vmov	r8, r9, d0
 8008700:	4616      	mov	r6, r2
 8008702:	f7ff fcd5 	bl	80080b0 <_Balloc>
 8008706:	4604      	mov	r4, r0
 8008708:	b930      	cbnz	r0, 8008718 <__d2b+0x24>
 800870a:	4602      	mov	r2, r0
 800870c:	4b23      	ldr	r3, [pc, #140]	@ (800879c <__d2b+0xa8>)
 800870e:	4824      	ldr	r0, [pc, #144]	@ (80087a0 <__d2b+0xac>)
 8008710:	f240 310f 	movw	r1, #783	@ 0x30f
 8008714:	f000 fa82 	bl	8008c1c <__assert_func>
 8008718:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800871c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008720:	b10d      	cbz	r5, 8008726 <__d2b+0x32>
 8008722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	f1b8 0300 	subs.w	r3, r8, #0
 800872c:	d023      	beq.n	8008776 <__d2b+0x82>
 800872e:	4668      	mov	r0, sp
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	f7ff fd84 	bl	800823e <__lo0bits>
 8008736:	e9dd 1200 	ldrd	r1, r2, [sp]
 800873a:	b1d0      	cbz	r0, 8008772 <__d2b+0x7e>
 800873c:	f1c0 0320 	rsb	r3, r0, #32
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	430b      	orrs	r3, r1
 8008746:	40c2      	lsrs	r2, r0
 8008748:	6163      	str	r3, [r4, #20]
 800874a:	9201      	str	r2, [sp, #4]
 800874c:	9b01      	ldr	r3, [sp, #4]
 800874e:	61a3      	str	r3, [r4, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	bf0c      	ite	eq
 8008754:	2201      	moveq	r2, #1
 8008756:	2202      	movne	r2, #2
 8008758:	6122      	str	r2, [r4, #16]
 800875a:	b1a5      	cbz	r5, 8008786 <__d2b+0x92>
 800875c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008760:	4405      	add	r5, r0
 8008762:	603d      	str	r5, [r7, #0]
 8008764:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008768:	6030      	str	r0, [r6, #0]
 800876a:	4620      	mov	r0, r4
 800876c:	b003      	add	sp, #12
 800876e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008772:	6161      	str	r1, [r4, #20]
 8008774:	e7ea      	b.n	800874c <__d2b+0x58>
 8008776:	a801      	add	r0, sp, #4
 8008778:	f7ff fd61 	bl	800823e <__lo0bits>
 800877c:	9b01      	ldr	r3, [sp, #4]
 800877e:	6163      	str	r3, [r4, #20]
 8008780:	3020      	adds	r0, #32
 8008782:	2201      	movs	r2, #1
 8008784:	e7e8      	b.n	8008758 <__d2b+0x64>
 8008786:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800878a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800878e:	6038      	str	r0, [r7, #0]
 8008790:	6918      	ldr	r0, [r3, #16]
 8008792:	f7ff fd35 	bl	8008200 <__hi0bits>
 8008796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800879a:	e7e5      	b.n	8008768 <__d2b+0x74>
 800879c:	080094d0 	.word	0x080094d0
 80087a0:	080094e1 	.word	0x080094e1

080087a4 <__ssputs_r>:
 80087a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	688e      	ldr	r6, [r1, #8]
 80087aa:	461f      	mov	r7, r3
 80087ac:	42be      	cmp	r6, r7
 80087ae:	680b      	ldr	r3, [r1, #0]
 80087b0:	4682      	mov	sl, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	4690      	mov	r8, r2
 80087b6:	d82d      	bhi.n	8008814 <__ssputs_r+0x70>
 80087b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087c0:	d026      	beq.n	8008810 <__ssputs_r+0x6c>
 80087c2:	6965      	ldr	r5, [r4, #20]
 80087c4:	6909      	ldr	r1, [r1, #16]
 80087c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ca:	eba3 0901 	sub.w	r9, r3, r1
 80087ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087d2:	1c7b      	adds	r3, r7, #1
 80087d4:	444b      	add	r3, r9
 80087d6:	106d      	asrs	r5, r5, #1
 80087d8:	429d      	cmp	r5, r3
 80087da:	bf38      	it	cc
 80087dc:	461d      	movcc	r5, r3
 80087de:	0553      	lsls	r3, r2, #21
 80087e0:	d527      	bpl.n	8008832 <__ssputs_r+0x8e>
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7ff fbd8 	bl	8007f98 <_malloc_r>
 80087e8:	4606      	mov	r6, r0
 80087ea:	b360      	cbz	r0, 8008846 <__ssputs_r+0xa2>
 80087ec:	6921      	ldr	r1, [r4, #16]
 80087ee:	464a      	mov	r2, r9
 80087f0:	f000 fa06 	bl	8008c00 <memcpy>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	6126      	str	r6, [r4, #16]
 8008802:	6165      	str	r5, [r4, #20]
 8008804:	444e      	add	r6, r9
 8008806:	eba5 0509 	sub.w	r5, r5, r9
 800880a:	6026      	str	r6, [r4, #0]
 800880c:	60a5      	str	r5, [r4, #8]
 800880e:	463e      	mov	r6, r7
 8008810:	42be      	cmp	r6, r7
 8008812:	d900      	bls.n	8008816 <__ssputs_r+0x72>
 8008814:	463e      	mov	r6, r7
 8008816:	6820      	ldr	r0, [r4, #0]
 8008818:	4632      	mov	r2, r6
 800881a:	4641      	mov	r1, r8
 800881c:	f000 f9c6 	bl	8008bac <memmove>
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	1b9b      	subs	r3, r3, r6
 8008824:	60a3      	str	r3, [r4, #8]
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	4433      	add	r3, r6
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	2000      	movs	r0, #0
 800882e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008832:	462a      	mov	r2, r5
 8008834:	f000 fa36 	bl	8008ca4 <_realloc_r>
 8008838:	4606      	mov	r6, r0
 800883a:	2800      	cmp	r0, #0
 800883c:	d1e0      	bne.n	8008800 <__ssputs_r+0x5c>
 800883e:	6921      	ldr	r1, [r4, #16]
 8008840:	4650      	mov	r0, sl
 8008842:	f7ff fb35 	bl	8007eb0 <_free_r>
 8008846:	230c      	movs	r3, #12
 8008848:	f8ca 3000 	str.w	r3, [sl]
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008852:	81a3      	strh	r3, [r4, #12]
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	e7e9      	b.n	800882e <__ssputs_r+0x8a>
	...

0800885c <_svfiprintf_r>:
 800885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	4698      	mov	r8, r3
 8008862:	898b      	ldrh	r3, [r1, #12]
 8008864:	061b      	lsls	r3, r3, #24
 8008866:	b09d      	sub	sp, #116	@ 0x74
 8008868:	4607      	mov	r7, r0
 800886a:	460d      	mov	r5, r1
 800886c:	4614      	mov	r4, r2
 800886e:	d510      	bpl.n	8008892 <_svfiprintf_r+0x36>
 8008870:	690b      	ldr	r3, [r1, #16]
 8008872:	b973      	cbnz	r3, 8008892 <_svfiprintf_r+0x36>
 8008874:	2140      	movs	r1, #64	@ 0x40
 8008876:	f7ff fb8f 	bl	8007f98 <_malloc_r>
 800887a:	6028      	str	r0, [r5, #0]
 800887c:	6128      	str	r0, [r5, #16]
 800887e:	b930      	cbnz	r0, 800888e <_svfiprintf_r+0x32>
 8008880:	230c      	movs	r3, #12
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	f04f 30ff 	mov.w	r0, #4294967295
 8008888:	b01d      	add	sp, #116	@ 0x74
 800888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888e:	2340      	movs	r3, #64	@ 0x40
 8008890:	616b      	str	r3, [r5, #20]
 8008892:	2300      	movs	r3, #0
 8008894:	9309      	str	r3, [sp, #36]	@ 0x24
 8008896:	2320      	movs	r3, #32
 8008898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800889c:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a0:	2330      	movs	r3, #48	@ 0x30
 80088a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a40 <_svfiprintf_r+0x1e4>
 80088a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088aa:	f04f 0901 	mov.w	r9, #1
 80088ae:	4623      	mov	r3, r4
 80088b0:	469a      	mov	sl, r3
 80088b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088b6:	b10a      	cbz	r2, 80088bc <_svfiprintf_r+0x60>
 80088b8:	2a25      	cmp	r2, #37	@ 0x25
 80088ba:	d1f9      	bne.n	80088b0 <_svfiprintf_r+0x54>
 80088bc:	ebba 0b04 	subs.w	fp, sl, r4
 80088c0:	d00b      	beq.n	80088da <_svfiprintf_r+0x7e>
 80088c2:	465b      	mov	r3, fp
 80088c4:	4622      	mov	r2, r4
 80088c6:	4629      	mov	r1, r5
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff ff6b 	bl	80087a4 <__ssputs_r>
 80088ce:	3001      	adds	r0, #1
 80088d0:	f000 80a7 	beq.w	8008a22 <_svfiprintf_r+0x1c6>
 80088d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088d6:	445a      	add	r2, fp
 80088d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80088da:	f89a 3000 	ldrb.w	r3, [sl]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 809f 	beq.w	8008a22 <_svfiprintf_r+0x1c6>
 80088e4:	2300      	movs	r3, #0
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088ee:	f10a 0a01 	add.w	sl, sl, #1
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	9307      	str	r3, [sp, #28]
 80088f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80088fc:	4654      	mov	r4, sl
 80088fe:	2205      	movs	r2, #5
 8008900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008904:	484e      	ldr	r0, [pc, #312]	@ (8008a40 <_svfiprintf_r+0x1e4>)
 8008906:	f7f7 fc6b 	bl	80001e0 <memchr>
 800890a:	9a04      	ldr	r2, [sp, #16]
 800890c:	b9d8      	cbnz	r0, 8008946 <_svfiprintf_r+0xea>
 800890e:	06d0      	lsls	r0, r2, #27
 8008910:	bf44      	itt	mi
 8008912:	2320      	movmi	r3, #32
 8008914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008918:	0711      	lsls	r1, r2, #28
 800891a:	bf44      	itt	mi
 800891c:	232b      	movmi	r3, #43	@ 0x2b
 800891e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008922:	f89a 3000 	ldrb.w	r3, [sl]
 8008926:	2b2a      	cmp	r3, #42	@ 0x2a
 8008928:	d015      	beq.n	8008956 <_svfiprintf_r+0xfa>
 800892a:	9a07      	ldr	r2, [sp, #28]
 800892c:	4654      	mov	r4, sl
 800892e:	2000      	movs	r0, #0
 8008930:	f04f 0c0a 	mov.w	ip, #10
 8008934:	4621      	mov	r1, r4
 8008936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800893a:	3b30      	subs	r3, #48	@ 0x30
 800893c:	2b09      	cmp	r3, #9
 800893e:	d94b      	bls.n	80089d8 <_svfiprintf_r+0x17c>
 8008940:	b1b0      	cbz	r0, 8008970 <_svfiprintf_r+0x114>
 8008942:	9207      	str	r2, [sp, #28]
 8008944:	e014      	b.n	8008970 <_svfiprintf_r+0x114>
 8008946:	eba0 0308 	sub.w	r3, r0, r8
 800894a:	fa09 f303 	lsl.w	r3, r9, r3
 800894e:	4313      	orrs	r3, r2
 8008950:	9304      	str	r3, [sp, #16]
 8008952:	46a2      	mov	sl, r4
 8008954:	e7d2      	b.n	80088fc <_svfiprintf_r+0xa0>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	1d19      	adds	r1, r3, #4
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	9103      	str	r1, [sp, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	bfbb      	ittet	lt
 8008962:	425b      	neglt	r3, r3
 8008964:	f042 0202 	orrlt.w	r2, r2, #2
 8008968:	9307      	strge	r3, [sp, #28]
 800896a:	9307      	strlt	r3, [sp, #28]
 800896c:	bfb8      	it	lt
 800896e:	9204      	strlt	r2, [sp, #16]
 8008970:	7823      	ldrb	r3, [r4, #0]
 8008972:	2b2e      	cmp	r3, #46	@ 0x2e
 8008974:	d10a      	bne.n	800898c <_svfiprintf_r+0x130>
 8008976:	7863      	ldrb	r3, [r4, #1]
 8008978:	2b2a      	cmp	r3, #42	@ 0x2a
 800897a:	d132      	bne.n	80089e2 <_svfiprintf_r+0x186>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1d1a      	adds	r2, r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	9203      	str	r2, [sp, #12]
 8008984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008988:	3402      	adds	r4, #2
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a50 <_svfiprintf_r+0x1f4>
 8008990:	7821      	ldrb	r1, [r4, #0]
 8008992:	2203      	movs	r2, #3
 8008994:	4650      	mov	r0, sl
 8008996:	f7f7 fc23 	bl	80001e0 <memchr>
 800899a:	b138      	cbz	r0, 80089ac <_svfiprintf_r+0x150>
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	eba0 000a 	sub.w	r0, r0, sl
 80089a2:	2240      	movs	r2, #64	@ 0x40
 80089a4:	4082      	lsls	r2, r0
 80089a6:	4313      	orrs	r3, r2
 80089a8:	3401      	adds	r4, #1
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b0:	4824      	ldr	r0, [pc, #144]	@ (8008a44 <_svfiprintf_r+0x1e8>)
 80089b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089b6:	2206      	movs	r2, #6
 80089b8:	f7f7 fc12 	bl	80001e0 <memchr>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d036      	beq.n	8008a2e <_svfiprintf_r+0x1d2>
 80089c0:	4b21      	ldr	r3, [pc, #132]	@ (8008a48 <_svfiprintf_r+0x1ec>)
 80089c2:	bb1b      	cbnz	r3, 8008a0c <_svfiprintf_r+0x1b0>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	3307      	adds	r3, #7
 80089c8:	f023 0307 	bic.w	r3, r3, #7
 80089cc:	3308      	adds	r3, #8
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d2:	4433      	add	r3, r6
 80089d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089d6:	e76a      	b.n	80088ae <_svfiprintf_r+0x52>
 80089d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089dc:	460c      	mov	r4, r1
 80089de:	2001      	movs	r0, #1
 80089e0:	e7a8      	b.n	8008934 <_svfiprintf_r+0xd8>
 80089e2:	2300      	movs	r3, #0
 80089e4:	3401      	adds	r4, #1
 80089e6:	9305      	str	r3, [sp, #20]
 80089e8:	4619      	mov	r1, r3
 80089ea:	f04f 0c0a 	mov.w	ip, #10
 80089ee:	4620      	mov	r0, r4
 80089f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089f4:	3a30      	subs	r2, #48	@ 0x30
 80089f6:	2a09      	cmp	r2, #9
 80089f8:	d903      	bls.n	8008a02 <_svfiprintf_r+0x1a6>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0c6      	beq.n	800898c <_svfiprintf_r+0x130>
 80089fe:	9105      	str	r1, [sp, #20]
 8008a00:	e7c4      	b.n	800898c <_svfiprintf_r+0x130>
 8008a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a06:	4604      	mov	r4, r0
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e7f0      	b.n	80089ee <_svfiprintf_r+0x192>
 8008a0c:	ab03      	add	r3, sp, #12
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	462a      	mov	r2, r5
 8008a12:	4b0e      	ldr	r3, [pc, #56]	@ (8008a4c <_svfiprintf_r+0x1f0>)
 8008a14:	a904      	add	r1, sp, #16
 8008a16:	4638      	mov	r0, r7
 8008a18:	f7fd fe7c 	bl	8006714 <_printf_float>
 8008a1c:	1c42      	adds	r2, r0, #1
 8008a1e:	4606      	mov	r6, r0
 8008a20:	d1d6      	bne.n	80089d0 <_svfiprintf_r+0x174>
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	065b      	lsls	r3, r3, #25
 8008a26:	f53f af2d 	bmi.w	8008884 <_svfiprintf_r+0x28>
 8008a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a2c:	e72c      	b.n	8008888 <_svfiprintf_r+0x2c>
 8008a2e:	ab03      	add	r3, sp, #12
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	462a      	mov	r2, r5
 8008a34:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <_svfiprintf_r+0x1f0>)
 8008a36:	a904      	add	r1, sp, #16
 8008a38:	4638      	mov	r0, r7
 8008a3a:	f7fe f903 	bl	8006c44 <_printf_i>
 8008a3e:	e7ed      	b.n	8008a1c <_svfiprintf_r+0x1c0>
 8008a40:	0800953a 	.word	0x0800953a
 8008a44:	08009544 	.word	0x08009544
 8008a48:	08006715 	.word	0x08006715
 8008a4c:	080087a5 	.word	0x080087a5
 8008a50:	08009540 	.word	0x08009540

08008a54 <__sflush_r>:
 8008a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	0716      	lsls	r6, r2, #28
 8008a5e:	4605      	mov	r5, r0
 8008a60:	460c      	mov	r4, r1
 8008a62:	d454      	bmi.n	8008b0e <__sflush_r+0xba>
 8008a64:	684b      	ldr	r3, [r1, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	dc02      	bgt.n	8008a70 <__sflush_r+0x1c>
 8008a6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd48      	ble.n	8008b02 <__sflush_r+0xae>
 8008a70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a72:	2e00      	cmp	r6, #0
 8008a74:	d045      	beq.n	8008b02 <__sflush_r+0xae>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a7c:	682f      	ldr	r7, [r5, #0]
 8008a7e:	6a21      	ldr	r1, [r4, #32]
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	d030      	beq.n	8008ae6 <__sflush_r+0x92>
 8008a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	0759      	lsls	r1, r3, #29
 8008a8a:	d505      	bpl.n	8008a98 <__sflush_r+0x44>
 8008a8c:	6863      	ldr	r3, [r4, #4]
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a92:	b10b      	cbz	r3, 8008a98 <__sflush_r+0x44>
 8008a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a9c:	6a21      	ldr	r1, [r4, #32]
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b0      	blx	r6
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	d106      	bne.n	8008ab6 <__sflush_r+0x62>
 8008aa8:	6829      	ldr	r1, [r5, #0]
 8008aaa:	291d      	cmp	r1, #29
 8008aac:	d82b      	bhi.n	8008b06 <__sflush_r+0xb2>
 8008aae:	4a2a      	ldr	r2, [pc, #168]	@ (8008b58 <__sflush_r+0x104>)
 8008ab0:	40ca      	lsrs	r2, r1
 8008ab2:	07d6      	lsls	r6, r2, #31
 8008ab4:	d527      	bpl.n	8008b06 <__sflush_r+0xb2>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	6062      	str	r2, [r4, #4]
 8008aba:	04d9      	lsls	r1, r3, #19
 8008abc:	6922      	ldr	r2, [r4, #16]
 8008abe:	6022      	str	r2, [r4, #0]
 8008ac0:	d504      	bpl.n	8008acc <__sflush_r+0x78>
 8008ac2:	1c42      	adds	r2, r0, #1
 8008ac4:	d101      	bne.n	8008aca <__sflush_r+0x76>
 8008ac6:	682b      	ldr	r3, [r5, #0]
 8008ac8:	b903      	cbnz	r3, 8008acc <__sflush_r+0x78>
 8008aca:	6560      	str	r0, [r4, #84]	@ 0x54
 8008acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ace:	602f      	str	r7, [r5, #0]
 8008ad0:	b1b9      	cbz	r1, 8008b02 <__sflush_r+0xae>
 8008ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	d002      	beq.n	8008ae0 <__sflush_r+0x8c>
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7ff f9e8 	bl	8007eb0 <_free_r>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ae4:	e00d      	b.n	8008b02 <__sflush_r+0xae>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b0      	blx	r6
 8008aec:	4602      	mov	r2, r0
 8008aee:	1c50      	adds	r0, r2, #1
 8008af0:	d1c9      	bne.n	8008a86 <__sflush_r+0x32>
 8008af2:	682b      	ldr	r3, [r5, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0c6      	beq.n	8008a86 <__sflush_r+0x32>
 8008af8:	2b1d      	cmp	r3, #29
 8008afa:	d001      	beq.n	8008b00 <__sflush_r+0xac>
 8008afc:	2b16      	cmp	r3, #22
 8008afe:	d11e      	bne.n	8008b3e <__sflush_r+0xea>
 8008b00:	602f      	str	r7, [r5, #0]
 8008b02:	2000      	movs	r0, #0
 8008b04:	e022      	b.n	8008b4c <__sflush_r+0xf8>
 8008b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b0a:	b21b      	sxth	r3, r3
 8008b0c:	e01b      	b.n	8008b46 <__sflush_r+0xf2>
 8008b0e:	690f      	ldr	r7, [r1, #16]
 8008b10:	2f00      	cmp	r7, #0
 8008b12:	d0f6      	beq.n	8008b02 <__sflush_r+0xae>
 8008b14:	0793      	lsls	r3, r2, #30
 8008b16:	680e      	ldr	r6, [r1, #0]
 8008b18:	bf08      	it	eq
 8008b1a:	694b      	ldreq	r3, [r1, #20]
 8008b1c:	600f      	str	r7, [r1, #0]
 8008b1e:	bf18      	it	ne
 8008b20:	2300      	movne	r3, #0
 8008b22:	eba6 0807 	sub.w	r8, r6, r7
 8008b26:	608b      	str	r3, [r1, #8]
 8008b28:	f1b8 0f00 	cmp.w	r8, #0
 8008b2c:	dde9      	ble.n	8008b02 <__sflush_r+0xae>
 8008b2e:	6a21      	ldr	r1, [r4, #32]
 8008b30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b32:	4643      	mov	r3, r8
 8008b34:	463a      	mov	r2, r7
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b0      	blx	r6
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	dc08      	bgt.n	8008b50 <__sflush_r+0xfc>
 8008b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b50:	4407      	add	r7, r0
 8008b52:	eba8 0800 	sub.w	r8, r8, r0
 8008b56:	e7e7      	b.n	8008b28 <__sflush_r+0xd4>
 8008b58:	20400001 	.word	0x20400001

08008b5c <_fflush_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	690b      	ldr	r3, [r1, #16]
 8008b60:	4605      	mov	r5, r0
 8008b62:	460c      	mov	r4, r1
 8008b64:	b913      	cbnz	r3, 8008b6c <_fflush_r+0x10>
 8008b66:	2500      	movs	r5, #0
 8008b68:	4628      	mov	r0, r5
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	b118      	cbz	r0, 8008b76 <_fflush_r+0x1a>
 8008b6e:	6a03      	ldr	r3, [r0, #32]
 8008b70:	b90b      	cbnz	r3, 8008b76 <_fflush_r+0x1a>
 8008b72:	f7fe fa11 	bl	8006f98 <__sinit>
 8008b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0f3      	beq.n	8008b66 <_fflush_r+0xa>
 8008b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b80:	07d0      	lsls	r0, r2, #31
 8008b82:	d404      	bmi.n	8008b8e <_fflush_r+0x32>
 8008b84:	0599      	lsls	r1, r3, #22
 8008b86:	d402      	bmi.n	8008b8e <_fflush_r+0x32>
 8008b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8a:	f7fe fb34 	bl	80071f6 <__retarget_lock_acquire_recursive>
 8008b8e:	4628      	mov	r0, r5
 8008b90:	4621      	mov	r1, r4
 8008b92:	f7ff ff5f 	bl	8008a54 <__sflush_r>
 8008b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b98:	07da      	lsls	r2, r3, #31
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	d4e4      	bmi.n	8008b68 <_fflush_r+0xc>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	059b      	lsls	r3, r3, #22
 8008ba2:	d4e1      	bmi.n	8008b68 <_fflush_r+0xc>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba6:	f7fe fb27 	bl	80071f8 <__retarget_lock_release_recursive>
 8008baa:	e7dd      	b.n	8008b68 <_fflush_r+0xc>

08008bac <memmove>:
 8008bac:	4288      	cmp	r0, r1
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	eb01 0402 	add.w	r4, r1, r2
 8008bb4:	d902      	bls.n	8008bbc <memmove+0x10>
 8008bb6:	4284      	cmp	r4, r0
 8008bb8:	4623      	mov	r3, r4
 8008bba:	d807      	bhi.n	8008bcc <memmove+0x20>
 8008bbc:	1e43      	subs	r3, r0, #1
 8008bbe:	42a1      	cmp	r1, r4
 8008bc0:	d008      	beq.n	8008bd4 <memmove+0x28>
 8008bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bca:	e7f8      	b.n	8008bbe <memmove+0x12>
 8008bcc:	4402      	add	r2, r0
 8008bce:	4601      	mov	r1, r0
 8008bd0:	428a      	cmp	r2, r1
 8008bd2:	d100      	bne.n	8008bd6 <memmove+0x2a>
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bde:	e7f7      	b.n	8008bd0 <memmove+0x24>

08008be0 <_sbrk_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d06      	ldr	r5, [pc, #24]	@ (8008bfc <_sbrk_r+0x1c>)
 8008be4:	2300      	movs	r3, #0
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	f7f9 fb24 	bl	8002238 <_sbrk>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_sbrk_r+0x1a>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_sbrk_r+0x1a>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	20000644 	.word	0x20000644

08008c00 <memcpy>:
 8008c00:	440a      	add	r2, r1
 8008c02:	4291      	cmp	r1, r2
 8008c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c08:	d100      	bne.n	8008c0c <memcpy+0xc>
 8008c0a:	4770      	bx	lr
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c16:	4291      	cmp	r1, r2
 8008c18:	d1f9      	bne.n	8008c0e <memcpy+0xe>
 8008c1a:	bd10      	pop	{r4, pc}

08008c1c <__assert_func>:
 8008c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c1e:	4614      	mov	r4, r2
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b09      	ldr	r3, [pc, #36]	@ (8008c48 <__assert_func+0x2c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4605      	mov	r5, r0
 8008c28:	68d8      	ldr	r0, [r3, #12]
 8008c2a:	b14c      	cbz	r4, 8008c40 <__assert_func+0x24>
 8008c2c:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <__assert_func+0x30>)
 8008c2e:	9100      	str	r1, [sp, #0]
 8008c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c34:	4906      	ldr	r1, [pc, #24]	@ (8008c50 <__assert_func+0x34>)
 8008c36:	462b      	mov	r3, r5
 8008c38:	f000 f870 	bl	8008d1c <fiprintf>
 8008c3c:	f000 f880 	bl	8008d40 <abort>
 8008c40:	4b04      	ldr	r3, [pc, #16]	@ (8008c54 <__assert_func+0x38>)
 8008c42:	461c      	mov	r4, r3
 8008c44:	e7f3      	b.n	8008c2e <__assert_func+0x12>
 8008c46:	bf00      	nop
 8008c48:	20000018 	.word	0x20000018
 8008c4c:	08009555 	.word	0x08009555
 8008c50:	08009562 	.word	0x08009562
 8008c54:	08009590 	.word	0x08009590

08008c58 <_calloc_r>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	fba1 5402 	umull	r5, r4, r1, r2
 8008c5e:	b934      	cbnz	r4, 8008c6e <_calloc_r+0x16>
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7ff f999 	bl	8007f98 <_malloc_r>
 8008c66:	4606      	mov	r6, r0
 8008c68:	b928      	cbnz	r0, 8008c76 <_calloc_r+0x1e>
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	220c      	movs	r2, #12
 8008c70:	6002      	str	r2, [r0, #0]
 8008c72:	2600      	movs	r6, #0
 8008c74:	e7f9      	b.n	8008c6a <_calloc_r+0x12>
 8008c76:	462a      	mov	r2, r5
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f7fe fa28 	bl	80070ce <memset>
 8008c7e:	e7f4      	b.n	8008c6a <_calloc_r+0x12>

08008c80 <__ascii_mbtowc>:
 8008c80:	b082      	sub	sp, #8
 8008c82:	b901      	cbnz	r1, 8008c86 <__ascii_mbtowc+0x6>
 8008c84:	a901      	add	r1, sp, #4
 8008c86:	b142      	cbz	r2, 8008c9a <__ascii_mbtowc+0x1a>
 8008c88:	b14b      	cbz	r3, 8008c9e <__ascii_mbtowc+0x1e>
 8008c8a:	7813      	ldrb	r3, [r2, #0]
 8008c8c:	600b      	str	r3, [r1, #0]
 8008c8e:	7812      	ldrb	r2, [r2, #0]
 8008c90:	1e10      	subs	r0, r2, #0
 8008c92:	bf18      	it	ne
 8008c94:	2001      	movne	r0, #1
 8008c96:	b002      	add	sp, #8
 8008c98:	4770      	bx	lr
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	e7fb      	b.n	8008c96 <__ascii_mbtowc+0x16>
 8008c9e:	f06f 0001 	mvn.w	r0, #1
 8008ca2:	e7f8      	b.n	8008c96 <__ascii_mbtowc+0x16>

08008ca4 <_realloc_r>:
 8008ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca8:	4607      	mov	r7, r0
 8008caa:	4614      	mov	r4, r2
 8008cac:	460d      	mov	r5, r1
 8008cae:	b921      	cbnz	r1, 8008cba <_realloc_r+0x16>
 8008cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	f7ff b96f 	b.w	8007f98 <_malloc_r>
 8008cba:	b92a      	cbnz	r2, 8008cc8 <_realloc_r+0x24>
 8008cbc:	f7ff f8f8 	bl	8007eb0 <_free_r>
 8008cc0:	4625      	mov	r5, r4
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	f000 f841 	bl	8008d4e <_malloc_usable_size_r>
 8008ccc:	4284      	cmp	r4, r0
 8008cce:	4606      	mov	r6, r0
 8008cd0:	d802      	bhi.n	8008cd8 <_realloc_r+0x34>
 8008cd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cd6:	d8f4      	bhi.n	8008cc2 <_realloc_r+0x1e>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f7ff f95c 	bl	8007f98 <_malloc_r>
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	b908      	cbnz	r0, 8008ce8 <_realloc_r+0x44>
 8008ce4:	4645      	mov	r5, r8
 8008ce6:	e7ec      	b.n	8008cc2 <_realloc_r+0x1e>
 8008ce8:	42b4      	cmp	r4, r6
 8008cea:	4622      	mov	r2, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	bf28      	it	cs
 8008cf0:	4632      	movcs	r2, r6
 8008cf2:	f7ff ff85 	bl	8008c00 <memcpy>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7ff f8d9 	bl	8007eb0 <_free_r>
 8008cfe:	e7f1      	b.n	8008ce4 <_realloc_r+0x40>

08008d00 <__ascii_wctomb>:
 8008d00:	4603      	mov	r3, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	b141      	cbz	r1, 8008d18 <__ascii_wctomb+0x18>
 8008d06:	2aff      	cmp	r2, #255	@ 0xff
 8008d08:	d904      	bls.n	8008d14 <__ascii_wctomb+0x14>
 8008d0a:	228a      	movs	r2, #138	@ 0x8a
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	4770      	bx	lr
 8008d14:	700a      	strb	r2, [r1, #0]
 8008d16:	2001      	movs	r0, #1
 8008d18:	4770      	bx	lr
	...

08008d1c <fiprintf>:
 8008d1c:	b40e      	push	{r1, r2, r3}
 8008d1e:	b503      	push	{r0, r1, lr}
 8008d20:	4601      	mov	r1, r0
 8008d22:	ab03      	add	r3, sp, #12
 8008d24:	4805      	ldr	r0, [pc, #20]	@ (8008d3c <fiprintf+0x20>)
 8008d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2a:	6800      	ldr	r0, [r0, #0]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f000 f83f 	bl	8008db0 <_vfiprintf_r>
 8008d32:	b002      	add	sp, #8
 8008d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d38:	b003      	add	sp, #12
 8008d3a:	4770      	bx	lr
 8008d3c:	20000018 	.word	0x20000018

08008d40 <abort>:
 8008d40:	b508      	push	{r3, lr}
 8008d42:	2006      	movs	r0, #6
 8008d44:	f000 fa08 	bl	8009158 <raise>
 8008d48:	2001      	movs	r0, #1
 8008d4a:	f7f9 f9fd 	bl	8002148 <_exit>

08008d4e <_malloc_usable_size_r>:
 8008d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d52:	1f18      	subs	r0, r3, #4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bfbc      	itt	lt
 8008d58:	580b      	ldrlt	r3, [r1, r0]
 8008d5a:	18c0      	addlt	r0, r0, r3
 8008d5c:	4770      	bx	lr

08008d5e <__sfputc_r>:
 8008d5e:	6893      	ldr	r3, [r2, #8]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	b410      	push	{r4}
 8008d66:	6093      	str	r3, [r2, #8]
 8008d68:	da08      	bge.n	8008d7c <__sfputc_r+0x1e>
 8008d6a:	6994      	ldr	r4, [r2, #24]
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	db01      	blt.n	8008d74 <__sfputc_r+0x16>
 8008d70:	290a      	cmp	r1, #10
 8008d72:	d103      	bne.n	8008d7c <__sfputc_r+0x1e>
 8008d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d78:	f000 b932 	b.w	8008fe0 <__swbuf_r>
 8008d7c:	6813      	ldr	r3, [r2, #0]
 8008d7e:	1c58      	adds	r0, r3, #1
 8008d80:	6010      	str	r0, [r2, #0]
 8008d82:	7019      	strb	r1, [r3, #0]
 8008d84:	4608      	mov	r0, r1
 8008d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <__sfputs_r>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	4606      	mov	r6, r0
 8008d90:	460f      	mov	r7, r1
 8008d92:	4614      	mov	r4, r2
 8008d94:	18d5      	adds	r5, r2, r3
 8008d96:	42ac      	cmp	r4, r5
 8008d98:	d101      	bne.n	8008d9e <__sfputs_r+0x12>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	e007      	b.n	8008dae <__sfputs_r+0x22>
 8008d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da2:	463a      	mov	r2, r7
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7ff ffda 	bl	8008d5e <__sfputc_r>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	d1f3      	bne.n	8008d96 <__sfputs_r+0xa>
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008db0 <_vfiprintf_r>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	460d      	mov	r5, r1
 8008db6:	b09d      	sub	sp, #116	@ 0x74
 8008db8:	4614      	mov	r4, r2
 8008dba:	4698      	mov	r8, r3
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	b118      	cbz	r0, 8008dc8 <_vfiprintf_r+0x18>
 8008dc0:	6a03      	ldr	r3, [r0, #32]
 8008dc2:	b90b      	cbnz	r3, 8008dc8 <_vfiprintf_r+0x18>
 8008dc4:	f7fe f8e8 	bl	8006f98 <__sinit>
 8008dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dca:	07d9      	lsls	r1, r3, #31
 8008dcc:	d405      	bmi.n	8008dda <_vfiprintf_r+0x2a>
 8008dce:	89ab      	ldrh	r3, [r5, #12]
 8008dd0:	059a      	lsls	r2, r3, #22
 8008dd2:	d402      	bmi.n	8008dda <_vfiprintf_r+0x2a>
 8008dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dd6:	f7fe fa0e 	bl	80071f6 <__retarget_lock_acquire_recursive>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	071b      	lsls	r3, r3, #28
 8008dde:	d501      	bpl.n	8008de4 <_vfiprintf_r+0x34>
 8008de0:	692b      	ldr	r3, [r5, #16]
 8008de2:	b99b      	cbnz	r3, 8008e0c <_vfiprintf_r+0x5c>
 8008de4:	4629      	mov	r1, r5
 8008de6:	4630      	mov	r0, r6
 8008de8:	f000 f938 	bl	800905c <__swsetup_r>
 8008dec:	b170      	cbz	r0, 8008e0c <_vfiprintf_r+0x5c>
 8008dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008df0:	07dc      	lsls	r4, r3, #31
 8008df2:	d504      	bpl.n	8008dfe <_vfiprintf_r+0x4e>
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	b01d      	add	sp, #116	@ 0x74
 8008dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfe:	89ab      	ldrh	r3, [r5, #12]
 8008e00:	0598      	lsls	r0, r3, #22
 8008e02:	d4f7      	bmi.n	8008df4 <_vfiprintf_r+0x44>
 8008e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e06:	f7fe f9f7 	bl	80071f8 <__retarget_lock_release_recursive>
 8008e0a:	e7f3      	b.n	8008df4 <_vfiprintf_r+0x44>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e10:	2320      	movs	r3, #32
 8008e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e1a:	2330      	movs	r3, #48	@ 0x30
 8008e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fcc <_vfiprintf_r+0x21c>
 8008e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e24:	f04f 0901 	mov.w	r9, #1
 8008e28:	4623      	mov	r3, r4
 8008e2a:	469a      	mov	sl, r3
 8008e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e30:	b10a      	cbz	r2, 8008e36 <_vfiprintf_r+0x86>
 8008e32:	2a25      	cmp	r2, #37	@ 0x25
 8008e34:	d1f9      	bne.n	8008e2a <_vfiprintf_r+0x7a>
 8008e36:	ebba 0b04 	subs.w	fp, sl, r4
 8008e3a:	d00b      	beq.n	8008e54 <_vfiprintf_r+0xa4>
 8008e3c:	465b      	mov	r3, fp
 8008e3e:	4622      	mov	r2, r4
 8008e40:	4629      	mov	r1, r5
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7ff ffa2 	bl	8008d8c <__sfputs_r>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	f000 80a7 	beq.w	8008f9c <_vfiprintf_r+0x1ec>
 8008e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e50:	445a      	add	r2, fp
 8008e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e54:	f89a 3000 	ldrb.w	r3, [sl]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 809f 	beq.w	8008f9c <_vfiprintf_r+0x1ec>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f04f 32ff 	mov.w	r2, #4294967295
 8008e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e68:	f10a 0a01 	add.w	sl, sl, #1
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	9307      	str	r3, [sp, #28]
 8008e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e76:	4654      	mov	r4, sl
 8008e78:	2205      	movs	r2, #5
 8008e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7e:	4853      	ldr	r0, [pc, #332]	@ (8008fcc <_vfiprintf_r+0x21c>)
 8008e80:	f7f7 f9ae 	bl	80001e0 <memchr>
 8008e84:	9a04      	ldr	r2, [sp, #16]
 8008e86:	b9d8      	cbnz	r0, 8008ec0 <_vfiprintf_r+0x110>
 8008e88:	06d1      	lsls	r1, r2, #27
 8008e8a:	bf44      	itt	mi
 8008e8c:	2320      	movmi	r3, #32
 8008e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e92:	0713      	lsls	r3, r2, #28
 8008e94:	bf44      	itt	mi
 8008e96:	232b      	movmi	r3, #43	@ 0x2b
 8008e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea2:	d015      	beq.n	8008ed0 <_vfiprintf_r+0x120>
 8008ea4:	9a07      	ldr	r2, [sp, #28]
 8008ea6:	4654      	mov	r4, sl
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f04f 0c0a 	mov.w	ip, #10
 8008eae:	4621      	mov	r1, r4
 8008eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eb4:	3b30      	subs	r3, #48	@ 0x30
 8008eb6:	2b09      	cmp	r3, #9
 8008eb8:	d94b      	bls.n	8008f52 <_vfiprintf_r+0x1a2>
 8008eba:	b1b0      	cbz	r0, 8008eea <_vfiprintf_r+0x13a>
 8008ebc:	9207      	str	r2, [sp, #28]
 8008ebe:	e014      	b.n	8008eea <_vfiprintf_r+0x13a>
 8008ec0:	eba0 0308 	sub.w	r3, r0, r8
 8008ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	9304      	str	r3, [sp, #16]
 8008ecc:	46a2      	mov	sl, r4
 8008ece:	e7d2      	b.n	8008e76 <_vfiprintf_r+0xc6>
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	1d19      	adds	r1, r3, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	9103      	str	r1, [sp, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfbb      	ittet	lt
 8008edc:	425b      	neglt	r3, r3
 8008ede:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee2:	9307      	strge	r3, [sp, #28]
 8008ee4:	9307      	strlt	r3, [sp, #28]
 8008ee6:	bfb8      	it	lt
 8008ee8:	9204      	strlt	r2, [sp, #16]
 8008eea:	7823      	ldrb	r3, [r4, #0]
 8008eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eee:	d10a      	bne.n	8008f06 <_vfiprintf_r+0x156>
 8008ef0:	7863      	ldrb	r3, [r4, #1]
 8008ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ef4:	d132      	bne.n	8008f5c <_vfiprintf_r+0x1ac>
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	1d1a      	adds	r2, r3, #4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	9203      	str	r2, [sp, #12]
 8008efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f02:	3402      	adds	r4, #2
 8008f04:	9305      	str	r3, [sp, #20]
 8008f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fdc <_vfiprintf_r+0x22c>
 8008f0a:	7821      	ldrb	r1, [r4, #0]
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	4650      	mov	r0, sl
 8008f10:	f7f7 f966 	bl	80001e0 <memchr>
 8008f14:	b138      	cbz	r0, 8008f26 <_vfiprintf_r+0x176>
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	eba0 000a 	sub.w	r0, r0, sl
 8008f1c:	2240      	movs	r2, #64	@ 0x40
 8008f1e:	4082      	lsls	r2, r0
 8008f20:	4313      	orrs	r3, r2
 8008f22:	3401      	adds	r4, #1
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2a:	4829      	ldr	r0, [pc, #164]	@ (8008fd0 <_vfiprintf_r+0x220>)
 8008f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f30:	2206      	movs	r2, #6
 8008f32:	f7f7 f955 	bl	80001e0 <memchr>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d03f      	beq.n	8008fba <_vfiprintf_r+0x20a>
 8008f3a:	4b26      	ldr	r3, [pc, #152]	@ (8008fd4 <_vfiprintf_r+0x224>)
 8008f3c:	bb1b      	cbnz	r3, 8008f86 <_vfiprintf_r+0x1d6>
 8008f3e:	9b03      	ldr	r3, [sp, #12]
 8008f40:	3307      	adds	r3, #7
 8008f42:	f023 0307 	bic.w	r3, r3, #7
 8008f46:	3308      	adds	r3, #8
 8008f48:	9303      	str	r3, [sp, #12]
 8008f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4c:	443b      	add	r3, r7
 8008f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f50:	e76a      	b.n	8008e28 <_vfiprintf_r+0x78>
 8008f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f56:	460c      	mov	r4, r1
 8008f58:	2001      	movs	r0, #1
 8008f5a:	e7a8      	b.n	8008eae <_vfiprintf_r+0xfe>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	3401      	adds	r4, #1
 8008f60:	9305      	str	r3, [sp, #20]
 8008f62:	4619      	mov	r1, r3
 8008f64:	f04f 0c0a 	mov.w	ip, #10
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f6e:	3a30      	subs	r2, #48	@ 0x30
 8008f70:	2a09      	cmp	r2, #9
 8008f72:	d903      	bls.n	8008f7c <_vfiprintf_r+0x1cc>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0c6      	beq.n	8008f06 <_vfiprintf_r+0x156>
 8008f78:	9105      	str	r1, [sp, #20]
 8008f7a:	e7c4      	b.n	8008f06 <_vfiprintf_r+0x156>
 8008f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f80:	4604      	mov	r4, r0
 8008f82:	2301      	movs	r3, #1
 8008f84:	e7f0      	b.n	8008f68 <_vfiprintf_r+0x1b8>
 8008f86:	ab03      	add	r3, sp, #12
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	4b12      	ldr	r3, [pc, #72]	@ (8008fd8 <_vfiprintf_r+0x228>)
 8008f8e:	a904      	add	r1, sp, #16
 8008f90:	4630      	mov	r0, r6
 8008f92:	f7fd fbbf 	bl	8006714 <_printf_float>
 8008f96:	4607      	mov	r7, r0
 8008f98:	1c78      	adds	r0, r7, #1
 8008f9a:	d1d6      	bne.n	8008f4a <_vfiprintf_r+0x19a>
 8008f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f9e:	07d9      	lsls	r1, r3, #31
 8008fa0:	d405      	bmi.n	8008fae <_vfiprintf_r+0x1fe>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d402      	bmi.n	8008fae <_vfiprintf_r+0x1fe>
 8008fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008faa:	f7fe f925 	bl	80071f8 <__retarget_lock_release_recursive>
 8008fae:	89ab      	ldrh	r3, [r5, #12]
 8008fb0:	065b      	lsls	r3, r3, #25
 8008fb2:	f53f af1f 	bmi.w	8008df4 <_vfiprintf_r+0x44>
 8008fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fb8:	e71e      	b.n	8008df8 <_vfiprintf_r+0x48>
 8008fba:	ab03      	add	r3, sp, #12
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	462a      	mov	r2, r5
 8008fc0:	4b05      	ldr	r3, [pc, #20]	@ (8008fd8 <_vfiprintf_r+0x228>)
 8008fc2:	a904      	add	r1, sp, #16
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7fd fe3d 	bl	8006c44 <_printf_i>
 8008fca:	e7e4      	b.n	8008f96 <_vfiprintf_r+0x1e6>
 8008fcc:	0800953a 	.word	0x0800953a
 8008fd0:	08009544 	.word	0x08009544
 8008fd4:	08006715 	.word	0x08006715
 8008fd8:	08008d8d 	.word	0x08008d8d
 8008fdc:	08009540 	.word	0x08009540

08008fe0 <__swbuf_r>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	b118      	cbz	r0, 8008ff2 <__swbuf_r+0x12>
 8008fea:	6a03      	ldr	r3, [r0, #32]
 8008fec:	b90b      	cbnz	r3, 8008ff2 <__swbuf_r+0x12>
 8008fee:	f7fd ffd3 	bl	8006f98 <__sinit>
 8008ff2:	69a3      	ldr	r3, [r4, #24]
 8008ff4:	60a3      	str	r3, [r4, #8]
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	071a      	lsls	r2, r3, #28
 8008ffa:	d501      	bpl.n	8009000 <__swbuf_r+0x20>
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	b943      	cbnz	r3, 8009012 <__swbuf_r+0x32>
 8009000:	4621      	mov	r1, r4
 8009002:	4628      	mov	r0, r5
 8009004:	f000 f82a 	bl	800905c <__swsetup_r>
 8009008:	b118      	cbz	r0, 8009012 <__swbuf_r+0x32>
 800900a:	f04f 37ff 	mov.w	r7, #4294967295
 800900e:	4638      	mov	r0, r7
 8009010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	6922      	ldr	r2, [r4, #16]
 8009016:	1a98      	subs	r0, r3, r2
 8009018:	6963      	ldr	r3, [r4, #20]
 800901a:	b2f6      	uxtb	r6, r6
 800901c:	4283      	cmp	r3, r0
 800901e:	4637      	mov	r7, r6
 8009020:	dc05      	bgt.n	800902e <__swbuf_r+0x4e>
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	f7ff fd99 	bl	8008b5c <_fflush_r>
 800902a:	2800      	cmp	r0, #0
 800902c:	d1ed      	bne.n	800900a <__swbuf_r+0x2a>
 800902e:	68a3      	ldr	r3, [r4, #8]
 8009030:	3b01      	subs	r3, #1
 8009032:	60a3      	str	r3, [r4, #8]
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	6022      	str	r2, [r4, #0]
 800903a:	701e      	strb	r6, [r3, #0]
 800903c:	6962      	ldr	r2, [r4, #20]
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	429a      	cmp	r2, r3
 8009042:	d004      	beq.n	800904e <__swbuf_r+0x6e>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	07db      	lsls	r3, r3, #31
 8009048:	d5e1      	bpl.n	800900e <__swbuf_r+0x2e>
 800904a:	2e0a      	cmp	r6, #10
 800904c:	d1df      	bne.n	800900e <__swbuf_r+0x2e>
 800904e:	4621      	mov	r1, r4
 8009050:	4628      	mov	r0, r5
 8009052:	f7ff fd83 	bl	8008b5c <_fflush_r>
 8009056:	2800      	cmp	r0, #0
 8009058:	d0d9      	beq.n	800900e <__swbuf_r+0x2e>
 800905a:	e7d6      	b.n	800900a <__swbuf_r+0x2a>

0800905c <__swsetup_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4b29      	ldr	r3, [pc, #164]	@ (8009104 <__swsetup_r+0xa8>)
 8009060:	4605      	mov	r5, r0
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	460c      	mov	r4, r1
 8009066:	b118      	cbz	r0, 8009070 <__swsetup_r+0x14>
 8009068:	6a03      	ldr	r3, [r0, #32]
 800906a:	b90b      	cbnz	r3, 8009070 <__swsetup_r+0x14>
 800906c:	f7fd ff94 	bl	8006f98 <__sinit>
 8009070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009074:	0719      	lsls	r1, r3, #28
 8009076:	d422      	bmi.n	80090be <__swsetup_r+0x62>
 8009078:	06da      	lsls	r2, r3, #27
 800907a:	d407      	bmi.n	800908c <__swsetup_r+0x30>
 800907c:	2209      	movs	r2, #9
 800907e:	602a      	str	r2, [r5, #0]
 8009080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	f04f 30ff 	mov.w	r0, #4294967295
 800908a:	e033      	b.n	80090f4 <__swsetup_r+0x98>
 800908c:	0758      	lsls	r0, r3, #29
 800908e:	d512      	bpl.n	80090b6 <__swsetup_r+0x5a>
 8009090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009092:	b141      	cbz	r1, 80090a6 <__swsetup_r+0x4a>
 8009094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009098:	4299      	cmp	r1, r3
 800909a:	d002      	beq.n	80090a2 <__swsetup_r+0x46>
 800909c:	4628      	mov	r0, r5
 800909e:	f7fe ff07 	bl	8007eb0 <_free_r>
 80090a2:	2300      	movs	r3, #0
 80090a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	2300      	movs	r3, #0
 80090b0:	6063      	str	r3, [r4, #4]
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	f043 0308 	orr.w	r3, r3, #8
 80090bc:	81a3      	strh	r3, [r4, #12]
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	b94b      	cbnz	r3, 80090d6 <__swsetup_r+0x7a>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090cc:	d003      	beq.n	80090d6 <__swsetup_r+0x7a>
 80090ce:	4621      	mov	r1, r4
 80090d0:	4628      	mov	r0, r5
 80090d2:	f000 f883 	bl	80091dc <__smakebuf_r>
 80090d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090da:	f013 0201 	ands.w	r2, r3, #1
 80090de:	d00a      	beq.n	80090f6 <__swsetup_r+0x9a>
 80090e0:	2200      	movs	r2, #0
 80090e2:	60a2      	str	r2, [r4, #8]
 80090e4:	6962      	ldr	r2, [r4, #20]
 80090e6:	4252      	negs	r2, r2
 80090e8:	61a2      	str	r2, [r4, #24]
 80090ea:	6922      	ldr	r2, [r4, #16]
 80090ec:	b942      	cbnz	r2, 8009100 <__swsetup_r+0xa4>
 80090ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090f2:	d1c5      	bne.n	8009080 <__swsetup_r+0x24>
 80090f4:	bd38      	pop	{r3, r4, r5, pc}
 80090f6:	0799      	lsls	r1, r3, #30
 80090f8:	bf58      	it	pl
 80090fa:	6962      	ldrpl	r2, [r4, #20]
 80090fc:	60a2      	str	r2, [r4, #8]
 80090fe:	e7f4      	b.n	80090ea <__swsetup_r+0x8e>
 8009100:	2000      	movs	r0, #0
 8009102:	e7f7      	b.n	80090f4 <__swsetup_r+0x98>
 8009104:	20000018 	.word	0x20000018

08009108 <_raise_r>:
 8009108:	291f      	cmp	r1, #31
 800910a:	b538      	push	{r3, r4, r5, lr}
 800910c:	4605      	mov	r5, r0
 800910e:	460c      	mov	r4, r1
 8009110:	d904      	bls.n	800911c <_raise_r+0x14>
 8009112:	2316      	movs	r3, #22
 8009114:	6003      	str	r3, [r0, #0]
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800911e:	b112      	cbz	r2, 8009126 <_raise_r+0x1e>
 8009120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009124:	b94b      	cbnz	r3, 800913a <_raise_r+0x32>
 8009126:	4628      	mov	r0, r5
 8009128:	f000 f830 	bl	800918c <_getpid_r>
 800912c:	4622      	mov	r2, r4
 800912e:	4601      	mov	r1, r0
 8009130:	4628      	mov	r0, r5
 8009132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009136:	f000 b817 	b.w	8009168 <_kill_r>
 800913a:	2b01      	cmp	r3, #1
 800913c:	d00a      	beq.n	8009154 <_raise_r+0x4c>
 800913e:	1c59      	adds	r1, r3, #1
 8009140:	d103      	bne.n	800914a <_raise_r+0x42>
 8009142:	2316      	movs	r3, #22
 8009144:	6003      	str	r3, [r0, #0]
 8009146:	2001      	movs	r0, #1
 8009148:	e7e7      	b.n	800911a <_raise_r+0x12>
 800914a:	2100      	movs	r1, #0
 800914c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009150:	4620      	mov	r0, r4
 8009152:	4798      	blx	r3
 8009154:	2000      	movs	r0, #0
 8009156:	e7e0      	b.n	800911a <_raise_r+0x12>

08009158 <raise>:
 8009158:	4b02      	ldr	r3, [pc, #8]	@ (8009164 <raise+0xc>)
 800915a:	4601      	mov	r1, r0
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	f7ff bfd3 	b.w	8009108 <_raise_r>
 8009162:	bf00      	nop
 8009164:	20000018 	.word	0x20000018

08009168 <_kill_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d07      	ldr	r5, [pc, #28]	@ (8009188 <_kill_r+0x20>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	4611      	mov	r1, r2
 8009174:	602b      	str	r3, [r5, #0]
 8009176:	f7f8 ffd7 	bl	8002128 <_kill>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d102      	bne.n	8009184 <_kill_r+0x1c>
 800917e:	682b      	ldr	r3, [r5, #0]
 8009180:	b103      	cbz	r3, 8009184 <_kill_r+0x1c>
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	bd38      	pop	{r3, r4, r5, pc}
 8009186:	bf00      	nop
 8009188:	20000644 	.word	0x20000644

0800918c <_getpid_r>:
 800918c:	f7f8 bfc4 	b.w	8002118 <_getpid>

08009190 <__swhatbuf_r>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	460c      	mov	r4, r1
 8009194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009198:	2900      	cmp	r1, #0
 800919a:	b096      	sub	sp, #88	@ 0x58
 800919c:	4615      	mov	r5, r2
 800919e:	461e      	mov	r6, r3
 80091a0:	da0d      	bge.n	80091be <__swhatbuf_r+0x2e>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091a8:	f04f 0100 	mov.w	r1, #0
 80091ac:	bf14      	ite	ne
 80091ae:	2340      	movne	r3, #64	@ 0x40
 80091b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091b4:	2000      	movs	r0, #0
 80091b6:	6031      	str	r1, [r6, #0]
 80091b8:	602b      	str	r3, [r5, #0]
 80091ba:	b016      	add	sp, #88	@ 0x58
 80091bc:	bd70      	pop	{r4, r5, r6, pc}
 80091be:	466a      	mov	r2, sp
 80091c0:	f000 f848 	bl	8009254 <_fstat_r>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	dbec      	blt.n	80091a2 <__swhatbuf_r+0x12>
 80091c8:	9901      	ldr	r1, [sp, #4]
 80091ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091d2:	4259      	negs	r1, r3
 80091d4:	4159      	adcs	r1, r3
 80091d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091da:	e7eb      	b.n	80091b4 <__swhatbuf_r+0x24>

080091dc <__smakebuf_r>:
 80091dc:	898b      	ldrh	r3, [r1, #12]
 80091de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091e0:	079d      	lsls	r5, r3, #30
 80091e2:	4606      	mov	r6, r0
 80091e4:	460c      	mov	r4, r1
 80091e6:	d507      	bpl.n	80091f8 <__smakebuf_r+0x1c>
 80091e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	6123      	str	r3, [r4, #16]
 80091f0:	2301      	movs	r3, #1
 80091f2:	6163      	str	r3, [r4, #20]
 80091f4:	b003      	add	sp, #12
 80091f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f8:	ab01      	add	r3, sp, #4
 80091fa:	466a      	mov	r2, sp
 80091fc:	f7ff ffc8 	bl	8009190 <__swhatbuf_r>
 8009200:	9f00      	ldr	r7, [sp, #0]
 8009202:	4605      	mov	r5, r0
 8009204:	4639      	mov	r1, r7
 8009206:	4630      	mov	r0, r6
 8009208:	f7fe fec6 	bl	8007f98 <_malloc_r>
 800920c:	b948      	cbnz	r0, 8009222 <__smakebuf_r+0x46>
 800920e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009212:	059a      	lsls	r2, r3, #22
 8009214:	d4ee      	bmi.n	80091f4 <__smakebuf_r+0x18>
 8009216:	f023 0303 	bic.w	r3, r3, #3
 800921a:	f043 0302 	orr.w	r3, r3, #2
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	e7e2      	b.n	80091e8 <__smakebuf_r+0xc>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	6020      	str	r0, [r4, #0]
 8009226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009232:	b15b      	cbz	r3, 800924c <__smakebuf_r+0x70>
 8009234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009238:	4630      	mov	r0, r6
 800923a:	f000 f81d 	bl	8009278 <_isatty_r>
 800923e:	b128      	cbz	r0, 800924c <__smakebuf_r+0x70>
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	f023 0303 	bic.w	r3, r3, #3
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	81a3      	strh	r3, [r4, #12]
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	431d      	orrs	r5, r3
 8009250:	81a5      	strh	r5, [r4, #12]
 8009252:	e7cf      	b.n	80091f4 <__smakebuf_r+0x18>

08009254 <_fstat_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	@ (8009274 <_fstat_r+0x20>)
 8009258:	2300      	movs	r3, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	4611      	mov	r1, r2
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	f7f8 ffc1 	bl	80021e8 <_fstat>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d102      	bne.n	8009270 <_fstat_r+0x1c>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	b103      	cbz	r3, 8009270 <_fstat_r+0x1c>
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	bd38      	pop	{r3, r4, r5, pc}
 8009272:	bf00      	nop
 8009274:	20000644 	.word	0x20000644

08009278 <_isatty_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d06      	ldr	r5, [pc, #24]	@ (8009294 <_isatty_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7f8 ffc0 	bl	8002208 <_isatty>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_isatty_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_isatty_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000644 	.word	0x20000644

08009298 <_init>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	bf00      	nop
 800929c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800929e:	bc08      	pop	{r3}
 80092a0:	469e      	mov	lr, r3
 80092a2:	4770      	bx	lr

080092a4 <_fini>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr
