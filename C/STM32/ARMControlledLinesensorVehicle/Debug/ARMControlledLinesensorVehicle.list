
ARMControlledLinesensorVehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e40  08003e40  00004e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e58  08003e58  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e58  08003e58  00004e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e60  08003e60  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e60  08003e60  00004e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e64  08003e64  00004e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003e68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          000000b8  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce16  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf0  00000000  00000000  00011e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00013a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009dd  00000000  00000000  000146d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202ac  00000000  00000000  000150b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db65  00000000  00000000  00035361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7967  00000000  00000000  00042ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a82d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003560  00000000  00000000  0010a870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e28 	.word	0x08003e28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003e28 	.word	0x08003e28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
void backLeft(void);
void hardBackLeft(void);
void hardBackRight(void);

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
  HAL_Init();
 80004fa:	f000 fda3 	bl	8001044 <HAL_Init>
  SystemClock_Config();
 80004fe:	f000 f9c7 	bl	8000890 <SystemClock_Config>
  MX_GPIO_Init();
 8000502:	f000 fb01 	bl	8000b08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000506:	f000 fa21 	bl	800094c <MX_TIM1_Init>
  MX_UART4_Init();
 800050a:	f000 facb 	bl	8000aa4 <MX_UART4_Init>

  HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	497b      	ldr	r1, [pc, #492]	@ (8000700 <main+0x20c>)
 8000512:	487c      	ldr	r0, [pc, #496]	@ (8000704 <main+0x210>)
 8000514:	f002 fd24 	bl	8002f60 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	487b      	ldr	r0, [pc, #492]	@ (8000708 <main+0x214>)
 800051c:	f001 fe9a 	bl	8002254 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000520:	2104      	movs	r1, #4
 8000522:	4879      	ldr	r0, [pc, #484]	@ (8000708 <main+0x214>)
 8000524:	f001 fe96 	bl	8002254 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2140      	movs	r1, #64	@ 0x40
 800052c:	4877      	ldr	r0, [pc, #476]	@ (800070c <main+0x218>)
 800052e:	f001 f977 	bl	8001820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	4875      	ldr	r0, [pc, #468]	@ (800070c <main+0x218>)
 8000538:	f001 f972 	bl	8001820 <HAL_GPIO_WritePin>

  forward();
 800053c:	f000 fb9c 	bl	8000c78 <forward>



  while (1)
  {
	  if (mode == 1) // AUTONOMOUS mode
 8000540:	4b73      	ldr	r3, [pc, #460]	@ (8000710 <main+0x21c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b01      	cmp	r3, #1
 8000548:	d1fa      	bne.n	8000540 <main+0x4c>
	  {
		  if(temp == 0)
 800054a:	4b72      	ldr	r3, [pc, #456]	@ (8000714 <main+0x220>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d104      	bne.n	800055c <main+0x68>
              HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	486d      	ldr	r0, [pc, #436]	@ (800070c <main+0x218>)
 8000558:	f001 f962 	bl	8001820 <HAL_GPIO_WritePin>
		  //HAL_Delay(Delay);
		  int sensors[5];
		  sensors[0] = HAL_GPIO_ReadPin(lineSensorPort, D1);
 800055c:	2104      	movs	r1, #4
 800055e:	486e      	ldr	r0, [pc, #440]	@ (8000718 <main+0x224>)
 8000560:	f001 f946 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	603b      	str	r3, [r7, #0]
		  sensors[1] = HAL_GPIO_ReadPin(lineSensorPort, D2);
 8000568:	2108      	movs	r1, #8
 800056a:	486b      	ldr	r0, [pc, #428]	@ (8000718 <main+0x224>)
 800056c:	f001 f940 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	607b      	str	r3, [r7, #4]
		  sensors[2] = HAL_GPIO_ReadPin(lineSensorPort, D3);
 8000574:	2110      	movs	r1, #16
 8000576:	4868      	ldr	r0, [pc, #416]	@ (8000718 <main+0x224>)
 8000578:	f001 f93a 	bl	80017f0 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	60bb      	str	r3, [r7, #8]
		  sensors[3] = HAL_GPIO_ReadPin(lineSensorPort, D4);
 8000580:	2120      	movs	r1, #32
 8000582:	4865      	ldr	r0, [pc, #404]	@ (8000718 <main+0x224>)
 8000584:	f001 f934 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	60fb      	str	r3, [r7, #12]
		  sensors[4] = HAL_GPIO_ReadPin(lineSensorPort, D5);
 800058c:	2140      	movs	r1, #64	@ 0x40
 800058e:	4862      	ldr	r0, [pc, #392]	@ (8000718 <main+0x224>)
 8000590:	f001 f92e 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	613b      	str	r3, [r7, #16]

		  char sensor = (sensors[0] << 4) | (sensors[1] << 3) | (sensors[2] << 2) | (sensors[3] << 1) | sensors[4];
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	b25b      	sxtb	r3, r3
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	b25a      	sxtb	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25a      	sxtb	r2, r3
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	75fb      	strb	r3, [r7, #23]
		  sensor = sensor & 0b00011111;
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	f003 031f 	and.w	r3, r3, #31
 80005d4:	75fb      	strb	r3, [r7, #23]

		  switch (sensor)
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	2b17      	cmp	r3, #23
 80005da:	dc34      	bgt.n	8000646 <main+0x152>
 80005dc:	2b03      	cmp	r3, #3
 80005de:	da1a      	bge.n	8000616 <main+0x122>
 80005e0:	e084      	b.n	80006ec <main+0x1f8>
 80005e2:	461a      	mov	r2, r3
 80005e4:	2301      	movs	r3, #1
 80005e6:	4093      	lsls	r3, r2
 80005e8:	f003 42a2 	and.w	r2, r3, #1358954496	@ 0x51000000
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2201      	movne	r2, #1
 80005f2:	2200      	moveq	r2, #0
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d172      	bne.n	80006e0 <main+0x1ec>
 80005fa:	f003 5208 	and.w	r2, r3, #570425344	@ 0x22000000
 80005fe:	2a00      	cmp	r2, #0
 8000600:	bf14      	ite	ne
 8000602:	2201      	movne	r2, #1
 8000604:	2200      	moveq	r2, #0
 8000606:	b2d2      	uxtb	r2, r2
 8000608:	2a00      	cmp	r2, #0
 800060a:	d15c      	bne.n	80006c6 <main+0x1d2>
 800060c:	0fdb      	lsrs	r3, r3, #31
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d11d      	bne.n	8000650 <main+0x15c>
 8000614:	e06a      	b.n	80006ec <main+0x1f8>
 8000616:	461a      	mov	r2, r3
 8000618:	2301      	movs	r3, #1
 800061a:	fa03 f202 	lsl.w	r2, r3, r2
 800061e:	f248 0388 	movw	r3, #32904	@ 0x8088
 8000622:	4013      	ands	r3, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	bf14      	ite	ne
 8000628:	2301      	movne	r3, #1
 800062a:	2300      	moveq	r3, #0
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d14f      	bne.n	80006d2 <main+0x1de>
 8000632:	f402 0308 	and.w	r3, r2, #8912896	@ 0x880000
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf14      	ite	ne
 800063a:	2301      	movne	r3, #1
 800063c:	2300      	moveq	r3, #0
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d139      	bne.n	80006b8 <main+0x1c4>
 8000644:	e052      	b.n	80006ec <main+0x1f8>
 8000646:	2b1f      	cmp	r3, #31
 8000648:	dc50      	bgt.n	80006ec <main+0x1f8>
 800064a:	2b18      	cmp	r3, #24
 800064c:	dac9      	bge.n	80005e2 <main+0xee>
 800064e:	e04d      	b.n	80006ec <main+0x1f8>
		  {
		  	  case 0b11111:
	              stop();
 8000650:	f000 fb36 	bl	8000cc0 <stop>
	              HAL_Delay(Delay);
 8000654:	2032      	movs	r0, #50	@ 0x32
 8000656:	f000 fd67 	bl	8001128 <HAL_Delay>
		  		  if(temp == -1)
 800065a:	4b2e      	ldr	r3, [pc, #184]	@ (8000714 <main+0x220>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000662:	d112      	bne.n	800068a <main+0x196>
		  		  {
		  			  shapeLeft();
 8000664:	f000 faf6 	bl	8000c54 <shapeLeft>
					  while (HAL_GPIO_ReadPin(lineSensorPort, D1) == GPIO_PIN_SET && mode == 1) HAL_Delay(10);
 8000668:	e002      	b.n	8000670 <main+0x17c>
 800066a:	200a      	movs	r0, #10
 800066c:	f000 fd5c 	bl	8001128 <HAL_Delay>
 8000670:	2104      	movs	r1, #4
 8000672:	4829      	ldr	r0, [pc, #164]	@ (8000718 <main+0x224>)
 8000674:	f001 f8bc 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d13e      	bne.n	80006fc <main+0x208>
 800067e:	4b24      	ldr	r3, [pc, #144]	@ (8000710 <main+0x21c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	d0f0      	beq.n	800066a <main+0x176>
		  		  else if (temp == 1)
		  		  {
		  			  shapeRight();
		  			  while (HAL_GPIO_ReadPin(lineSensorPort, D5) == GPIO_PIN_SET && mode == 1) HAL_Delay(10);
		  		  }
		  		  break;
 8000688:	e038      	b.n	80006fc <main+0x208>
		  		  else if (temp == 1)
 800068a:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <main+0x220>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d134      	bne.n	80006fc <main+0x208>
		  			  shapeRight();
 8000692:	f000 facd 	bl	8000c30 <shapeRight>
		  			  while (HAL_GPIO_ReadPin(lineSensorPort, D5) == GPIO_PIN_SET && mode == 1) HAL_Delay(10);
 8000696:	e002      	b.n	800069e <main+0x1aa>
 8000698:	200a      	movs	r0, #10
 800069a:	f000 fd45 	bl	8001128 <HAL_Delay>
 800069e:	2140      	movs	r1, #64	@ 0x40
 80006a0:	481d      	ldr	r0, [pc, #116]	@ (8000718 <main+0x224>)
 80006a2:	f001 f8a5 	bl	80017f0 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d127      	bne.n	80006fc <main+0x208>
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <main+0x21c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d0f0      	beq.n	8000698 <main+0x1a4>
		  		  break;
 80006b6:	e021      	b.n	80006fc <main+0x208>
		  	  case 0b10011:
		  	  case 0b10111:
		  		  turnLeft();
 80006b8:	f000 fb24 	bl	8000d04 <turnLeft>
		  		  temp = -1;
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <main+0x220>)
 80006be:	f04f 32ff 	mov.w	r2, #4294967295
 80006c2:	601a      	str	r2, [r3, #0]
		  		  break;
 80006c4:	e01b      	b.n	80006fe <main+0x20a>
		  	  case 0b11001:
		  	  case 0b11101:
		  		  turnRight();
 80006c6:	f000 fb0b 	bl	8000ce0 <turnRight>
		  		  temp = 1;
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <main+0x220>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
		  		  break;
 80006d0:	e015      	b.n	80006fe <main+0x20a>
		  	  case 0b00011:
		  	  case 0b00111:
		  	  case 0b01111:
		  		  hardLeft(); //HAL_Delay(Delay);
 80006d2:	f000 fb5c 	bl	8000d8e <hardLeft>
		  		  temp = -1;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <main+0x220>)
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	601a      	str	r2, [r3, #0]
		  		  break;
 80006de:	e00e      	b.n	80006fe <main+0x20a>
		  	  case 0b11000:
		  	  case 0b11100:
		  	  case 0b11110:
		  		  hardRight(); //HAL_Delay(Delay);
 80006e0:	f000 fb44 	bl	8000d6c <hardRight>
		  		  temp = 1;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <main+0x220>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
		  		  break;
 80006ea:	e008      	b.n	80006fe <main+0x20a>
			  default: //11011
				  forward();
 80006ec:	f000 fac4 	bl	8000c78 <forward>
	              HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2140      	movs	r1, #64	@ 0x40
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <main+0x218>)
 80006f6:	f001 f893 	bl	8001820 <HAL_GPIO_WritePin>
				  break;
 80006fa:	e000      	b.n	80006fe <main+0x20a>
		  		  break;
 80006fc:	bf00      	nop
	  if (mode == 1) // AUTONOMOUS mode
 80006fe:	e71f      	b.n	8000540 <main+0x4c>
 8000700:	200000bc 	.word	0x200000bc
 8000704:	20000074 	.word	0x20000074
 8000708:	2000002c 	.word	0x2000002c
 800070c:	40020000 	.word	0x40020000
 8000710:	20000000 	.word	0x20000000
 8000714:	200000c0 	.word	0x200000c0
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_UART_RxCpltCallback>:
	  // In MANUAL mode, do nothing; control is handled by UART interrupt
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart4)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    if (huart4->Instance == UART4)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a55      	ldr	r2, [pc, #340]	@ (8000880 <HAL_UART_RxCpltCallback+0x164>)
 800072a:	4293      	cmp	r3, r2
 800072c:	f040 809f 	bne.w	800086e <HAL_UART_RxCpltCallback+0x152>
    {
        switch (rx_data)
 8000730:	4b54      	ldr	r3, [pc, #336]	@ (8000884 <HAL_UART_RxCpltCallback+0x168>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b42      	subs	r3, #66	@ 0x42
 8000736:	2b11      	cmp	r3, #17
 8000738:	f200 8098 	bhi.w	800086c <HAL_UART_RxCpltCallback+0x150>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <HAL_UART_RxCpltCallback+0x28>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007cd 	.word	0x080007cd
 8000748:	0800086d 	.word	0x0800086d
 800074c:	0800086d 	.word	0x0800086d
 8000750:	0800086d 	.word	0x0800086d
 8000754:	080007ad 	.word	0x080007ad
 8000758:	080007ed 	.word	0x080007ed
 800075c:	0800080d 	.word	0x0800080d
 8000760:	0800082d 	.word	0x0800082d
 8000764:	0800084d 	.word	0x0800084d
 8000768:	0800086d 	.word	0x0800086d
 800076c:	0800078d 	.word	0x0800078d
 8000770:	0800086d 	.word	0x0800086d
 8000774:	0800086d 	.word	0x0800086d
 8000778:	0800086d 	.word	0x0800086d
 800077c:	0800086d 	.word	0x0800086d
 8000780:	0800086d 	.word	0x0800086d
 8000784:	0800078d 	.word	0x0800078d
 8000788:	0800078d 	.word	0x0800078d
        {
            case 'S':
            case 'L':
            case 'R':// Resume autonomous mode
                mode = 0;
 800078c:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <HAL_UART_RxCpltCallback+0x16c>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		  		stop(); // Stop motors before resuming line-following
 8000792:	f000 fa95 	bl	8000cc0 <stop>
                HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	483c      	ldr	r0, [pc, #240]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 800079c:	f001 f840 	bl	8001820 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	4839      	ldr	r0, [pc, #228]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 80007a6:	f001 f83b 	bl	8001820 <HAL_GPIO_WritePin>
                break;
 80007aa:	e060      	b.n	800086e <HAL_UART_RxCpltCallback+0x152>
            case 'F': // Forward
                mode = 0;
 80007ac:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <HAL_UART_RxCpltCallback+0x16c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
                forward();
 80007b2:	f000 fa61 	bl	8000c78 <forward>
                HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4834      	ldr	r0, [pc, #208]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 80007bc:	f001 f830 	bl	8001820 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	4831      	ldr	r0, [pc, #196]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 80007c6:	f001 f82b 	bl	8001820 <HAL_GPIO_WritePin>
                break;
 80007ca:	e050      	b.n	800086e <HAL_UART_RxCpltCallback+0x152>
            case 'B': // Backward
                mode = 0;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <HAL_UART_RxCpltCallback+0x16c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
                backward();
 80007d2:	f000 fa63 	bl	8000c9c <backward>
                HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2140      	movs	r1, #64	@ 0x40
 80007da:	482c      	ldr	r0, [pc, #176]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 80007dc:	f001 f820 	bl	8001820 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	4829      	ldr	r0, [pc, #164]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 80007e6:	f001 f81b 	bl	8001820 <HAL_GPIO_WritePin>
                break;
 80007ea:	e040      	b.n	800086e <HAL_UART_RxCpltCallback+0x152>
            case 'G': // Forward left
                mode = 0;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <HAL_UART_RxCpltCallback+0x16c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
                hardLeft();
 80007f2:	f000 facc 	bl	8000d8e <hardLeft>
                HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2140      	movs	r1, #64	@ 0x40
 80007fa:	4824      	ldr	r0, [pc, #144]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 80007fc:	f001 f810 	bl	8001820 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2180      	movs	r1, #128	@ 0x80
 8000804:	4821      	ldr	r0, [pc, #132]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 8000806:	f001 f80b 	bl	8001820 <HAL_GPIO_WritePin>
                break;
 800080a:	e030      	b.n	800086e <HAL_UART_RxCpltCallback+0x152>
            case 'H': // Forward right
                mode = 0;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <HAL_UART_RxCpltCallback+0x16c>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
                hardRight();
 8000812:	f000 faab 	bl	8000d6c <hardRight>
                HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	@ 0x40
 800081a:	481c      	ldr	r0, [pc, #112]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 800081c:	f001 f800 	bl	8001820 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	4819      	ldr	r0, [pc, #100]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 8000826:	f000 fffb 	bl	8001820 <HAL_GPIO_WritePin>
                break;
 800082a:	e020      	b.n	800086e <HAL_UART_RxCpltCallback+0x152>
            case 'I': // Backward left
                mode = 0;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <HAL_UART_RxCpltCallback+0x16c>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
                hardBackLeft();
 8000832:	f000 fa8a 	bl	8000d4a <hardBackLeft>
                HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	@ 0x40
 800083a:	4814      	ldr	r0, [pc, #80]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 800083c:	f000 fff0 	bl	8001820 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2180      	movs	r1, #128	@ 0x80
 8000844:	4811      	ldr	r0, [pc, #68]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 8000846:	f000 ffeb 	bl	8001820 <HAL_GPIO_WritePin>
                break;
 800084a:	e010      	b.n	800086e <HAL_UART_RxCpltCallback+0x152>
            case 'J': // Backward right
                mode = 0;
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <HAL_UART_RxCpltCallback+0x16c>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
                hardBackRight();
 8000852:	f000 fa69 	bl	8000d28 <hardBackRight>
                HAL_GPIO_WritePin(LEDPort, LED1, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	480c      	ldr	r0, [pc, #48]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 800085c:	f000 ffe0 	bl	8001820 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LEDPort, LED2, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2180      	movs	r1, #128	@ 0x80
 8000864:	4809      	ldr	r0, [pc, #36]	@ (800088c <HAL_UART_RxCpltCallback+0x170>)
 8000866:	f000 ffdb 	bl	8001820 <HAL_GPIO_WritePin>
                break;
 800086a:	e000      	b.n	800086e <HAL_UART_RxCpltCallback+0x152>
            default:
                break;
 800086c:	bf00      	nop
        }
    }
    // Re-enable UART interrupt
    HAL_UART_Receive_IT(huart4, &rx_data, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	4904      	ldr	r1, [pc, #16]	@ (8000884 <HAL_UART_RxCpltCallback+0x168>)
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f002 fb74 	bl	8002f60 <HAL_UART_Receive_IT>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40004c00 	.word	0x40004c00
 8000884:	200000bc 	.word	0x200000bc
 8000888:	20000000 	.word	0x20000000
 800088c:	40020000 	.word	0x40020000

08000890 <SystemClock_Config>:
//        HAL_UART_Receive_IT(huart, (uint8_t*)&rx_data, 1);
//    }
//}

void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	@ 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	@ 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fa96 	bl	8003dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <SystemClock_Config+0xb4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <SystemClock_Config+0xb4>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <SystemClock_Config+0xb4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <SystemClock_Config+0xb8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000948 <SystemClock_Config+0xb8>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <SystemClock_Config+0xb8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f000 ffa7 	bl	8001854 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800090c:	f000 f94e 	bl	8000bac <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fa0a 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000936:	f000 f939 	bl	8000bac <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	@ 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	@ 0x58
 8000950:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2220      	movs	r2, #32
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fa23 	bl	8003dd0 <memset>

  htim1.Instance = TIM1;
 800098a:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <MX_TIM1_Init+0x150>)
 800098c:	4a44      	ldr	r2, [pc, #272]	@ (8000aa0 <MX_TIM1_Init+0x154>)
 800098e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000990:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <MX_TIM1_Init+0x150>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b41      	ldr	r3, [pc, #260]	@ (8000a9c <MX_TIM1_Init+0x150>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800099c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a9c <MX_TIM1_Init+0x150>)
 800099e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b3d      	ldr	r3, [pc, #244]	@ (8000a9c <MX_TIM1_Init+0x150>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009aa:	4b3c      	ldr	r3, [pc, #240]	@ (8000a9c <MX_TIM1_Init+0x150>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b3a      	ldr	r3, [pc, #232]	@ (8000a9c <MX_TIM1_Init+0x150>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b6:	4839      	ldr	r0, [pc, #228]	@ (8000a9c <MX_TIM1_Init+0x150>)
 80009b8:	f001 fba4 	bl	8002104 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009c2:	f000 f8f3 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009d0:	4619      	mov	r1, r3
 80009d2:	4832      	ldr	r0, [pc, #200]	@ (8000a9c <MX_TIM1_Init+0x150>)
 80009d4:	f001 fdc8 	bl	8002568 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009de:	f000 f8e5 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e2:	482e      	ldr	r0, [pc, #184]	@ (8000a9c <MX_TIM1_Init+0x150>)
 80009e4:	f001 fbdd 	bl	80021a2 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009ee:	f000 f8dd 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009fe:	4619      	mov	r1, r3
 8000a00:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <MX_TIM1_Init+0x150>)
 8000a02:	f002 f98f 	bl	8002d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a0c:	f000 f8ce 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	@ 0x60
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	4819      	ldr	r0, [pc, #100]	@ (8000a9c <MX_TIM1_Init+0x150>)
 8000a36:	f001 fcd5 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a40:	f000 f8b4 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a48:	2204      	movs	r2, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <MX_TIM1_Init+0x150>)
 8000a4e:	f001 fcc9 	bl	80023e4 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a58:	f000 f8a8 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <MX_TIM1_Init+0x150>)
 8000a80:	f002 f9cc 	bl	8002e1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a8a:	f000 f88f 	bl	8000bac <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000a8e:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <MX_TIM1_Init+0x150>)
 8000a90:	f000 f9d8 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 8000a94:	bf00      	nop
 8000a96:	3758      	adds	r7, #88	@ 0x58
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000002c 	.word	0x2000002c
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <MX_UART4_Init>:

static void MX_UART4_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <MX_UART4_Init+0x60>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000ab0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ab4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ada:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <MX_UART4_Init+0x5c>)
 8000adc:	f002 f9f0 	bl	8002ec0 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f861 	bl	8000bac <Error_Handler>
  }

  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2034      	movs	r0, #52	@ 0x34
 8000af0:	f000 fc19 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000af4:	2034      	movs	r0, #52	@ 0x34
 8000af6:	f000 fc32 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000074 	.word	0x20000074
 8000b04:	40004c00 	.word	0x40004c00

08000b08 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_GPIO_Init+0x98>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <MX_GPIO_Init+0x98>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_GPIO_Init+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_GPIO_Init+0x98>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <MX_GPIO_Init+0x98>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_GPIO_Init+0x98>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8000b56:	2200      	movs	r2, #0
 8000b58:	f649 41c0 	movw	r1, #40128	@ 0x9cc0
 8000b5c:	4811      	ldr	r0, [pc, #68]	@ (8000ba4 <MX_GPIO_Init+0x9c>)
 8000b5e:	f000 fe5f 	bl	8001820 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000b62:	237c      	movs	r3, #124	@ 0x7c
 8000b64:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_GPIO_Init+0xa0>)
 8000b76:	f000 fc9f 	bl	80014b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8000b7a:	f649 43c0 	movw	r3, #40128	@ 0x9cc0
 8000b7e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_GPIO_Init+0x9c>)
 8000b94:	f000 fc90 	bl	80014b8 <HAL_GPIO_Init>
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40021000 	.word	0x40021000

08000bac <Error_Handler>:

void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <setMotor>:
  {
  }
}

void setMotor(uint8_t lw_f, uint8_t lw_i, uint8_t rw_f, uint8_t rw_i, uint16_t lw_speed, uint16_t rw_speed)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4623      	mov	r3, r4
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71bb      	strb	r3, [r7, #6]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	717b      	strb	r3, [r7, #5]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	713b      	strb	r3, [r7, #4]
    // Left wheel
    HAL_GPIO_WritePin(motorPort, LW_f, lw_f);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bde:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <setMotor+0x70>)
 8000be0:	f000 fe1e 	bl	8001820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motorPort, LW_i, lw_i);
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	461a      	mov	r2, r3
 8000be8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bec:	480e      	ldr	r0, [pc, #56]	@ (8000c28 <setMotor+0x70>)
 8000bee:	f000 fe17 	bl	8001820 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, lw_speed);
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <setMotor+0x74>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	8b3a      	ldrh	r2, [r7, #24]
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Right wheel
    HAL_GPIO_WritePin(motorPort, RW_f, rw_f);
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c02:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <setMotor+0x70>)
 8000c04:	f000 fe0c 	bl	8001820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motorPort, RW_i, rw_i);
 8000c08:	793b      	ldrb	r3, [r7, #4]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <setMotor+0x70>)
 8000c12:	f000 fe05 	bl	8001820 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, rw_speed);
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <setMotor+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	8bba      	ldrh	r2, [r7, #28]
 8000c1c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	2000002c 	.word	0x2000002c

08000c30 <shapeRight>:

void shapeRight()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, maxSpeed, maxSpeed);
 8000c36:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ffb5 	bl	8000bb8 <setMotor>
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <shapeLeft>:

void shapeLeft()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, maxSpeed, maxSpeed);
 8000c5a:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ffa3 	bl	8000bb8 <setMotor>
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <forward>:

void forward()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, maxSpeed, maxSpeed);
 8000c7e:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff ff91 	bl	8000bb8 <setMotor>
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <backward>:

void backward()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, maxSpeed, maxSpeed);
 8000ca2:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff7f 	bl	8000bb8 <setMotor>
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <stop>:

void stop()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, 0, 0);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff ff6f 	bl	8000bb8 <setMotor>
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <turnRight>:

void turnRight()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, maxSpeed, maxSpeed - halfSpeed);
 8000ce6:	f245 73e4 	movw	r3, #22500	@ 0x57e4
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ff5d 	bl	8000bb8 <setMotor>
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <turnLeft>:

void turnLeft()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, maxSpeed - halfSpeed, maxSpeed);
 8000d0a:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	f245 73e4 	movw	r3, #22500	@ 0x57e4
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2300      	movs	r3, #0
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff ff4b 	bl	8000bb8 <setMotor>
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <hardBackRight>:
{
    setMotor(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, maxSpeed - halfSpeed, maxSpeed);
}

void hardBackRight()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, maxSpeed, 0);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ff3a 	bl	8000bb8 <setMotor>
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <hardBackLeft>:

void hardBackLeft()
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, 0, maxSpeed);
 8000d50:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	2300      	movs	r3, #0
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ff29 	bl	8000bb8 <setMotor>
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <hardRight>:

void hardRight()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, maxSpeed, 0);
 8000d72:	2300      	movs	r3, #0
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff ff18 	bl	8000bb8 <setMotor>
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <hardLeft>:

void hardLeft()
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af02      	add	r7, sp, #8
    setMotor(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET, 0, maxSpeed);
 8000d94:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2201      	movs	r2, #1
 8000da2:	2100      	movs	r1, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ff07 	bl	8000bb8 <setMotor>
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	4a08      	ldr	r2, [pc, #32]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <HAL_TIM_Base_MspInit+0x3c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10d      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_TIM_Base_MspInit+0x40>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <HAL_TIM_Base_MspInit+0x40>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <HAL_TIM_Base_MspInit+0x40>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <HAL_TIM_MspPostInit+0x68>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d11e      	bne.n	8000ea4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_TIM_MspPostInit+0x6c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <HAL_TIM_MspPostInit+0x6c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_TIM_MspPostInit+0x6c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_TIM_MspPostInit+0x70>)
 8000ea0:	f000 fb0a 	bl	80014b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <HAL_UART_MspInit+0x94>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d133      	bne.n	8000f42 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <HAL_UART_MspInit+0x98>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_UART_MspInit+0x98>)
 8000ee4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <HAL_UART_MspInit+0x98>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <HAL_UART_MspInit+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <HAL_UART_MspInit+0x98>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_UART_MspInit+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f12:	2303      	movs	r3, #3
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f22:	2308      	movs	r3, #8
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <HAL_UART_MspInit+0x9c>)
 8000f2e:	f000 fac3 	bl	80014b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2034      	movs	r0, #52	@ 0x34
 8000f38:	f000 f9f5 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f3c:	2034      	movs	r0, #52	@ 0x34
 8000f3e:	f000 fa0e 	bl	800135e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004c00 	.word	0x40004c00
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <NMI_Handler+0x4>

08000f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <MemManage_Handler+0x4>

08000f70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fae:	f000 f89b 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <UART4_IRQHandler+0x10>)
 8000fbe:	f001 fff5 	bl	8002fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000074 	.word	0x20000074

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001028 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f002 fedf 	bl	8003de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fa67 	bl	80004f4 <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001034:	08003e68 	.word	0x08003e68
  ldr r2, =_sbss
 8001038:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800103c:	200000c8 	.word	0x200000c8

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f94f 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	200f      	movs	r0, #15
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fe9a 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f967 	bl	800137a <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f92f 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000004 	.word	0x20000004
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c
 800110c:	200000c4 	.word	0x200000c4

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000c4 	.word	0x200000c4

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000000c 	.word	0x2000000c

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	@ (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff feb6 	bl	8001110 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d008      	beq.n	80013c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e052      	b.n	800146a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0216 	bic.w	r2, r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d103      	bne.n	80013f4 <HAL_DMA_Abort+0x62>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0208 	bic.w	r2, r2, #8
 8001402:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001414:	e013      	b.n	800143e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001416:	f7ff fe7b 	bl	8001110 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b05      	cmp	r3, #5
 8001422:	d90c      	bls.n	800143e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2220      	movs	r2, #32
 8001428:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2203      	movs	r2, #3
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e015      	b.n	800146a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e4      	bne.n	8001416 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001450:	223f      	movs	r2, #63	@ 0x3f
 8001452:	409a      	lsls	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d004      	beq.n	8001490 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2280      	movs	r2, #128	@ 0x80
 800148a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e00c      	b.n	80014aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2205      	movs	r2, #5
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e16b      	b.n	80017ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 815a 	bne.w	80017a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	2b02      	cmp	r3, #2
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d017      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80b4 	beq.w	80017a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b60      	ldr	r3, [pc, #384]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a5f      	ldr	r2, [pc, #380]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165a:	4a5b      	ldr	r2, [pc, #364]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a52      	ldr	r2, [pc, #328]	@ (80017cc <HAL_GPIO_Init+0x314>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d02b      	beq.n	80016de <HAL_GPIO_Init+0x226>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a51      	ldr	r2, [pc, #324]	@ (80017d0 <HAL_GPIO_Init+0x318>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d025      	beq.n	80016da <HAL_GPIO_Init+0x222>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a50      	ldr	r2, [pc, #320]	@ (80017d4 <HAL_GPIO_Init+0x31c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01f      	beq.n	80016d6 <HAL_GPIO_Init+0x21e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4f      	ldr	r2, [pc, #316]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x21a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4e      	ldr	r2, [pc, #312]	@ (80017dc <HAL_GPIO_Init+0x324>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x216>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4d      	ldr	r2, [pc, #308]	@ (80017e0 <HAL_GPIO_Init+0x328>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x212>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	@ (80017e4 <HAL_GPIO_Init+0x32c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4b      	ldr	r2, [pc, #300]	@ (80017e8 <HAL_GPIO_Init+0x330>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x20a>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00e      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016c2:	2308      	movs	r3, #8
 80016c4:	e00c      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e00a      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016ca:	2305      	movs	r3, #5
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016de:	2300      	movs	r3, #0
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f0:	4935      	ldr	r1, [pc, #212]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fe:	4b3b      	ldr	r3, [pc, #236]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001722:	4a32      	ldr	r2, [pc, #200]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <HAL_GPIO_Init+0x334>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800174c:	4a27      	ldr	r2, [pc, #156]	@ (80017ec <HAL_GPIO_Init+0x334>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001776:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <HAL_GPIO_Init+0x334>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_GPIO_Init+0x334>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a0:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <HAL_GPIO_Init+0x334>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	f67f ae90 	bls.w	80014d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40021c00 	.word	0x40021c00
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e267      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d075      	beq.n	800195e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001872:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00c      	beq.n	8001898 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4b85      	ldr	r3, [pc, #532]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001886:	2b08      	cmp	r3, #8
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b82      	ldr	r3, [pc, #520]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b7e      	ldr	r3, [pc, #504]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <HAL_RCC_OscConfig+0x108>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d157      	bne.n	800195c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e242      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x74>
 80018ba:	4b76      	ldr	r3, [pc, #472]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a75      	ldr	r2, [pc, #468]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b70      	ldr	r3, [pc, #448]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b6d      	ldr	r3, [pc, #436]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xb0>
 80018ec:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a68      	ldr	r2, [pc, #416]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a65      	ldr	r2, [pc, #404]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fc00 	bl	8001110 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fbfc 	bl	8001110 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e207      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b5b      	ldr	r3, [pc, #364]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xc0>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fbec 	bl	8001110 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fbe8 	bl	8001110 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1f3      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b51      	ldr	r3, [pc, #324]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0xe8>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800196a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b47      	ldr	r3, [pc, #284]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b44      	ldr	r3, [pc, #272]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b41      	ldr	r3, [pc, #260]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1c7      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4937      	ldr	r1, [pc, #220]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <HAL_RCC_OscConfig+0x244>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fba1 	bl	8001110 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fb9d 	bl	8001110 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1a8      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4925      	ldr	r1, [pc, #148]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <HAL_RCC_OscConfig+0x244>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fb80 	bl	8001110 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fb7c 	bl	8001110 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e187      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d036      	beq.n	8001aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d016      	beq.n	8001a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_RCC_OscConfig+0x248>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fb60 	bl	8001110 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fb5c 	bl	8001110 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e167      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <HAL_RCC_OscConfig+0x240>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x200>
 8001a72:	e01b      	b.n	8001aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_RCC_OscConfig+0x248>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fb49 	bl	8001110 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e00e      	b.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff fb45 	bl	8001110 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d907      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e150      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
 8001a94:	40023800 	.word	0x40023800
 8001a98:	42470000 	.word	0x42470000
 8001a9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b88      	ldr	r3, [pc, #544]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ea      	bne.n	8001a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8097 	beq.w	8001be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001abe:	4b81      	ldr	r3, [pc, #516]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10f      	bne.n	8001aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b7d      	ldr	r3, [pc, #500]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4b77      	ldr	r3, [pc, #476]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af6:	4b74      	ldr	r3, [pc, #464]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a73      	ldr	r2, [pc, #460]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fb05 	bl	8001110 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0a:	f7ff fb01 	bl	8001110 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e10c      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <HAL_RCC_OscConfig+0x474>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2ea>
 8001b30:	4b64      	ldr	r3, [pc, #400]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b34:	4a63      	ldr	r2, [pc, #396]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3c:	e01c      	b.n	8001b78 <HAL_RCC_OscConfig+0x324>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x30c>
 8001b46:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b52:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b56:	4a5b      	ldr	r2, [pc, #364]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0x324>
 8001b60:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b64:	4a57      	ldr	r2, [pc, #348]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6c:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a54      	ldr	r2, [pc, #336]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d015      	beq.n	8001bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff fac6 	bl	8001110 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff fac2 	bl	8001110 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e0cb      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9e:	4b49      	ldr	r3, [pc, #292]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0ee      	beq.n	8001b88 <HAL_RCC_OscConfig+0x334>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fab0 	bl	8001110 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7ff faac 	bl	8001110 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0b5      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bca:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ee      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bdc:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	4a38      	ldr	r2, [pc, #224]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a1 	beq.w	8001d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d05c      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d141      	bne.n	8001c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_RCC_OscConfig+0x478>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fa80 	bl	8001110 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff fa7c 	bl	8001110 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e087      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	019b      	lsls	r3, r3, #6
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	491b      	ldr	r1, [pc, #108]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_RCC_OscConfig+0x478>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fa55 	bl	8001110 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff fa51 	bl	8001110 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e05c      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x416>
 8001c88:	e054      	b.n	8001d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_RCC_OscConfig+0x478>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fa3e 	bl	8001110 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff fa3a 	bl	8001110 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e045      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_RCC_OscConfig+0x470>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x444>
 8001cb6:	e03d      	b.n	8001d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e038      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x4ec>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d028      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d121      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d11a      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d111      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0cc      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b68      	ldr	r3, [pc, #416]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d90c      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b65      	ldr	r3, [pc, #404]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b63      	ldr	r3, [pc, #396]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b8      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d98:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a58      	ldr	r2, [pc, #352]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001da2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db0:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b50      	ldr	r3, [pc, #320]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	494d      	ldr	r1, [pc, #308]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d044      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b47      	ldr	r3, [pc, #284]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e067      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b37      	ldr	r3, [pc, #220]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4934      	ldr	r1, [pc, #208]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff f96c 	bl	8001110 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff f968 	bl	8001110 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e04f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d20c      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e032      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4916      	ldr	r1, [pc, #88]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eca:	f000 f821 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490a      	ldr	r1, [pc, #40]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f8cc 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08003e40 	.word	0x08003e40
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	20000008 	.word	0x20000008

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f14:	b090      	sub	sp, #64	@ 0x40
 8001f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f28:	4b59      	ldr	r3, [pc, #356]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d00d      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x40>
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	f200 80a1 	bhi.w	800207c <HAL_RCC_GetSysClockFreq+0x16c>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f42:	e09b      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f48:	e09b      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4b53      	ldr	r3, [pc, #332]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f4e:	e098      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f50:	4b4f      	ldr	r3, [pc, #316]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d028      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f66:	4b4a      	ldr	r3, [pc, #296]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	099b      	lsrs	r3, r3, #6
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f7c:	fb03 f201 	mul.w	r2, r3, r1
 8001f80:	2300      	movs	r3, #0
 8001f82:	fb00 f303 	mul.w	r3, r0, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	4a43      	ldr	r2, [pc, #268]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f90:	460a      	mov	r2, r1
 8001f92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f96:	4413      	add	r3, r2
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	61fa      	str	r2, [r7, #28]
 8001fa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001faa:	f7fe f90d 	bl	80001c8 <__aeabi_uldivmod>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fb6:	e053      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb8:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	617a      	str	r2, [r7, #20]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fca:	f04f 0b00 	mov.w	fp, #0
 8001fce:	4652      	mov	r2, sl
 8001fd0:	465b      	mov	r3, fp
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	0159      	lsls	r1, r3, #5
 8001fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe0:	0150      	lsls	r0, r2, #5
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	ebb2 080a 	subs.w	r8, r2, sl
 8001fea:	eb63 090b 	sbc.w	r9, r3, fp
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ffa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ffe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002002:	ebb2 0408 	subs.w	r4, r2, r8
 8002006:	eb63 0509 	sbc.w	r5, r3, r9
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	00eb      	lsls	r3, r5, #3
 8002014:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002018:	00e2      	lsls	r2, r4, #3
 800201a:	4614      	mov	r4, r2
 800201c:	461d      	mov	r5, r3
 800201e:	eb14 030a 	adds.w	r3, r4, sl
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	eb45 030b 	adc.w	r3, r5, fp
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002036:	4629      	mov	r1, r5
 8002038:	028b      	lsls	r3, r1, #10
 800203a:	4621      	mov	r1, r4
 800203c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002040:	4621      	mov	r1, r4
 8002042:	028a      	lsls	r2, r1, #10
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204a:	2200      	movs	r2, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	60fa      	str	r2, [r7, #12]
 8002050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002054:	f7fe f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4613      	mov	r3, r2
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x180>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	3301      	adds	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002070:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800207a:	e002      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x184>)
 800207e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002084:	4618      	mov	r0, r3
 8002086:	3740      	adds	r7, #64	@ 0x40
 8002088:	46bd      	mov	sp, r7
 800208a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	00f42400 	.word	0x00f42400
 8002098:	017d7840 	.word	0x017d7840

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	@ (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08003e50 	.word	0x08003e50

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffdc 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0b5b      	lsrs	r3, r3, #13
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08003e50 	.word	0x08003e50

08002104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e041      	b.n	800219a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fe68 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f000 fad8 	bl	80026f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e041      	b.n	8002238 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f839 	bl	8002240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f000 fa89 	bl	80026f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_TIM_PWM_Start+0x24>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e022      	b.n	80022be <HAL_TIM_PWM_Start+0x6a>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d109      	bne.n	8002292 <HAL_TIM_PWM_Start+0x3e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	e015      	b.n	80022be <HAL_TIM_PWM_Start+0x6a>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d109      	bne.n	80022ac <HAL_TIM_PWM_Start+0x58>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	e008      	b.n	80022be <HAL_TIM_PWM_Start+0x6a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07c      	b.n	80023c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x82>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022d4:	e013      	b.n	80022fe <HAL_TIM_PWM_Start+0xaa>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_PWM_Start+0x92>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e4:	e00b      	b.n	80022fe <HAL_TIM_PWM_Start+0xaa>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d104      	bne.n	80022f6 <HAL_TIM_PWM_Start+0xa2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f4:	e003      	b.n	80022fe <HAL_TIM_PWM_Start+0xaa>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fce6 	bl	8002cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <HAL_TIM_PWM_Start+0x174>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_TIM_PWM_Start+0xcc>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2c      	ldr	r2, [pc, #176]	@ (80023cc <HAL_TIM_PWM_Start+0x178>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_TIM_PWM_Start+0xd0>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_TIM_PWM_Start+0xd2>
 8002324:	2300      	movs	r3, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a22      	ldr	r2, [pc, #136]	@ (80023c8 <HAL_TIM_PWM_Start+0x174>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <HAL_TIM_PWM_Start+0x136>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234c:	d01d      	beq.n	800238a <HAL_TIM_PWM_Start+0x136>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1f      	ldr	r2, [pc, #124]	@ (80023d0 <HAL_TIM_PWM_Start+0x17c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d018      	beq.n	800238a <HAL_TIM_PWM_Start+0x136>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <HAL_TIM_PWM_Start+0x180>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_TIM_PWM_Start+0x136>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_TIM_PWM_Start+0x184>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00e      	beq.n	800238a <HAL_TIM_PWM_Start+0x136>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a16      	ldr	r2, [pc, #88]	@ (80023cc <HAL_TIM_PWM_Start+0x178>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_TIM_PWM_Start+0x136>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a18      	ldr	r2, [pc, #96]	@ (80023dc <HAL_TIM_PWM_Start+0x188>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d004      	beq.n	800238a <HAL_TIM_PWM_Start+0x136>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <HAL_TIM_PWM_Start+0x18c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d111      	bne.n	80023ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d010      	beq.n	80023be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ac:	e007      	b.n	80023be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40010000 	.word	0x40010000
 80023cc:	40010400 	.word	0x40010400
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40014000 	.word	0x40014000
 80023e0:	40001800 	.word	0x40001800

080023e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e0ae      	b.n	8002560 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	f200 809f 	bhi.w	8002550 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002412:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	0800244d 	.word	0x0800244d
 800241c:	08002551 	.word	0x08002551
 8002420:	08002551 	.word	0x08002551
 8002424:	08002551 	.word	0x08002551
 8002428:	0800248d 	.word	0x0800248d
 800242c:	08002551 	.word	0x08002551
 8002430:	08002551 	.word	0x08002551
 8002434:	08002551 	.word	0x08002551
 8002438:	080024cf 	.word	0x080024cf
 800243c:	08002551 	.word	0x08002551
 8002440:	08002551 	.word	0x08002551
 8002444:	08002551 	.word	0x08002551
 8002448:	0800250f 	.word	0x0800250f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f9f6 	bl	8002844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0208 	orr.w	r2, r2, #8
 8002466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6999      	ldr	r1, [r3, #24]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	619a      	str	r2, [r3, #24]
      break;
 800248a:	e064      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fa46 	bl	8002924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6999      	ldr	r1, [r3, #24]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	021a      	lsls	r2, r3, #8
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	619a      	str	r2, [r3, #24]
      break;
 80024cc:	e043      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fa9b 	bl	8002a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0208 	orr.w	r2, r2, #8
 80024e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0204 	bic.w	r2, r2, #4
 80024f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69d9      	ldr	r1, [r3, #28]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	61da      	str	r2, [r3, #28]
      break;
 800250c:	e023      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 faef 	bl	8002af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69d9      	ldr	r1, [r3, #28]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	021a      	lsls	r2, r3, #8
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	61da      	str	r2, [r3, #28]
      break;
 800254e:	e002      	b.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
      break;
 8002554:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_TIM_ConfigClockSource+0x1c>
 8002580:	2302      	movs	r3, #2
 8002582:	e0b4      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x186>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025bc:	d03e      	beq.n	800263c <HAL_TIM_ConfigClockSource+0xd4>
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c2:	f200 8087 	bhi.w	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ca:	f000 8086 	beq.w	80026da <HAL_TIM_ConfigClockSource+0x172>
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d2:	d87f      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b70      	cmp	r3, #112	@ 0x70
 80025d6:	d01a      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xa6>
 80025d8:	2b70      	cmp	r3, #112	@ 0x70
 80025da:	d87b      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b60      	cmp	r3, #96	@ 0x60
 80025de:	d050      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x11a>
 80025e0:	2b60      	cmp	r3, #96	@ 0x60
 80025e2:	d877      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b50      	cmp	r3, #80	@ 0x50
 80025e6:	d03c      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0xfa>
 80025e8:	2b50      	cmp	r3, #80	@ 0x50
 80025ea:	d873      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b40      	cmp	r3, #64	@ 0x40
 80025ee:	d058      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x13a>
 80025f0:	2b40      	cmp	r3, #64	@ 0x40
 80025f2:	d86f      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b30      	cmp	r3, #48	@ 0x30
 80025f6:	d064      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 80025f8:	2b30      	cmp	r3, #48	@ 0x30
 80025fa:	d86b      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d060      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d867      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d05c      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002608:	2b10      	cmp	r3, #16
 800260a:	d05a      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	e062      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800261e:	f000 fb3b 	bl	8002c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	609a      	str	r2, [r3, #8]
      break;
 800263a:	e04f      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	f000 fb24 	bl	8002c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800265e:	609a      	str	r2, [r3, #8]
      break;
 8002660:	e03c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	461a      	mov	r2, r3
 8002670:	f000 fa98 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2150      	movs	r1, #80	@ 0x50
 800267a:	4618      	mov	r0, r3
 800267c:	f000 faf1 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002680:	e02c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800268e:	461a      	mov	r2, r3
 8002690:	f000 fab7 	bl	8002c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2160      	movs	r1, #96	@ 0x60
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fae1 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80026a0:	e01c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 fa78 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2140      	movs	r1, #64	@ 0x40
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fad1 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e00c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f000 fac8 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80026d2:	e003      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      break;
 80026d8:	e000      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a43      	ldr	r2, [pc, #268]	@ (8002818 <TIM_Base_SetConfig+0x120>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002716:	d00f      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a40      	ldr	r2, [pc, #256]	@ (800281c <TIM_Base_SetConfig+0x124>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00b      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3f      	ldr	r2, [pc, #252]	@ (8002820 <TIM_Base_SetConfig+0x128>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3e      	ldr	r2, [pc, #248]	@ (8002824 <TIM_Base_SetConfig+0x12c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a3d      	ldr	r2, [pc, #244]	@ (8002828 <TIM_Base_SetConfig+0x130>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a32      	ldr	r2, [pc, #200]	@ (8002818 <TIM_Base_SetConfig+0x120>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d027      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a2f      	ldr	r2, [pc, #188]	@ (800281c <TIM_Base_SetConfig+0x124>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d023      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a2e      	ldr	r2, [pc, #184]	@ (8002820 <TIM_Base_SetConfig+0x128>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01f      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2d      	ldr	r2, [pc, #180]	@ (8002824 <TIM_Base_SetConfig+0x12c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a2c      	ldr	r2, [pc, #176]	@ (8002828 <TIM_Base_SetConfig+0x130>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d017      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a2b      	ldr	r2, [pc, #172]	@ (800282c <TIM_Base_SetConfig+0x134>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2a      	ldr	r2, [pc, #168]	@ (8002830 <TIM_Base_SetConfig+0x138>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00f      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <TIM_Base_SetConfig+0x13c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a28      	ldr	r2, [pc, #160]	@ (8002838 <TIM_Base_SetConfig+0x140>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <TIM_Base_SetConfig+0x144>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d003      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a26      	ldr	r2, [pc, #152]	@ (8002840 <TIM_Base_SetConfig+0x148>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002818 <TIM_Base_SetConfig+0x120>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_Base_SetConfig+0xf2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a10      	ldr	r2, [pc, #64]	@ (8002828 <TIM_Base_SetConfig+0x130>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d103      	bne.n	80027f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40010000 	.word	0x40010000
 800281c:	40000400 	.word	0x40000400
 8002820:	40000800 	.word	0x40000800
 8002824:	40000c00 	.word	0x40000c00
 8002828:	40010400 	.word	0x40010400
 800282c:	40014000 	.word	0x40014000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800
 8002838:	40001800 	.word	0x40001800
 800283c:	40001c00 	.word	0x40001c00
 8002840:	40002000 	.word	0x40002000

08002844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f023 0201 	bic.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0302 	bic.w	r3, r3, #2
 800288c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a20      	ldr	r2, [pc, #128]	@ (800291c <TIM_OC1_SetConfig+0xd8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d003      	beq.n	80028a8 <TIM_OC1_SetConfig+0x64>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <TIM_OC1_SetConfig+0xdc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10c      	bne.n	80028c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f023 0308 	bic.w	r3, r3, #8
 80028ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a15      	ldr	r2, [pc, #84]	@ (800291c <TIM_OC1_SetConfig+0xd8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_OC1_SetConfig+0x8e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <TIM_OC1_SetConfig+0xdc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d111      	bne.n	80028f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	621a      	str	r2, [r3, #32]
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40010000 	.word	0x40010000
 8002920:	40010400 	.word	0x40010400

08002924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f023 0210 	bic.w	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800295a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f023 0320 	bic.w	r3, r3, #32
 800296e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <TIM_OC2_SetConfig+0xe4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <TIM_OC2_SetConfig+0x68>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a21      	ldr	r2, [pc, #132]	@ (8002a0c <TIM_OC2_SetConfig+0xe8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10d      	bne.n	80029a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a17      	ldr	r2, [pc, #92]	@ (8002a08 <TIM_OC2_SetConfig+0xe4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d003      	beq.n	80029b8 <TIM_OC2_SetConfig+0x94>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <TIM_OC2_SetConfig+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d113      	bne.n	80029e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40010400 	.word	0x40010400

08002a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <TIM_OC3_SetConfig+0xe0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_OC3_SetConfig+0x66>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a20      	ldr	r2, [pc, #128]	@ (8002af4 <TIM_OC3_SetConfig+0xe4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10d      	bne.n	8002a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a16      	ldr	r2, [pc, #88]	@ (8002af0 <TIM_OC3_SetConfig+0xe0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d003      	beq.n	8002aa2 <TIM_OC3_SetConfig+0x92>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a15      	ldr	r2, [pc, #84]	@ (8002af4 <TIM_OC3_SetConfig+0xe4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d113      	bne.n	8002aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010400 	.word	0x40010400

08002af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	031b      	lsls	r3, r3, #12
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <TIM_OC4_SetConfig+0xa4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_OC4_SetConfig+0x68>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a11      	ldr	r2, [pc, #68]	@ (8002ba0 <TIM_OC4_SetConfig+0xa8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d109      	bne.n	8002b74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f023 030a 	bic.w	r3, r3, #10
 8002be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f023 0210 	bic.w	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	031b      	lsls	r3, r3, #12
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f043 0307 	orr.w	r3, r3, #7
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	609a      	str	r2, [r3, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e05a      	b.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a21      	ldr	r2, [pc, #132]	@ (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d88:	d01d      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1b      	ldr	r2, [pc, #108]	@ (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a15      	ldr	r2, [pc, #84]	@ (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10c      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	40000c00 	.word	0x40000c00
 8002e10:	40010400 	.word	0x40010400
 8002e14:	40014000 	.word	0x40014000
 8002e18:	40001800 	.word	0x40001800

08002e1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e03d      	b.n	8002eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e042      	b.n	8002f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd ffe6 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	@ 0x24
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fcef 	bl	80038e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d112      	bne.n	8002fa0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Receive_IT+0x26>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00b      	b.n	8002fa2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fad2 	bl	8003540 <UART_Start_Receive_IT>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0ba      	sub	sp, #232	@ 0xe8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10f      	bne.n	8003012 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_UART_IRQHandler+0x66>
 8002ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fbae 	bl	800376c <UART_Receive_IT>
      return;
 8003010:	e273      	b.n	80034fa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80de 	beq.w	80031d8 <HAL_UART_IRQHandler+0x22c>
 800301c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80d1 	beq.w	80031d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_UART_IRQHandler+0xae>
 8003042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_UART_IRQHandler+0xd2>
 8003066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f043 0202 	orr.w	r2, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_UART_IRQHandler+0xf6>
 800308a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d011      	beq.n	80030d2 <HAL_UART_IRQHandler+0x126>
 80030ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d105      	bne.n	80030c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f043 0208 	orr.w	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 820a 	beq.w	80034f0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_UART_IRQHandler+0x14e>
 80030e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fb39 	bl	800376c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <HAL_UART_IRQHandler+0x17a>
 800311e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d04f      	beq.n	80031c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa44 	bl	80035b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003136:	2b40      	cmp	r3, #64	@ 0x40
 8003138:	d141      	bne.n	80031be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3314      	adds	r3, #20
 8003162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800316a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800317e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1d9      	bne.n	800313a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d013      	beq.n	80031b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	4a8a      	ldr	r2, [pc, #552]	@ (80033bc <HAL_UART_IRQHandler+0x410>)
 8003194:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe f969 	bl	8001472 <HAL_DMA_Abort_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031b0:	4610      	mov	r0, r2
 80031b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e00e      	b.n	80031d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9ac 	bl	8003514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	e00a      	b.n	80031d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f9a8 	bl	8003514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	e006      	b.n	80031d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f9a4 	bl	8003514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031d2:	e18d      	b.n	80034f0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	bf00      	nop
    return;
 80031d6:	e18b      	b.n	80034f0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	2b01      	cmp	r3, #1
 80031de:	f040 8167 	bne.w	80034b0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8160 	beq.w	80034b0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8159 	beq.w	80034b0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321e:	2b40      	cmp	r3, #64	@ 0x40
 8003220:	f040 80ce 	bne.w	80033c0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a9 	beq.w	800338c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800323e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003242:	429a      	cmp	r2, r3
 8003244:	f080 80a2 	bcs.w	800338c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800324e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800325a:	f000 8088 	beq.w	800336e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	330c      	adds	r3, #12
 8003264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800327c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800328a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800328e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1d9      	bne.n	800325e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3314      	adds	r3, #20
 80032b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e1      	bne.n	80032aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3314      	adds	r3, #20
 80032ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3314      	adds	r3, #20
 8003306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800330a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800330c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e3      	bne.n	80032e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800333c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800333e:	f023 0310 	bic.w	r3, r3, #16
 8003342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003350:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003352:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800335e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e3      	bne.n	800332c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe f812 	bl	8001392 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	b29b      	uxth	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f8cf 	bl	8003528 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800338a:	e0b3      	b.n	80034f4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003390:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003394:	429a      	cmp	r2, r3
 8003396:	f040 80ad 	bne.w	80034f4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a4:	f040 80a6 	bne.w	80034f4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8b7 	bl	8003528 <HAL_UARTEx_RxEventCallback>
      return;
 80033ba:	e09b      	b.n	80034f4 <HAL_UART_IRQHandler+0x548>
 80033bc:	0800367b 	.word	0x0800367b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 808e 	beq.w	80034f8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80033dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8089 	beq.w	80034f8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800340a:	647a      	str	r2, [r7, #68]	@ 0x44
 800340c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e3      	bne.n	80033e6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	623b      	str	r3, [r7, #32]
   return(result);
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003442:	633a      	str	r2, [r7, #48]	@ 0x30
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	60fb      	str	r3, [r7, #12]
   return(result);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003488:	61fa      	str	r2, [r7, #28]
 800348a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	617b      	str	r3, [r7, #20]
   return(result);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f83d 	bl	8003528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034ae:	e023      	b.n	80034f8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_UART_IRQHandler+0x524>
 80034bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8e7 	bl	800369c <UART_Transmit_IT>
    return;
 80034ce:	e014      	b.n	80034fa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00e      	beq.n	80034fa <HAL_UART_IRQHandler+0x54e>
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f927 	bl	800373c <UART_EndTransmit_IT>
    return;
 80034ee:	e004      	b.n	80034fa <HAL_UART_IRQHandler+0x54e>
    return;
 80034f0:	bf00      	nop
 80034f2:	e002      	b.n	80034fa <HAL_UART_IRQHandler+0x54e>
      return;
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <HAL_UART_IRQHandler+0x54e>
      return;
 80034f8:	bf00      	nop
  }
}
 80034fa:	37e8      	adds	r7, #232	@ 0xe8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2222      	movs	r2, #34	@ 0x22
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003584:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0220 	orr.w	r2, r2, #32
 80035a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b095      	sub	sp, #84	@ 0x54
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80035de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e5      	bne.n	80035bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3314      	adds	r3, #20
 80035f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3314      	adds	r3, #20
 800360e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	2b01      	cmp	r3, #1
 800362a:	d119      	bne.n	8003660 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	60bb      	str	r3, [r7, #8]
   return(result);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f023 0310 	bic.w	r3, r3, #16
 8003642:	647b      	str	r3, [r7, #68]	@ 0x44
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800364c:	61ba      	str	r2, [r7, #24]
 800364e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6979      	ldr	r1, [r7, #20]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	613b      	str	r3, [r7, #16]
   return(result);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e5      	bne.n	800362c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800366e:	bf00      	nop
 8003670:	3754      	adds	r7, #84	@ 0x54
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff40 	bl	8003514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b21      	cmp	r3, #33	@ 0x21
 80036ae:	d13e      	bne.n	800372e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b8:	d114      	bne.n	80036e4 <UART_Transmit_IT+0x48>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d110      	bne.n	80036e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]
 80036e2:	e008      	b.n	80036f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	1c59      	adds	r1, r3, #1
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6211      	str	r1, [r2, #32]
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4619      	mov	r1, r3
 8003704:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10f      	bne.n	800372a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003718:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003728:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003752:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fecf 	bl	8003500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b22      	cmp	r3, #34	@ 0x22
 8003786:	f040 80aa 	bne.w	80038de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003792:	d115      	bne.n	80037c0 <UART_Receive_IT+0x54>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d111      	bne.n	80037c0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80037be:	e024      	b.n	800380a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ce:	d007      	beq.n	80037e0 <UART_Receive_IT+0x74>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <UART_Receive_IT+0x82>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e008      	b.n	8003800 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4619      	mov	r1, r3
 8003818:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800381a:	2b00      	cmp	r3, #0
 800381c:	d15d      	bne.n	80038da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0220 	bic.w	r2, r2, #32
 800382c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800383c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	2b01      	cmp	r3, #1
 8003862:	d135      	bne.n	80038d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f023 0310 	bic.w	r3, r3, #16
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388a:	623a      	str	r2, [r7, #32]
 800388c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	69f9      	ldr	r1, [r7, #28]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	61bb      	str	r3, [r7, #24]
   return(result);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d10a      	bne.n	80038c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fe2d 	bl	8003528 <HAL_UARTEx_RxEventCallback>
 80038ce:	e002      	b.n	80038d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fc ff23 	bl	800071c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e002      	b.n	80038e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3730      	adds	r7, #48	@ 0x30
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b0c0      	sub	sp, #256	@ 0x100
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	68d9      	ldr	r1, [r3, #12]
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	ea40 0301 	orr.w	r3, r0, r1
 8003910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	431a      	orrs	r2, r3
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003940:	f021 010c 	bic.w	r1, r1, #12
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800394e:	430b      	orrs	r3, r1
 8003950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003962:	6999      	ldr	r1, [r3, #24]
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	ea40 0301 	orr.w	r3, r0, r1
 800396e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb4 <UART_SetConfig+0x2cc>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d005      	beq.n	8003988 <UART_SetConfig+0xa0>
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b8d      	ldr	r3, [pc, #564]	@ (8003bb8 <UART_SetConfig+0x2d0>)
 8003984:	429a      	cmp	r2, r3
 8003986:	d104      	bne.n	8003992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7fe fba8 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 800398c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003990:	e003      	b.n	800399a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003992:	f7fe fb8f 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8003996:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039a4:	f040 810c 	bne.w	8003bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039c2:	415b      	adcs	r3, r3
 80039c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ca:	4621      	mov	r1, r4
 80039cc:	eb12 0801 	adds.w	r8, r2, r1
 80039d0:	4629      	mov	r1, r5
 80039d2:	eb43 0901 	adc.w	r9, r3, r1
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ea:	4690      	mov	r8, r2
 80039ec:	4699      	mov	r9, r3
 80039ee:	4623      	mov	r3, r4
 80039f0:	eb18 0303 	adds.w	r3, r8, r3
 80039f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039f8:	462b      	mov	r3, r5
 80039fa:	eb49 0303 	adc.w	r3, r9, r3
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a16:	460b      	mov	r3, r1
 8003a18:	18db      	adds	r3, r3, r3
 8003a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	eb42 0303 	adc.w	r3, r2, r3
 8003a22:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a2c:	f7fc fbcc 	bl	80001c8 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4b61      	ldr	r3, [pc, #388]	@ (8003bbc <UART_SetConfig+0x2d4>)
 8003a36:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	011c      	lsls	r4, r3, #4
 8003a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a50:	4642      	mov	r2, r8
 8003a52:	464b      	mov	r3, r9
 8003a54:	1891      	adds	r1, r2, r2
 8003a56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a58:	415b      	adcs	r3, r3
 8003a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a60:	4641      	mov	r1, r8
 8003a62:	eb12 0a01 	adds.w	sl, r2, r1
 8003a66:	4649      	mov	r1, r9
 8003a68:	eb43 0b01 	adc.w	fp, r3, r1
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a80:	4692      	mov	sl, r2
 8003a82:	469b      	mov	fp, r3
 8003a84:	4643      	mov	r3, r8
 8003a86:	eb1a 0303 	adds.w	r3, sl, r3
 8003a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	eb4b 0303 	adc.w	r3, fp, r3
 8003a94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003aac:	460b      	mov	r3, r1
 8003aae:	18db      	adds	r3, r3, r3
 8003ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	eb42 0303 	adc.w	r3, r2, r3
 8003ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ac2:	f7fc fb81 	bl	80001c8 <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <UART_SetConfig+0x2d4>)
 8003ace:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2264      	movs	r2, #100	@ 0x64
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	1acb      	subs	r3, r1, r3
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ae2:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <UART_SetConfig+0x2d4>)
 8003ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003af0:	441c      	add	r4, r3
 8003af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003afc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b04:	4642      	mov	r2, r8
 8003b06:	464b      	mov	r3, r9
 8003b08:	1891      	adds	r1, r2, r2
 8003b0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b0c:	415b      	adcs	r3, r3
 8003b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b14:	4641      	mov	r1, r8
 8003b16:	1851      	adds	r1, r2, r1
 8003b18:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	414b      	adcs	r3, r1
 8003b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	00cb      	lsls	r3, r1, #3
 8003b30:	4651      	mov	r1, sl
 8003b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b36:	4651      	mov	r1, sl
 8003b38:	00ca      	lsls	r2, r1, #3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4642      	mov	r2, r8
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b48:	464b      	mov	r3, r9
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b68:	460b      	mov	r3, r1
 8003b6a:	18db      	adds	r3, r3, r3
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b6e:	4613      	mov	r3, r2
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b7e:	f7fc fb23 	bl	80001c8 <__aeabi_uldivmod>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <UART_SetConfig+0x2d4>)
 8003b88:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	2164      	movs	r1, #100	@ 0x64
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3332      	adds	r3, #50	@ 0x32
 8003b9a:	4a08      	ldr	r2, [pc, #32]	@ (8003bbc <UART_SetConfig+0x2d4>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	f003 0207 	and.w	r2, r3, #7
 8003ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4422      	add	r2, r4
 8003bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bb0:	e106      	b.n	8003dc0 <UART_SetConfig+0x4d8>
 8003bb2:	bf00      	nop
 8003bb4:	40011000 	.word	0x40011000
 8003bb8:	40011400 	.word	0x40011400
 8003bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	6239      	str	r1, [r7, #32]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003be2:	4641      	mov	r1, r8
 8003be4:	1854      	adds	r4, r2, r1
 8003be6:	4649      	mov	r1, r9
 8003be8:	eb43 0501 	adc.w	r5, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	00eb      	lsls	r3, r5, #3
 8003bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfa:	00e2      	lsls	r2, r4, #3
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	4643      	mov	r3, r8
 8003c02:	18e3      	adds	r3, r4, r3
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c08:	464b      	mov	r3, r9
 8003c0a:	eb45 0303 	adc.w	r3, r5, r3
 8003c0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c2e:	4629      	mov	r1, r5
 8003c30:	008b      	lsls	r3, r1, #2
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c38:	4621      	mov	r1, r4
 8003c3a:	008a      	lsls	r2, r1, #2
 8003c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c40:	f7fc fac2 	bl	80001c8 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4b60      	ldr	r3, [pc, #384]	@ (8003dcc <UART_SetConfig+0x4e4>)
 8003c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	011c      	lsls	r4, r3, #4
 8003c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	1891      	adds	r1, r2, r2
 8003c6a:	61b9      	str	r1, [r7, #24]
 8003c6c:	415b      	adcs	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c74:	4641      	mov	r1, r8
 8003c76:	1851      	adds	r1, r2, r1
 8003c78:	6139      	str	r1, [r7, #16]
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	414b      	adcs	r3, r1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	00cb      	lsls	r3, r1, #3
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c96:	4651      	mov	r1, sl
 8003c98:	00ca      	lsls	r2, r1, #3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ca8:	464b      	mov	r3, r9
 8003caa:	460a      	mov	r2, r1
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ccc:	4649      	mov	r1, r9
 8003cce:	008b      	lsls	r3, r1, #2
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	008a      	lsls	r2, r1, #2
 8003cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cde:	f7fc fa73 	bl	80001c8 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4b38      	ldr	r3, [pc, #224]	@ (8003dcc <UART_SetConfig+0x4e4>)
 8003cea:	fba3 2301 	umull	r2, r3, r3, r1
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2264      	movs	r2, #100	@ 0x64
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	1acb      	subs	r3, r1, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	@ 0x32
 8003cfc:	4a33      	ldr	r2, [pc, #204]	@ (8003dcc <UART_SetConfig+0x4e4>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d08:	441c      	add	r4, r3
 8003d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d0e:	2200      	movs	r2, #0
 8003d10:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d12:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	1891      	adds	r1, r2, r2
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	415b      	adcs	r3, r3
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d28:	4641      	mov	r1, r8
 8003d2a:	1851      	adds	r1, r2, r1
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	4649      	mov	r1, r9
 8003d30:	414b      	adcs	r3, r1
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d40:	4659      	mov	r1, fp
 8003d42:	00cb      	lsls	r3, r1, #3
 8003d44:	4651      	mov	r1, sl
 8003d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	00ca      	lsls	r2, r1, #3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	4642      	mov	r2, r8
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	eb42 0303 	adc.w	r3, r2, r3
 8003d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	4641      	mov	r1, r8
 8003d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d86:	4641      	mov	r1, r8
 8003d88:	008a      	lsls	r2, r1, #2
 8003d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d8e:	f7fc fa1b 	bl	80001c8 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <UART_SetConfig+0x4e4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	@ 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	3332      	adds	r3, #50	@ 0x32
 8003daa:	4a08      	ldr	r2, [pc, #32]	@ (8003dcc <UART_SetConfig+0x4e4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 020f 	and.w	r2, r3, #15
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4422      	add	r2, r4
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dcc:	51eb851f 	.word	0x51eb851f

08003dd0 <memset>:
 8003dd0:	4402      	add	r2, r0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d100      	bne.n	8003dda <memset+0xa>
 8003dd8:	4770      	bx	lr
 8003dda:	f803 1b01 	strb.w	r1, [r3], #1
 8003dde:	e7f9      	b.n	8003dd4 <memset+0x4>

08003de0 <__libc_init_array>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4d0d      	ldr	r5, [pc, #52]	@ (8003e18 <__libc_init_array+0x38>)
 8003de4:	4c0d      	ldr	r4, [pc, #52]	@ (8003e1c <__libc_init_array+0x3c>)
 8003de6:	1b64      	subs	r4, r4, r5
 8003de8:	10a4      	asrs	r4, r4, #2
 8003dea:	2600      	movs	r6, #0
 8003dec:	42a6      	cmp	r6, r4
 8003dee:	d109      	bne.n	8003e04 <__libc_init_array+0x24>
 8003df0:	4d0b      	ldr	r5, [pc, #44]	@ (8003e20 <__libc_init_array+0x40>)
 8003df2:	4c0c      	ldr	r4, [pc, #48]	@ (8003e24 <__libc_init_array+0x44>)
 8003df4:	f000 f818 	bl	8003e28 <_init>
 8003df8:	1b64      	subs	r4, r4, r5
 8003dfa:	10a4      	asrs	r4, r4, #2
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	42a6      	cmp	r6, r4
 8003e00:	d105      	bne.n	8003e0e <__libc_init_array+0x2e>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e08:	4798      	blx	r3
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7ee      	b.n	8003dec <__libc_init_array+0xc>
 8003e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e12:	4798      	blx	r3
 8003e14:	3601      	adds	r6, #1
 8003e16:	e7f2      	b.n	8003dfe <__libc_init_array+0x1e>
 8003e18:	08003e60 	.word	0x08003e60
 8003e1c:	08003e60 	.word	0x08003e60
 8003e20:	08003e60 	.word	0x08003e60
 8003e24:	08003e64 	.word	0x08003e64

08003e28 <_init>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr

08003e34 <_fini>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr
