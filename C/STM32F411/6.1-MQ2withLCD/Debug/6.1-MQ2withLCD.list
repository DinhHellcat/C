
6.1-MQ2withLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003690  08003690  00004690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800370c  0800370c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003714  08003714  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003714  08003714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003718  08003718  00004718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800371c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08003778  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003778  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000827a  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173a  00000000  00000000  0000d306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0000ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000647  00000000  00000000  0000f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c3c  00000000  00000000  0000f8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af2e  00000000  00000000  000264fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009195d  00000000  00000000  00031429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000265c  00000000  00000000  000c2dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c5428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003678 	.word	0x08003678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003678 	.word	0x08003678

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	f023 030f 	bic.w	r3, r3, #15
 80005be:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f043 030c 	orr.w	r3, r3, #12
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	f043 030c 	orr.w	r3, r3, #12
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 0308 	orr.w	r3, r3, #8
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	4619      	mov	r1, r3
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	f001 fbbb 	bl	8001d7c <HAL_I2C_Master_Transmit>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af02      	add	r7, sp, #8
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	f043 030d 	orr.w	r3, r3, #13
 800062e:	b2db      	uxtb	r3, r3
 8000630:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	f043 0309 	orr.w	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	f043 030d 	orr.w	r3, r3, #13
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	f043 0309 	orr.w	r3, r3, #9
 800064c:	b2db      	uxtb	r3, r3
 800064e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	f107 0208 	add.w	r2, r7, #8
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2304      	movs	r3, #4
 8000664:	f001 fb8a 	bl	8001d7c <HAL_I2C_Master_Transmit>
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000678:	2180      	movs	r1, #128	@ 0x80
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ff96 	bl	80005ac <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e006      	b.n	8000694 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000686:	2120      	movs	r1, #32
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ffc0 	bl	800060e <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b4f      	cmp	r3, #79	@ 0x4f
 8000698:	ddf5      	ble.n	8000686 <lcd_clear+0x16>
    }
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d824      	bhi.n	8000700 <lcd_gotoxy+0x5c>
 80006b6:	a201      	add	r2, pc, #4	@ (adr r2, 80006bc <lcd_gotoxy+0x18>)
 80006b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006bc:	080006cd 	.word	0x080006cd
 80006c0:	080006d7 	.word	0x080006d7
 80006c4:	080006e1 	.word	0x080006e1
 80006c8:	080006eb 	.word	0x080006eb
    {
        case 0: address = 0x80 + col; break;  // First row
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	3b80      	subs	r3, #128	@ 0x80
 80006d2:	75fb      	strb	r3, [r7, #23]
 80006d4:	e00e      	b.n	80006f4 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b40      	subs	r3, #64	@ 0x40
 80006dc:	75fb      	strb	r3, [r7, #23]
 80006de:	e009      	b.n	80006f4 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	3b6c      	subs	r3, #108	@ 0x6c
 80006e6:	75fb      	strb	r3, [r7, #23]
 80006e8:	e004      	b.n	80006f4 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	3b2c      	subs	r3, #44	@ 0x2c
 80006f0:	75fb      	strb	r3, [r7, #23]
 80006f2:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	4619      	mov	r1, r3
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f7ff ff57 	bl	80005ac <lcd_send_cmd>
 80006fe:	e000      	b.n	8000702 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8000700:	bf00      	nop
}
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000710:	2032      	movs	r0, #50	@ 0x32
 8000712:	f000 fba3 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000716:	2130      	movs	r1, #48	@ 0x30
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff47 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f000 fb9c 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000724:	2130      	movs	r1, #48	@ 0x30
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff40 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fb95 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000732:	2130      	movs	r1, #48	@ 0x30
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff39 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fb8e 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000740:	2120      	movs	r1, #32
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff32 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fb87 	bl	8000e5c <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800074e:	2128      	movs	r1, #40	@ 0x28
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff2b 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(1);
 8000756:	2001      	movs	r0, #1
 8000758:	f000 fb80 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800075c:	2108      	movs	r1, #8
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff24 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fb79 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800076a:	2101      	movs	r1, #1
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff1d 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(2);
 8000772:	2002      	movs	r0, #2
 8000774:	f000 fb72 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000778:	2106      	movs	r1, #6
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ff16 	bl	80005ac <lcd_send_cmd>
    HAL_Delay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fb6b 	bl	8000e5c <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000786:	210c      	movs	r1, #12
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff0f 	bl	80005ac <lcd_send_cmd>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80007a0:	e007      	b.n	80007b2 <lcd_puts+0x1c>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	603a      	str	r2, [r7, #0]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff2e 	bl	800060e <lcd_send_data>
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f3      	bne.n	80007a2 <lcd_puts+0xc>
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fad6 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f85a 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f940 	bl	8000a54 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007d4:	f000 f8be 	bl	8000954 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007d8:	f000 f90e 	bl	80009f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start(&hadc1);
  // --- Khởi tạo LCD ---
  lcd.hi2c = &hi2c1;
 80007dc:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <main+0xa0>)
 80007de:	4a22      	ldr	r2, [pc, #136]	@ (8000868 <main+0xa4>)
 80007e0:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E; // Địa chỉ I2C của LCD (0x27 << 1)
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <main+0xa0>)
 80007e4:	224e      	movs	r2, #78	@ 0x4e
 80007e6:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 80007e8:	481e      	ldr	r0, [pc, #120]	@ (8000864 <main+0xa0>)
 80007ea:	f7ff ff8d 	bl	8000708 <lcd_init>

  lcd_puts(&lcd, "Dang khoi dong...");
 80007ee:	491f      	ldr	r1, [pc, #124]	@ (800086c <main+0xa8>)
 80007f0:	481c      	ldr	r0, [pc, #112]	@ (8000864 <main+0xa0>)
 80007f2:	f7ff ffd0 	bl	8000796 <lcd_puts>
  HAL_Delay(1500);
 80007f6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007fa:	f000 fb2f 	bl	8000e5c <HAL_Delay>
  lcd_clear(&lcd);
 80007fe:	4819      	ldr	r0, [pc, #100]	@ (8000864 <main+0xa0>)
 8000800:	f7ff ff36 	bl	8000670 <lcd_clear>

  lcd_clear(&lcd);
 8000804:	4817      	ldr	r0, [pc, #92]	@ (8000864 <main+0xa0>)
 8000806:	f7ff ff33 	bl	8000670 <lcd_clear>
  lcd_gotoxy(&lcd, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	4815      	ldr	r0, [pc, #84]	@ (8000864 <main+0xa0>)
 8000810:	f7ff ff48 	bl	80006a4 <lcd_gotoxy>
  lcd_puts(&lcd, "MQ-2 Sensor");
 8000814:	4916      	ldr	r1, [pc, #88]	@ (8000870 <main+0xac>)
 8000816:	4813      	ldr	r0, [pc, #76]	@ (8000864 <main+0xa0>)
 8000818:	f7ff ffbd 	bl	8000796 <lcd_puts>
//	  	  lcd_gotoxy(&lcd, 0, 1);
//	  	  lcd_puts(&lcd, adc_str);
//
//	  	  HAL_Delay(500); // Cập nhật mỗi nửa giây
	  // 1. Bắt đầu một lần chuyển đổi ADC
	    HAL_ADC_Start(&hadc1);
 800081c:	4815      	ldr	r0, [pc, #84]	@ (8000874 <main+0xb0>)
 800081e:	f000 fb85 	bl	8000f2c <HAL_ADC_Start>

	    // 2. Chờ cho đến khi chuyển đổi hoàn tất (với timeout 100ms)
	    HAL_ADC_PollForConversion(&hadc1, 100);
 8000822:	2164      	movs	r1, #100	@ 0x64
 8000824:	4813      	ldr	r0, [pc, #76]	@ (8000874 <main+0xb0>)
 8000826:	f000 fc35 	bl	8001094 <HAL_ADC_PollForConversion>

	    // 3. Đọc giá trị đã chuyển đổi
	    adc_value = HAL_ADC_GetValue(&hadc1);
 800082a:	4812      	ldr	r0, [pc, #72]	@ (8000874 <main+0xb0>)
 800082c:	f000 fcbd 	bl	80011aa <HAL_ADC_GetValue>
 8000830:	4603      	mov	r3, r0
 8000832:	4a11      	ldr	r2, [pc, #68]	@ (8000878 <main+0xb4>)
 8000834:	6013      	str	r3, [r2, #0]
	    // 4. (Tùy chọn) Dừng ADC để tiết kiệm năng lượng
	    // HAL_ADC_Stop(&hadc1);


	    // --- Code hiển thị lên LCD (giữ nguyên như cũ) ---
	    sprintf(adc_str, "Gas Raw: %-5lu", adc_value);
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <main+0xb4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	490f      	ldr	r1, [pc, #60]	@ (800087c <main+0xb8>)
 800083e:	4810      	ldr	r0, [pc, #64]	@ (8000880 <main+0xbc>)
 8000840:	f002 fa7a 	bl	8002d38 <siprintf>

	    lcd_gotoxy(&lcd, 0, 1);
 8000844:	2201      	movs	r2, #1
 8000846:	2100      	movs	r1, #0
 8000848:	4806      	ldr	r0, [pc, #24]	@ (8000864 <main+0xa0>)
 800084a:	f7ff ff2b 	bl	80006a4 <lcd_gotoxy>
	    lcd_puts(&lcd, adc_str);
 800084e:	490c      	ldr	r1, [pc, #48]	@ (8000880 <main+0xbc>)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <main+0xa0>)
 8000852:	f7ff ffa0 	bl	8000796 <lcd_puts>

	    HAL_Delay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800085a:	f000 faff 	bl	8000e5c <HAL_Delay>
	    HAL_ADC_Start(&hadc1);
 800085e:	bf00      	nop
 8000860:	e7dc      	b.n	800081c <main+0x58>
 8000862:	bf00      	nop
 8000864:	20000114 	.word	0x20000114
 8000868:	200000c0 	.word	0x200000c0
 800086c:	08003690 	.word	0x08003690
 8000870:	080036a4 	.word	0x080036a4
 8000874:	20000078 	.word	0x20000078
 8000878:	2000011c 	.word	0x2000011c
 800087c:	080036b0 	.word	0x080036b0
 8000880:	20000120 	.word	0x20000120

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	@ 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	@ 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fa72 	bl	8002d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a26      	ldr	r2, [pc, #152]	@ (800094c <SystemClock_Config+0xc8>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <SystemClock_Config+0xc8>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <SystemClock_Config+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008f8:	2364      	movs	r3, #100	@ 0x64
 80008fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fd91 	bl	8002430 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000914:	f000 f8d4 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2103      	movs	r1, #3
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fff3 	bl	8002920 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000940:	f000 f8be 	bl	8000ac0 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	@ 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000968:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <MX_ADC1_Init+0x9c>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_ADC1_Init+0x98>)
 800096e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_ADC1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <MX_ADC1_Init+0xa0>)
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_ADC1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b4:	480d      	ldr	r0, [pc, #52]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009b6:	f000 fa75 	bl	8000ea4 <HAL_ADC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009c0:	f000 f87e 	bl	8000ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009d6:	f000 fbf5 	bl	80011c4 <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e0:	f000 f86e 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000078 	.word	0x20000078
 80009f0:	40012000 	.word	0x40012000
 80009f4:	0f000001 	.word	0x0f000001

080009f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <MX_I2C1_Init+0x50>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <MX_I2C1_Init+0x54>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a04:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <MX_I2C1_Init+0x58>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a36:	f001 f85d 	bl	8001af4 <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 f83e 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000c0 	.word	0x200000c0
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a16      	ldr	r2, [pc, #88]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_GPIO_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <HAL_ADC_MspInit+0x7c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d127      	bne.n	8000b8e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_ADC_MspInit+0x80>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a15      	ldr	r2, [pc, #84]	@ (8000b9c <HAL_ADC_MspInit+0x80>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <HAL_ADC_MspInit+0x80>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <HAL_ADC_MspInit+0x80>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <HAL_ADC_MspInit+0x80>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_ADC_MspInit+0x80>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = MQ2_Pin;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ2_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <HAL_ADC_MspInit+0x84>)
 8000b8a:	f000 fe2f 	bl	80017ec <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012000 	.word	0x40012000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	@ (8000c28 <HAL_I2C_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12b      	bne.n	8000c1e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a17      	ldr	r2, [pc, #92]	@ (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be2:	23c0      	movs	r3, #192	@ 0xc0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <HAL_I2C_MspInit+0x8c>)
 8000bfe:	f000 fdf5 	bl	80017ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020400 	.word	0x40020400

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 f8c7 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f002 f862 	bl	8002d8c <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20020000 	.word	0x20020000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	20000130 	.word	0x20000130
 8000cfc:	20000280 	.word	0x20000280

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d28:	f7ff ffea 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	@ (8000d64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	@ (8000d68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	@ (8000d70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f002 f821 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fd35 	bl	80007c4 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d68:	0800371c 	.word	0x0800371c
  ldr r2, =_sbss
 8000d6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d70:	20000280 	.word	0x20000280

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 fcef 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fe8e 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fcf9 	bl	80017d2 <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 fccf 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	@ (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000134 	.word	0x20000134

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000134 	.word	0x20000134

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffde 	bl	8000e44 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e033      	b.n	8000f22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fe2a 	bl	8000b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d118      	bne.n	8000f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000eea:	f023 0302 	bic.w	r3, r3, #2
 8000eee:	f043 0202 	orr.w	r2, r3, #2
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fa96 	bl	8001428 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f023 0303 	bic.w	r3, r3, #3
 8000f0a:	f043 0201 	orr.w	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f12:	e001      	b.n	8000f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Start+0x1a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e097      	b.n	8001076 <HAL_ADC_Start+0x14a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d018      	beq.n	8000f8e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6c:	4b45      	ldr	r3, [pc, #276]	@ (8001084 <HAL_ADC_Start+0x158>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a45      	ldr	r2, [pc, #276]	@ (8001088 <HAL_ADC_Start+0x15c>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9a      	lsrs	r2, r3, #18
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f9      	bne.n	8000f82 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d15f      	bne.n	800105c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	f023 0206 	bic.w	r2, r3, #6
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <HAL_ADC_Start+0x160>)
 8000ffa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001004:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10f      	bne.n	8001032 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d129      	bne.n	8001074 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	e020      	b.n	8001074 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <HAL_ADC_Start+0x164>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d11b      	bne.n	8001074 <HAL_ADC_Start+0x148>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d114      	bne.n	8001074 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	e00b      	b.n	8001074 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	f043 0210 	orr.w	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000
 8001088:	431bde83 	.word	0x431bde83
 800108c:	40012300 	.word	0x40012300
 8001090:	40012000 	.word	0x40012000

08001094 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b0:	d113      	bne.n	80010da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010c0:	d10b      	bne.n	80010da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f043 0220 	orr.w	r2, r3, #32
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e063      	b.n	80011a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80010da:	f7ff feb3 	bl	8000e44 <HAL_GetTick>
 80010de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010e0:	e021      	b.n	8001126 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d01d      	beq.n	8001126 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_ADC_PollForConversion+0x6c>
 80010f0:	f7ff fea8 	bl	8000e44 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d212      	bcs.n	8001126 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b02      	cmp	r3, #2
 800110c:	d00b      	beq.n	8001126 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f043 0204 	orr.w	r2, r3, #4
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e03d      	b.n	80011a2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b02      	cmp	r3, #2
 8001132:	d1d6      	bne.n	80010e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f06f 0212 	mvn.w	r2, #18
 800113c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d123      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11f      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001166:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001178:	2b00      	cmp	r3, #0
 800117a:	d111      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d105      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f043 0201 	orr.w	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1c>
 80011dc:	2302      	movs	r3, #2
 80011de:	e113      	b.n	8001408 <HAL_ADC_ConfigChannel+0x244>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d925      	bls.n	800123c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68d9      	ldr	r1, [r3, #12]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b1e      	subs	r3, #30
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43da      	mvns	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	400a      	ands	r2, r1
 8001214:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	4603      	mov	r3, r0
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4403      	add	r3, r0
 800122e:	3b1e      	subs	r3, #30
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	e022      	b.n	8001282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6919      	ldr	r1, [r3, #16]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	2207      	movs	r2, #7
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	400a      	ands	r2, r1
 800125e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6919      	ldr	r1, [r3, #16]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b06      	cmp	r3, #6
 8001288:	d824      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	221f      	movs	r2, #31
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b05      	subs	r3, #5
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d2:	e04c      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d824      	bhi.n	8001326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b23      	subs	r3, #35	@ 0x23
 80012ee:	221f      	movs	r2, #31
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b23      	subs	r3, #35	@ 0x23
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	631a      	str	r2, [r3, #48]	@ 0x30
 8001324:	e023      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b41      	subs	r3, #65	@ 0x41
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b41      	subs	r3, #65	@ 0x41
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136e:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <HAL_ADC_ConfigChannel+0x250>)
 8001370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <HAL_ADC_ConfigChannel+0x254>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10f      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d10b      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <HAL_ADC_ConfigChannel+0x254>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12b      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1c      	ldr	r2, [pc, #112]	@ (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d003      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x1f4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b11      	cmp	r3, #17
 80013b6:	d122      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a11      	ldr	r2, [pc, #68]	@ (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <HAL_ADC_ConfigChannel+0x25c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <HAL_ADC_ConfigChannel+0x260>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40012300 	.word	0x40012300
 8001418:	40012000 	.word	0x40012000
 800141c:	10000012 	.word	0x10000012
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001430:	4b79      	ldr	r3, [pc, #484]	@ (8001618 <ADC_Init+0x1f0>)
 8001432:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800145c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	021a      	lsls	r2, r3, #8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ba:	4a58      	ldr	r2, [pc, #352]	@ (800161c <ADC_Init+0x1f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e00f      	b.n	8001526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001524:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0202 	bic.w	r2, r2, #2
 8001534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	005a      	lsls	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001562:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	3b01      	subs	r3, #1
 8001580:	035a      	lsls	r2, r3, #13
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	e007      	b.n	800159c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800159a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	051a      	lsls	r2, r3, #20
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015de:	025a      	lsls	r2, r3, #9
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	029a      	lsls	r2, r3, #10
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40012300 	.word	0x40012300
 800161c:	0f000001 	.word	0x0f000001

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	@ (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff47 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff5c 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffb0 	bl	8001740 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e159      	b.n	8001abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8148 	bne.w	8001ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d005      	beq.n	800183e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	2b02      	cmp	r3, #2
 800183c:	d130      	bne.n	80018a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 0201 	and.w	r2, r3, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d017      	beq.n	80018dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d123      	bne.n	8001930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a2 	beq.w	8001ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b57      	ldr	r3, [pc, #348]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a56      	ldr	r2, [pc, #344]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b54      	ldr	r3, [pc, #336]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198e:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_GPIO_Init+0x2ec>)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a49      	ldr	r2, [pc, #292]	@ (8001adc <HAL_GPIO_Init+0x2f0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x202>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a48      	ldr	r2, [pc, #288]	@ (8001ae0 <HAL_GPIO_Init+0x2f4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x1fe>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a47      	ldr	r2, [pc, #284]	@ (8001ae4 <HAL_GPIO_Init+0x2f8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a46      	ldr	r2, [pc, #280]	@ (8001ae8 <HAL_GPIO_Init+0x2fc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x1f6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a45      	ldr	r2, [pc, #276]	@ (8001aec <HAL_GPIO_Init+0x300>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x1f2>
 80019da:	2304      	movs	r3, #4
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019de:	2307      	movs	r3, #7
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x2ec>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a2f      	ldr	r2, [pc, #188]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a24      	ldr	r2, [pc, #144]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a86:	4a1a      	ldr	r2, [pc, #104]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f aea2 	bls.w	8001808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e12b      	b.n	8001d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff f842 	bl	8000ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	@ 0x24
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b58:	f001 f8da 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8001b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a81      	ldr	r2, [pc, #516]	@ (8001d68 <HAL_I2C_Init+0x274>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d807      	bhi.n	8001b78 <HAL_I2C_Init+0x84>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a80      	ldr	r2, [pc, #512]	@ (8001d6c <HAL_I2C_Init+0x278>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e006      	b.n	8001b86 <HAL_I2C_Init+0x92>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d70 <HAL_I2C_Init+0x27c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	bf94      	ite	ls
 8001b80:	2301      	movls	r3, #1
 8001b82:	2300      	movhi	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0e7      	b.n	8001d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a78      	ldr	r2, [pc, #480]	@ (8001d74 <HAL_I2C_Init+0x280>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8001d68 <HAL_I2C_Init+0x274>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_I2C_Init+0xd4>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	e009      	b.n	8001bdc <HAL_I2C_Init+0xe8>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	4a69      	ldr	r2, [pc, #420]	@ (8001d78 <HAL_I2C_Init+0x284>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	3301      	adds	r3, #1
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	495c      	ldr	r1, [pc, #368]	@ (8001d68 <HAL_I2C_Init+0x274>)
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	d819      	bhi.n	8001c30 <HAL_I2C_Init+0x13c>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1e59      	subs	r1, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c0a:	1c59      	adds	r1, r3, #1
 8001c0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c10:	400b      	ands	r3, r1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00a      	beq.n	8001c2c <HAL_I2C_Init+0x138>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1e59      	subs	r1, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2a:	e051      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e04f      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d111      	bne.n	8001c5c <HAL_I2C_Init+0x168>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e012      	b.n	8001c82 <HAL_I2C_Init+0x18e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x196>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e022      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <HAL_I2C_Init+0x1bc>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e58      	subs	r0, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	440b      	add	r3, r1
 8001ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cae:	e00f      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e58      	subs	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	0099      	lsls	r1, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6911      	ldr	r1, [r2, #16]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	000186a0 	.word	0x000186a0
 8001d6c:	001e847f 	.word	0x001e847f
 8001d70:	003d08ff 	.word	0x003d08ff
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	461a      	mov	r2, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	817b      	strh	r3, [r7, #10]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff f858 	bl	8000e44 <HAL_GetTick>
 8001d94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	f040 80e0 	bne.w	8001f64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2319      	movs	r3, #25
 8001daa:	2201      	movs	r2, #1
 8001dac:	4970      	ldr	r1, [pc, #448]	@ (8001f70 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f964 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e0d3      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2C_Master_Transmit+0x50>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e0cc      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d007      	beq.n	8001df2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2221      	movs	r2, #33	@ 0x21
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	893a      	ldrh	r2, [r7, #8]
 8001e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a50      	ldr	r2, [pc, #320]	@ (8001f74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f89c 	bl	8001f78 <I2C_MasterRequestWrite>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e08d      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e60:	e066      	b.n	8001f30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa22 	bl	80022b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d107      	bne.n	8001e8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06b      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d11b      	bne.n	8001f04 <HAL_I2C_Master_Transmit+0x188>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	6a39      	ldr	r1, [r7, #32]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fa19 	bl	8002340 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e01a      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d194      	bne.n	8001e62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e000      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f64:	2302      	movs	r3, #2
  }
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	00100002 	.word	0x00100002
 8001f74:	ffff0000 	.word	0xffff0000

08001f78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d006      	beq.n	8001fa2 <I2C_MasterRequestWrite+0x2a>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d003      	beq.n	8001fa2 <I2C_MasterRequestWrite+0x2a>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fa0:	d108      	bne.n	8001fb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e00b      	b.n	8001fcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	2b12      	cmp	r3, #18
 8001fba:	d107      	bne.n	8001fcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f84f 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff2:	d103      	bne.n	8001ffc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e035      	b.n	800206c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002008:	d108      	bne.n	800201c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	e01b      	b.n	8002054 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800201c:	897b      	ldrh	r3, [r7, #10]
 800201e:	11db      	asrs	r3, r3, #7
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f003 0306 	and.w	r3, r3, #6
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f063 030f 	orn	r3, r3, #15
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	490e      	ldr	r1, [pc, #56]	@ (8002074 <I2C_MasterRequestWrite+0xfc>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f898 	bl	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e010      	b.n	800206c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4907      	ldr	r1, [pc, #28]	@ (8002078 <I2C_MasterRequestWrite+0x100>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f888 	bl	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	00010008 	.word	0x00010008
 8002078:	00010002 	.word	0x00010002

0800207c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208c:	e048      	b.n	8002120 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d044      	beq.n	8002120 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7fe fed5 	bl	8000e44 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d139      	bne.n	8002120 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10d      	bne.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	43da      	mvns	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	e00c      	b.n	80020ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	43da      	mvns	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4013      	ands	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d116      	bne.n	8002120 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e023      	b.n	8002168 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10d      	bne.n	8002146 <I2C_WaitOnFlagUntilTimeout+0xca>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	43da      	mvns	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	e00c      	b.n	8002160 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	43da      	mvns	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4013      	ands	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	429a      	cmp	r2, r3
 8002164:	d093      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800217e:	e071      	b.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218e:	d123      	bne.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800219e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e067      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d041      	beq.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e0:	f7fe fe30 	bl	8000e44 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d302      	bcc.n	80021f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d136      	bne.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10c      	bne.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4013      	ands	r3, r2
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	e00b      	b.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	43da      	mvns	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4013      	ands	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf14      	ite	ne
 800222c:	2301      	movne	r3, #1
 800222e:	2300      	moveq	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f043 0220 	orr.w	r2, r3, #32
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e021      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10c      	bne.n	8002288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	43da      	mvns	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e00b      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4013      	ands	r3, r2
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f af6d 	bne.w	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022bc:	e034      	b.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f886 	bl	80023d0 <I2C_IsAcknowledgeFailed>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e034      	b.n	8002338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d028      	beq.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7fe fdb5 	bl	8000e44 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d11d      	bne.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f6:	2b80      	cmp	r3, #128	@ 0x80
 80022f8:	d016      	beq.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e007      	b.n	8002338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002332:	2b80      	cmp	r3, #128	@ 0x80
 8002334:	d1c3      	bne.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800234c:	e034      	b.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f83e 	bl	80023d0 <I2C_IsAcknowledgeFailed>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e034      	b.n	80023c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d028      	beq.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7fe fd6d 	bl	8000e44 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11d      	bne.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d016      	beq.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e007      	b.n	80023c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d1c3      	bne.n	800234e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e6:	d11b      	bne.n	8002420 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e267      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d075      	beq.n	800253a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800244e:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d00c      	beq.n	8002474 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002462:	2b08      	cmp	r3, #8
 8002464:	d112      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b82      	ldr	r3, [pc, #520]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b7e      	ldr	r3, [pc, #504]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05b      	beq.n	8002538 <HAL_RCC_OscConfig+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d157      	bne.n	8002538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e242      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x74>
 8002496:	4b76      	ldr	r3, [pc, #472]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a75      	ldr	r2, [pc, #468]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b70      	ldr	r3, [pc, #448]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6c      	ldr	r2, [pc, #432]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024c8:	4b69      	ldr	r3, [pc, #420]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a68      	ldr	r2, [pc, #416]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b66      	ldr	r3, [pc, #408]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a65      	ldr	r2, [pc, #404]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fcac 	bl	8000e44 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fca8 	bl	8000e44 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e207      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fc98 	bl	8000e44 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fc94 	bl	8000e44 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1f3      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b51      	ldr	r3, [pc, #324]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0xe8>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002546:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b44      	ldr	r3, [pc, #272]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1c7      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4937      	ldr	r1, [pc, #220]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e03a      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <HAL_RCC_OscConfig+0x244>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fc4d 	bl	8000e44 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fc49 	bl	8000e44 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1a8      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4925      	ldr	r1, [pc, #148]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCC_OscConfig+0x244>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fc2c 	bl	8000e44 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe fc28 	bl	8000e44 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e187      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d036      	beq.n	8002688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <HAL_RCC_OscConfig+0x248>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fc0c 	bl	8000e44 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fc08 	bl	8000e44 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e167      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x200>
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_OscConfig+0x248>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe fbf5 	bl	8000e44 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e00e      	b.n	800267c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fbf1 	bl	8000e44 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d907      	bls.n	800267c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e150      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	42470000 	.word	0x42470000
 8002678:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b88      	ldr	r3, [pc, #544]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ea      	bne.n	800265e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8097 	beq.w	80027c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b81      	ldr	r3, [pc, #516]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b7d      	ldr	r3, [pc, #500]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a7c      	ldr	r2, [pc, #496]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b7a      	ldr	r3, [pc, #488]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b77      	ldr	r3, [pc, #476]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b74      	ldr	r3, [pc, #464]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a73      	ldr	r2, [pc, #460]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fbb1 	bl	8000e44 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fbad 	bl	8000e44 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e10c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x2ea>
 800270c:	4b64      	ldr	r3, [pc, #400]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a63      	ldr	r2, [pc, #396]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x30c>
 8002722:	4b5f      	ldr	r3, [pc, #380]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	4a5e      	ldr	r2, [pc, #376]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6713      	str	r3, [r2, #112]	@ 0x70
 800272e:	4b5c      	ldr	r3, [pc, #368]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	4a5b      	ldr	r2, [pc, #364]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6713      	str	r3, [r2, #112]	@ 0x70
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800273c:	4b58      	ldr	r3, [pc, #352]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	4a57      	ldr	r2, [pc, #348]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	@ 0x70
 8002748:	4b55      	ldr	r3, [pc, #340]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	4a54      	ldr	r2, [pc, #336]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fb72 	bl	8000e44 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fb6e 	bl	8000e44 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0cb      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	4b49      	ldr	r3, [pc, #292]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ee      	beq.n	8002764 <HAL_RCC_OscConfig+0x334>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7fe fb5c 	bl	8000e44 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fb58 	bl	8000e44 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0b5      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	4b3e      	ldr	r3, [pc, #248]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ee      	bne.n	8002790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b39      	ldr	r3, [pc, #228]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	4a38      	ldr	r2, [pc, #224]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a1 	beq.w	8002910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ce:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d05c      	beq.n	8002894 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d141      	bne.n	8002866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b31      	ldr	r3, [pc, #196]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fb2c 	bl	8000e44 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fb28 	bl	8000e44 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e087      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	491b      	ldr	r1, [pc, #108]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fb01 	bl	8000e44 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fafd 	bl	8000e44 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e05c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x416>
 8002864:	e054      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe faea 	bl	8000e44 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fae6 	bl	8000e44 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e045      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x444>
 8002892:	e03d      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e038      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000
 80028a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x4ec>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d028      	beq.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d121      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d11a      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028dc:	4013      	ands	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d111      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d90c      	bls.n	800295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a58      	ldr	r2, [pc, #352]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800297e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a52      	ldr	r2, [pc, #328]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d003      	beq.n	80029de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e067      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b37      	ldr	r3, [pc, #220]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4934      	ldr	r1, [pc, #208]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fa18 	bl	8000e44 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe fa14 	bl	8000e44 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20c      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f821 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe f978 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	080036c0 	.word	0x080036c0
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af0:	b094      	sub	sp, #80	@ 0x50
 8002af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b04:	4b79      	ldr	r3, [pc, #484]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x40>
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	f200 80e1 	bhi.w	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1e:	e0db      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b73      	ldr	r3, [pc, #460]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b24:	e0db      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b26:	4b73      	ldr	r3, [pc, #460]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b2a:	e0d8      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b36:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b5e:	4622      	mov	r2, r4
 8002b60:	462b      	mov	r3, r5
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0159      	lsls	r1, r3, #5
 8002b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b70:	0150      	lsls	r0, r2, #5
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4621      	mov	r1, r4
 8002b78:	1a51      	subs	r1, r2, r1
 8002b7a:	6139      	str	r1, [r7, #16]
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b90:	4659      	mov	r1, fp
 8002b92:	018b      	lsls	r3, r1, #6
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	018a      	lsls	r2, r1, #6
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bbe:	4690      	mov	r8, r2
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	eb18 0303 	adds.w	r3, r8, r3
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	462b      	mov	r3, r5
 8002bcc:	eb49 0303 	adc.w	r3, r9, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bde:	4629      	mov	r1, r5
 8002be0:	024b      	lsls	r3, r1, #9
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be8:	4621      	mov	r1, r4
 8002bea:	024a      	lsls	r2, r1, #9
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bfc:	f7fd fb40 	bl	8000280 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c08:	e058      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0a:	4b38      	ldr	r3, [pc, #224]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	2200      	movs	r2, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	4611      	mov	r1, r2
 8002c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
 8002c28:	f04f 0000 	mov.w	r0, #0
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	0159      	lsls	r1, r3, #5
 8002c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c36:	0150      	lsls	r0, r2, #5
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c42:	4649      	mov	r1, r9
 8002c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c60:	eb63 050b 	sbc.w	r5, r3, fp
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	00eb      	lsls	r3, r5, #3
 8002c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c72:	00e2      	lsls	r2, r4, #3
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	4643      	mov	r3, r8
 8002c7a:	18e3      	adds	r3, r4, r3
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	464b      	mov	r3, r9
 8002c80:	eb45 0303 	adc.w	r3, r5, r3
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c92:	4629      	mov	r1, r5
 8002c94:	028b      	lsls	r3, r1, #10
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	028a      	lsls	r2, r1, #10
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	61fa      	str	r2, [r7, #28]
 8002cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb0:	f7fd fae6 	bl	8000280 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3750      	adds	r7, #80	@ 0x50
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	080036d0 	.word	0x080036d0

08002d38 <siprintf>:
 8002d38:	b40e      	push	{r1, r2, r3}
 8002d3a:	b510      	push	{r4, lr}
 8002d3c:	b09d      	sub	sp, #116	@ 0x74
 8002d3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002d40:	9002      	str	r0, [sp, #8]
 8002d42:	9006      	str	r0, [sp, #24]
 8002d44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d48:	480a      	ldr	r0, [pc, #40]	@ (8002d74 <siprintf+0x3c>)
 8002d4a:	9107      	str	r1, [sp, #28]
 8002d4c:	9104      	str	r1, [sp, #16]
 8002d4e:	490a      	ldr	r1, [pc, #40]	@ (8002d78 <siprintf+0x40>)
 8002d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d54:	9105      	str	r1, [sp, #20]
 8002d56:	2400      	movs	r4, #0
 8002d58:	a902      	add	r1, sp, #8
 8002d5a:	6800      	ldr	r0, [r0, #0]
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002d60:	f000 f994 	bl	800308c <_svfiprintf_r>
 8002d64:	9b02      	ldr	r3, [sp, #8]
 8002d66:	701c      	strb	r4, [r3, #0]
 8002d68:	b01d      	add	sp, #116	@ 0x74
 8002d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d6e:	b003      	add	sp, #12
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	2000000c 	.word	0x2000000c
 8002d78:	ffff0208 	.word	0xffff0208

08002d7c <memset>:
 8002d7c:	4402      	add	r2, r0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d100      	bne.n	8002d86 <memset+0xa>
 8002d84:	4770      	bx	lr
 8002d86:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8a:	e7f9      	b.n	8002d80 <memset+0x4>

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	@ (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002dd0 <__libc_init_array+0x38>)
 8002d9c:	4c0d      	ldr	r4, [pc, #52]	@ (8002dd4 <__libc_init_array+0x3c>)
 8002d9e:	1b64      	subs	r4, r4, r5
 8002da0:	10a4      	asrs	r4, r4, #2
 8002da2:	2600      	movs	r6, #0
 8002da4:	42a6      	cmp	r6, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	4d0b      	ldr	r5, [pc, #44]	@ (8002dd8 <__libc_init_array+0x40>)
 8002daa:	4c0c      	ldr	r4, [pc, #48]	@ (8002ddc <__libc_init_array+0x44>)
 8002dac:	f000 fc64 	bl	8003678 <_init>
 8002db0:	1b64      	subs	r4, r4, r5
 8002db2:	10a4      	asrs	r4, r4, #2
 8002db4:	2600      	movs	r6, #0
 8002db6:	42a6      	cmp	r6, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc0:	4798      	blx	r3
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dca:	4798      	blx	r3
 8002dcc:	3601      	adds	r6, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	08003714 	.word	0x08003714
 8002dd4:	08003714 	.word	0x08003714
 8002dd8:	08003714 	.word	0x08003714
 8002ddc:	08003718 	.word	0x08003718

08002de0 <__retarget_lock_acquire_recursive>:
 8002de0:	4770      	bx	lr

08002de2 <__retarget_lock_release_recursive>:
 8002de2:	4770      	bx	lr

08002de4 <_free_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4605      	mov	r5, r0
 8002de8:	2900      	cmp	r1, #0
 8002dea:	d041      	beq.n	8002e70 <_free_r+0x8c>
 8002dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df0:	1f0c      	subs	r4, r1, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bfb8      	it	lt
 8002df6:	18e4      	addlt	r4, r4, r3
 8002df8:	f000 f8e0 	bl	8002fbc <__malloc_lock>
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <_free_r+0x90>)
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	b933      	cbnz	r3, 8002e10 <_free_r+0x2c>
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	6014      	str	r4, [r2, #0]
 8002e06:	4628      	mov	r0, r5
 8002e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e0c:	f000 b8dc 	b.w	8002fc8 <__malloc_unlock>
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	d908      	bls.n	8002e26 <_free_r+0x42>
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	1821      	adds	r1, r4, r0
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	bf01      	itttt	eq
 8002e1c:	6819      	ldreq	r1, [r3, #0]
 8002e1e:	685b      	ldreq	r3, [r3, #4]
 8002e20:	1809      	addeq	r1, r1, r0
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	e7ed      	b.n	8002e02 <_free_r+0x1e>
 8002e26:	461a      	mov	r2, r3
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b10b      	cbz	r3, 8002e30 <_free_r+0x4c>
 8002e2c:	42a3      	cmp	r3, r4
 8002e2e:	d9fa      	bls.n	8002e26 <_free_r+0x42>
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	1850      	adds	r0, r2, r1
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d10b      	bne.n	8002e50 <_free_r+0x6c>
 8002e38:	6820      	ldr	r0, [r4, #0]
 8002e3a:	4401      	add	r1, r0
 8002e3c:	1850      	adds	r0, r2, r1
 8002e3e:	4283      	cmp	r3, r0
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	d1e0      	bne.n	8002e06 <_free_r+0x22>
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	6053      	str	r3, [r2, #4]
 8002e4a:	4408      	add	r0, r1
 8002e4c:	6010      	str	r0, [r2, #0]
 8002e4e:	e7da      	b.n	8002e06 <_free_r+0x22>
 8002e50:	d902      	bls.n	8002e58 <_free_r+0x74>
 8002e52:	230c      	movs	r3, #12
 8002e54:	602b      	str	r3, [r5, #0]
 8002e56:	e7d6      	b.n	8002e06 <_free_r+0x22>
 8002e58:	6820      	ldr	r0, [r4, #0]
 8002e5a:	1821      	adds	r1, r4, r0
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	bf04      	itt	eq
 8002e60:	6819      	ldreq	r1, [r3, #0]
 8002e62:	685b      	ldreq	r3, [r3, #4]
 8002e64:	6063      	str	r3, [r4, #4]
 8002e66:	bf04      	itt	eq
 8002e68:	1809      	addeq	r1, r1, r0
 8002e6a:	6021      	streq	r1, [r4, #0]
 8002e6c:	6054      	str	r4, [r2, #4]
 8002e6e:	e7ca      	b.n	8002e06 <_free_r+0x22>
 8002e70:	bd38      	pop	{r3, r4, r5, pc}
 8002e72:	bf00      	nop
 8002e74:	2000027c 	.word	0x2000027c

08002e78 <sbrk_aligned>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4e0f      	ldr	r6, [pc, #60]	@ (8002eb8 <sbrk_aligned+0x40>)
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	6831      	ldr	r1, [r6, #0]
 8002e80:	4605      	mov	r5, r0
 8002e82:	b911      	cbnz	r1, 8002e8a <sbrk_aligned+0x12>
 8002e84:	f000 fba4 	bl	80035d0 <_sbrk_r>
 8002e88:	6030      	str	r0, [r6, #0]
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f000 fb9f 	bl	80035d0 <_sbrk_r>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	d103      	bne.n	8002e9e <sbrk_aligned+0x26>
 8002e96:	f04f 34ff 	mov.w	r4, #4294967295
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	1cc4      	adds	r4, r0, #3
 8002ea0:	f024 0403 	bic.w	r4, r4, #3
 8002ea4:	42a0      	cmp	r0, r4
 8002ea6:	d0f8      	beq.n	8002e9a <sbrk_aligned+0x22>
 8002ea8:	1a21      	subs	r1, r4, r0
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f000 fb90 	bl	80035d0 <_sbrk_r>
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	d1f2      	bne.n	8002e9a <sbrk_aligned+0x22>
 8002eb4:	e7ef      	b.n	8002e96 <sbrk_aligned+0x1e>
 8002eb6:	bf00      	nop
 8002eb8:	20000278 	.word	0x20000278

08002ebc <_malloc_r>:
 8002ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	1ccd      	adds	r5, r1, #3
 8002ec2:	f025 0503 	bic.w	r5, r5, #3
 8002ec6:	3508      	adds	r5, #8
 8002ec8:	2d0c      	cmp	r5, #12
 8002eca:	bf38      	it	cc
 8002ecc:	250c      	movcc	r5, #12
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	4606      	mov	r6, r0
 8002ed2:	db01      	blt.n	8002ed8 <_malloc_r+0x1c>
 8002ed4:	42a9      	cmp	r1, r5
 8002ed6:	d904      	bls.n	8002ee2 <_malloc_r+0x26>
 8002ed8:	230c      	movs	r3, #12
 8002eda:	6033      	str	r3, [r6, #0]
 8002edc:	2000      	movs	r0, #0
 8002ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fb8 <_malloc_r+0xfc>
 8002ee6:	f000 f869 	bl	8002fbc <__malloc_lock>
 8002eea:	f8d8 3000 	ldr.w	r3, [r8]
 8002eee:	461c      	mov	r4, r3
 8002ef0:	bb44      	cbnz	r4, 8002f44 <_malloc_r+0x88>
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f7ff ffbf 	bl	8002e78 <sbrk_aligned>
 8002efa:	1c43      	adds	r3, r0, #1
 8002efc:	4604      	mov	r4, r0
 8002efe:	d158      	bne.n	8002fb2 <_malloc_r+0xf6>
 8002f00:	f8d8 4000 	ldr.w	r4, [r8]
 8002f04:	4627      	mov	r7, r4
 8002f06:	2f00      	cmp	r7, #0
 8002f08:	d143      	bne.n	8002f92 <_malloc_r+0xd6>
 8002f0a:	2c00      	cmp	r4, #0
 8002f0c:	d04b      	beq.n	8002fa6 <_malloc_r+0xea>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	4639      	mov	r1, r7
 8002f12:	4630      	mov	r0, r6
 8002f14:	eb04 0903 	add.w	r9, r4, r3
 8002f18:	f000 fb5a 	bl	80035d0 <_sbrk_r>
 8002f1c:	4581      	cmp	r9, r0
 8002f1e:	d142      	bne.n	8002fa6 <_malloc_r+0xea>
 8002f20:	6821      	ldr	r1, [r4, #0]
 8002f22:	1a6d      	subs	r5, r5, r1
 8002f24:	4629      	mov	r1, r5
 8002f26:	4630      	mov	r0, r6
 8002f28:	f7ff ffa6 	bl	8002e78 <sbrk_aligned>
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d03a      	beq.n	8002fa6 <_malloc_r+0xea>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	442b      	add	r3, r5
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	bb62      	cbnz	r2, 8002f98 <_malloc_r+0xdc>
 8002f3e:	f8c8 7000 	str.w	r7, [r8]
 8002f42:	e00f      	b.n	8002f64 <_malloc_r+0xa8>
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	1b52      	subs	r2, r2, r5
 8002f48:	d420      	bmi.n	8002f8c <_malloc_r+0xd0>
 8002f4a:	2a0b      	cmp	r2, #11
 8002f4c:	d917      	bls.n	8002f7e <_malloc_r+0xc2>
 8002f4e:	1961      	adds	r1, r4, r5
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	6025      	str	r5, [r4, #0]
 8002f54:	bf18      	it	ne
 8002f56:	6059      	strne	r1, [r3, #4]
 8002f58:	6863      	ldr	r3, [r4, #4]
 8002f5a:	bf08      	it	eq
 8002f5c:	f8c8 1000 	streq.w	r1, [r8]
 8002f60:	5162      	str	r2, [r4, r5]
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	4630      	mov	r0, r6
 8002f66:	f000 f82f 	bl	8002fc8 <__malloc_unlock>
 8002f6a:	f104 000b 	add.w	r0, r4, #11
 8002f6e:	1d23      	adds	r3, r4, #4
 8002f70:	f020 0007 	bic.w	r0, r0, #7
 8002f74:	1ac2      	subs	r2, r0, r3
 8002f76:	bf1c      	itt	ne
 8002f78:	1a1b      	subne	r3, r3, r0
 8002f7a:	50a3      	strne	r3, [r4, r2]
 8002f7c:	e7af      	b.n	8002ede <_malloc_r+0x22>
 8002f7e:	6862      	ldr	r2, [r4, #4]
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	bf0c      	ite	eq
 8002f84:	f8c8 2000 	streq.w	r2, [r8]
 8002f88:	605a      	strne	r2, [r3, #4]
 8002f8a:	e7eb      	b.n	8002f64 <_malloc_r+0xa8>
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	6864      	ldr	r4, [r4, #4]
 8002f90:	e7ae      	b.n	8002ef0 <_malloc_r+0x34>
 8002f92:	463c      	mov	r4, r7
 8002f94:	687f      	ldr	r7, [r7, #4]
 8002f96:	e7b6      	b.n	8002f06 <_malloc_r+0x4a>
 8002f98:	461a      	mov	r2, r3
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	42a3      	cmp	r3, r4
 8002f9e:	d1fb      	bne.n	8002f98 <_malloc_r+0xdc>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6053      	str	r3, [r2, #4]
 8002fa4:	e7de      	b.n	8002f64 <_malloc_r+0xa8>
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	6033      	str	r3, [r6, #0]
 8002faa:	4630      	mov	r0, r6
 8002fac:	f000 f80c 	bl	8002fc8 <__malloc_unlock>
 8002fb0:	e794      	b.n	8002edc <_malloc_r+0x20>
 8002fb2:	6005      	str	r5, [r0, #0]
 8002fb4:	e7d6      	b.n	8002f64 <_malloc_r+0xa8>
 8002fb6:	bf00      	nop
 8002fb8:	2000027c 	.word	0x2000027c

08002fbc <__malloc_lock>:
 8002fbc:	4801      	ldr	r0, [pc, #4]	@ (8002fc4 <__malloc_lock+0x8>)
 8002fbe:	f7ff bf0f 	b.w	8002de0 <__retarget_lock_acquire_recursive>
 8002fc2:	bf00      	nop
 8002fc4:	20000274 	.word	0x20000274

08002fc8 <__malloc_unlock>:
 8002fc8:	4801      	ldr	r0, [pc, #4]	@ (8002fd0 <__malloc_unlock+0x8>)
 8002fca:	f7ff bf0a 	b.w	8002de2 <__retarget_lock_release_recursive>
 8002fce:	bf00      	nop
 8002fd0:	20000274 	.word	0x20000274

08002fd4 <__ssputs_r>:
 8002fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd8:	688e      	ldr	r6, [r1, #8]
 8002fda:	461f      	mov	r7, r3
 8002fdc:	42be      	cmp	r6, r7
 8002fde:	680b      	ldr	r3, [r1, #0]
 8002fe0:	4682      	mov	sl, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	4690      	mov	r8, r2
 8002fe6:	d82d      	bhi.n	8003044 <__ssputs_r+0x70>
 8002fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ff0:	d026      	beq.n	8003040 <__ssputs_r+0x6c>
 8002ff2:	6965      	ldr	r5, [r4, #20]
 8002ff4:	6909      	ldr	r1, [r1, #16]
 8002ff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ffa:	eba3 0901 	sub.w	r9, r3, r1
 8002ffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003002:	1c7b      	adds	r3, r7, #1
 8003004:	444b      	add	r3, r9
 8003006:	106d      	asrs	r5, r5, #1
 8003008:	429d      	cmp	r5, r3
 800300a:	bf38      	it	cc
 800300c:	461d      	movcc	r5, r3
 800300e:	0553      	lsls	r3, r2, #21
 8003010:	d527      	bpl.n	8003062 <__ssputs_r+0x8e>
 8003012:	4629      	mov	r1, r5
 8003014:	f7ff ff52 	bl	8002ebc <_malloc_r>
 8003018:	4606      	mov	r6, r0
 800301a:	b360      	cbz	r0, 8003076 <__ssputs_r+0xa2>
 800301c:	6921      	ldr	r1, [r4, #16]
 800301e:	464a      	mov	r2, r9
 8003020:	f000 fae6 	bl	80035f0 <memcpy>
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800302a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	6126      	str	r6, [r4, #16]
 8003032:	6165      	str	r5, [r4, #20]
 8003034:	444e      	add	r6, r9
 8003036:	eba5 0509 	sub.w	r5, r5, r9
 800303a:	6026      	str	r6, [r4, #0]
 800303c:	60a5      	str	r5, [r4, #8]
 800303e:	463e      	mov	r6, r7
 8003040:	42be      	cmp	r6, r7
 8003042:	d900      	bls.n	8003046 <__ssputs_r+0x72>
 8003044:	463e      	mov	r6, r7
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	4632      	mov	r2, r6
 800304a:	4641      	mov	r1, r8
 800304c:	f000 faa6 	bl	800359c <memmove>
 8003050:	68a3      	ldr	r3, [r4, #8]
 8003052:	1b9b      	subs	r3, r3, r6
 8003054:	60a3      	str	r3, [r4, #8]
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	4433      	add	r3, r6
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	2000      	movs	r0, #0
 800305e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003062:	462a      	mov	r2, r5
 8003064:	f000 fad2 	bl	800360c <_realloc_r>
 8003068:	4606      	mov	r6, r0
 800306a:	2800      	cmp	r0, #0
 800306c:	d1e0      	bne.n	8003030 <__ssputs_r+0x5c>
 800306e:	6921      	ldr	r1, [r4, #16]
 8003070:	4650      	mov	r0, sl
 8003072:	f7ff feb7 	bl	8002de4 <_free_r>
 8003076:	230c      	movs	r3, #12
 8003078:	f8ca 3000 	str.w	r3, [sl]
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003082:	81a3      	strh	r3, [r4, #12]
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	e7e9      	b.n	800305e <__ssputs_r+0x8a>
	...

0800308c <_svfiprintf_r>:
 800308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	4698      	mov	r8, r3
 8003092:	898b      	ldrh	r3, [r1, #12]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	b09d      	sub	sp, #116	@ 0x74
 8003098:	4607      	mov	r7, r0
 800309a:	460d      	mov	r5, r1
 800309c:	4614      	mov	r4, r2
 800309e:	d510      	bpl.n	80030c2 <_svfiprintf_r+0x36>
 80030a0:	690b      	ldr	r3, [r1, #16]
 80030a2:	b973      	cbnz	r3, 80030c2 <_svfiprintf_r+0x36>
 80030a4:	2140      	movs	r1, #64	@ 0x40
 80030a6:	f7ff ff09 	bl	8002ebc <_malloc_r>
 80030aa:	6028      	str	r0, [r5, #0]
 80030ac:	6128      	str	r0, [r5, #16]
 80030ae:	b930      	cbnz	r0, 80030be <_svfiprintf_r+0x32>
 80030b0:	230c      	movs	r3, #12
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	b01d      	add	sp, #116	@ 0x74
 80030ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030be:	2340      	movs	r3, #64	@ 0x40
 80030c0:	616b      	str	r3, [r5, #20]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80030c6:	2320      	movs	r3, #32
 80030c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80030d0:	2330      	movs	r3, #48	@ 0x30
 80030d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003270 <_svfiprintf_r+0x1e4>
 80030d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030da:	f04f 0901 	mov.w	r9, #1
 80030de:	4623      	mov	r3, r4
 80030e0:	469a      	mov	sl, r3
 80030e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030e6:	b10a      	cbz	r2, 80030ec <_svfiprintf_r+0x60>
 80030e8:	2a25      	cmp	r2, #37	@ 0x25
 80030ea:	d1f9      	bne.n	80030e0 <_svfiprintf_r+0x54>
 80030ec:	ebba 0b04 	subs.w	fp, sl, r4
 80030f0:	d00b      	beq.n	800310a <_svfiprintf_r+0x7e>
 80030f2:	465b      	mov	r3, fp
 80030f4:	4622      	mov	r2, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	4638      	mov	r0, r7
 80030fa:	f7ff ff6b 	bl	8002fd4 <__ssputs_r>
 80030fe:	3001      	adds	r0, #1
 8003100:	f000 80a7 	beq.w	8003252 <_svfiprintf_r+0x1c6>
 8003104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003106:	445a      	add	r2, fp
 8003108:	9209      	str	r2, [sp, #36]	@ 0x24
 800310a:	f89a 3000 	ldrb.w	r3, [sl]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 809f 	beq.w	8003252 <_svfiprintf_r+0x1c6>
 8003114:	2300      	movs	r3, #0
 8003116:	f04f 32ff 	mov.w	r2, #4294967295
 800311a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800311e:	f10a 0a01 	add.w	sl, sl, #1
 8003122:	9304      	str	r3, [sp, #16]
 8003124:	9307      	str	r3, [sp, #28]
 8003126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800312a:	931a      	str	r3, [sp, #104]	@ 0x68
 800312c:	4654      	mov	r4, sl
 800312e:	2205      	movs	r2, #5
 8003130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003134:	484e      	ldr	r0, [pc, #312]	@ (8003270 <_svfiprintf_r+0x1e4>)
 8003136:	f7fd f853 	bl	80001e0 <memchr>
 800313a:	9a04      	ldr	r2, [sp, #16]
 800313c:	b9d8      	cbnz	r0, 8003176 <_svfiprintf_r+0xea>
 800313e:	06d0      	lsls	r0, r2, #27
 8003140:	bf44      	itt	mi
 8003142:	2320      	movmi	r3, #32
 8003144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003148:	0711      	lsls	r1, r2, #28
 800314a:	bf44      	itt	mi
 800314c:	232b      	movmi	r3, #43	@ 0x2b
 800314e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003152:	f89a 3000 	ldrb.w	r3, [sl]
 8003156:	2b2a      	cmp	r3, #42	@ 0x2a
 8003158:	d015      	beq.n	8003186 <_svfiprintf_r+0xfa>
 800315a:	9a07      	ldr	r2, [sp, #28]
 800315c:	4654      	mov	r4, sl
 800315e:	2000      	movs	r0, #0
 8003160:	f04f 0c0a 	mov.w	ip, #10
 8003164:	4621      	mov	r1, r4
 8003166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800316a:	3b30      	subs	r3, #48	@ 0x30
 800316c:	2b09      	cmp	r3, #9
 800316e:	d94b      	bls.n	8003208 <_svfiprintf_r+0x17c>
 8003170:	b1b0      	cbz	r0, 80031a0 <_svfiprintf_r+0x114>
 8003172:	9207      	str	r2, [sp, #28]
 8003174:	e014      	b.n	80031a0 <_svfiprintf_r+0x114>
 8003176:	eba0 0308 	sub.w	r3, r0, r8
 800317a:	fa09 f303 	lsl.w	r3, r9, r3
 800317e:	4313      	orrs	r3, r2
 8003180:	9304      	str	r3, [sp, #16]
 8003182:	46a2      	mov	sl, r4
 8003184:	e7d2      	b.n	800312c <_svfiprintf_r+0xa0>
 8003186:	9b03      	ldr	r3, [sp, #12]
 8003188:	1d19      	adds	r1, r3, #4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	9103      	str	r1, [sp, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	bfbb      	ittet	lt
 8003192:	425b      	neglt	r3, r3
 8003194:	f042 0202 	orrlt.w	r2, r2, #2
 8003198:	9307      	strge	r3, [sp, #28]
 800319a:	9307      	strlt	r3, [sp, #28]
 800319c:	bfb8      	it	lt
 800319e:	9204      	strlt	r2, [sp, #16]
 80031a0:	7823      	ldrb	r3, [r4, #0]
 80031a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80031a4:	d10a      	bne.n	80031bc <_svfiprintf_r+0x130>
 80031a6:	7863      	ldrb	r3, [r4, #1]
 80031a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031aa:	d132      	bne.n	8003212 <_svfiprintf_r+0x186>
 80031ac:	9b03      	ldr	r3, [sp, #12]
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	9203      	str	r2, [sp, #12]
 80031b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031b8:	3402      	adds	r4, #2
 80031ba:	9305      	str	r3, [sp, #20]
 80031bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003280 <_svfiprintf_r+0x1f4>
 80031c0:	7821      	ldrb	r1, [r4, #0]
 80031c2:	2203      	movs	r2, #3
 80031c4:	4650      	mov	r0, sl
 80031c6:	f7fd f80b 	bl	80001e0 <memchr>
 80031ca:	b138      	cbz	r0, 80031dc <_svfiprintf_r+0x150>
 80031cc:	9b04      	ldr	r3, [sp, #16]
 80031ce:	eba0 000a 	sub.w	r0, r0, sl
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	4082      	lsls	r2, r0
 80031d6:	4313      	orrs	r3, r2
 80031d8:	3401      	adds	r4, #1
 80031da:	9304      	str	r3, [sp, #16]
 80031dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e0:	4824      	ldr	r0, [pc, #144]	@ (8003274 <_svfiprintf_r+0x1e8>)
 80031e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031e6:	2206      	movs	r2, #6
 80031e8:	f7fc fffa 	bl	80001e0 <memchr>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d036      	beq.n	800325e <_svfiprintf_r+0x1d2>
 80031f0:	4b21      	ldr	r3, [pc, #132]	@ (8003278 <_svfiprintf_r+0x1ec>)
 80031f2:	bb1b      	cbnz	r3, 800323c <_svfiprintf_r+0x1b0>
 80031f4:	9b03      	ldr	r3, [sp, #12]
 80031f6:	3307      	adds	r3, #7
 80031f8:	f023 0307 	bic.w	r3, r3, #7
 80031fc:	3308      	adds	r3, #8
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003202:	4433      	add	r3, r6
 8003204:	9309      	str	r3, [sp, #36]	@ 0x24
 8003206:	e76a      	b.n	80030de <_svfiprintf_r+0x52>
 8003208:	fb0c 3202 	mla	r2, ip, r2, r3
 800320c:	460c      	mov	r4, r1
 800320e:	2001      	movs	r0, #1
 8003210:	e7a8      	b.n	8003164 <_svfiprintf_r+0xd8>
 8003212:	2300      	movs	r3, #0
 8003214:	3401      	adds	r4, #1
 8003216:	9305      	str	r3, [sp, #20]
 8003218:	4619      	mov	r1, r3
 800321a:	f04f 0c0a 	mov.w	ip, #10
 800321e:	4620      	mov	r0, r4
 8003220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003224:	3a30      	subs	r2, #48	@ 0x30
 8003226:	2a09      	cmp	r2, #9
 8003228:	d903      	bls.n	8003232 <_svfiprintf_r+0x1a6>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0c6      	beq.n	80031bc <_svfiprintf_r+0x130>
 800322e:	9105      	str	r1, [sp, #20]
 8003230:	e7c4      	b.n	80031bc <_svfiprintf_r+0x130>
 8003232:	fb0c 2101 	mla	r1, ip, r1, r2
 8003236:	4604      	mov	r4, r0
 8003238:	2301      	movs	r3, #1
 800323a:	e7f0      	b.n	800321e <_svfiprintf_r+0x192>
 800323c:	ab03      	add	r3, sp, #12
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	462a      	mov	r2, r5
 8003242:	4b0e      	ldr	r3, [pc, #56]	@ (800327c <_svfiprintf_r+0x1f0>)
 8003244:	a904      	add	r1, sp, #16
 8003246:	4638      	mov	r0, r7
 8003248:	f3af 8000 	nop.w
 800324c:	1c42      	adds	r2, r0, #1
 800324e:	4606      	mov	r6, r0
 8003250:	d1d6      	bne.n	8003200 <_svfiprintf_r+0x174>
 8003252:	89ab      	ldrh	r3, [r5, #12]
 8003254:	065b      	lsls	r3, r3, #25
 8003256:	f53f af2d 	bmi.w	80030b4 <_svfiprintf_r+0x28>
 800325a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800325c:	e72c      	b.n	80030b8 <_svfiprintf_r+0x2c>
 800325e:	ab03      	add	r3, sp, #12
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	462a      	mov	r2, r5
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <_svfiprintf_r+0x1f0>)
 8003266:	a904      	add	r1, sp, #16
 8003268:	4638      	mov	r0, r7
 800326a:	f000 f879 	bl	8003360 <_printf_i>
 800326e:	e7ed      	b.n	800324c <_svfiprintf_r+0x1c0>
 8003270:	080036d8 	.word	0x080036d8
 8003274:	080036e2 	.word	0x080036e2
 8003278:	00000000 	.word	0x00000000
 800327c:	08002fd5 	.word	0x08002fd5
 8003280:	080036de 	.word	0x080036de

08003284 <_printf_common>:
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	4616      	mov	r6, r2
 800328a:	4698      	mov	r8, r3
 800328c:	688a      	ldr	r2, [r1, #8]
 800328e:	690b      	ldr	r3, [r1, #16]
 8003290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003294:	4293      	cmp	r3, r2
 8003296:	bfb8      	it	lt
 8003298:	4613      	movlt	r3, r2
 800329a:	6033      	str	r3, [r6, #0]
 800329c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032a0:	4607      	mov	r7, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	b10a      	cbz	r2, 80032aa <_printf_common+0x26>
 80032a6:	3301      	adds	r3, #1
 80032a8:	6033      	str	r3, [r6, #0]
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	0699      	lsls	r1, r3, #26
 80032ae:	bf42      	ittt	mi
 80032b0:	6833      	ldrmi	r3, [r6, #0]
 80032b2:	3302      	addmi	r3, #2
 80032b4:	6033      	strmi	r3, [r6, #0]
 80032b6:	6825      	ldr	r5, [r4, #0]
 80032b8:	f015 0506 	ands.w	r5, r5, #6
 80032bc:	d106      	bne.n	80032cc <_printf_common+0x48>
 80032be:	f104 0a19 	add.w	sl, r4, #25
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	6832      	ldr	r2, [r6, #0]
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	dc26      	bgt.n	800331a <_printf_common+0x96>
 80032cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	3b00      	subs	r3, #0
 80032d4:	bf18      	it	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	0692      	lsls	r2, r2, #26
 80032da:	d42b      	bmi.n	8003334 <_printf_common+0xb0>
 80032dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032e0:	4641      	mov	r1, r8
 80032e2:	4638      	mov	r0, r7
 80032e4:	47c8      	blx	r9
 80032e6:	3001      	adds	r0, #1
 80032e8:	d01e      	beq.n	8003328 <_printf_common+0xa4>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	6922      	ldr	r2, [r4, #16]
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf02      	ittt	eq
 80032f6:	68e5      	ldreq	r5, [r4, #12]
 80032f8:	6833      	ldreq	r3, [r6, #0]
 80032fa:	1aed      	subeq	r5, r5, r3
 80032fc:	68a3      	ldr	r3, [r4, #8]
 80032fe:	bf0c      	ite	eq
 8003300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003304:	2500      	movne	r5, #0
 8003306:	4293      	cmp	r3, r2
 8003308:	bfc4      	itt	gt
 800330a:	1a9b      	subgt	r3, r3, r2
 800330c:	18ed      	addgt	r5, r5, r3
 800330e:	2600      	movs	r6, #0
 8003310:	341a      	adds	r4, #26
 8003312:	42b5      	cmp	r5, r6
 8003314:	d11a      	bne.n	800334c <_printf_common+0xc8>
 8003316:	2000      	movs	r0, #0
 8003318:	e008      	b.n	800332c <_printf_common+0xa8>
 800331a:	2301      	movs	r3, #1
 800331c:	4652      	mov	r2, sl
 800331e:	4641      	mov	r1, r8
 8003320:	4638      	mov	r0, r7
 8003322:	47c8      	blx	r9
 8003324:	3001      	adds	r0, #1
 8003326:	d103      	bne.n	8003330 <_printf_common+0xac>
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003330:	3501      	adds	r5, #1
 8003332:	e7c6      	b.n	80032c2 <_printf_common+0x3e>
 8003334:	18e1      	adds	r1, r4, r3
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	2030      	movs	r0, #48	@ 0x30
 800333a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800333e:	4422      	add	r2, r4
 8003340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003348:	3302      	adds	r3, #2
 800334a:	e7c7      	b.n	80032dc <_printf_common+0x58>
 800334c:	2301      	movs	r3, #1
 800334e:	4622      	mov	r2, r4
 8003350:	4641      	mov	r1, r8
 8003352:	4638      	mov	r0, r7
 8003354:	47c8      	blx	r9
 8003356:	3001      	adds	r0, #1
 8003358:	d0e6      	beq.n	8003328 <_printf_common+0xa4>
 800335a:	3601      	adds	r6, #1
 800335c:	e7d9      	b.n	8003312 <_printf_common+0x8e>
	...

08003360 <_printf_i>:
 8003360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003364:	7e0f      	ldrb	r7, [r1, #24]
 8003366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003368:	2f78      	cmp	r7, #120	@ 0x78
 800336a:	4691      	mov	r9, r2
 800336c:	4680      	mov	r8, r0
 800336e:	460c      	mov	r4, r1
 8003370:	469a      	mov	sl, r3
 8003372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003376:	d807      	bhi.n	8003388 <_printf_i+0x28>
 8003378:	2f62      	cmp	r7, #98	@ 0x62
 800337a:	d80a      	bhi.n	8003392 <_printf_i+0x32>
 800337c:	2f00      	cmp	r7, #0
 800337e:	f000 80d1 	beq.w	8003524 <_printf_i+0x1c4>
 8003382:	2f58      	cmp	r7, #88	@ 0x58
 8003384:	f000 80b8 	beq.w	80034f8 <_printf_i+0x198>
 8003388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800338c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003390:	e03a      	b.n	8003408 <_printf_i+0xa8>
 8003392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003396:	2b15      	cmp	r3, #21
 8003398:	d8f6      	bhi.n	8003388 <_printf_i+0x28>
 800339a:	a101      	add	r1, pc, #4	@ (adr r1, 80033a0 <_printf_i+0x40>)
 800339c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033a0:	080033f9 	.word	0x080033f9
 80033a4:	0800340d 	.word	0x0800340d
 80033a8:	08003389 	.word	0x08003389
 80033ac:	08003389 	.word	0x08003389
 80033b0:	08003389 	.word	0x08003389
 80033b4:	08003389 	.word	0x08003389
 80033b8:	0800340d 	.word	0x0800340d
 80033bc:	08003389 	.word	0x08003389
 80033c0:	08003389 	.word	0x08003389
 80033c4:	08003389 	.word	0x08003389
 80033c8:	08003389 	.word	0x08003389
 80033cc:	0800350b 	.word	0x0800350b
 80033d0:	08003437 	.word	0x08003437
 80033d4:	080034c5 	.word	0x080034c5
 80033d8:	08003389 	.word	0x08003389
 80033dc:	08003389 	.word	0x08003389
 80033e0:	0800352d 	.word	0x0800352d
 80033e4:	08003389 	.word	0x08003389
 80033e8:	08003437 	.word	0x08003437
 80033ec:	08003389 	.word	0x08003389
 80033f0:	08003389 	.word	0x08003389
 80033f4:	080034cd 	.word	0x080034cd
 80033f8:	6833      	ldr	r3, [r6, #0]
 80033fa:	1d1a      	adds	r2, r3, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6032      	str	r2, [r6, #0]
 8003400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003408:	2301      	movs	r3, #1
 800340a:	e09c      	b.n	8003546 <_printf_i+0x1e6>
 800340c:	6833      	ldr	r3, [r6, #0]
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	1d19      	adds	r1, r3, #4
 8003412:	6031      	str	r1, [r6, #0]
 8003414:	0606      	lsls	r6, r0, #24
 8003416:	d501      	bpl.n	800341c <_printf_i+0xbc>
 8003418:	681d      	ldr	r5, [r3, #0]
 800341a:	e003      	b.n	8003424 <_printf_i+0xc4>
 800341c:	0645      	lsls	r5, r0, #25
 800341e:	d5fb      	bpl.n	8003418 <_printf_i+0xb8>
 8003420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003424:	2d00      	cmp	r5, #0
 8003426:	da03      	bge.n	8003430 <_printf_i+0xd0>
 8003428:	232d      	movs	r3, #45	@ 0x2d
 800342a:	426d      	negs	r5, r5
 800342c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003430:	4858      	ldr	r0, [pc, #352]	@ (8003594 <_printf_i+0x234>)
 8003432:	230a      	movs	r3, #10
 8003434:	e011      	b.n	800345a <_printf_i+0xfa>
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	6833      	ldr	r3, [r6, #0]
 800343a:	0608      	lsls	r0, r1, #24
 800343c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003440:	d402      	bmi.n	8003448 <_printf_i+0xe8>
 8003442:	0649      	lsls	r1, r1, #25
 8003444:	bf48      	it	mi
 8003446:	b2ad      	uxthmi	r5, r5
 8003448:	2f6f      	cmp	r7, #111	@ 0x6f
 800344a:	4852      	ldr	r0, [pc, #328]	@ (8003594 <_printf_i+0x234>)
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	bf14      	ite	ne
 8003450:	230a      	movne	r3, #10
 8003452:	2308      	moveq	r3, #8
 8003454:	2100      	movs	r1, #0
 8003456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800345a:	6866      	ldr	r6, [r4, #4]
 800345c:	60a6      	str	r6, [r4, #8]
 800345e:	2e00      	cmp	r6, #0
 8003460:	db05      	blt.n	800346e <_printf_i+0x10e>
 8003462:	6821      	ldr	r1, [r4, #0]
 8003464:	432e      	orrs	r6, r5
 8003466:	f021 0104 	bic.w	r1, r1, #4
 800346a:	6021      	str	r1, [r4, #0]
 800346c:	d04b      	beq.n	8003506 <_printf_i+0x1a6>
 800346e:	4616      	mov	r6, r2
 8003470:	fbb5 f1f3 	udiv	r1, r5, r3
 8003474:	fb03 5711 	mls	r7, r3, r1, r5
 8003478:	5dc7      	ldrb	r7, [r0, r7]
 800347a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800347e:	462f      	mov	r7, r5
 8003480:	42bb      	cmp	r3, r7
 8003482:	460d      	mov	r5, r1
 8003484:	d9f4      	bls.n	8003470 <_printf_i+0x110>
 8003486:	2b08      	cmp	r3, #8
 8003488:	d10b      	bne.n	80034a2 <_printf_i+0x142>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	07df      	lsls	r7, r3, #31
 800348e:	d508      	bpl.n	80034a2 <_printf_i+0x142>
 8003490:	6923      	ldr	r3, [r4, #16]
 8003492:	6861      	ldr	r1, [r4, #4]
 8003494:	4299      	cmp	r1, r3
 8003496:	bfde      	ittt	le
 8003498:	2330      	movle	r3, #48	@ 0x30
 800349a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800349e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034a2:	1b92      	subs	r2, r2, r6
 80034a4:	6122      	str	r2, [r4, #16]
 80034a6:	f8cd a000 	str.w	sl, [sp]
 80034aa:	464b      	mov	r3, r9
 80034ac:	aa03      	add	r2, sp, #12
 80034ae:	4621      	mov	r1, r4
 80034b0:	4640      	mov	r0, r8
 80034b2:	f7ff fee7 	bl	8003284 <_printf_common>
 80034b6:	3001      	adds	r0, #1
 80034b8:	d14a      	bne.n	8003550 <_printf_i+0x1f0>
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295
 80034be:	b004      	add	sp, #16
 80034c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	f043 0320 	orr.w	r3, r3, #32
 80034ca:	6023      	str	r3, [r4, #0]
 80034cc:	4832      	ldr	r0, [pc, #200]	@ (8003598 <_printf_i+0x238>)
 80034ce:	2778      	movs	r7, #120	@ 0x78
 80034d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	6831      	ldr	r1, [r6, #0]
 80034d8:	061f      	lsls	r7, r3, #24
 80034da:	f851 5b04 	ldr.w	r5, [r1], #4
 80034de:	d402      	bmi.n	80034e6 <_printf_i+0x186>
 80034e0:	065f      	lsls	r7, r3, #25
 80034e2:	bf48      	it	mi
 80034e4:	b2ad      	uxthmi	r5, r5
 80034e6:	6031      	str	r1, [r6, #0]
 80034e8:	07d9      	lsls	r1, r3, #31
 80034ea:	bf44      	itt	mi
 80034ec:	f043 0320 	orrmi.w	r3, r3, #32
 80034f0:	6023      	strmi	r3, [r4, #0]
 80034f2:	b11d      	cbz	r5, 80034fc <_printf_i+0x19c>
 80034f4:	2310      	movs	r3, #16
 80034f6:	e7ad      	b.n	8003454 <_printf_i+0xf4>
 80034f8:	4826      	ldr	r0, [pc, #152]	@ (8003594 <_printf_i+0x234>)
 80034fa:	e7e9      	b.n	80034d0 <_printf_i+0x170>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	f023 0320 	bic.w	r3, r3, #32
 8003502:	6023      	str	r3, [r4, #0]
 8003504:	e7f6      	b.n	80034f4 <_printf_i+0x194>
 8003506:	4616      	mov	r6, r2
 8003508:	e7bd      	b.n	8003486 <_printf_i+0x126>
 800350a:	6833      	ldr	r3, [r6, #0]
 800350c:	6825      	ldr	r5, [r4, #0]
 800350e:	6961      	ldr	r1, [r4, #20]
 8003510:	1d18      	adds	r0, r3, #4
 8003512:	6030      	str	r0, [r6, #0]
 8003514:	062e      	lsls	r6, r5, #24
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	d501      	bpl.n	800351e <_printf_i+0x1be>
 800351a:	6019      	str	r1, [r3, #0]
 800351c:	e002      	b.n	8003524 <_printf_i+0x1c4>
 800351e:	0668      	lsls	r0, r5, #25
 8003520:	d5fb      	bpl.n	800351a <_printf_i+0x1ba>
 8003522:	8019      	strh	r1, [r3, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	4616      	mov	r6, r2
 800352a:	e7bc      	b.n	80034a6 <_printf_i+0x146>
 800352c:	6833      	ldr	r3, [r6, #0]
 800352e:	1d1a      	adds	r2, r3, #4
 8003530:	6032      	str	r2, [r6, #0]
 8003532:	681e      	ldr	r6, [r3, #0]
 8003534:	6862      	ldr	r2, [r4, #4]
 8003536:	2100      	movs	r1, #0
 8003538:	4630      	mov	r0, r6
 800353a:	f7fc fe51 	bl	80001e0 <memchr>
 800353e:	b108      	cbz	r0, 8003544 <_printf_i+0x1e4>
 8003540:	1b80      	subs	r0, r0, r6
 8003542:	6060      	str	r0, [r4, #4]
 8003544:	6863      	ldr	r3, [r4, #4]
 8003546:	6123      	str	r3, [r4, #16]
 8003548:	2300      	movs	r3, #0
 800354a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800354e:	e7aa      	b.n	80034a6 <_printf_i+0x146>
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	4632      	mov	r2, r6
 8003554:	4649      	mov	r1, r9
 8003556:	4640      	mov	r0, r8
 8003558:	47d0      	blx	sl
 800355a:	3001      	adds	r0, #1
 800355c:	d0ad      	beq.n	80034ba <_printf_i+0x15a>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	079b      	lsls	r3, r3, #30
 8003562:	d413      	bmi.n	800358c <_printf_i+0x22c>
 8003564:	68e0      	ldr	r0, [r4, #12]
 8003566:	9b03      	ldr	r3, [sp, #12]
 8003568:	4298      	cmp	r0, r3
 800356a:	bfb8      	it	lt
 800356c:	4618      	movlt	r0, r3
 800356e:	e7a6      	b.n	80034be <_printf_i+0x15e>
 8003570:	2301      	movs	r3, #1
 8003572:	4632      	mov	r2, r6
 8003574:	4649      	mov	r1, r9
 8003576:	4640      	mov	r0, r8
 8003578:	47d0      	blx	sl
 800357a:	3001      	adds	r0, #1
 800357c:	d09d      	beq.n	80034ba <_printf_i+0x15a>
 800357e:	3501      	adds	r5, #1
 8003580:	68e3      	ldr	r3, [r4, #12]
 8003582:	9903      	ldr	r1, [sp, #12]
 8003584:	1a5b      	subs	r3, r3, r1
 8003586:	42ab      	cmp	r3, r5
 8003588:	dcf2      	bgt.n	8003570 <_printf_i+0x210>
 800358a:	e7eb      	b.n	8003564 <_printf_i+0x204>
 800358c:	2500      	movs	r5, #0
 800358e:	f104 0619 	add.w	r6, r4, #25
 8003592:	e7f5      	b.n	8003580 <_printf_i+0x220>
 8003594:	080036e9 	.word	0x080036e9
 8003598:	080036fa 	.word	0x080036fa

0800359c <memmove>:
 800359c:	4288      	cmp	r0, r1
 800359e:	b510      	push	{r4, lr}
 80035a0:	eb01 0402 	add.w	r4, r1, r2
 80035a4:	d902      	bls.n	80035ac <memmove+0x10>
 80035a6:	4284      	cmp	r4, r0
 80035a8:	4623      	mov	r3, r4
 80035aa:	d807      	bhi.n	80035bc <memmove+0x20>
 80035ac:	1e43      	subs	r3, r0, #1
 80035ae:	42a1      	cmp	r1, r4
 80035b0:	d008      	beq.n	80035c4 <memmove+0x28>
 80035b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035ba:	e7f8      	b.n	80035ae <memmove+0x12>
 80035bc:	4402      	add	r2, r0
 80035be:	4601      	mov	r1, r0
 80035c0:	428a      	cmp	r2, r1
 80035c2:	d100      	bne.n	80035c6 <memmove+0x2a>
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035ce:	e7f7      	b.n	80035c0 <memmove+0x24>

080035d0 <_sbrk_r>:
 80035d0:	b538      	push	{r3, r4, r5, lr}
 80035d2:	4d06      	ldr	r5, [pc, #24]	@ (80035ec <_sbrk_r+0x1c>)
 80035d4:	2300      	movs	r3, #0
 80035d6:	4604      	mov	r4, r0
 80035d8:	4608      	mov	r0, r1
 80035da:	602b      	str	r3, [r5, #0]
 80035dc:	f7fd fb5a 	bl	8000c94 <_sbrk>
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	d102      	bne.n	80035ea <_sbrk_r+0x1a>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	b103      	cbz	r3, 80035ea <_sbrk_r+0x1a>
 80035e8:	6023      	str	r3, [r4, #0]
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
 80035ec:	20000270 	.word	0x20000270

080035f0 <memcpy>:
 80035f0:	440a      	add	r2, r1
 80035f2:	4291      	cmp	r1, r2
 80035f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035f8:	d100      	bne.n	80035fc <memcpy+0xc>
 80035fa:	4770      	bx	lr
 80035fc:	b510      	push	{r4, lr}
 80035fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003606:	4291      	cmp	r1, r2
 8003608:	d1f9      	bne.n	80035fe <memcpy+0xe>
 800360a:	bd10      	pop	{r4, pc}

0800360c <_realloc_r>:
 800360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003610:	4607      	mov	r7, r0
 8003612:	4614      	mov	r4, r2
 8003614:	460d      	mov	r5, r1
 8003616:	b921      	cbnz	r1, 8003622 <_realloc_r+0x16>
 8003618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800361c:	4611      	mov	r1, r2
 800361e:	f7ff bc4d 	b.w	8002ebc <_malloc_r>
 8003622:	b92a      	cbnz	r2, 8003630 <_realloc_r+0x24>
 8003624:	f7ff fbde 	bl	8002de4 <_free_r>
 8003628:	4625      	mov	r5, r4
 800362a:	4628      	mov	r0, r5
 800362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003630:	f000 f81a 	bl	8003668 <_malloc_usable_size_r>
 8003634:	4284      	cmp	r4, r0
 8003636:	4606      	mov	r6, r0
 8003638:	d802      	bhi.n	8003640 <_realloc_r+0x34>
 800363a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800363e:	d8f4      	bhi.n	800362a <_realloc_r+0x1e>
 8003640:	4621      	mov	r1, r4
 8003642:	4638      	mov	r0, r7
 8003644:	f7ff fc3a 	bl	8002ebc <_malloc_r>
 8003648:	4680      	mov	r8, r0
 800364a:	b908      	cbnz	r0, 8003650 <_realloc_r+0x44>
 800364c:	4645      	mov	r5, r8
 800364e:	e7ec      	b.n	800362a <_realloc_r+0x1e>
 8003650:	42b4      	cmp	r4, r6
 8003652:	4622      	mov	r2, r4
 8003654:	4629      	mov	r1, r5
 8003656:	bf28      	it	cs
 8003658:	4632      	movcs	r2, r6
 800365a:	f7ff ffc9 	bl	80035f0 <memcpy>
 800365e:	4629      	mov	r1, r5
 8003660:	4638      	mov	r0, r7
 8003662:	f7ff fbbf 	bl	8002de4 <_free_r>
 8003666:	e7f1      	b.n	800364c <_realloc_r+0x40>

08003668 <_malloc_usable_size_r>:
 8003668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800366c:	1f18      	subs	r0, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	bfbc      	itt	lt
 8003672:	580b      	ldrlt	r3, [r1, r0]
 8003674:	18c0      	addlt	r0, r0, r3
 8003676:	4770      	bx	lr

08003678 <_init>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr

08003684 <_fini>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr
