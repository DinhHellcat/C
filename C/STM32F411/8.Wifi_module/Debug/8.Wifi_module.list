
8.Wifi_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005040  08005040  00006040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005204  08005204  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005204  08005204  00006204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800520c  0800520c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800520c  0800520c  0000620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005210  08005210  00006210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005214  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  0800527c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  0800527c  00007374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be8a  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9e  00000000  00000000  00012f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00014cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084f  00000000  00000000  00015770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cdf  00000000  00000000  00015fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da9d  00000000  00000000  0002cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a420  00000000  00000000  0003a73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4b5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a4  00000000  00000000  000c4ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000c8344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005028 	.word	0x08005028

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005028 	.word	0x08005028

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	f023 030f 	bic.w	r3, r3, #15
 80005ce:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f043 030c 	orr.w	r3, r3, #12
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	f043 030c 	orr.w	r3, r3, #12
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	4619      	mov	r1, r3
 8000608:	f107 0208 	add.w	r2, r7, #8
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2304      	movs	r3, #4
 8000612:	f001 faa9 	bl	8001b68 <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af02      	add	r7, sp, #8
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f023 030f 	bic.w	r3, r3, #15
 8000630:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	f043 030d 	orr.w	r3, r3, #13
 800063e:	b2db      	uxtb	r3, r3
 8000640:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	f043 0309 	orr.w	r3, r3, #9
 8000648:	b2db      	uxtb	r3, r3
 800064a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	f043 030d 	orr.w	r3, r3, #13
 8000652:	b2db      	uxtb	r3, r3
 8000654:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	f043 0309 	orr.w	r3, r3, #9
 800065c:	b2db      	uxtb	r3, r3
 800065e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	4619      	mov	r1, r3
 800066a:	f107 0208 	add.w	r2, r7, #8
 800066e:	2364      	movs	r3, #100	@ 0x64
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2304      	movs	r3, #4
 8000674:	f001 fa78 	bl	8001b68 <HAL_I2C_Master_Transmit>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000688:	2180      	movs	r1, #128	@ 0x80
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff96 	bl	80005bc <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e006      	b.n	80006a4 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000696:	2120      	movs	r1, #32
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ffc0 	bl	800061e <lcd_send_data>
    for (int i = 0; i < 80; i++)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	3301      	adds	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80006a8:	ddf5      	ble.n	8000696 <lcd_clear+0x16>
    }
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d824      	bhi.n	8000710 <lcd_gotoxy+0x5c>
 80006c6:	a201      	add	r2, pc, #4	@ (adr r2, 80006cc <lcd_gotoxy+0x18>)
 80006c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006cc:	080006dd 	.word	0x080006dd
 80006d0:	080006e7 	.word	0x080006e7
 80006d4:	080006f1 	.word	0x080006f1
 80006d8:	080006fb 	.word	0x080006fb
    {
        case 0: address = 0x80 + col; break;  // First row
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b80      	subs	r3, #128	@ 0x80
 80006e2:	75fb      	strb	r3, [r7, #23]
 80006e4:	e00e      	b.n	8000704 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	3b40      	subs	r3, #64	@ 0x40
 80006ec:	75fb      	strb	r3, [r7, #23]
 80006ee:	e009      	b.n	8000704 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	3b6c      	subs	r3, #108	@ 0x6c
 80006f6:	75fb      	strb	r3, [r7, #23]
 80006f8:	e004      	b.n	8000704 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	3b2c      	subs	r3, #44	@ 0x2c
 8000700:	75fb      	strb	r3, [r7, #23]
 8000702:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	4619      	mov	r1, r3
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f7ff ff57 	bl	80005bc <lcd_send_cmd>
 800070e:	e000      	b.n	8000712 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8000710:	bf00      	nop
}
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000720:	2032      	movs	r0, #50	@ 0x32
 8000722:	f000 fd77 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000726:	2130      	movs	r1, #48	@ 0x30
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff47 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(5);
 800072e:	2005      	movs	r0, #5
 8000730:	f000 fd70 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000734:	2130      	movs	r1, #48	@ 0x30
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff40 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 fd69 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000742:	2130      	movs	r1, #48	@ 0x30
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff39 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(10);
 800074a:	200a      	movs	r0, #10
 800074c:	f000 fd62 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000750:	2120      	movs	r1, #32
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff32 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(10);
 8000758:	200a      	movs	r0, #10
 800075a:	f000 fd5b 	bl	8001214 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800075e:	2128      	movs	r1, #40	@ 0x28
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff2b 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fd54 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800076c:	2108      	movs	r1, #8
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff24 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fd4d 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800077a:	2101      	movs	r1, #1
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff1d 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(2);
 8000782:	2002      	movs	r0, #2
 8000784:	f000 fd46 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000788:	2106      	movs	r1, #6
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff16 	bl	80005bc <lcd_send_cmd>
    HAL_Delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fd3f 	bl	8001214 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000796:	210c      	movs	r1, #12
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff0f 	bl	80005bc <lcd_send_cmd>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80007b0:	e007      	b.n	80007c2 <lcd_puts+0x1c>
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	603a      	str	r2, [r7, #0]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff2e 	bl	800061e <lcd_send_data>
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f3      	bne.n	80007b2 <lcd_puts+0xc>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <LCD_Init_Custom>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LCD_Init_Custom()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  lcd.hi2c = &hi2c1;
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <LCD_Init_Custom+0x1c>)
 80007da:	4a06      	ldr	r2, [pc, #24]	@ (80007f4 <LCD_Init_Custom+0x20>)
 80007dc:	601a      	str	r2, [r3, #0]
  lcd.address = 0x4E;
 80007de:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <LCD_Init_Custom+0x1c>)
 80007e0:	224e      	movs	r2, #78	@ 0x4e
 80007e2:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <LCD_Init_Custom+0x1c>)
 80007e6:	f7ff ff97 	bl	8000718 <lcd_init>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000120 	.word	0x20000120
 80007f4:	20000084 	.word	0x20000084

080007f8 <send_at_command>:

int send_at_command(const char* command, const char* expected_response, uint32_t timeout)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
    // Xóa bộ đệm cũ
    memset(response_buffer, 0, sizeof(response_buffer));
 8000804:	22c8      	movs	r2, #200	@ 0xc8
 8000806:	2100      	movs	r1, #0
 8000808:	4810      	ldr	r0, [pc, #64]	@ (800084c <send_at_command+0x54>)
 800080a:	f003 fb32 	bl	8003e72 <memset>
    response_index = 0;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <send_at_command+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]

    // Gửi lệnh
    HAL_UART_Transmit(&huart6, (uint8_t*)command, strlen(command), 1000);
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff fce3 	bl	80001e0 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000822:	68f9      	ldr	r1, [r7, #12]
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <send_at_command+0x5c>)
 8000826:	f002 f9e1 	bl	8002bec <HAL_UART_Transmit>

    // Chờ cho hết thời gian timeout để thu thập toàn bộ phản hồi
    HAL_Delay(timeout);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 fcf2 	bl	8001214 <HAL_Delay>

    // Sau khi đã chờ, kiểm tra xem chuỗi phản hồi thu thập được có chứa nội dung mong muốn không
    if (strstr(response_buffer, expected_response) != NULL)
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	4806      	ldr	r0, [pc, #24]	@ (800084c <send_at_command+0x54>)
 8000834:	f003 fb94 	bl	8003f60 <strstr>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <send_at_command+0x4a>
    {
        return 1; // Thành công
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <send_at_command+0x4c>
    }

    return 0; // Thất bại
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000012c 	.word	0x2000012c
 8000850:	200001f4 	.word	0x200001f4
 8000854:	200000d8 	.word	0x200000d8

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0be      	sub	sp, #248	@ 0xf8
 800085c:	af00      	add	r7, sp, #0
  /* --- KHỞI TẠO --- */
  HAL_Init();
 800085e:	f000 fc67 	bl	8001130 <HAL_Init>
  SystemClock_Config();
 8000862:	f000 f905 	bl	8000a70 <SystemClock_Config>
  MX_GPIO_Init();
 8000866:	f000 f9c3 	bl	8000bf0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800086a:	f000 f969 	bl	8000b40 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800086e:	f000 f995 	bl	8000b9c <MX_USART6_UART_Init>

  /* USER CODE BEGIN 2 */
  // Khởi tạo LCD và bắt đầu lắng nghe UART
  LCD_Init_Custom();
 8000872:	f7ff ffaf 	bl	80007d4 <LCD_Init_Custom>
  HAL_UART_Receive_IT(&huart6, &uart_rx_byte, 1);
 8000876:	2201      	movs	r2, #1
 8000878:	4969      	ldr	r1, [pc, #420]	@ (8000a20 <main+0x1c8>)
 800087a:	486a      	ldr	r0, [pc, #424]	@ (8000a24 <main+0x1cc>)
 800087c:	f002 fa41 	bl	8002d02 <HAL_UART_Receive_IT>
//  HAL_Delay(500);
//  send_at_command("AT+WMODE=1,1\r\n", "OK", 3000);
//  HAL_Delay(500);

  // Gửi lệnh kết nối Wi-Fi một lần duy nhất
  const char* connect_command = "AT+WJAP=\"Herukyatto\",\"1234567890\"\r\n";
 8000880:	4b69      	ldr	r3, [pc, #420]	@ (8000a28 <main+0x1d0>)
 8000882:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  lcd_clear(&lcd);
 8000886:	4869      	ldr	r0, [pc, #420]	@ (8000a2c <main+0x1d4>)
 8000888:	f7ff fefa 	bl	8000680 <lcd_clear>
  lcd_puts(&lcd, "Dang ket noi...");
 800088c:	4968      	ldr	r1, [pc, #416]	@ (8000a30 <main+0x1d8>)
 800088e:	4867      	ldr	r0, [pc, #412]	@ (8000a2c <main+0x1d4>)
 8000890:	f7ff ff89 	bl	80007a6 <lcd_puts>
  HAL_UART_Transmit(&huart6, (uint8_t*)connect_command, strlen(connect_command), 1000);
 8000894:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000898:	f7ff fca2 	bl	80001e0 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80008a8:	485e      	ldr	r0, [pc, #376]	@ (8000a24 <main+0x1cc>)
 80008aa:	f002 f99f 	bl	8002bec <HAL_UART_Transmit>

  /* Infinite loop */
  while (1)
  {
    // Đây là một máy trạng thái (state machine) đơn giản
	    switch (wifi_state)
 80008ae:	4b61      	ldr	r3, [pc, #388]	@ (8000a34 <main+0x1dc>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	f000 80b0 	beq.w	8000a18 <main+0x1c0>
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	dcf8      	bgt.n	80008ae <main+0x56>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <main+0x6e>
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d017      	beq.n	80008f4 <main+0x9c>
 80008c4:	e7f3      	b.n	80008ae <main+0x56>
	    {
	      case WIFI_STATE_CONNECTING:
	        // Trạng thái chờ sự kiện WIFI_GOT_IP
	        // Dựa trên quan sát thực tế của bạn, chuỗi này có dấu gạch dưới
	        if (strstr(response_buffer, "+EVENT:WIFI_GOT_IP") != NULL)
 80008c6:	495c      	ldr	r1, [pc, #368]	@ (8000a38 <main+0x1e0>)
 80008c8:	485c      	ldr	r0, [pc, #368]	@ (8000a3c <main+0x1e4>)
 80008ca:	f003 fb49 	bl	8003f60 <strstr>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f000 80a3 	beq.w	8000a1c <main+0x1c4>
	        {
	          lcd_clear(&lcd);
 80008d6:	4855      	ldr	r0, [pc, #340]	@ (8000a2c <main+0x1d4>)
 80008d8:	f7ff fed2 	bl	8000680 <lcd_clear>
	          lcd_puts(&lcd, "KET NOI THANH CONG!");
 80008dc:	4958      	ldr	r1, [pc, #352]	@ (8000a40 <main+0x1e8>)
 80008de:	4853      	ldr	r0, [pc, #332]	@ (8000a2c <main+0x1d4>)
 80008e0:	f7ff ff61 	bl	80007a6 <lcd_puts>
	          HAL_Delay(2000);
 80008e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008e8:	f000 fc94 	bl	8001214 <HAL_Delay>
	          wifi_state = WIFI_STATE_GET_INFO; // Chuyển sang trạng thái lấy thông tin
 80008ec:	4b51      	ldr	r3, [pc, #324]	@ (8000a34 <main+0x1dc>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 80008f2:	e093      	b.n	8000a1c <main+0x1c4>

	      case WIFI_STATE_GET_INFO:
	        // Trạng thái gửi lệnh lấy thông tin
	        lcd_clear(&lcd);
 80008f4:	484d      	ldr	r0, [pc, #308]	@ (8000a2c <main+0x1d4>)
 80008f6:	f7ff fec3 	bl	8000680 <lcd_clear>
	        lcd_puts(&lcd, "Lay thong tin...");
 80008fa:	4952      	ldr	r1, [pc, #328]	@ (8000a44 <main+0x1ec>)
 80008fc:	484b      	ldr	r0, [pc, #300]	@ (8000a2c <main+0x1d4>)
 80008fe:	f7ff ff52 	bl	80007a6 <lcd_puts>
	        // Sử dụng AT+WJAP? để lấy thông tin
	        if (send_at_command("AT+WJAP?\r\n", "OK", 3000))
 8000902:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000906:	4950      	ldr	r1, [pc, #320]	@ (8000a48 <main+0x1f0>)
 8000908:	4850      	ldr	r0, [pc, #320]	@ (8000a4c <main+0x1f4>)
 800090a:	f7ff ff75 	bl	80007f8 <send_at_command>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d075      	beq.n	8000a00 <main+0x1a8>
	        {
	            // --- XỬ LÝ CHUỖI ĐỂ LẤY IP VÀ MAC ---
	            char ip_addr[16] = "Not Found";
 8000914:	4a4e      	ldr	r2, [pc, #312]	@ (8000a50 <main+0x1f8>)
 8000916:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800091a:	ca07      	ldmia	r2, {r0, r1, r2}
 800091c:	c303      	stmia	r3!, {r0, r1}
 800091e:	801a      	strh	r2, [r3, #0]
 8000920:	f107 03e6 	add.w	r3, r7, #230	@ 0xe6
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	809a      	strh	r2, [r3, #4]
	            char mac_addr[18] = "Not Found";
 800092a:	4a4a      	ldr	r2, [pc, #296]	@ (8000a54 <main+0x1fc>)
 800092c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000930:	ca07      	ldmia	r2, {r0, r1, r2}
 8000932:	c303      	stmia	r3!, {r0, r1}
 8000934:	801a      	strh	r2, [r3, #0]
 8000936:	f107 03d2 	add.w	r3, r7, #210	@ 0xd2
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
	            char temp_buffer[200];
	            strcpy(temp_buffer, response_buffer);
 8000940:	463b      	mov	r3, r7
 8000942:	493e      	ldr	r1, [pc, #248]	@ (8000a3c <main+0x1e4>)
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fb94 	bl	8004072 <strcpy>

	            char *token = strtok(temp_buffer, ",");
 800094a:	463b      	mov	r3, r7
 800094c:	4942      	ldr	r1, [pc, #264]	@ (8000a58 <main+0x200>)
 800094e:	4618      	mov	r0, r3
 8000950:	f003 faaa 	bl	8003ea8 <strtok>
 8000954:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
	            int token_count = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	            while(token != NULL)
 800095e:	e029      	b.n	80009b4 <main+0x15c>
	            {
	                // Dựa trên định dạng, IP là token thứ 8, MAC là token thứ 6
	                if(token_count == 5) {
 8000960:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000964:	2b05      	cmp	r3, #5
 8000966:	d10b      	bne.n	8000980 <main+0x128>
	                    strncpy(mac_addr, token, 17);
 8000968:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800096c:	2211      	movs	r2, #17
 800096e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fa85 	bl	8003e82 <strncpy>
	                    mac_addr[17] = '\0';
 8000978:	2300      	movs	r3, #0
 800097a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 800097e:	e00e      	b.n	800099e <main+0x146>
	                } else if(token_count == 7) {
 8000980:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000984:	2b07      	cmp	r3, #7
 8000986:	d10a      	bne.n	800099e <main+0x146>
	                    strncpy(ip_addr, token, 15);
 8000988:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800098c:	220f      	movs	r2, #15
 800098e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fa75 	bl	8003e82 <strncpy>
	                    ip_addr[15] = '\0';
 8000998:	2300      	movs	r3, #0
 800099a:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
	                }
	                token = strtok(NULL, ",");
 800099e:	492e      	ldr	r1, [pc, #184]	@ (8000a58 <main+0x200>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f003 fa81 	bl	8003ea8 <strtok>
 80009a6:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
	                token_count++;
 80009aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80009ae:	3301      	adds	r3, #1
 80009b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	            while(token != NULL)
 80009b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1d1      	bne.n	8000960 <main+0x108>
	            }

	            // In kết quả đã xử lý
	            lcd_clear(&lcd);
 80009bc:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <main+0x1d4>)
 80009be:	f7ff fe5f 	bl	8000680 <lcd_clear>
	            sprintf(line1_str, "IP: %s", ip_addr);
 80009c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009c6:	461a      	mov	r2, r3
 80009c8:	4924      	ldr	r1, [pc, #144]	@ (8000a5c <main+0x204>)
 80009ca:	4825      	ldr	r0, [pc, #148]	@ (8000a60 <main+0x208>)
 80009cc:	f003 f9ec 	bl	8003da8 <siprintf>
	            sprintf(line2_str, "MAC:%s", mac_addr);
 80009d0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80009d4:	461a      	mov	r2, r3
 80009d6:	4923      	ldr	r1, [pc, #140]	@ (8000a64 <main+0x20c>)
 80009d8:	4823      	ldr	r0, [pc, #140]	@ (8000a68 <main+0x210>)
 80009da:	f003 f9e5 	bl	8003da8 <siprintf>
	            lcd_puts(&lcd, line1_str);
 80009de:	4920      	ldr	r1, [pc, #128]	@ (8000a60 <main+0x208>)
 80009e0:	4812      	ldr	r0, [pc, #72]	@ (8000a2c <main+0x1d4>)
 80009e2:	f7ff fee0 	bl	80007a6 <lcd_puts>
	            lcd_gotoxy(&lcd, 0, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2100      	movs	r1, #0
 80009ea:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <main+0x1d4>)
 80009ec:	f7ff fe62 	bl	80006b4 <lcd_gotoxy>
	            lcd_puts(&lcd, line2_str);
 80009f0:	491d      	ldr	r1, [pc, #116]	@ (8000a68 <main+0x210>)
 80009f2:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <main+0x1d4>)
 80009f4:	f7ff fed7 	bl	80007a6 <lcd_puts>

	            wifi_state = WIFI_STATE_CONNECTED;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <main+0x1dc>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	701a      	strb	r2, [r3, #0]
	        {
	            lcd_clear(&lcd);
	            lcd_puts(&lcd, "Loi lay thong tin");
	            HAL_Delay(2000);
	        }
	        break;
 80009fe:	e00e      	b.n	8000a1e <main+0x1c6>
	            lcd_clear(&lcd);
 8000a00:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <main+0x1d4>)
 8000a02:	f7ff fe3d 	bl	8000680 <lcd_clear>
	            lcd_puts(&lcd, "Loi lay thong tin");
 8000a06:	4919      	ldr	r1, [pc, #100]	@ (8000a6c <main+0x214>)
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <main+0x1d4>)
 8000a0a:	f7ff fecc 	bl	80007a6 <lcd_puts>
	            HAL_Delay(2000);
 8000a0e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a12:	f000 fbff 	bl	8001214 <HAL_Delay>
	        break;
 8000a16:	e002      	b.n	8000a1e <main+0x1c6>

	      case WIFI_STATE_CONNECTED:
	        // Đã kết nối và lấy thông tin xong, không làm gì cả
	        break;
 8000a18:	bf00      	nop
 8000a1a:	e748      	b.n	80008ae <main+0x56>
	        break;
 8000a1c:	bf00      	nop
	    switch (wifi_state)
 8000a1e:	e746      	b.n	80008ae <main+0x56>
 8000a20:	20000128 	.word	0x20000128
 8000a24:	200000d8 	.word	0x200000d8
 8000a28:	08005040 	.word	0x08005040
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	08005064 	.word	0x08005064
 8000a34:	200001f5 	.word	0x200001f5
 8000a38:	08005074 	.word	0x08005074
 8000a3c:	2000012c 	.word	0x2000012c
 8000a40:	08005088 	.word	0x08005088
 8000a44:	0800509c 	.word	0x0800509c
 8000a48:	080050b0 	.word	0x080050b0
 8000a4c:	080050b4 	.word	0x080050b4
 8000a50:	080050e8 	.word	0x080050e8
 8000a54:	080050f8 	.word	0x080050f8
 8000a58:	080050c0 	.word	0x080050c0
 8000a5c:	080050c4 	.word	0x080050c4
 8000a60:	200001f8 	.word	0x200001f8
 8000a64:	080050cc 	.word	0x080050cc
 8000a68:	2000020c 	.word	0x2000020c
 8000a6c:	080050d4 	.word	0x080050d4

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f9f7 	bl	8003e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <SystemClock_Config+0xc8>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a26      	ldr	r2, [pc, #152]	@ (8000b38 <SystemClock_Config+0xc8>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <SystemClock_Config+0xc8>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a20      	ldr	r2, [pc, #128]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ae4:	2364      	movs	r3, #100	@ 0x64
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fb91 	bl	800221c <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f914 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2103      	movs	r1, #3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fdf3 	bl	800270c <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b2c:	f000 f8fe 	bl	8000d2c <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3750      	adds	r7, #80	@ 0x50
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	@ (8000b94 <MX_I2C1_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_I2C1_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b7e:	f000 feaf 	bl	80018e0 <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f8d0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000084 	.word	0x20000084
 8000b94:	40005400 	.word	0x40005400
 8000b98:	000186a0 	.word	0x000186a0

08000b9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <MX_USART6_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USART6_UART_Init+0x4c>)
 8000bd4:	f001 ffba 	bl	8002b4c <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f8a5 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000d8 	.word	0x200000d8
 8000bec:	40011400 	.word	0x40011400

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a26      	ldr	r2, [pc, #152]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a18      	ldr	r2, [pc, #96]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a11      	ldr	r2, [pc, #68]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <MX_GPIO_Init+0xbc>)
 8000c7e:	f000 fe15 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ON_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_ON_BOARD_Pin;
 8000c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ON_BOARD_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_GPIO_Init+0xbc>)
 8000c9c:	f000 fc82 	bl	80015a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	@ 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a16      	ldr	r2, [pc, #88]	@ (8000d18 <HAL_UART_RxCpltCallback+0x68>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d126      	bne.n	8000d10 <HAL_UART_RxCpltCallback+0x60>
  {
    // Chỉ ghép ký tự vào bộ đệm, không đặt cờ báo nữa
    if (response_index < sizeof(response_buffer) - 1)
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_UART_RxCpltCallback+0x6c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2bc6      	cmp	r3, #198	@ 0xc6
 8000cc8:	d81d      	bhi.n	8000d06 <HAL_UART_RxCpltCallback+0x56>
    {
      // Thay thế ký tự xuống dòng bằng dấu cách để dễ hiển thị trên 1 dòng
      if(uart_rx_byte == '\r' || uart_rx_byte == '\n')
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_RxCpltCallback+0x70>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b0d      	cmp	r3, #13
 8000cd0:	d003      	beq.n	8000cda <HAL_UART_RxCpltCallback+0x2a>
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <HAL_UART_RxCpltCallback+0x70>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b0a      	cmp	r3, #10
 8000cd8:	d10a      	bne.n	8000cf0 <HAL_UART_RxCpltCallback+0x40>
      {
          response_buffer[response_index++] = ' ';
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <HAL_UART_RxCpltCallback+0x6c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	b2d1      	uxtb	r1, r2
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <HAL_UART_RxCpltCallback+0x6c>)
 8000ce4:	7011      	strb	r1, [r2, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_UART_RxCpltCallback+0x74>)
 8000cea:	2120      	movs	r1, #32
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e00a      	b.n	8000d06 <HAL_UART_RxCpltCallback+0x56>
      }
      else
      {
          response_buffer[response_index++] = uart_rx_byte;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_UART_RxCpltCallback+0x6c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	b2d1      	uxtb	r1, r2
 8000cf8:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <HAL_UART_RxCpltCallback+0x6c>)
 8000cfa:	7011      	strb	r1, [r2, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <HAL_UART_RxCpltCallback+0x70>)
 8000d00:	7819      	ldrb	r1, [r3, #0]
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HAL_UART_RxCpltCallback+0x74>)
 8000d04:	5499      	strb	r1, [r3, r2]
      }
    }

    // Luôn lắng nghe byte tiếp theo
    HAL_UART_Receive_IT(&huart6, &uart_rx_byte, 1);
 8000d06:	2201      	movs	r2, #1
 8000d08:	4905      	ldr	r1, [pc, #20]	@ (8000d20 <HAL_UART_RxCpltCallback+0x70>)
 8000d0a:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <HAL_UART_RxCpltCallback+0x78>)
 8000d0c:	f001 fff9 	bl	8002d02 <HAL_UART_Receive_IT>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	200001f4 	.word	0x200001f4
 8000d20:	20000128 	.word	0x20000128
 8000d24:	2000012c 	.word	0x2000012c
 8000d28:	200000d8 	.word	0x200000d8

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	@ (8000e0c <HAL_I2C_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12b      	bne.n	8000e02 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <HAL_I2C_MspInit+0x88>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dc6:	23c0      	movs	r3, #192	@ 0xc0
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <HAL_I2C_MspInit+0x8c>)
 8000de2:	f000 fbdf 	bl	80015a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_I2C_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_I2C_MspInit+0x88>)
 8000df0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_I2C_MspInit+0x88>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400

08000e18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1d      	ldr	r2, [pc, #116]	@ (8000eac <HAL_UART_MspInit+0x94>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d133      	bne.n	8000ea2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a14      	ldr	r2, [pc, #80]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_UART_MspInit+0x98>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 8000e72:	23c0      	movs	r3, #192	@ 0xc0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e82:	2308      	movs	r3, #8
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <HAL_UART_MspInit+0x9c>)
 8000e8e:	f000 fb89 	bl	80015a4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2047      	movs	r0, #71	@ 0x47
 8000e98:	f000 fabb 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e9c:	2047      	movs	r0, #71	@ 0x47
 8000e9e:	f000 fad4 	bl	800144a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40011400 	.word	0x40011400
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020800 	.word	0x40020800

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f000 f961 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <USART6_IRQHandler+0x10>)
 8000f1e:	f001 ff15 	bl	8002d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000d8 	.word	0x200000d8

08000f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_kill>:

int _kill(int pid, int sig)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f46:	f003 f867 	bl	8004018 <__errno>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2216      	movs	r2, #22
 8000f4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_exit>:

void _exit (int status)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffe7 	bl	8000f3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f6e:	bf00      	nop
 8000f70:	e7fd      	b.n	8000f6e <_exit+0x12>

08000f72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e00a      	b.n	8000f9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f84:	f3af 8000 	nop.w
 8000f88:	4601      	mov	r1, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	b2ca      	uxtb	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf0      	blt.n	8000f84 <_read+0x12>
  }

  return len;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e009      	b.n	8000fd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf1      	blt.n	8000fbe <_write+0x12>
  }
  return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_close>:

int _close(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100c:	605a      	str	r2, [r3, #4]
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_isatty>:

int _isatty(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	@ (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f002 ffcc 	bl	8004018 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20020000 	.word	0x20020000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000220 	.word	0x20000220
 80010b4:	20000378 	.word	0x20000378

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e0:	f7ff ffea 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	@ (800111c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110a:	f002 ff8b 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fba3 	bl	8000858 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001120:	08005214 	.word	0x08005214
  ldr r2, =_sbss
 8001124:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001128:	20000374 	.word	0x20000374

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f94f 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fde8 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f967 	bl	8001466 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f92f 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000224 	.word	0x20000224

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000224 	.word	0x20000224

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	@ (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	@ (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff feb6 	bl	80011fc <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d008      	beq.n	80014b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2280      	movs	r2, #128	@ 0x80
 80014a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e052      	b.n	8001556 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0216 	bic.w	r2, r2, #22
 80014be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d103      	bne.n	80014e0 <HAL_DMA_Abort+0x62>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0208 	bic.w	r2, r2, #8
 80014ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001500:	e013      	b.n	800152a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001502:	f7ff fe7b 	bl	80011fc <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b05      	cmp	r3, #5
 800150e:	d90c      	bls.n	800152a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2220      	movs	r2, #32
 8001514:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e015      	b.n	8001556 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1e4      	bne.n	8001502 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153c:	223f      	movs	r2, #63	@ 0x3f
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d004      	beq.n	800157c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e00c      	b.n	8001596 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2205      	movs	r2, #5
 8001580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e159      	b.n	8001874 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8148 	bne.w	800186e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d005      	beq.n	80015f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d130      	bne.n	8001658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d017      	beq.n	8001694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80a2 	beq.w	800186e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b57      	ldr	r3, [pc, #348]	@ (800188c <HAL_GPIO_Init+0x2e8>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a56      	ldr	r2, [pc, #344]	@ (800188c <HAL_GPIO_Init+0x2e8>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b54      	ldr	r3, [pc, #336]	@ (800188c <HAL_GPIO_Init+0x2e8>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001746:	4a52      	ldr	r2, [pc, #328]	@ (8001890 <HAL_GPIO_Init+0x2ec>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a49      	ldr	r2, [pc, #292]	@ (8001894 <HAL_GPIO_Init+0x2f0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x202>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a48      	ldr	r2, [pc, #288]	@ (8001898 <HAL_GPIO_Init+0x2f4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x1fe>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a47      	ldr	r2, [pc, #284]	@ (800189c <HAL_GPIO_Init+0x2f8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x1fa>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a46      	ldr	r2, [pc, #280]	@ (80018a0 <HAL_GPIO_Init+0x2fc>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x1f6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a45      	ldr	r2, [pc, #276]	@ (80018a4 <HAL_GPIO_Init+0x300>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x1f2>
 8001792:	2304      	movs	r3, #4
 8001794:	e008      	b.n	80017a8 <HAL_GPIO_Init+0x204>
 8001796:	2307      	movs	r3, #7
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x204>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x204>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x204>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x204>
 80017a6:	2300      	movs	r3, #0
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b8:	4935      	ldr	r1, [pc, #212]	@ (8001890 <HAL_GPIO_Init+0x2ec>)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c6:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ea:	4a2f      	ldr	r2, [pc, #188]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f0:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001814:	4a24      	ldr	r2, [pc, #144]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800181a:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800183e:	4a1a      	ldr	r2, [pc, #104]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001844:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001868:	4a0f      	ldr	r2, [pc, #60]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3301      	adds	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	f67f aea2 	bls.w	80015c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40013800 	.word	0x40013800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020400 	.word	0x40020400
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40013c00 	.word	0x40013c00

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	619a      	str	r2, [r3, #24]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e12b      	b.n	8001b4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fa3e 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2224      	movs	r2, #36	@ 0x24
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001944:	f001 f8da 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8001948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4a81      	ldr	r2, [pc, #516]	@ (8001b54 <HAL_I2C_Init+0x274>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d807      	bhi.n	8001964 <HAL_I2C_Init+0x84>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a80      	ldr	r2, [pc, #512]	@ (8001b58 <HAL_I2C_Init+0x278>)
 8001958:	4293      	cmp	r3, r2
 800195a:	bf94      	ite	ls
 800195c:	2301      	movls	r3, #1
 800195e:	2300      	movhi	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e006      	b.n	8001972 <HAL_I2C_Init+0x92>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a7d      	ldr	r2, [pc, #500]	@ (8001b5c <HAL_I2C_Init+0x27c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0e7      	b.n	8001b4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4a78      	ldr	r2, [pc, #480]	@ (8001b60 <HAL_I2C_Init+0x280>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0c9b      	lsrs	r3, r3, #18
 8001984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b54 <HAL_I2C_Init+0x274>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d802      	bhi.n	80019b4 <HAL_I2C_Init+0xd4>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	e009      	b.n	80019c8 <HAL_I2C_Init+0xe8>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	4a69      	ldr	r2, [pc, #420]	@ (8001b64 <HAL_I2C_Init+0x284>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	3301      	adds	r3, #1
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	495c      	ldr	r1, [pc, #368]	@ (8001b54 <HAL_I2C_Init+0x274>)
 80019e4:	428b      	cmp	r3, r1
 80019e6:	d819      	bhi.n	8001a1c <HAL_I2C_Init+0x13c>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e59      	subs	r1, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f6:	1c59      	adds	r1, r3, #1
 80019f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019fc:	400b      	ands	r3, r1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <HAL_I2C_Init+0x138>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1e59      	subs	r1, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a16:	e051      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e04f      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d111      	bne.n	8001a48 <HAL_I2C_Init+0x168>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	440b      	add	r3, r1
 8001a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e012      	b.n	8001a6e <HAL_I2C_Init+0x18e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1e58      	subs	r0, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	0099      	lsls	r1, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Init+0x196>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e022      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10e      	bne.n	8001a9c <HAL_I2C_Init+0x1bc>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1e58      	subs	r0, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	440b      	add	r3, r1
 8001a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a9a:	e00f      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1e58      	subs	r0, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	0099      	lsls	r1, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6809      	ldr	r1, [r1, #0]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001aea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6911      	ldr	r1, [r2, #16]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68d2      	ldr	r2, [r2, #12]
 8001af6:	4311      	orrs	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	000186a0 	.word	0x000186a0
 8001b58:	001e847f 	.word	0x001e847f
 8001b5c:	003d08ff 	.word	0x003d08ff
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	10624dd3 	.word	0x10624dd3

08001b68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	461a      	mov	r2, r3
 8001b74:	460b      	mov	r3, r1
 8001b76:	817b      	strh	r3, [r7, #10]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff fb3e 	bl	80011fc <HAL_GetTick>
 8001b80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	f040 80e0 	bne.w	8001d50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2319      	movs	r3, #25
 8001b96:	2201      	movs	r2, #1
 8001b98:	4970      	ldr	r1, [pc, #448]	@ (8001d5c <HAL_I2C_Master_Transmit+0x1f4>)
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f964 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e0d3      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2C_Master_Transmit+0x50>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e0cc      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ea>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d007      	beq.n	8001bde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2221      	movs	r2, #33	@ 0x21
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	893a      	ldrh	r2, [r7, #8]
 8001c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a50      	ldr	r2, [pc, #320]	@ (8001d60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c20:	8979      	ldrh	r1, [r7, #10]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f89c 	bl	8001d64 <I2C_MasterRequestWrite>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e08d      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c4c:	e066      	b.n	8001d1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fa22 	bl	800209c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d107      	bne.n	8001c76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06b      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_I2C_Master_Transmit+0x188>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d017      	beq.n	8001cf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	6a39      	ldr	r1, [r7, #32]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fa19 	bl	800212c <I2C_WaitOnBTFFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d107      	bne.n	8001d18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e01a      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d194      	bne.n	8001c4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	00100002 	.word	0x00100002
 8001d60:	ffff0000 	.word	0xffff0000

08001d64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	460b      	mov	r3, r1
 8001d72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d006      	beq.n	8001d8e <I2C_MasterRequestWrite+0x2a>
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d003      	beq.n	8001d8e <I2C_MasterRequestWrite+0x2a>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d8c:	d108      	bne.n	8001da0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e00b      	b.n	8001db8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	2b12      	cmp	r3, #18
 8001da6:	d107      	bne.n	8001db8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001db6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f84f 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dde:	d103      	bne.n	8001de8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e035      	b.n	8001e58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001df4:	d108      	bne.n	8001e08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	e01b      	b.n	8001e40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e08:	897b      	ldrh	r3, [r7, #10]
 8001e0a:	11db      	asrs	r3, r3, #7
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 0306 	and.w	r3, r3, #6
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f063 030f 	orn	r3, r3, #15
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	490e      	ldr	r1, [pc, #56]	@ (8001e60 <I2C_MasterRequestWrite+0xfc>)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f898 	bl	8001f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e010      	b.n	8001e58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4907      	ldr	r1, [pc, #28]	@ (8001e64 <I2C_MasterRequestWrite+0x100>)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f888 	bl	8001f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	00010008 	.word	0x00010008
 8001e64:	00010002 	.word	0x00010002

08001e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e78:	e048      	b.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d044      	beq.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e82:	f7ff f9bb 	bl	80011fc <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d302      	bcc.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d139      	bne.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d10d      	bne.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	e00c      	b.n	8001ed8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d116      	bne.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e023      	b.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	0c1b      	lsrs	r3, r3, #16
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10d      	bne.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	e00c      	b.n	8001f4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d093      	beq.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f6a:	e071      	b.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7a:	d123      	bne.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f043 0204 	orr.w	r2, r3, #4
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e067      	b.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d041      	beq.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7ff f916 	bl	80011fc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d136      	bne.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10c      	bne.n	8002006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	e00b      	b.n	800201e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	43da      	mvns	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4013      	ands	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e021      	b.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10c      	bne.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	43da      	mvns	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e00b      	b.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4013      	ands	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f af6d 	bne.w	8001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a8:	e034      	b.n	8002114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f886 	bl	80021bc <I2C_IsAcknowledgeFailed>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e034      	b.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d028      	beq.n	8002114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff f89b 	bl	80011fc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11d      	bne.n	8002114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e2:	2b80      	cmp	r3, #128	@ 0x80
 80020e4:	d016      	beq.n	8002114 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e007      	b.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	2b80      	cmp	r3, #128	@ 0x80
 8002120:	d1c3      	bne.n	80020aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002138:	e034      	b.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f83e 	bl	80021bc <I2C_IsAcknowledgeFailed>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e034      	b.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d028      	beq.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff f853 	bl	80011fc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d11d      	bne.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b04      	cmp	r3, #4
 8002174:	d016      	beq.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d1c3      	bne.n	800213a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d2:	d11b      	bne.n	800220c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f043 0204 	orr.w	r2, r3, #4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e267      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800223a:	4b88      	ldr	r3, [pc, #544]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d00c      	beq.n	8002260 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b85      	ldr	r3, [pc, #532]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800224e:	2b08      	cmp	r3, #8
 8002250:	d112      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b82      	ldr	r3, [pc, #520]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b7e      	ldr	r3, [pc, #504]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e242      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x74>
 8002282:	4b76      	ldr	r3, [pc, #472]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b70      	ldr	r3, [pc, #448]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6f      	ldr	r2, [pc, #444]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6d      	ldr	r3, [pc, #436]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6c      	ldr	r2, [pc, #432]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 80022b4:	4b69      	ldr	r3, [pc, #420]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b66      	ldr	r3, [pc, #408]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe ff92 	bl	80011fc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe ff8e 	bl	80011fc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e207      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5b      	ldr	r3, [pc, #364]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe ff7e 	bl	80011fc <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe ff7a 	bl	80011fc <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1f3      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b51      	ldr	r3, [pc, #324]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b44      	ldr	r3, [pc, #272]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b41      	ldr	r3, [pc, #260]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c7      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4937      	ldr	r1, [pc, #220]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCC_OscConfig+0x244>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe ff33 	bl	80011fc <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe ff2f 	bl	80011fc <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a8      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2b      	ldr	r3, [pc, #172]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4925      	ldr	r1, [pc, #148]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_RCC_OscConfig+0x244>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe ff12 	bl	80011fc <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe ff0e 	bl	80011fc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e187      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <HAL_RCC_OscConfig+0x248>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fef2 	bl	80011fc <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe feee 	bl	80011fc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e167      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCC_OscConfig+0x240>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x200>
 800243a:	e01b      	b.n	8002474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_RCC_OscConfig+0x248>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fedb 	bl	80011fc <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00e      	b.n	8002468 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe fed7 	bl	80011fc <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e150      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b88      	ldr	r3, [pc, #544]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8097 	beq.w	80025b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b81      	ldr	r3, [pc, #516]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b7d      	ldr	r3, [pc, #500]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4a7c      	ldr	r2, [pc, #496]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	4b7a      	ldr	r3, [pc, #488]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b77      	ldr	r3, [pc, #476]	@ (8002690 <HAL_RCC_OscConfig+0x474>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b74      	ldr	r3, [pc, #464]	@ (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a73      	ldr	r2, [pc, #460]	@ (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fe97 	bl	80011fc <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe fe93 	bl	80011fc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e10c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002690 <HAL_RCC_OscConfig+0x474>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x2ea>
 80024f8:	4b64      	ldr	r3, [pc, #400]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	4a63      	ldr	r2, [pc, #396]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	@ 0x70
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x30c>
 800250e:	4b5f      	ldr	r3, [pc, #380]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002512:	4a5e      	ldr	r2, [pc, #376]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	@ 0x70
 800251a:	4b5c      	ldr	r3, [pc, #368]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251e:	4a5b      	ldr	r2, [pc, #364]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	@ 0x70
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002528:	4b58      	ldr	r3, [pc, #352]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252c:	4a57      	ldr	r2, [pc, #348]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	@ 0x70
 8002534:	4b55      	ldr	r3, [pc, #340]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a54      	ldr	r2, [pc, #336]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fe58 	bl	80011fc <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe fe54 	bl	80011fc <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0cb      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b49      	ldr	r3, [pc, #292]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7fe fe42 	bl	80011fc <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fe3e 	bl	80011fc <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0b5      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	4b3e      	ldr	r3, [pc, #248]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b39      	ldr	r3, [pc, #228]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	4a38      	ldr	r2, [pc, #224]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a1 	beq.w	80026fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ba:	4b34      	ldr	r3, [pc, #208]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d05c      	beq.n	8002680 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d141      	bne.n	8002652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCC_OscConfig+0x478>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fe12 	bl	80011fc <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fe0e 	bl	80011fc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e087      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b27      	ldr	r3, [pc, #156]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	491b      	ldr	r1, [pc, #108]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x478>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe fde7 	bl	80011fc <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fde3 	bl	80011fc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e05c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x416>
 8002650:	e054      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <HAL_RCC_OscConfig+0x478>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fdd0 	bl	80011fc <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe fdcc 	bl	80011fc <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e045      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_OscConfig+0x470>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e038      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
 8002694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002698:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x4ec>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d028      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d121      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d11a      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	@ (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	@ (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	@ (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7fe fcfe 	bl	80011fc <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fcfa 	bl	80011fc <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	@ (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	@ (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	@ (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	@ (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fc5e 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	0800510c 	.word	0x0800510c
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b094      	sub	sp, #80	@ 0x50
 80028de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f0:	4b79      	ldr	r3, [pc, #484]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d00d      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x40>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	f200 80e1 	bhi.w	8002ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x34>
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x3a>
 800290a:	e0db      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b73      	ldr	r3, [pc, #460]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 800290e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002910:	e0db      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002912:	4b73      	ldr	r3, [pc, #460]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002916:	e0d8      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002918:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002920:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002922:	4b6d      	ldr	r3, [pc, #436]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d063      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	2200      	movs	r2, #0
 8002936:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002938:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	@ 0x34
 8002946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800294a:	4622      	mov	r2, r4
 800294c:	462b      	mov	r3, r5
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	0159      	lsls	r1, r3, #5
 8002958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295c:	0150      	lsls	r0, r2, #5
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4621      	mov	r1, r4
 8002964:	1a51      	subs	r1, r2, r1
 8002966:	6139      	str	r1, [r7, #16]
 8002968:	4629      	mov	r1, r5
 800296a:	eb63 0301 	sbc.w	r3, r3, r1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800297c:	4659      	mov	r1, fp
 800297e:	018b      	lsls	r3, r1, #6
 8002980:	4651      	mov	r1, sl
 8002982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002986:	4651      	mov	r1, sl
 8002988:	018a      	lsls	r2, r1, #6
 800298a:	4651      	mov	r1, sl
 800298c:	ebb2 0801 	subs.w	r8, r2, r1
 8002990:	4659      	mov	r1, fp
 8002992:	eb63 0901 	sbc.w	r9, r3, r1
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029aa:	4690      	mov	r8, r2
 80029ac:	4699      	mov	r9, r3
 80029ae:	4623      	mov	r3, r4
 80029b0:	eb18 0303 	adds.w	r3, r8, r3
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	462b      	mov	r3, r5
 80029b8:	eb49 0303 	adc.w	r3, r9, r3
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ca:	4629      	mov	r1, r5
 80029cc:	024b      	lsls	r3, r1, #9
 80029ce:	4621      	mov	r1, r4
 80029d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029d4:	4621      	mov	r1, r4
 80029d6:	024a      	lsls	r2, r1, #9
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029de:	2200      	movs	r2, #0
 80029e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029e8:	f7fd fc52 	bl	8000290 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029f4:	e058      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b38      	ldr	r3, [pc, #224]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	4611      	mov	r1, r2
 8002a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	f04f 0000 	mov.w	r0, #0
 8002a18:	f04f 0100 	mov.w	r1, #0
 8002a1c:	0159      	lsls	r1, r3, #5
 8002a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a22:	0150      	lsls	r0, r2, #5
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4641      	mov	r1, r8
 8002a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a2e:	4649      	mov	r1, r9
 8002a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a48:	ebb2 040a 	subs.w	r4, r2, sl
 8002a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	00eb      	lsls	r3, r5, #3
 8002a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5e:	00e2      	lsls	r2, r4, #3
 8002a60:	4614      	mov	r4, r2
 8002a62:	461d      	mov	r5, r3
 8002a64:	4643      	mov	r3, r8
 8002a66:	18e3      	adds	r3, r4, r3
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	eb45 0303 	adc.w	r3, r5, r3
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a7e:	4629      	mov	r1, r5
 8002a80:	028b      	lsls	r3, r1, #10
 8002a82:	4621      	mov	r1, r4
 8002a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a88:	4621      	mov	r1, r4
 8002a8a:	028a      	lsls	r2, r1, #10
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a92:	2200      	movs	r2, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	61fa      	str	r2, [r7, #28]
 8002a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a9c:	f7fd fbf8 	bl	8000290 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3750      	adds	r7, #80	@ 0x50
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	007a1200 	.word	0x007a1200

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	@ (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0800511c 	.word	0x0800511c

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	@ (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0800511c 	.word	0x0800511c

08002b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e042      	b.n	8002be4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe f950 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	@ 0x24
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fdd3 	bl	800373c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d175      	bne.n	8002cf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Transmit+0x2c>
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e06e      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2221      	movs	r2, #33	@ 0x21
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c2a:	f7fe fae7 	bl	80011fc <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c44:	d108      	bne.n	8002c58 <HAL_UART_Transmit+0x6c>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	e003      	b.n	8002c60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c60:	e02e      	b.n	8002cc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2180      	movs	r1, #128	@ 0x80
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb37 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e03a      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10b      	bne.n	8002ca2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	e007      	b.n	8002cb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1cb      	bne.n	8002c62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2140      	movs	r1, #64	@ 0x40
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fb03 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e006      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d112      	bne.n	8002d42 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_UART_Receive_IT+0x26>
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e00b      	b.n	8002d44 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	461a      	mov	r2, r3
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fb2a 	bl	8003392 <UART_Start_Receive_IT>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	e000      	b.n	8002d44 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0ba      	sub	sp, #232	@ 0xe8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_UART_IRQHandler+0x66>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fc07 	bl	80035be <UART_Receive_IT>
      return;
 8002db0:	e273      	b.n	800329a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80de 	beq.w	8002f78 <HAL_UART_IRQHandler+0x22c>
 8002dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80d1 	beq.w	8002f78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_UART_IRQHandler+0xae>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
 8002e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xf6>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d011      	beq.n	8002e72 <HAL_UART_IRQHandler+0x126>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	f043 0208 	orr.w	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 820a 	beq.w	8003290 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_UART_IRQHandler+0x14e>
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fb92 	bl	80035be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b40      	cmp	r3, #64	@ 0x40
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x17a>
 8002ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04f      	beq.n	8002f66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa9d 	bl	8003406 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d141      	bne.n	8002f5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f32:	4a8a      	ldr	r2, [pc, #552]	@ (800315c <HAL_UART_IRQHandler+0x410>)
 8002f34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fb0f 	bl	800155e <HAL_DMA_Abort_IT>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e00e      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f9ac 	bl	80032b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	e00a      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9a8 	bl	80032b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	e006      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f9a4 	bl	80032b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f72:	e18d      	b.n	8003290 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	bf00      	nop
    return;
 8002f76:	e18b      	b.n	8003290 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	f040 8167 	bne.w	8003250 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8160 	beq.w	8003250 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8159 	beq.w	8003250 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	f040 80ce 	bne.w	8003160 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a9 	beq.w	800312c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	f080 80a2 	bcs.w	800312c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ffa:	f000 8088 	beq.w	800310e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003014:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800301c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800302a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800302e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003036:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1d9      	bne.n	8002ffe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800305a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3314      	adds	r3, #20
 800306a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800306e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003072:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e1      	bne.n	800304a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800309c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3314      	adds	r3, #20
 80030a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e3      	bne.n	8003086 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030de:	f023 0310 	bic.w	r3, r3, #16
 80030e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e3      	bne.n	80030cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe f9b8 	bl	800147e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800311c:	b29b      	uxth	r3, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	b29b      	uxth	r3, r3
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f8cf 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800312a:	e0b3      	b.n	8003294 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003134:	429a      	cmp	r2, r3
 8003136:	f040 80ad 	bne.w	8003294 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003144:	f040 80a6 	bne.w	8003294 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8b7 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
      return;
 800315a:	e09b      	b.n	8003294 <HAL_UART_IRQHandler+0x548>
 800315c:	080034cd 	.word	0x080034cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003168:	b29b      	uxth	r3, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 808e 	beq.w	8003298 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800317c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8089 	beq.w	8003298 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800319c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80031ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e3      	bne.n	8003186 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	623b      	str	r3, [r7, #32]
   return(result);
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e3      	bne.n	80031be <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	60fb      	str	r3, [r7, #12]
   return(result);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003228:	61fa      	str	r2, [r7, #28]
 800322a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	69b9      	ldr	r1, [r7, #24]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	617b      	str	r3, [r7, #20]
   return(result);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e3      	bne.n	8003204 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f83d 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800324e:	e023      	b.n	8003298 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <HAL_UART_IRQHandler+0x524>
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f940 	bl	80034ee <UART_Transmit_IT>
    return;
 800326e:	e014      	b.n	800329a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00e      	beq.n	800329a <HAL_UART_IRQHandler+0x54e>
 800327c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f980 	bl	800358e <UART_EndTransmit_IT>
    return;
 800328e:	e004      	b.n	800329a <HAL_UART_IRQHandler+0x54e>
    return;
 8003290:	bf00      	nop
 8003292:	e002      	b.n	800329a <HAL_UART_IRQHandler+0x54e>
      return;
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <HAL_UART_IRQHandler+0x54e>
      return;
 8003298:	bf00      	nop
  }
}
 800329a:	37e8      	adds	r7, #232	@ 0xe8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f0:	e03b      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d037      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7fd ff7f 	bl	80011fc <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <UART_WaitOnFlagUntilTimeout+0x30>
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e03a      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d023      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d020      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b40      	cmp	r3, #64	@ 0x40
 800332c:	d01d      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d116      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f857 	bl	8003406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2208      	movs	r2, #8
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e00f      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	429a      	cmp	r2, r3
 8003386:	d0b4      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	4613      	mov	r3, r2
 800339e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2222      	movs	r2, #34	@ 0x22
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0220 	orr.w	r2, r2, #32
 80033f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003406:	b480      	push	{r7}
 8003408:	b095      	sub	sp, #84	@ 0x54
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800342e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e5      	bne.n	800340e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3314      	adds	r3, #20
 8003448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	61fb      	str	r3, [r7, #28]
   return(result);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003464:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e5      	bne.n	8003442 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	2b01      	cmp	r3, #1
 800347c:	d119      	bne.n	80034b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	60bb      	str	r3, [r7, #8]
   return(result);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f023 0310 	bic.w	r3, r3, #16
 8003494:	647b      	str	r3, [r7, #68]	@ 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800349e:	61ba      	str	r2, [r7, #24]
 80034a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	613b      	str	r3, [r7, #16]
   return(result);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e5      	bne.n	800347e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034c0:	bf00      	nop
 80034c2:	3754      	adds	r7, #84	@ 0x54
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fee7 	bl	80032b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b21      	cmp	r3, #33	@ 0x21
 8003500:	d13e      	bne.n	8003580 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350a:	d114      	bne.n	8003536 <UART_Transmit_IT+0x48>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d110      	bne.n	8003536 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	621a      	str	r2, [r3, #32]
 8003534:	e008      	b.n	8003548 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	1c59      	adds	r1, r3, #1
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6211      	str	r1, [r2, #32]
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4619      	mov	r1, r3
 8003556:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10f      	bne.n	800357c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800356a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800357a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fe76 	bl	80032a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08c      	sub	sp, #48	@ 0x30
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b22      	cmp	r3, #34	@ 0x22
 80035d8:	f040 80aa 	bne.w	8003730 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e4:	d115      	bne.n	8003612 <UART_Receive_IT+0x54>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d111      	bne.n	8003612 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003600:	b29a      	uxth	r2, r3
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	1c9a      	adds	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003610:	e024      	b.n	800365c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003620:	d007      	beq.n	8003632 <UART_Receive_IT+0x74>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <UART_Receive_IT+0x82>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e008      	b.n	8003652 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800364c:	b2da      	uxtb	r2, r3
 800364e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003650:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4619      	mov	r1, r3
 800366a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800366c:	2b00      	cmp	r3, #0
 800366e:	d15d      	bne.n	800372c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0220 	bic.w	r2, r2, #32
 800367e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800368e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d135      	bne.n	8003722 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036dc:	623a      	str	r2, [r7, #32]
 80036de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	69f9      	ldr	r1, [r7, #28]
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d10a      	bne.n	8003714 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fdd4 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
 8003720:	e002      	b.n	8003728 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd fac4 	bl	8000cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e002      	b.n	8003732 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3730      	adds	r7, #48	@ 0x30
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b0c0      	sub	sp, #256	@ 0x100
 8003742:	af00      	add	r7, sp, #0
 8003744:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	68d9      	ldr	r1, [r3, #12]
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	ea40 0301 	orr.w	r3, r0, r1
 8003764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003794:	f021 010c 	bic.w	r1, r1, #12
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037a2:	430b      	orrs	r3, r1
 80037a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	6999      	ldr	r1, [r3, #24]
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	ea40 0301 	orr.w	r3, r0, r1
 80037c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003a08 <UART_SetConfig+0x2cc>)
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0xa0>
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b8d      	ldr	r3, [pc, #564]	@ (8003a0c <UART_SetConfig+0x2d0>)
 80037d8:	429a      	cmp	r2, r3
 80037da:	d104      	bne.n	80037e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7ff f9a2 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80037e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037e4:	e003      	b.n	80037ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037e6:	f7ff f989 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80037ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f8:	f040 810c 	bne.w	8003a14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003800:	2200      	movs	r2, #0
 8003802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003806:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800380a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800380e:	4622      	mov	r2, r4
 8003810:	462b      	mov	r3, r5
 8003812:	1891      	adds	r1, r2, r2
 8003814:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003816:	415b      	adcs	r3, r3
 8003818:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800381a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800381e:	4621      	mov	r1, r4
 8003820:	eb12 0801 	adds.w	r8, r2, r1
 8003824:	4629      	mov	r1, r5
 8003826:	eb43 0901 	adc.w	r9, r3, r1
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383e:	4690      	mov	r8, r2
 8003840:	4699      	mov	r9, r3
 8003842:	4623      	mov	r3, r4
 8003844:	eb18 0303 	adds.w	r3, r8, r3
 8003848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800384c:	462b      	mov	r3, r5
 800384e:	eb49 0303 	adc.w	r3, r9, r3
 8003852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003862:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800386a:	460b      	mov	r3, r1
 800386c:	18db      	adds	r3, r3, r3
 800386e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003870:	4613      	mov	r3, r2
 8003872:	eb42 0303 	adc.w	r3, r2, r3
 8003876:	657b      	str	r3, [r7, #84]	@ 0x54
 8003878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800387c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003880:	f7fc fd06 	bl	8000290 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b61      	ldr	r3, [pc, #388]	@ (8003a10 <UART_SetConfig+0x2d4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800389c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038ac:	415b      	adcs	r3, r3
 80038ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038b4:	4641      	mov	r1, r8
 80038b6:	eb12 0a01 	adds.w	sl, r2, r1
 80038ba:	4649      	mov	r1, r9
 80038bc:	eb43 0b01 	adc.w	fp, r3, r1
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d4:	4692      	mov	sl, r2
 80038d6:	469b      	mov	fp, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	eb1a 0303 	adds.w	r3, sl, r3
 80038de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038e2:	464b      	mov	r3, r9
 80038e4:	eb4b 0303 	adc.w	r3, fp, r3
 80038e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003900:	460b      	mov	r3, r1
 8003902:	18db      	adds	r3, r3, r3
 8003904:	643b      	str	r3, [r7, #64]	@ 0x40
 8003906:	4613      	mov	r3, r2
 8003908:	eb42 0303 	adc.w	r3, r2, r3
 800390c:	647b      	str	r3, [r7, #68]	@ 0x44
 800390e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003916:	f7fc fcbb 	bl	8000290 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4611      	mov	r1, r2
 8003920:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <UART_SetConfig+0x2d4>)
 8003922:	fba3 2301 	umull	r2, r3, r3, r1
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2264      	movs	r2, #100	@ 0x64
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	1acb      	subs	r3, r1, r3
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003936:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <UART_SetConfig+0x2d4>)
 8003938:	fba3 2302 	umull	r2, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003944:	441c      	add	r4, r3
 8003946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003950:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003960:	415b      	adcs	r3, r3
 8003962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003968:	4641      	mov	r1, r8
 800396a:	1851      	adds	r1, r2, r1
 800396c:	6339      	str	r1, [r7, #48]	@ 0x30
 800396e:	4649      	mov	r1, r9
 8003970:	414b      	adcs	r3, r1
 8003972:	637b      	str	r3, [r7, #52]	@ 0x34
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003980:	4659      	mov	r1, fp
 8003982:	00cb      	lsls	r3, r1, #3
 8003984:	4651      	mov	r1, sl
 8003986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398a:	4651      	mov	r1, sl
 800398c:	00ca      	lsls	r2, r1, #3
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	4603      	mov	r3, r0
 8003994:	4642      	mov	r2, r8
 8003996:	189b      	adds	r3, r3, r2
 8003998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800399c:	464b      	mov	r3, r9
 800399e:	460a      	mov	r2, r1
 80039a0:	eb42 0303 	adc.w	r3, r2, r3
 80039a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039bc:	460b      	mov	r3, r1
 80039be:	18db      	adds	r3, r3, r3
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c2:	4613      	mov	r3, r2
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039d2:	f7fc fc5d 	bl	8000290 <__aeabi_uldivmod>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	@ 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	3332      	adds	r3, #50	@ 0x32
 80039ee:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <UART_SetConfig+0x2d4>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4422      	add	r2, r4
 8003a02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a04:	e106      	b.n	8003c14 <UART_SetConfig+0x4d8>
 8003a06:	bf00      	nop
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a26:	4642      	mov	r2, r8
 8003a28:	464b      	mov	r3, r9
 8003a2a:	1891      	adds	r1, r2, r2
 8003a2c:	6239      	str	r1, [r7, #32]
 8003a2e:	415b      	adcs	r3, r3
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a36:	4641      	mov	r1, r8
 8003a38:	1854      	adds	r4, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb43 0501 	adc.w	r5, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	00eb      	lsls	r3, r5, #3
 8003a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4e:	00e2      	lsls	r2, r4, #3
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	18e3      	adds	r3, r4, r3
 8003a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	eb45 0303 	adc.w	r3, r5, r3
 8003a62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a82:	4629      	mov	r1, r5
 8003a84:	008b      	lsls	r3, r1, #2
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	008a      	lsls	r2, r1, #2
 8003a90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a94:	f7fc fbfc 	bl	8000290 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4b60      	ldr	r3, [pc, #384]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	011c      	lsls	r4, r3, #4
 8003aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ab0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	61b9      	str	r1, [r7, #24]
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac8:	4641      	mov	r1, r8
 8003aca:	1851      	adds	r1, r2, r1
 8003acc:	6139      	str	r1, [r7, #16]
 8003ace:	4649      	mov	r1, r9
 8003ad0:	414b      	adcs	r3, r1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4651      	mov	r1, sl
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4651      	mov	r1, sl
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4642      	mov	r2, r8
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003afc:	464b      	mov	r3, r9
 8003afe:	460a      	mov	r2, r1
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b20:	4649      	mov	r1, r9
 8003b22:	008b      	lsls	r3, r1, #2
 8003b24:	4641      	mov	r1, r8
 8003b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	008a      	lsls	r2, r1, #2
 8003b2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b32:	f7fc fbad 	bl	8000290 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2264      	movs	r2, #100	@ 0x64
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	1acb      	subs	r3, r1, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	@ 0x32
 8003b50:	4a33      	ldr	r2, [pc, #204]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b5c:	441c      	add	r4, r3
 8003b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b62:	2200      	movs	r2, #0
 8003b64:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b66:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	415b      	adcs	r3, r3
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	1851      	adds	r1, r2, r1
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	4649      	mov	r1, r9
 8003b84:	414b      	adcs	r3, r1
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b94:	4659      	mov	r1, fp
 8003b96:	00cb      	lsls	r3, r1, #3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	00ca      	lsls	r2, r1, #3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bae:	464b      	mov	r3, r9
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	eb42 0303 	adc.w	r3, r2, r3
 8003bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	008b      	lsls	r3, r1, #2
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bda:	4641      	mov	r1, r8
 8003bdc:	008a      	lsls	r2, r1, #2
 8003bde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003be2:	f7fc fb55 	bl	8000290 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003bec:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	2164      	movs	r1, #100	@ 0x64
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	3332      	adds	r3, #50	@ 0x32
 8003bfe:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4422      	add	r2, r4
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	bf00      	nop
 8003c16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c20:	51eb851f 	.word	0x51eb851f

08003c24 <std>:
 8003c24:	2300      	movs	r3, #0
 8003c26:	b510      	push	{r4, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c32:	6083      	str	r3, [r0, #8]
 8003c34:	8181      	strh	r1, [r0, #12]
 8003c36:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c38:	81c2      	strh	r2, [r0, #14]
 8003c3a:	6183      	str	r3, [r0, #24]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	2208      	movs	r2, #8
 8003c40:	305c      	adds	r0, #92	@ 0x5c
 8003c42:	f000 f916 	bl	8003e72 <memset>
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <std+0x58>)
 8003c48:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <std+0x5c>)
 8003c4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <std+0x60>)
 8003c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <std+0x64>)
 8003c54:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <std+0x68>)
 8003c58:	6224      	str	r4, [r4, #32]
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	d006      	beq.n	8003c6c <std+0x48>
 8003c5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c62:	4294      	cmp	r4, r2
 8003c64:	d002      	beq.n	8003c6c <std+0x48>
 8003c66:	33d0      	adds	r3, #208	@ 0xd0
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d105      	bne.n	8003c78 <std+0x54>
 8003c6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f000 b9fa 	b.w	800406c <__retarget_lock_init_recursive>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08003ded 	.word	0x08003ded
 8003c80:	08003e0f 	.word	0x08003e0f
 8003c84:	08003e47 	.word	0x08003e47
 8003c88:	08003e6b 	.word	0x08003e6b
 8003c8c:	20000228 	.word	0x20000228

08003c90 <stdio_exit_handler>:
 8003c90:	4a02      	ldr	r2, [pc, #8]	@ (8003c9c <stdio_exit_handler+0xc>)
 8003c92:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <stdio_exit_handler+0x10>)
 8003c94:	4803      	ldr	r0, [pc, #12]	@ (8003ca4 <stdio_exit_handler+0x14>)
 8003c96:	f000 b869 	b.w	8003d6c <_fwalk_sglue>
 8003c9a:	bf00      	nop
 8003c9c:	2000000c 	.word	0x2000000c
 8003ca0:	08004991 	.word	0x08004991
 8003ca4:	2000001c 	.word	0x2000001c

08003ca8 <cleanup_stdio>:
 8003ca8:	6841      	ldr	r1, [r0, #4]
 8003caa:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <cleanup_stdio+0x34>)
 8003cac:	4299      	cmp	r1, r3
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	d001      	beq.n	8003cb8 <cleanup_stdio+0x10>
 8003cb4:	f000 fe6c 	bl	8004990 <_fflush_r>
 8003cb8:	68a1      	ldr	r1, [r4, #8]
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <cleanup_stdio+0x38>)
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	d002      	beq.n	8003cc6 <cleanup_stdio+0x1e>
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f000 fe65 	bl	8004990 <_fflush_r>
 8003cc6:	68e1      	ldr	r1, [r4, #12]
 8003cc8:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <cleanup_stdio+0x3c>)
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d004      	beq.n	8003cd8 <cleanup_stdio+0x30>
 8003cce:	4620      	mov	r0, r4
 8003cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd4:	f000 be5c 	b.w	8004990 <_fflush_r>
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000228 	.word	0x20000228
 8003ce0:	20000290 	.word	0x20000290
 8003ce4:	200002f8 	.word	0x200002f8

08003ce8 <global_stdio_init.part.0>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <global_stdio_init.part.0+0x30>)
 8003cec:	4c0b      	ldr	r4, [pc, #44]	@ (8003d1c <global_stdio_init.part.0+0x34>)
 8003cee:	4a0c      	ldr	r2, [pc, #48]	@ (8003d20 <global_stdio_init.part.0+0x38>)
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	f7ff ff94 	bl	8003c24 <std>
 8003cfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d00:	2201      	movs	r2, #1
 8003d02:	2109      	movs	r1, #9
 8003d04:	f7ff ff8e 	bl	8003c24 <std>
 8003d08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d12:	2112      	movs	r1, #18
 8003d14:	f7ff bf86 	b.w	8003c24 <std>
 8003d18:	20000360 	.word	0x20000360
 8003d1c:	20000228 	.word	0x20000228
 8003d20:	08003c91 	.word	0x08003c91

08003d24 <__sfp_lock_acquire>:
 8003d24:	4801      	ldr	r0, [pc, #4]	@ (8003d2c <__sfp_lock_acquire+0x8>)
 8003d26:	f000 b9a2 	b.w	800406e <__retarget_lock_acquire_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	20000369 	.word	0x20000369

08003d30 <__sfp_lock_release>:
 8003d30:	4801      	ldr	r0, [pc, #4]	@ (8003d38 <__sfp_lock_release+0x8>)
 8003d32:	f000 b99d 	b.w	8004070 <__retarget_lock_release_recursive>
 8003d36:	bf00      	nop
 8003d38:	20000369 	.word	0x20000369

08003d3c <__sinit>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	f7ff fff0 	bl	8003d24 <__sfp_lock_acquire>
 8003d44:	6a23      	ldr	r3, [r4, #32]
 8003d46:	b11b      	cbz	r3, 8003d50 <__sinit+0x14>
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f7ff bff0 	b.w	8003d30 <__sfp_lock_release>
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <__sinit+0x28>)
 8003d52:	6223      	str	r3, [r4, #32]
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <__sinit+0x2c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f5      	bne.n	8003d48 <__sinit+0xc>
 8003d5c:	f7ff ffc4 	bl	8003ce8 <global_stdio_init.part.0>
 8003d60:	e7f2      	b.n	8003d48 <__sinit+0xc>
 8003d62:	bf00      	nop
 8003d64:	08003ca9 	.word	0x08003ca9
 8003d68:	20000360 	.word	0x20000360

08003d6c <_fwalk_sglue>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	4607      	mov	r7, r0
 8003d72:	4688      	mov	r8, r1
 8003d74:	4614      	mov	r4, r2
 8003d76:	2600      	movs	r6, #0
 8003d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d80:	d505      	bpl.n	8003d8e <_fwalk_sglue+0x22>
 8003d82:	6824      	ldr	r4, [r4, #0]
 8003d84:	2c00      	cmp	r4, #0
 8003d86:	d1f7      	bne.n	8003d78 <_fwalk_sglue+0xc>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d8e:	89ab      	ldrh	r3, [r5, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d907      	bls.n	8003da4 <_fwalk_sglue+0x38>
 8003d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	d003      	beq.n	8003da4 <_fwalk_sglue+0x38>
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c0      	blx	r8
 8003da2:	4306      	orrs	r6, r0
 8003da4:	3568      	adds	r5, #104	@ 0x68
 8003da6:	e7e9      	b.n	8003d7c <_fwalk_sglue+0x10>

08003da8 <siprintf>:
 8003da8:	b40e      	push	{r1, r2, r3}
 8003daa:	b510      	push	{r4, lr}
 8003dac:	b09d      	sub	sp, #116	@ 0x74
 8003dae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003db0:	9002      	str	r0, [sp, #8]
 8003db2:	9006      	str	r0, [sp, #24]
 8003db4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003db8:	480a      	ldr	r0, [pc, #40]	@ (8003de4 <siprintf+0x3c>)
 8003dba:	9107      	str	r1, [sp, #28]
 8003dbc:	9104      	str	r1, [sp, #16]
 8003dbe:	490a      	ldr	r1, [pc, #40]	@ (8003de8 <siprintf+0x40>)
 8003dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc4:	9105      	str	r1, [sp, #20]
 8003dc6:	2400      	movs	r4, #0
 8003dc8:	a902      	add	r1, sp, #8
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003dd0:	f000 fad2 	bl	8004378 <_svfiprintf_r>
 8003dd4:	9b02      	ldr	r3, [sp, #8]
 8003dd6:	701c      	strb	r4, [r3, #0]
 8003dd8:	b01d      	add	sp, #116	@ 0x74
 8003dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dde:	b003      	add	sp, #12
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000018 	.word	0x20000018
 8003de8:	ffff0208 	.word	0xffff0208

08003dec <__sread>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	460c      	mov	r4, r1
 8003df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df4:	f000 f8ec 	bl	8003fd0 <_read_r>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	bfab      	itete	ge
 8003dfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8003e00:	181b      	addge	r3, r3, r0
 8003e02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e06:	bfac      	ite	ge
 8003e08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e0a:	81a3      	strhlt	r3, [r4, #12]
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <__swrite>:
 8003e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e12:	461f      	mov	r7, r3
 8003e14:	898b      	ldrh	r3, [r1, #12]
 8003e16:	05db      	lsls	r3, r3, #23
 8003e18:	4605      	mov	r5, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	d505      	bpl.n	8003e2c <__swrite+0x1e>
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	2302      	movs	r3, #2
 8003e26:	2200      	movs	r2, #0
 8003e28:	f000 f8c0 	bl	8003fac <_lseek_r>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	4632      	mov	r2, r6
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	f000 b8d7 	b.w	8003ff4 <_write_r>

08003e46 <__sseek>:
 8003e46:	b510      	push	{r4, lr}
 8003e48:	460c      	mov	r4, r1
 8003e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4e:	f000 f8ad 	bl	8003fac <_lseek_r>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	bf15      	itete	ne
 8003e58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e62:	81a3      	strheq	r3, [r4, #12]
 8003e64:	bf18      	it	ne
 8003e66:	81a3      	strhne	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__sclose>:
 8003e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6e:	f000 b88d 	b.w	8003f8c <_close_r>

08003e72 <memset>:
 8003e72:	4402      	add	r2, r0
 8003e74:	4603      	mov	r3, r0
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d100      	bne.n	8003e7c <memset+0xa>
 8003e7a:	4770      	bx	lr
 8003e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e80:	e7f9      	b.n	8003e76 <memset+0x4>

08003e82 <strncpy>:
 8003e82:	b510      	push	{r4, lr}
 8003e84:	3901      	subs	r1, #1
 8003e86:	4603      	mov	r3, r0
 8003e88:	b132      	cbz	r2, 8003e98 <strncpy+0x16>
 8003e8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e8e:	f803 4b01 	strb.w	r4, [r3], #1
 8003e92:	3a01      	subs	r2, #1
 8003e94:	2c00      	cmp	r4, #0
 8003e96:	d1f7      	bne.n	8003e88 <strncpy+0x6>
 8003e98:	441a      	add	r2, r3
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <strncpy+0x20>
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <strncpy+0x1a>

08003ea8 <strtok>:
 8003ea8:	4b16      	ldr	r3, [pc, #88]	@ (8003f04 <strtok+0x5c>)
 8003eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eae:	681f      	ldr	r7, [r3, #0]
 8003eb0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	460e      	mov	r6, r1
 8003eb6:	b9ec      	cbnz	r4, 8003ef4 <strtok+0x4c>
 8003eb8:	2050      	movs	r0, #80	@ 0x50
 8003eba:	f000 f94b 	bl	8004154 <malloc>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6478      	str	r0, [r7, #68]	@ 0x44
 8003ec2:	b920      	cbnz	r0, 8003ece <strtok+0x26>
 8003ec4:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <strtok+0x60>)
 8003ec6:	4811      	ldr	r0, [pc, #68]	@ (8003f0c <strtok+0x64>)
 8003ec8:	215b      	movs	r1, #91	@ 0x5b
 8003eca:	f000 f8db 	bl	8004084 <__assert_func>
 8003ece:	e9c0 4400 	strd	r4, r4, [r0]
 8003ed2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ed6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003eda:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8003ede:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8003ee2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8003ee6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003eea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8003eee:	6184      	str	r4, [r0, #24]
 8003ef0:	7704      	strb	r4, [r0, #28]
 8003ef2:	6244      	str	r4, [r0, #36]	@ 0x24
 8003ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4628      	mov	r0, r5
 8003efa:	2301      	movs	r3, #1
 8003efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f00:	f000 b806 	b.w	8003f10 <__strtok_r>
 8003f04:	20000018 	.word	0x20000018
 8003f08:	08005124 	.word	0x08005124
 8003f0c:	0800513b 	.word	0x0800513b

08003f10 <__strtok_r>:
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	b908      	cbnz	r0, 8003f1a <__strtok_r+0xa>
 8003f16:	6814      	ldr	r4, [r2, #0]
 8003f18:	b144      	cbz	r4, 8003f2c <__strtok_r+0x1c>
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f20:	460f      	mov	r7, r1
 8003f22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003f26:	b91e      	cbnz	r6, 8003f30 <__strtok_r+0x20>
 8003f28:	b965      	cbnz	r5, 8003f44 <__strtok_r+0x34>
 8003f2a:	6015      	str	r5, [r2, #0]
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e005      	b.n	8003f3c <__strtok_r+0x2c>
 8003f30:	42b5      	cmp	r5, r6
 8003f32:	d1f6      	bne.n	8003f22 <__strtok_r+0x12>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <__strtok_r+0xa>
 8003f38:	6014      	str	r4, [r2, #0]
 8003f3a:	7003      	strb	r3, [r0, #0]
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3e:	461c      	mov	r4, r3
 8003f40:	e00c      	b.n	8003f5c <__strtok_r+0x4c>
 8003f42:	b91d      	cbnz	r5, 8003f4c <__strtok_r+0x3c>
 8003f44:	4627      	mov	r7, r4
 8003f46:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f4a:	460e      	mov	r6, r1
 8003f4c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003f50:	42ab      	cmp	r3, r5
 8003f52:	d1f6      	bne.n	8003f42 <__strtok_r+0x32>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f2      	beq.n	8003f3e <__strtok_r+0x2e>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	703b      	strb	r3, [r7, #0]
 8003f5c:	6014      	str	r4, [r2, #0]
 8003f5e:	e7ed      	b.n	8003f3c <__strtok_r+0x2c>

08003f60 <strstr>:
 8003f60:	780a      	ldrb	r2, [r1, #0]
 8003f62:	b570      	push	{r4, r5, r6, lr}
 8003f64:	b96a      	cbnz	r2, 8003f82 <strstr+0x22>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d109      	bne.n	8003f80 <strstr+0x20>
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	4605      	mov	r5, r0
 8003f70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f6      	beq.n	8003f66 <strstr+0x6>
 8003f78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003f7c:	429e      	cmp	r6, r3
 8003f7e:	d0f7      	beq.n	8003f70 <strstr+0x10>
 8003f80:	3001      	adds	r0, #1
 8003f82:	7803      	ldrb	r3, [r0, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ef      	bne.n	8003f68 <strstr+0x8>
 8003f88:	4618      	mov	r0, r3
 8003f8a:	e7ec      	b.n	8003f66 <strstr+0x6>

08003f8c <_close_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4d06      	ldr	r5, [pc, #24]	@ (8003fa8 <_close_r+0x1c>)
 8003f90:	2300      	movs	r3, #0
 8003f92:	4604      	mov	r4, r0
 8003f94:	4608      	mov	r0, r1
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	f7fd f824 	bl	8000fe4 <_close>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_close_r+0x1a>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_close_r+0x1a>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000364 	.word	0x20000364

08003fac <_lseek_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d07      	ldr	r5, [pc, #28]	@ (8003fcc <_lseek_r+0x20>)
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	602a      	str	r2, [r5, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fd f839 	bl	8001032 <_lseek>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_lseek_r+0x1e>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_lseek_r+0x1e>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20000364 	.word	0x20000364

08003fd0 <_read_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4d07      	ldr	r5, [pc, #28]	@ (8003ff0 <_read_r+0x20>)
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	4611      	mov	r1, r2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	602a      	str	r2, [r5, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f7fc ffc7 	bl	8000f72 <_read>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_read_r+0x1e>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_read_r+0x1e>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	20000364 	.word	0x20000364

08003ff4 <_write_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4d07      	ldr	r5, [pc, #28]	@ (8004014 <_write_r+0x20>)
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	4608      	mov	r0, r1
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	2200      	movs	r2, #0
 8004000:	602a      	str	r2, [r5, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f7fc ffd2 	bl	8000fac <_write>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d102      	bne.n	8004012 <_write_r+0x1e>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	b103      	cbz	r3, 8004012 <_write_r+0x1e>
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	bd38      	pop	{r3, r4, r5, pc}
 8004014:	20000364 	.word	0x20000364

08004018 <__errno>:
 8004018:	4b01      	ldr	r3, [pc, #4]	@ (8004020 <__errno+0x8>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000018 	.word	0x20000018

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4d0d      	ldr	r5, [pc, #52]	@ (800405c <__libc_init_array+0x38>)
 8004028:	4c0d      	ldr	r4, [pc, #52]	@ (8004060 <__libc_init_array+0x3c>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	2600      	movs	r6, #0
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	4d0b      	ldr	r5, [pc, #44]	@ (8004064 <__libc_init_array+0x40>)
 8004036:	4c0c      	ldr	r4, [pc, #48]	@ (8004068 <__libc_init_array+0x44>)
 8004038:	f000 fff6 	bl	8005028 <_init>
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	2600      	movs	r6, #0
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	0800520c 	.word	0x0800520c
 8004060:	0800520c 	.word	0x0800520c
 8004064:	0800520c 	.word	0x0800520c
 8004068:	08005210 	.word	0x08005210

0800406c <__retarget_lock_init_recursive>:
 800406c:	4770      	bx	lr

0800406e <__retarget_lock_acquire_recursive>:
 800406e:	4770      	bx	lr

08004070 <__retarget_lock_release_recursive>:
 8004070:	4770      	bx	lr

08004072 <strcpy>:
 8004072:	4603      	mov	r3, r0
 8004074:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004078:	f803 2b01 	strb.w	r2, [r3], #1
 800407c:	2a00      	cmp	r2, #0
 800407e:	d1f9      	bne.n	8004074 <strcpy+0x2>
 8004080:	4770      	bx	lr
	...

08004084 <__assert_func>:
 8004084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004086:	4614      	mov	r4, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <__assert_func+0x2c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4605      	mov	r5, r0
 8004090:	68d8      	ldr	r0, [r3, #12]
 8004092:	b14c      	cbz	r4, 80040a8 <__assert_func+0x24>
 8004094:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <__assert_func+0x30>)
 8004096:	9100      	str	r1, [sp, #0]
 8004098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800409c:	4906      	ldr	r1, [pc, #24]	@ (80040b8 <__assert_func+0x34>)
 800409e:	462b      	mov	r3, r5
 80040a0:	f000 fc9e 	bl	80049e0 <fiprintf>
 80040a4:	f000 fce6 	bl	8004a74 <abort>
 80040a8:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <__assert_func+0x38>)
 80040aa:	461c      	mov	r4, r3
 80040ac:	e7f3      	b.n	8004096 <__assert_func+0x12>
 80040ae:	bf00      	nop
 80040b0:	20000018 	.word	0x20000018
 80040b4:	08005195 	.word	0x08005195
 80040b8:	080051a2 	.word	0x080051a2
 80040bc:	080051d0 	.word	0x080051d0

080040c0 <_free_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4605      	mov	r5, r0
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d041      	beq.n	800414c <_free_r+0x8c>
 80040c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040cc:	1f0c      	subs	r4, r1, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfb8      	it	lt
 80040d2:	18e4      	addlt	r4, r4, r3
 80040d4:	f000 f8e8 	bl	80042a8 <__malloc_lock>
 80040d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004150 <_free_r+0x90>)
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	b933      	cbnz	r3, 80040ec <_free_r+0x2c>
 80040de:	6063      	str	r3, [r4, #4]
 80040e0:	6014      	str	r4, [r2, #0]
 80040e2:	4628      	mov	r0, r5
 80040e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e8:	f000 b8e4 	b.w	80042b4 <__malloc_unlock>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d908      	bls.n	8004102 <_free_r+0x42>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	1821      	adds	r1, r4, r0
 80040f4:	428b      	cmp	r3, r1
 80040f6:	bf01      	itttt	eq
 80040f8:	6819      	ldreq	r1, [r3, #0]
 80040fa:	685b      	ldreq	r3, [r3, #4]
 80040fc:	1809      	addeq	r1, r1, r0
 80040fe:	6021      	streq	r1, [r4, #0]
 8004100:	e7ed      	b.n	80040de <_free_r+0x1e>
 8004102:	461a      	mov	r2, r3
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b10b      	cbz	r3, 800410c <_free_r+0x4c>
 8004108:	42a3      	cmp	r3, r4
 800410a:	d9fa      	bls.n	8004102 <_free_r+0x42>
 800410c:	6811      	ldr	r1, [r2, #0]
 800410e:	1850      	adds	r0, r2, r1
 8004110:	42a0      	cmp	r0, r4
 8004112:	d10b      	bne.n	800412c <_free_r+0x6c>
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	4401      	add	r1, r0
 8004118:	1850      	adds	r0, r2, r1
 800411a:	4283      	cmp	r3, r0
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	d1e0      	bne.n	80040e2 <_free_r+0x22>
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	6053      	str	r3, [r2, #4]
 8004126:	4408      	add	r0, r1
 8004128:	6010      	str	r0, [r2, #0]
 800412a:	e7da      	b.n	80040e2 <_free_r+0x22>
 800412c:	d902      	bls.n	8004134 <_free_r+0x74>
 800412e:	230c      	movs	r3, #12
 8004130:	602b      	str	r3, [r5, #0]
 8004132:	e7d6      	b.n	80040e2 <_free_r+0x22>
 8004134:	6820      	ldr	r0, [r4, #0]
 8004136:	1821      	adds	r1, r4, r0
 8004138:	428b      	cmp	r3, r1
 800413a:	bf04      	itt	eq
 800413c:	6819      	ldreq	r1, [r3, #0]
 800413e:	685b      	ldreq	r3, [r3, #4]
 8004140:	6063      	str	r3, [r4, #4]
 8004142:	bf04      	itt	eq
 8004144:	1809      	addeq	r1, r1, r0
 8004146:	6021      	streq	r1, [r4, #0]
 8004148:	6054      	str	r4, [r2, #4]
 800414a:	e7ca      	b.n	80040e2 <_free_r+0x22>
 800414c:	bd38      	pop	{r3, r4, r5, pc}
 800414e:	bf00      	nop
 8004150:	20000370 	.word	0x20000370

08004154 <malloc>:
 8004154:	4b02      	ldr	r3, [pc, #8]	@ (8004160 <malloc+0xc>)
 8004156:	4601      	mov	r1, r0
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	f000 b825 	b.w	80041a8 <_malloc_r>
 800415e:	bf00      	nop
 8004160:	20000018 	.word	0x20000018

08004164 <sbrk_aligned>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4e0f      	ldr	r6, [pc, #60]	@ (80041a4 <sbrk_aligned+0x40>)
 8004168:	460c      	mov	r4, r1
 800416a:	6831      	ldr	r1, [r6, #0]
 800416c:	4605      	mov	r5, r0
 800416e:	b911      	cbnz	r1, 8004176 <sbrk_aligned+0x12>
 8004170:	f000 fc62 	bl	8004a38 <_sbrk_r>
 8004174:	6030      	str	r0, [r6, #0]
 8004176:	4621      	mov	r1, r4
 8004178:	4628      	mov	r0, r5
 800417a:	f000 fc5d 	bl	8004a38 <_sbrk_r>
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	d103      	bne.n	800418a <sbrk_aligned+0x26>
 8004182:	f04f 34ff 	mov.w	r4, #4294967295
 8004186:	4620      	mov	r0, r4
 8004188:	bd70      	pop	{r4, r5, r6, pc}
 800418a:	1cc4      	adds	r4, r0, #3
 800418c:	f024 0403 	bic.w	r4, r4, #3
 8004190:	42a0      	cmp	r0, r4
 8004192:	d0f8      	beq.n	8004186 <sbrk_aligned+0x22>
 8004194:	1a21      	subs	r1, r4, r0
 8004196:	4628      	mov	r0, r5
 8004198:	f000 fc4e 	bl	8004a38 <_sbrk_r>
 800419c:	3001      	adds	r0, #1
 800419e:	d1f2      	bne.n	8004186 <sbrk_aligned+0x22>
 80041a0:	e7ef      	b.n	8004182 <sbrk_aligned+0x1e>
 80041a2:	bf00      	nop
 80041a4:	2000036c 	.word	0x2000036c

080041a8 <_malloc_r>:
 80041a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041ac:	1ccd      	adds	r5, r1, #3
 80041ae:	f025 0503 	bic.w	r5, r5, #3
 80041b2:	3508      	adds	r5, #8
 80041b4:	2d0c      	cmp	r5, #12
 80041b6:	bf38      	it	cc
 80041b8:	250c      	movcc	r5, #12
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	4606      	mov	r6, r0
 80041be:	db01      	blt.n	80041c4 <_malloc_r+0x1c>
 80041c0:	42a9      	cmp	r1, r5
 80041c2:	d904      	bls.n	80041ce <_malloc_r+0x26>
 80041c4:	230c      	movs	r3, #12
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	2000      	movs	r0, #0
 80041ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042a4 <_malloc_r+0xfc>
 80041d2:	f000 f869 	bl	80042a8 <__malloc_lock>
 80041d6:	f8d8 3000 	ldr.w	r3, [r8]
 80041da:	461c      	mov	r4, r3
 80041dc:	bb44      	cbnz	r4, 8004230 <_malloc_r+0x88>
 80041de:	4629      	mov	r1, r5
 80041e0:	4630      	mov	r0, r6
 80041e2:	f7ff ffbf 	bl	8004164 <sbrk_aligned>
 80041e6:	1c43      	adds	r3, r0, #1
 80041e8:	4604      	mov	r4, r0
 80041ea:	d158      	bne.n	800429e <_malloc_r+0xf6>
 80041ec:	f8d8 4000 	ldr.w	r4, [r8]
 80041f0:	4627      	mov	r7, r4
 80041f2:	2f00      	cmp	r7, #0
 80041f4:	d143      	bne.n	800427e <_malloc_r+0xd6>
 80041f6:	2c00      	cmp	r4, #0
 80041f8:	d04b      	beq.n	8004292 <_malloc_r+0xea>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	4639      	mov	r1, r7
 80041fe:	4630      	mov	r0, r6
 8004200:	eb04 0903 	add.w	r9, r4, r3
 8004204:	f000 fc18 	bl	8004a38 <_sbrk_r>
 8004208:	4581      	cmp	r9, r0
 800420a:	d142      	bne.n	8004292 <_malloc_r+0xea>
 800420c:	6821      	ldr	r1, [r4, #0]
 800420e:	1a6d      	subs	r5, r5, r1
 8004210:	4629      	mov	r1, r5
 8004212:	4630      	mov	r0, r6
 8004214:	f7ff ffa6 	bl	8004164 <sbrk_aligned>
 8004218:	3001      	adds	r0, #1
 800421a:	d03a      	beq.n	8004292 <_malloc_r+0xea>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	442b      	add	r3, r5
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	f8d8 3000 	ldr.w	r3, [r8]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	bb62      	cbnz	r2, 8004284 <_malloc_r+0xdc>
 800422a:	f8c8 7000 	str.w	r7, [r8]
 800422e:	e00f      	b.n	8004250 <_malloc_r+0xa8>
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	1b52      	subs	r2, r2, r5
 8004234:	d420      	bmi.n	8004278 <_malloc_r+0xd0>
 8004236:	2a0b      	cmp	r2, #11
 8004238:	d917      	bls.n	800426a <_malloc_r+0xc2>
 800423a:	1961      	adds	r1, r4, r5
 800423c:	42a3      	cmp	r3, r4
 800423e:	6025      	str	r5, [r4, #0]
 8004240:	bf18      	it	ne
 8004242:	6059      	strne	r1, [r3, #4]
 8004244:	6863      	ldr	r3, [r4, #4]
 8004246:	bf08      	it	eq
 8004248:	f8c8 1000 	streq.w	r1, [r8]
 800424c:	5162      	str	r2, [r4, r5]
 800424e:	604b      	str	r3, [r1, #4]
 8004250:	4630      	mov	r0, r6
 8004252:	f000 f82f 	bl	80042b4 <__malloc_unlock>
 8004256:	f104 000b 	add.w	r0, r4, #11
 800425a:	1d23      	adds	r3, r4, #4
 800425c:	f020 0007 	bic.w	r0, r0, #7
 8004260:	1ac2      	subs	r2, r0, r3
 8004262:	bf1c      	itt	ne
 8004264:	1a1b      	subne	r3, r3, r0
 8004266:	50a3      	strne	r3, [r4, r2]
 8004268:	e7af      	b.n	80041ca <_malloc_r+0x22>
 800426a:	6862      	ldr	r2, [r4, #4]
 800426c:	42a3      	cmp	r3, r4
 800426e:	bf0c      	ite	eq
 8004270:	f8c8 2000 	streq.w	r2, [r8]
 8004274:	605a      	strne	r2, [r3, #4]
 8004276:	e7eb      	b.n	8004250 <_malloc_r+0xa8>
 8004278:	4623      	mov	r3, r4
 800427a:	6864      	ldr	r4, [r4, #4]
 800427c:	e7ae      	b.n	80041dc <_malloc_r+0x34>
 800427e:	463c      	mov	r4, r7
 8004280:	687f      	ldr	r7, [r7, #4]
 8004282:	e7b6      	b.n	80041f2 <_malloc_r+0x4a>
 8004284:	461a      	mov	r2, r3
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	42a3      	cmp	r3, r4
 800428a:	d1fb      	bne.n	8004284 <_malloc_r+0xdc>
 800428c:	2300      	movs	r3, #0
 800428e:	6053      	str	r3, [r2, #4]
 8004290:	e7de      	b.n	8004250 <_malloc_r+0xa8>
 8004292:	230c      	movs	r3, #12
 8004294:	6033      	str	r3, [r6, #0]
 8004296:	4630      	mov	r0, r6
 8004298:	f000 f80c 	bl	80042b4 <__malloc_unlock>
 800429c:	e794      	b.n	80041c8 <_malloc_r+0x20>
 800429e:	6005      	str	r5, [r0, #0]
 80042a0:	e7d6      	b.n	8004250 <_malloc_r+0xa8>
 80042a2:	bf00      	nop
 80042a4:	20000370 	.word	0x20000370

080042a8 <__malloc_lock>:
 80042a8:	4801      	ldr	r0, [pc, #4]	@ (80042b0 <__malloc_lock+0x8>)
 80042aa:	f7ff bee0 	b.w	800406e <__retarget_lock_acquire_recursive>
 80042ae:	bf00      	nop
 80042b0:	20000368 	.word	0x20000368

080042b4 <__malloc_unlock>:
 80042b4:	4801      	ldr	r0, [pc, #4]	@ (80042bc <__malloc_unlock+0x8>)
 80042b6:	f7ff bedb 	b.w	8004070 <__retarget_lock_release_recursive>
 80042ba:	bf00      	nop
 80042bc:	20000368 	.word	0x20000368

080042c0 <__ssputs_r>:
 80042c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	688e      	ldr	r6, [r1, #8]
 80042c6:	461f      	mov	r7, r3
 80042c8:	42be      	cmp	r6, r7
 80042ca:	680b      	ldr	r3, [r1, #0]
 80042cc:	4682      	mov	sl, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	4690      	mov	r8, r2
 80042d2:	d82d      	bhi.n	8004330 <__ssputs_r+0x70>
 80042d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042dc:	d026      	beq.n	800432c <__ssputs_r+0x6c>
 80042de:	6965      	ldr	r5, [r4, #20]
 80042e0:	6909      	ldr	r1, [r1, #16]
 80042e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e6:	eba3 0901 	sub.w	r9, r3, r1
 80042ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042ee:	1c7b      	adds	r3, r7, #1
 80042f0:	444b      	add	r3, r9
 80042f2:	106d      	asrs	r5, r5, #1
 80042f4:	429d      	cmp	r5, r3
 80042f6:	bf38      	it	cc
 80042f8:	461d      	movcc	r5, r3
 80042fa:	0553      	lsls	r3, r2, #21
 80042fc:	d527      	bpl.n	800434e <__ssputs_r+0x8e>
 80042fe:	4629      	mov	r1, r5
 8004300:	f7ff ff52 	bl	80041a8 <_malloc_r>
 8004304:	4606      	mov	r6, r0
 8004306:	b360      	cbz	r0, 8004362 <__ssputs_r+0xa2>
 8004308:	6921      	ldr	r1, [r4, #16]
 800430a:	464a      	mov	r2, r9
 800430c:	f000 fba4 	bl	8004a58 <memcpy>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	6126      	str	r6, [r4, #16]
 800431e:	6165      	str	r5, [r4, #20]
 8004320:	444e      	add	r6, r9
 8004322:	eba5 0509 	sub.w	r5, r5, r9
 8004326:	6026      	str	r6, [r4, #0]
 8004328:	60a5      	str	r5, [r4, #8]
 800432a:	463e      	mov	r6, r7
 800432c:	42be      	cmp	r6, r7
 800432e:	d900      	bls.n	8004332 <__ssputs_r+0x72>
 8004330:	463e      	mov	r6, r7
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	4632      	mov	r2, r6
 8004336:	4641      	mov	r1, r8
 8004338:	f000 fb64 	bl	8004a04 <memmove>
 800433c:	68a3      	ldr	r3, [r4, #8]
 800433e:	1b9b      	subs	r3, r3, r6
 8004340:	60a3      	str	r3, [r4, #8]
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	4433      	add	r3, r6
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	2000      	movs	r0, #0
 800434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434e:	462a      	mov	r2, r5
 8004350:	f000 fb97 	bl	8004a82 <_realloc_r>
 8004354:	4606      	mov	r6, r0
 8004356:	2800      	cmp	r0, #0
 8004358:	d1e0      	bne.n	800431c <__ssputs_r+0x5c>
 800435a:	6921      	ldr	r1, [r4, #16]
 800435c:	4650      	mov	r0, sl
 800435e:	f7ff feaf 	bl	80040c0 <_free_r>
 8004362:	230c      	movs	r3, #12
 8004364:	f8ca 3000 	str.w	r3, [sl]
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800436e:	81a3      	strh	r3, [r4, #12]
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	e7e9      	b.n	800434a <__ssputs_r+0x8a>
	...

08004378 <_svfiprintf_r>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	4698      	mov	r8, r3
 800437e:	898b      	ldrh	r3, [r1, #12]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	b09d      	sub	sp, #116	@ 0x74
 8004384:	4607      	mov	r7, r0
 8004386:	460d      	mov	r5, r1
 8004388:	4614      	mov	r4, r2
 800438a:	d510      	bpl.n	80043ae <_svfiprintf_r+0x36>
 800438c:	690b      	ldr	r3, [r1, #16]
 800438e:	b973      	cbnz	r3, 80043ae <_svfiprintf_r+0x36>
 8004390:	2140      	movs	r1, #64	@ 0x40
 8004392:	f7ff ff09 	bl	80041a8 <_malloc_r>
 8004396:	6028      	str	r0, [r5, #0]
 8004398:	6128      	str	r0, [r5, #16]
 800439a:	b930      	cbnz	r0, 80043aa <_svfiprintf_r+0x32>
 800439c:	230c      	movs	r3, #12
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	b01d      	add	sp, #116	@ 0x74
 80043a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043aa:	2340      	movs	r3, #64	@ 0x40
 80043ac:	616b      	str	r3, [r5, #20]
 80043ae:	2300      	movs	r3, #0
 80043b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b2:	2320      	movs	r3, #32
 80043b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043bc:	2330      	movs	r3, #48	@ 0x30
 80043be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800455c <_svfiprintf_r+0x1e4>
 80043c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043c6:	f04f 0901 	mov.w	r9, #1
 80043ca:	4623      	mov	r3, r4
 80043cc:	469a      	mov	sl, r3
 80043ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043d2:	b10a      	cbz	r2, 80043d8 <_svfiprintf_r+0x60>
 80043d4:	2a25      	cmp	r2, #37	@ 0x25
 80043d6:	d1f9      	bne.n	80043cc <_svfiprintf_r+0x54>
 80043d8:	ebba 0b04 	subs.w	fp, sl, r4
 80043dc:	d00b      	beq.n	80043f6 <_svfiprintf_r+0x7e>
 80043de:	465b      	mov	r3, fp
 80043e0:	4622      	mov	r2, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	4638      	mov	r0, r7
 80043e6:	f7ff ff6b 	bl	80042c0 <__ssputs_r>
 80043ea:	3001      	adds	r0, #1
 80043ec:	f000 80a7 	beq.w	800453e <_svfiprintf_r+0x1c6>
 80043f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043f2:	445a      	add	r2, fp
 80043f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80043f6:	f89a 3000 	ldrb.w	r3, [sl]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 809f 	beq.w	800453e <_svfiprintf_r+0x1c6>
 8004400:	2300      	movs	r3, #0
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800440a:	f10a 0a01 	add.w	sl, sl, #1
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	9307      	str	r3, [sp, #28]
 8004412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004416:	931a      	str	r3, [sp, #104]	@ 0x68
 8004418:	4654      	mov	r4, sl
 800441a:	2205      	movs	r2, #5
 800441c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004420:	484e      	ldr	r0, [pc, #312]	@ (800455c <_svfiprintf_r+0x1e4>)
 8004422:	f7fb fee5 	bl	80001f0 <memchr>
 8004426:	9a04      	ldr	r2, [sp, #16]
 8004428:	b9d8      	cbnz	r0, 8004462 <_svfiprintf_r+0xea>
 800442a:	06d0      	lsls	r0, r2, #27
 800442c:	bf44      	itt	mi
 800442e:	2320      	movmi	r3, #32
 8004430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004434:	0711      	lsls	r1, r2, #28
 8004436:	bf44      	itt	mi
 8004438:	232b      	movmi	r3, #43	@ 0x2b
 800443a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800443e:	f89a 3000 	ldrb.w	r3, [sl]
 8004442:	2b2a      	cmp	r3, #42	@ 0x2a
 8004444:	d015      	beq.n	8004472 <_svfiprintf_r+0xfa>
 8004446:	9a07      	ldr	r2, [sp, #28]
 8004448:	4654      	mov	r4, sl
 800444a:	2000      	movs	r0, #0
 800444c:	f04f 0c0a 	mov.w	ip, #10
 8004450:	4621      	mov	r1, r4
 8004452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004456:	3b30      	subs	r3, #48	@ 0x30
 8004458:	2b09      	cmp	r3, #9
 800445a:	d94b      	bls.n	80044f4 <_svfiprintf_r+0x17c>
 800445c:	b1b0      	cbz	r0, 800448c <_svfiprintf_r+0x114>
 800445e:	9207      	str	r2, [sp, #28]
 8004460:	e014      	b.n	800448c <_svfiprintf_r+0x114>
 8004462:	eba0 0308 	sub.w	r3, r0, r8
 8004466:	fa09 f303 	lsl.w	r3, r9, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	9304      	str	r3, [sp, #16]
 800446e:	46a2      	mov	sl, r4
 8004470:	e7d2      	b.n	8004418 <_svfiprintf_r+0xa0>
 8004472:	9b03      	ldr	r3, [sp, #12]
 8004474:	1d19      	adds	r1, r3, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	9103      	str	r1, [sp, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	bfbb      	ittet	lt
 800447e:	425b      	neglt	r3, r3
 8004480:	f042 0202 	orrlt.w	r2, r2, #2
 8004484:	9307      	strge	r3, [sp, #28]
 8004486:	9307      	strlt	r3, [sp, #28]
 8004488:	bfb8      	it	lt
 800448a:	9204      	strlt	r2, [sp, #16]
 800448c:	7823      	ldrb	r3, [r4, #0]
 800448e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004490:	d10a      	bne.n	80044a8 <_svfiprintf_r+0x130>
 8004492:	7863      	ldrb	r3, [r4, #1]
 8004494:	2b2a      	cmp	r3, #42	@ 0x2a
 8004496:	d132      	bne.n	80044fe <_svfiprintf_r+0x186>
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	9203      	str	r2, [sp, #12]
 80044a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044a4:	3402      	adds	r4, #2
 80044a6:	9305      	str	r3, [sp, #20]
 80044a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800456c <_svfiprintf_r+0x1f4>
 80044ac:	7821      	ldrb	r1, [r4, #0]
 80044ae:	2203      	movs	r2, #3
 80044b0:	4650      	mov	r0, sl
 80044b2:	f7fb fe9d 	bl	80001f0 <memchr>
 80044b6:	b138      	cbz	r0, 80044c8 <_svfiprintf_r+0x150>
 80044b8:	9b04      	ldr	r3, [sp, #16]
 80044ba:	eba0 000a 	sub.w	r0, r0, sl
 80044be:	2240      	movs	r2, #64	@ 0x40
 80044c0:	4082      	lsls	r2, r0
 80044c2:	4313      	orrs	r3, r2
 80044c4:	3401      	adds	r4, #1
 80044c6:	9304      	str	r3, [sp, #16]
 80044c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044cc:	4824      	ldr	r0, [pc, #144]	@ (8004560 <_svfiprintf_r+0x1e8>)
 80044ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044d2:	2206      	movs	r2, #6
 80044d4:	f7fb fe8c 	bl	80001f0 <memchr>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d036      	beq.n	800454a <_svfiprintf_r+0x1d2>
 80044dc:	4b21      	ldr	r3, [pc, #132]	@ (8004564 <_svfiprintf_r+0x1ec>)
 80044de:	bb1b      	cbnz	r3, 8004528 <_svfiprintf_r+0x1b0>
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	3307      	adds	r3, #7
 80044e4:	f023 0307 	bic.w	r3, r3, #7
 80044e8:	3308      	adds	r3, #8
 80044ea:	9303      	str	r3, [sp, #12]
 80044ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ee:	4433      	add	r3, r6
 80044f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80044f2:	e76a      	b.n	80043ca <_svfiprintf_r+0x52>
 80044f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80044f8:	460c      	mov	r4, r1
 80044fa:	2001      	movs	r0, #1
 80044fc:	e7a8      	b.n	8004450 <_svfiprintf_r+0xd8>
 80044fe:	2300      	movs	r3, #0
 8004500:	3401      	adds	r4, #1
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	4619      	mov	r1, r3
 8004506:	f04f 0c0a 	mov.w	ip, #10
 800450a:	4620      	mov	r0, r4
 800450c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004510:	3a30      	subs	r2, #48	@ 0x30
 8004512:	2a09      	cmp	r2, #9
 8004514:	d903      	bls.n	800451e <_svfiprintf_r+0x1a6>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0c6      	beq.n	80044a8 <_svfiprintf_r+0x130>
 800451a:	9105      	str	r1, [sp, #20]
 800451c:	e7c4      	b.n	80044a8 <_svfiprintf_r+0x130>
 800451e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004522:	4604      	mov	r4, r0
 8004524:	2301      	movs	r3, #1
 8004526:	e7f0      	b.n	800450a <_svfiprintf_r+0x192>
 8004528:	ab03      	add	r3, sp, #12
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	462a      	mov	r2, r5
 800452e:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <_svfiprintf_r+0x1f0>)
 8004530:	a904      	add	r1, sp, #16
 8004532:	4638      	mov	r0, r7
 8004534:	f3af 8000 	nop.w
 8004538:	1c42      	adds	r2, r0, #1
 800453a:	4606      	mov	r6, r0
 800453c:	d1d6      	bne.n	80044ec <_svfiprintf_r+0x174>
 800453e:	89ab      	ldrh	r3, [r5, #12]
 8004540:	065b      	lsls	r3, r3, #25
 8004542:	f53f af2d 	bmi.w	80043a0 <_svfiprintf_r+0x28>
 8004546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004548:	e72c      	b.n	80043a4 <_svfiprintf_r+0x2c>
 800454a:	ab03      	add	r3, sp, #12
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	462a      	mov	r2, r5
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <_svfiprintf_r+0x1f0>)
 8004552:	a904      	add	r1, sp, #16
 8004554:	4638      	mov	r0, r7
 8004556:	f000 f879 	bl	800464c <_printf_i>
 800455a:	e7ed      	b.n	8004538 <_svfiprintf_r+0x1c0>
 800455c:	080051d1 	.word	0x080051d1
 8004560:	080051db 	.word	0x080051db
 8004564:	00000000 	.word	0x00000000
 8004568:	080042c1 	.word	0x080042c1
 800456c:	080051d7 	.word	0x080051d7

08004570 <_printf_common>:
 8004570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	4616      	mov	r6, r2
 8004576:	4698      	mov	r8, r3
 8004578:	688a      	ldr	r2, [r1, #8]
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004580:	4293      	cmp	r3, r2
 8004582:	bfb8      	it	lt
 8004584:	4613      	movlt	r3, r2
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800458c:	4607      	mov	r7, r0
 800458e:	460c      	mov	r4, r1
 8004590:	b10a      	cbz	r2, 8004596 <_printf_common+0x26>
 8004592:	3301      	adds	r3, #1
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	0699      	lsls	r1, r3, #26
 800459a:	bf42      	ittt	mi
 800459c:	6833      	ldrmi	r3, [r6, #0]
 800459e:	3302      	addmi	r3, #2
 80045a0:	6033      	strmi	r3, [r6, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	f015 0506 	ands.w	r5, r5, #6
 80045a8:	d106      	bne.n	80045b8 <_printf_common+0x48>
 80045aa:	f104 0a19 	add.w	sl, r4, #25
 80045ae:	68e3      	ldr	r3, [r4, #12]
 80045b0:	6832      	ldr	r2, [r6, #0]
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	dc26      	bgt.n	8004606 <_printf_common+0x96>
 80045b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	3b00      	subs	r3, #0
 80045c0:	bf18      	it	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	0692      	lsls	r2, r2, #26
 80045c6:	d42b      	bmi.n	8004620 <_printf_common+0xb0>
 80045c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045cc:	4641      	mov	r1, r8
 80045ce:	4638      	mov	r0, r7
 80045d0:	47c8      	blx	r9
 80045d2:	3001      	adds	r0, #1
 80045d4:	d01e      	beq.n	8004614 <_printf_common+0xa4>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	6922      	ldr	r2, [r4, #16]
 80045da:	f003 0306 	and.w	r3, r3, #6
 80045de:	2b04      	cmp	r3, #4
 80045e0:	bf02      	ittt	eq
 80045e2:	68e5      	ldreq	r5, [r4, #12]
 80045e4:	6833      	ldreq	r3, [r6, #0]
 80045e6:	1aed      	subeq	r5, r5, r3
 80045e8:	68a3      	ldr	r3, [r4, #8]
 80045ea:	bf0c      	ite	eq
 80045ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f0:	2500      	movne	r5, #0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bfc4      	itt	gt
 80045f6:	1a9b      	subgt	r3, r3, r2
 80045f8:	18ed      	addgt	r5, r5, r3
 80045fa:	2600      	movs	r6, #0
 80045fc:	341a      	adds	r4, #26
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d11a      	bne.n	8004638 <_printf_common+0xc8>
 8004602:	2000      	movs	r0, #0
 8004604:	e008      	b.n	8004618 <_printf_common+0xa8>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4641      	mov	r1, r8
 800460c:	4638      	mov	r0, r7
 800460e:	47c8      	blx	r9
 8004610:	3001      	adds	r0, #1
 8004612:	d103      	bne.n	800461c <_printf_common+0xac>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	3501      	adds	r5, #1
 800461e:	e7c6      	b.n	80045ae <_printf_common+0x3e>
 8004620:	18e1      	adds	r1, r4, r3
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	2030      	movs	r0, #48	@ 0x30
 8004626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800462a:	4422      	add	r2, r4
 800462c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004634:	3302      	adds	r3, #2
 8004636:	e7c7      	b.n	80045c8 <_printf_common+0x58>
 8004638:	2301      	movs	r3, #1
 800463a:	4622      	mov	r2, r4
 800463c:	4641      	mov	r1, r8
 800463e:	4638      	mov	r0, r7
 8004640:	47c8      	blx	r9
 8004642:	3001      	adds	r0, #1
 8004644:	d0e6      	beq.n	8004614 <_printf_common+0xa4>
 8004646:	3601      	adds	r6, #1
 8004648:	e7d9      	b.n	80045fe <_printf_common+0x8e>
	...

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	7e0f      	ldrb	r7, [r1, #24]
 8004652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004654:	2f78      	cmp	r7, #120	@ 0x78
 8004656:	4691      	mov	r9, r2
 8004658:	4680      	mov	r8, r0
 800465a:	460c      	mov	r4, r1
 800465c:	469a      	mov	sl, r3
 800465e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	@ 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d1 	beq.w	8004810 <_printf_i+0x1c4>
 800466e:	2f58      	cmp	r7, #88	@ 0x58
 8004670:	f000 80b8 	beq.w	80047e4 <_printf_i+0x198>
 8004674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a101      	add	r1, pc, #4	@ (adr r1, 800468c <_printf_i+0x40>)
 8004688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	080047f7 	.word	0x080047f7
 80046bc:	08004723 	.word	0x08004723
 80046c0:	080047b1 	.word	0x080047b1
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004819 	.word	0x08004819
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004723 	.word	0x08004723
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047b9 	.word	0x080047b9
 80046e4:	6833      	ldr	r3, [r6, #0]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6032      	str	r2, [r6, #0]
 80046ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e09c      	b.n	8004832 <_printf_i+0x1e6>
 80046f8:	6833      	ldr	r3, [r6, #0]
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	1d19      	adds	r1, r3, #4
 80046fe:	6031      	str	r1, [r6, #0]
 8004700:	0606      	lsls	r6, r0, #24
 8004702:	d501      	bpl.n	8004708 <_printf_i+0xbc>
 8004704:	681d      	ldr	r5, [r3, #0]
 8004706:	e003      	b.n	8004710 <_printf_i+0xc4>
 8004708:	0645      	lsls	r5, r0, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0xb8>
 800470c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004710:	2d00      	cmp	r5, #0
 8004712:	da03      	bge.n	800471c <_printf_i+0xd0>
 8004714:	232d      	movs	r3, #45	@ 0x2d
 8004716:	426d      	negs	r5, r5
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800471c:	4858      	ldr	r0, [pc, #352]	@ (8004880 <_printf_i+0x234>)
 800471e:	230a      	movs	r3, #10
 8004720:	e011      	b.n	8004746 <_printf_i+0xfa>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	6833      	ldr	r3, [r6, #0]
 8004726:	0608      	lsls	r0, r1, #24
 8004728:	f853 5b04 	ldr.w	r5, [r3], #4
 800472c:	d402      	bmi.n	8004734 <_printf_i+0xe8>
 800472e:	0649      	lsls	r1, r1, #25
 8004730:	bf48      	it	mi
 8004732:	b2ad      	uxthmi	r5, r5
 8004734:	2f6f      	cmp	r7, #111	@ 0x6f
 8004736:	4852      	ldr	r0, [pc, #328]	@ (8004880 <_printf_i+0x234>)
 8004738:	6033      	str	r3, [r6, #0]
 800473a:	bf14      	ite	ne
 800473c:	230a      	movne	r3, #10
 800473e:	2308      	moveq	r3, #8
 8004740:	2100      	movs	r1, #0
 8004742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004746:	6866      	ldr	r6, [r4, #4]
 8004748:	60a6      	str	r6, [r4, #8]
 800474a:	2e00      	cmp	r6, #0
 800474c:	db05      	blt.n	800475a <_printf_i+0x10e>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	432e      	orrs	r6, r5
 8004752:	f021 0104 	bic.w	r1, r1, #4
 8004756:	6021      	str	r1, [r4, #0]
 8004758:	d04b      	beq.n	80047f2 <_printf_i+0x1a6>
 800475a:	4616      	mov	r6, r2
 800475c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004760:	fb03 5711 	mls	r7, r3, r1, r5
 8004764:	5dc7      	ldrb	r7, [r0, r7]
 8004766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800476a:	462f      	mov	r7, r5
 800476c:	42bb      	cmp	r3, r7
 800476e:	460d      	mov	r5, r1
 8004770:	d9f4      	bls.n	800475c <_printf_i+0x110>
 8004772:	2b08      	cmp	r3, #8
 8004774:	d10b      	bne.n	800478e <_printf_i+0x142>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	07df      	lsls	r7, r3, #31
 800477a:	d508      	bpl.n	800478e <_printf_i+0x142>
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	6861      	ldr	r1, [r4, #4]
 8004780:	4299      	cmp	r1, r3
 8004782:	bfde      	ittt	le
 8004784:	2330      	movle	r3, #48	@ 0x30
 8004786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800478a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800478e:	1b92      	subs	r2, r2, r6
 8004790:	6122      	str	r2, [r4, #16]
 8004792:	f8cd a000 	str.w	sl, [sp]
 8004796:	464b      	mov	r3, r9
 8004798:	aa03      	add	r2, sp, #12
 800479a:	4621      	mov	r1, r4
 800479c:	4640      	mov	r0, r8
 800479e:	f7ff fee7 	bl	8004570 <_printf_common>
 80047a2:	3001      	adds	r0, #1
 80047a4:	d14a      	bne.n	800483c <_printf_i+0x1f0>
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
 80047aa:	b004      	add	sp, #16
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f043 0320 	orr.w	r3, r3, #32
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	4832      	ldr	r0, [pc, #200]	@ (8004884 <_printf_i+0x238>)
 80047ba:	2778      	movs	r7, #120	@ 0x78
 80047bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	6831      	ldr	r1, [r6, #0]
 80047c4:	061f      	lsls	r7, r3, #24
 80047c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80047ca:	d402      	bmi.n	80047d2 <_printf_i+0x186>
 80047cc:	065f      	lsls	r7, r3, #25
 80047ce:	bf48      	it	mi
 80047d0:	b2ad      	uxthmi	r5, r5
 80047d2:	6031      	str	r1, [r6, #0]
 80047d4:	07d9      	lsls	r1, r3, #31
 80047d6:	bf44      	itt	mi
 80047d8:	f043 0320 	orrmi.w	r3, r3, #32
 80047dc:	6023      	strmi	r3, [r4, #0]
 80047de:	b11d      	cbz	r5, 80047e8 <_printf_i+0x19c>
 80047e0:	2310      	movs	r3, #16
 80047e2:	e7ad      	b.n	8004740 <_printf_i+0xf4>
 80047e4:	4826      	ldr	r0, [pc, #152]	@ (8004880 <_printf_i+0x234>)
 80047e6:	e7e9      	b.n	80047bc <_printf_i+0x170>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f023 0320 	bic.w	r3, r3, #32
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	e7f6      	b.n	80047e0 <_printf_i+0x194>
 80047f2:	4616      	mov	r6, r2
 80047f4:	e7bd      	b.n	8004772 <_printf_i+0x126>
 80047f6:	6833      	ldr	r3, [r6, #0]
 80047f8:	6825      	ldr	r5, [r4, #0]
 80047fa:	6961      	ldr	r1, [r4, #20]
 80047fc:	1d18      	adds	r0, r3, #4
 80047fe:	6030      	str	r0, [r6, #0]
 8004800:	062e      	lsls	r6, r5, #24
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	d501      	bpl.n	800480a <_printf_i+0x1be>
 8004806:	6019      	str	r1, [r3, #0]
 8004808:	e002      	b.n	8004810 <_printf_i+0x1c4>
 800480a:	0668      	lsls	r0, r5, #25
 800480c:	d5fb      	bpl.n	8004806 <_printf_i+0x1ba>
 800480e:	8019      	strh	r1, [r3, #0]
 8004810:	2300      	movs	r3, #0
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	4616      	mov	r6, r2
 8004816:	e7bc      	b.n	8004792 <_printf_i+0x146>
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	6032      	str	r2, [r6, #0]
 800481e:	681e      	ldr	r6, [r3, #0]
 8004820:	6862      	ldr	r2, [r4, #4]
 8004822:	2100      	movs	r1, #0
 8004824:	4630      	mov	r0, r6
 8004826:	f7fb fce3 	bl	80001f0 <memchr>
 800482a:	b108      	cbz	r0, 8004830 <_printf_i+0x1e4>
 800482c:	1b80      	subs	r0, r0, r6
 800482e:	6060      	str	r0, [r4, #4]
 8004830:	6863      	ldr	r3, [r4, #4]
 8004832:	6123      	str	r3, [r4, #16]
 8004834:	2300      	movs	r3, #0
 8004836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800483a:	e7aa      	b.n	8004792 <_printf_i+0x146>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	4632      	mov	r2, r6
 8004840:	4649      	mov	r1, r9
 8004842:	4640      	mov	r0, r8
 8004844:	47d0      	blx	sl
 8004846:	3001      	adds	r0, #1
 8004848:	d0ad      	beq.n	80047a6 <_printf_i+0x15a>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	079b      	lsls	r3, r3, #30
 800484e:	d413      	bmi.n	8004878 <_printf_i+0x22c>
 8004850:	68e0      	ldr	r0, [r4, #12]
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	4298      	cmp	r0, r3
 8004856:	bfb8      	it	lt
 8004858:	4618      	movlt	r0, r3
 800485a:	e7a6      	b.n	80047aa <_printf_i+0x15e>
 800485c:	2301      	movs	r3, #1
 800485e:	4632      	mov	r2, r6
 8004860:	4649      	mov	r1, r9
 8004862:	4640      	mov	r0, r8
 8004864:	47d0      	blx	sl
 8004866:	3001      	adds	r0, #1
 8004868:	d09d      	beq.n	80047a6 <_printf_i+0x15a>
 800486a:	3501      	adds	r5, #1
 800486c:	68e3      	ldr	r3, [r4, #12]
 800486e:	9903      	ldr	r1, [sp, #12]
 8004870:	1a5b      	subs	r3, r3, r1
 8004872:	42ab      	cmp	r3, r5
 8004874:	dcf2      	bgt.n	800485c <_printf_i+0x210>
 8004876:	e7eb      	b.n	8004850 <_printf_i+0x204>
 8004878:	2500      	movs	r5, #0
 800487a:	f104 0619 	add.w	r6, r4, #25
 800487e:	e7f5      	b.n	800486c <_printf_i+0x220>
 8004880:	080051e2 	.word	0x080051e2
 8004884:	080051f3 	.word	0x080051f3

08004888 <__sflush_r>:
 8004888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	0716      	lsls	r6, r2, #28
 8004892:	4605      	mov	r5, r0
 8004894:	460c      	mov	r4, r1
 8004896:	d454      	bmi.n	8004942 <__sflush_r+0xba>
 8004898:	684b      	ldr	r3, [r1, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	dc02      	bgt.n	80048a4 <__sflush_r+0x1c>
 800489e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dd48      	ble.n	8004936 <__sflush_r+0xae>
 80048a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048a6:	2e00      	cmp	r6, #0
 80048a8:	d045      	beq.n	8004936 <__sflush_r+0xae>
 80048aa:	2300      	movs	r3, #0
 80048ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048b0:	682f      	ldr	r7, [r5, #0]
 80048b2:	6a21      	ldr	r1, [r4, #32]
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	d030      	beq.n	800491a <__sflush_r+0x92>
 80048b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	0759      	lsls	r1, r3, #29
 80048be:	d505      	bpl.n	80048cc <__sflush_r+0x44>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048c6:	b10b      	cbz	r3, 80048cc <__sflush_r+0x44>
 80048c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	2300      	movs	r3, #0
 80048ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048d0:	6a21      	ldr	r1, [r4, #32]
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b0      	blx	r6
 80048d6:	1c43      	adds	r3, r0, #1
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	d106      	bne.n	80048ea <__sflush_r+0x62>
 80048dc:	6829      	ldr	r1, [r5, #0]
 80048de:	291d      	cmp	r1, #29
 80048e0:	d82b      	bhi.n	800493a <__sflush_r+0xb2>
 80048e2:	4a2a      	ldr	r2, [pc, #168]	@ (800498c <__sflush_r+0x104>)
 80048e4:	40ca      	lsrs	r2, r1
 80048e6:	07d6      	lsls	r6, r2, #31
 80048e8:	d527      	bpl.n	800493a <__sflush_r+0xb2>
 80048ea:	2200      	movs	r2, #0
 80048ec:	6062      	str	r2, [r4, #4]
 80048ee:	04d9      	lsls	r1, r3, #19
 80048f0:	6922      	ldr	r2, [r4, #16]
 80048f2:	6022      	str	r2, [r4, #0]
 80048f4:	d504      	bpl.n	8004900 <__sflush_r+0x78>
 80048f6:	1c42      	adds	r2, r0, #1
 80048f8:	d101      	bne.n	80048fe <__sflush_r+0x76>
 80048fa:	682b      	ldr	r3, [r5, #0]
 80048fc:	b903      	cbnz	r3, 8004900 <__sflush_r+0x78>
 80048fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8004900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004902:	602f      	str	r7, [r5, #0]
 8004904:	b1b9      	cbz	r1, 8004936 <__sflush_r+0xae>
 8004906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800490a:	4299      	cmp	r1, r3
 800490c:	d002      	beq.n	8004914 <__sflush_r+0x8c>
 800490e:	4628      	mov	r0, r5
 8004910:	f7ff fbd6 	bl	80040c0 <_free_r>
 8004914:	2300      	movs	r3, #0
 8004916:	6363      	str	r3, [r4, #52]	@ 0x34
 8004918:	e00d      	b.n	8004936 <__sflush_r+0xae>
 800491a:	2301      	movs	r3, #1
 800491c:	4628      	mov	r0, r5
 800491e:	47b0      	blx	r6
 8004920:	4602      	mov	r2, r0
 8004922:	1c50      	adds	r0, r2, #1
 8004924:	d1c9      	bne.n	80048ba <__sflush_r+0x32>
 8004926:	682b      	ldr	r3, [r5, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0c6      	beq.n	80048ba <__sflush_r+0x32>
 800492c:	2b1d      	cmp	r3, #29
 800492e:	d001      	beq.n	8004934 <__sflush_r+0xac>
 8004930:	2b16      	cmp	r3, #22
 8004932:	d11e      	bne.n	8004972 <__sflush_r+0xea>
 8004934:	602f      	str	r7, [r5, #0]
 8004936:	2000      	movs	r0, #0
 8004938:	e022      	b.n	8004980 <__sflush_r+0xf8>
 800493a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800493e:	b21b      	sxth	r3, r3
 8004940:	e01b      	b.n	800497a <__sflush_r+0xf2>
 8004942:	690f      	ldr	r7, [r1, #16]
 8004944:	2f00      	cmp	r7, #0
 8004946:	d0f6      	beq.n	8004936 <__sflush_r+0xae>
 8004948:	0793      	lsls	r3, r2, #30
 800494a:	680e      	ldr	r6, [r1, #0]
 800494c:	bf08      	it	eq
 800494e:	694b      	ldreq	r3, [r1, #20]
 8004950:	600f      	str	r7, [r1, #0]
 8004952:	bf18      	it	ne
 8004954:	2300      	movne	r3, #0
 8004956:	eba6 0807 	sub.w	r8, r6, r7
 800495a:	608b      	str	r3, [r1, #8]
 800495c:	f1b8 0f00 	cmp.w	r8, #0
 8004960:	dde9      	ble.n	8004936 <__sflush_r+0xae>
 8004962:	6a21      	ldr	r1, [r4, #32]
 8004964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004966:	4643      	mov	r3, r8
 8004968:	463a      	mov	r2, r7
 800496a:	4628      	mov	r0, r5
 800496c:	47b0      	blx	r6
 800496e:	2800      	cmp	r0, #0
 8004970:	dc08      	bgt.n	8004984 <__sflush_r+0xfc>
 8004972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004984:	4407      	add	r7, r0
 8004986:	eba8 0800 	sub.w	r8, r8, r0
 800498a:	e7e7      	b.n	800495c <__sflush_r+0xd4>
 800498c:	20400001 	.word	0x20400001

08004990 <_fflush_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	690b      	ldr	r3, [r1, #16]
 8004994:	4605      	mov	r5, r0
 8004996:	460c      	mov	r4, r1
 8004998:	b913      	cbnz	r3, 80049a0 <_fflush_r+0x10>
 800499a:	2500      	movs	r5, #0
 800499c:	4628      	mov	r0, r5
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	b118      	cbz	r0, 80049aa <_fflush_r+0x1a>
 80049a2:	6a03      	ldr	r3, [r0, #32]
 80049a4:	b90b      	cbnz	r3, 80049aa <_fflush_r+0x1a>
 80049a6:	f7ff f9c9 	bl	8003d3c <__sinit>
 80049aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f3      	beq.n	800499a <_fflush_r+0xa>
 80049b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049b4:	07d0      	lsls	r0, r2, #31
 80049b6:	d404      	bmi.n	80049c2 <_fflush_r+0x32>
 80049b8:	0599      	lsls	r1, r3, #22
 80049ba:	d402      	bmi.n	80049c2 <_fflush_r+0x32>
 80049bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049be:	f7ff fb56 	bl	800406e <__retarget_lock_acquire_recursive>
 80049c2:	4628      	mov	r0, r5
 80049c4:	4621      	mov	r1, r4
 80049c6:	f7ff ff5f 	bl	8004888 <__sflush_r>
 80049ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049cc:	07da      	lsls	r2, r3, #31
 80049ce:	4605      	mov	r5, r0
 80049d0:	d4e4      	bmi.n	800499c <_fflush_r+0xc>
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	059b      	lsls	r3, r3, #22
 80049d6:	d4e1      	bmi.n	800499c <_fflush_r+0xc>
 80049d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049da:	f7ff fb49 	bl	8004070 <__retarget_lock_release_recursive>
 80049de:	e7dd      	b.n	800499c <_fflush_r+0xc>

080049e0 <fiprintf>:
 80049e0:	b40e      	push	{r1, r2, r3}
 80049e2:	b503      	push	{r0, r1, lr}
 80049e4:	4601      	mov	r1, r0
 80049e6:	ab03      	add	r3, sp, #12
 80049e8:	4805      	ldr	r0, [pc, #20]	@ (8004a00 <fiprintf+0x20>)
 80049ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ee:	6800      	ldr	r0, [r0, #0]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	f000 f89d 	bl	8004b30 <_vfiprintf_r>
 80049f6:	b002      	add	sp, #8
 80049f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049fc:	b003      	add	sp, #12
 80049fe:	4770      	bx	lr
 8004a00:	20000018 	.word	0x20000018

08004a04 <memmove>:
 8004a04:	4288      	cmp	r0, r1
 8004a06:	b510      	push	{r4, lr}
 8004a08:	eb01 0402 	add.w	r4, r1, r2
 8004a0c:	d902      	bls.n	8004a14 <memmove+0x10>
 8004a0e:	4284      	cmp	r4, r0
 8004a10:	4623      	mov	r3, r4
 8004a12:	d807      	bhi.n	8004a24 <memmove+0x20>
 8004a14:	1e43      	subs	r3, r0, #1
 8004a16:	42a1      	cmp	r1, r4
 8004a18:	d008      	beq.n	8004a2c <memmove+0x28>
 8004a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a22:	e7f8      	b.n	8004a16 <memmove+0x12>
 8004a24:	4402      	add	r2, r0
 8004a26:	4601      	mov	r1, r0
 8004a28:	428a      	cmp	r2, r1
 8004a2a:	d100      	bne.n	8004a2e <memmove+0x2a>
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a36:	e7f7      	b.n	8004a28 <memmove+0x24>

08004a38 <_sbrk_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d06      	ldr	r5, [pc, #24]	@ (8004a54 <_sbrk_r+0x1c>)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	f7fc fb02 	bl	800104c <_sbrk>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_sbrk_r+0x1a>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_sbrk_r+0x1a>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	20000364 	.word	0x20000364

08004a58 <memcpy>:
 8004a58:	440a      	add	r2, r1
 8004a5a:	4291      	cmp	r1, r2
 8004a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a60:	d100      	bne.n	8004a64 <memcpy+0xc>
 8004a62:	4770      	bx	lr
 8004a64:	b510      	push	{r4, lr}
 8004a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a6e:	4291      	cmp	r1, r2
 8004a70:	d1f9      	bne.n	8004a66 <memcpy+0xe>
 8004a72:	bd10      	pop	{r4, pc}

08004a74 <abort>:
 8004a74:	b508      	push	{r3, lr}
 8004a76:	2006      	movs	r0, #6
 8004a78:	f000 fa2e 	bl	8004ed8 <raise>
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7fc fa6d 	bl	8000f5c <_exit>

08004a82 <_realloc_r>:
 8004a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	4607      	mov	r7, r0
 8004a88:	4614      	mov	r4, r2
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	b921      	cbnz	r1, 8004a98 <_realloc_r+0x16>
 8004a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a92:	4611      	mov	r1, r2
 8004a94:	f7ff bb88 	b.w	80041a8 <_malloc_r>
 8004a98:	b92a      	cbnz	r2, 8004aa6 <_realloc_r+0x24>
 8004a9a:	f7ff fb11 	bl	80040c0 <_free_r>
 8004a9e:	4625      	mov	r5, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa6:	f000 fa33 	bl	8004f10 <_malloc_usable_size_r>
 8004aaa:	4284      	cmp	r4, r0
 8004aac:	4606      	mov	r6, r0
 8004aae:	d802      	bhi.n	8004ab6 <_realloc_r+0x34>
 8004ab0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ab4:	d8f4      	bhi.n	8004aa0 <_realloc_r+0x1e>
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f7ff fb75 	bl	80041a8 <_malloc_r>
 8004abe:	4680      	mov	r8, r0
 8004ac0:	b908      	cbnz	r0, 8004ac6 <_realloc_r+0x44>
 8004ac2:	4645      	mov	r5, r8
 8004ac4:	e7ec      	b.n	8004aa0 <_realloc_r+0x1e>
 8004ac6:	42b4      	cmp	r4, r6
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4629      	mov	r1, r5
 8004acc:	bf28      	it	cs
 8004ace:	4632      	movcs	r2, r6
 8004ad0:	f7ff ffc2 	bl	8004a58 <memcpy>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f7ff faf2 	bl	80040c0 <_free_r>
 8004adc:	e7f1      	b.n	8004ac2 <_realloc_r+0x40>

08004ade <__sfputc_r>:
 8004ade:	6893      	ldr	r3, [r2, #8]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	b410      	push	{r4}
 8004ae6:	6093      	str	r3, [r2, #8]
 8004ae8:	da08      	bge.n	8004afc <__sfputc_r+0x1e>
 8004aea:	6994      	ldr	r4, [r2, #24]
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	db01      	blt.n	8004af4 <__sfputc_r+0x16>
 8004af0:	290a      	cmp	r1, #10
 8004af2:	d103      	bne.n	8004afc <__sfputc_r+0x1e>
 8004af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004af8:	f000 b932 	b.w	8004d60 <__swbuf_r>
 8004afc:	6813      	ldr	r3, [r2, #0]
 8004afe:	1c58      	adds	r0, r3, #1
 8004b00:	6010      	str	r0, [r2, #0]
 8004b02:	7019      	strb	r1, [r3, #0]
 8004b04:	4608      	mov	r0, r1
 8004b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <__sfputs_r>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	4606      	mov	r6, r0
 8004b10:	460f      	mov	r7, r1
 8004b12:	4614      	mov	r4, r2
 8004b14:	18d5      	adds	r5, r2, r3
 8004b16:	42ac      	cmp	r4, r5
 8004b18:	d101      	bne.n	8004b1e <__sfputs_r+0x12>
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e007      	b.n	8004b2e <__sfputs_r+0x22>
 8004b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b22:	463a      	mov	r2, r7
 8004b24:	4630      	mov	r0, r6
 8004b26:	f7ff ffda 	bl	8004ade <__sfputc_r>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	d1f3      	bne.n	8004b16 <__sfputs_r+0xa>
 8004b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b30 <_vfiprintf_r>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	460d      	mov	r5, r1
 8004b36:	b09d      	sub	sp, #116	@ 0x74
 8004b38:	4614      	mov	r4, r2
 8004b3a:	4698      	mov	r8, r3
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	b118      	cbz	r0, 8004b48 <_vfiprintf_r+0x18>
 8004b40:	6a03      	ldr	r3, [r0, #32]
 8004b42:	b90b      	cbnz	r3, 8004b48 <_vfiprintf_r+0x18>
 8004b44:	f7ff f8fa 	bl	8003d3c <__sinit>
 8004b48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b4a:	07d9      	lsls	r1, r3, #31
 8004b4c:	d405      	bmi.n	8004b5a <_vfiprintf_r+0x2a>
 8004b4e:	89ab      	ldrh	r3, [r5, #12]
 8004b50:	059a      	lsls	r2, r3, #22
 8004b52:	d402      	bmi.n	8004b5a <_vfiprintf_r+0x2a>
 8004b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b56:	f7ff fa8a 	bl	800406e <__retarget_lock_acquire_recursive>
 8004b5a:	89ab      	ldrh	r3, [r5, #12]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	d501      	bpl.n	8004b64 <_vfiprintf_r+0x34>
 8004b60:	692b      	ldr	r3, [r5, #16]
 8004b62:	b99b      	cbnz	r3, 8004b8c <_vfiprintf_r+0x5c>
 8004b64:	4629      	mov	r1, r5
 8004b66:	4630      	mov	r0, r6
 8004b68:	f000 f938 	bl	8004ddc <__swsetup_r>
 8004b6c:	b170      	cbz	r0, 8004b8c <_vfiprintf_r+0x5c>
 8004b6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b70:	07dc      	lsls	r4, r3, #31
 8004b72:	d504      	bpl.n	8004b7e <_vfiprintf_r+0x4e>
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	b01d      	add	sp, #116	@ 0x74
 8004b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7e:	89ab      	ldrh	r3, [r5, #12]
 8004b80:	0598      	lsls	r0, r3, #22
 8004b82:	d4f7      	bmi.n	8004b74 <_vfiprintf_r+0x44>
 8004b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b86:	f7ff fa73 	bl	8004070 <__retarget_lock_release_recursive>
 8004b8a:	e7f3      	b.n	8004b74 <_vfiprintf_r+0x44>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b90:	2320      	movs	r3, #32
 8004b92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b9a:	2330      	movs	r3, #48	@ 0x30
 8004b9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d4c <_vfiprintf_r+0x21c>
 8004ba0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba4:	f04f 0901 	mov.w	r9, #1
 8004ba8:	4623      	mov	r3, r4
 8004baa:	469a      	mov	sl, r3
 8004bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_vfiprintf_r+0x86>
 8004bb2:	2a25      	cmp	r2, #37	@ 0x25
 8004bb4:	d1f9      	bne.n	8004baa <_vfiprintf_r+0x7a>
 8004bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8004bba:	d00b      	beq.n	8004bd4 <_vfiprintf_r+0xa4>
 8004bbc:	465b      	mov	r3, fp
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f7ff ffa2 	bl	8004b0c <__sfputs_r>
 8004bc8:	3001      	adds	r0, #1
 8004bca:	f000 80a7 	beq.w	8004d1c <_vfiprintf_r+0x1ec>
 8004bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bd0:	445a      	add	r2, fp
 8004bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 809f 	beq.w	8004d1c <_vfiprintf_r+0x1ec>
 8004bde:	2300      	movs	r3, #0
 8004be0:	f04f 32ff 	mov.w	r2, #4294967295
 8004be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be8:	f10a 0a01 	add.w	sl, sl, #1
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	9307      	str	r3, [sp, #28]
 8004bf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf6:	4654      	mov	r4, sl
 8004bf8:	2205      	movs	r2, #5
 8004bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfe:	4853      	ldr	r0, [pc, #332]	@ (8004d4c <_vfiprintf_r+0x21c>)
 8004c00:	f7fb faf6 	bl	80001f0 <memchr>
 8004c04:	9a04      	ldr	r2, [sp, #16]
 8004c06:	b9d8      	cbnz	r0, 8004c40 <_vfiprintf_r+0x110>
 8004c08:	06d1      	lsls	r1, r2, #27
 8004c0a:	bf44      	itt	mi
 8004c0c:	2320      	movmi	r3, #32
 8004c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c12:	0713      	lsls	r3, r2, #28
 8004c14:	bf44      	itt	mi
 8004c16:	232b      	movmi	r3, #43	@ 0x2b
 8004c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c22:	d015      	beq.n	8004c50 <_vfiprintf_r+0x120>
 8004c24:	9a07      	ldr	r2, [sp, #28]
 8004c26:	4654      	mov	r4, sl
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f04f 0c0a 	mov.w	ip, #10
 8004c2e:	4621      	mov	r1, r4
 8004c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c34:	3b30      	subs	r3, #48	@ 0x30
 8004c36:	2b09      	cmp	r3, #9
 8004c38:	d94b      	bls.n	8004cd2 <_vfiprintf_r+0x1a2>
 8004c3a:	b1b0      	cbz	r0, 8004c6a <_vfiprintf_r+0x13a>
 8004c3c:	9207      	str	r2, [sp, #28]
 8004c3e:	e014      	b.n	8004c6a <_vfiprintf_r+0x13a>
 8004c40:	eba0 0308 	sub.w	r3, r0, r8
 8004c44:	fa09 f303 	lsl.w	r3, r9, r3
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	9304      	str	r3, [sp, #16]
 8004c4c:	46a2      	mov	sl, r4
 8004c4e:	e7d2      	b.n	8004bf6 <_vfiprintf_r+0xc6>
 8004c50:	9b03      	ldr	r3, [sp, #12]
 8004c52:	1d19      	adds	r1, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	9103      	str	r1, [sp, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bfbb      	ittet	lt
 8004c5c:	425b      	neglt	r3, r3
 8004c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c62:	9307      	strge	r3, [sp, #28]
 8004c64:	9307      	strlt	r3, [sp, #28]
 8004c66:	bfb8      	it	lt
 8004c68:	9204      	strlt	r2, [sp, #16]
 8004c6a:	7823      	ldrb	r3, [r4, #0]
 8004c6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c6e:	d10a      	bne.n	8004c86 <_vfiprintf_r+0x156>
 8004c70:	7863      	ldrb	r3, [r4, #1]
 8004c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c74:	d132      	bne.n	8004cdc <_vfiprintf_r+0x1ac>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	9203      	str	r2, [sp, #12]
 8004c7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c82:	3402      	adds	r4, #2
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d5c <_vfiprintf_r+0x22c>
 8004c8a:	7821      	ldrb	r1, [r4, #0]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	4650      	mov	r0, sl
 8004c90:	f7fb faae 	bl	80001f0 <memchr>
 8004c94:	b138      	cbz	r0, 8004ca6 <_vfiprintf_r+0x176>
 8004c96:	9b04      	ldr	r3, [sp, #16]
 8004c98:	eba0 000a 	sub.w	r0, r0, sl
 8004c9c:	2240      	movs	r2, #64	@ 0x40
 8004c9e:	4082      	lsls	r2, r0
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	3401      	adds	r4, #1
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004caa:	4829      	ldr	r0, [pc, #164]	@ (8004d50 <_vfiprintf_r+0x220>)
 8004cac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cb0:	2206      	movs	r2, #6
 8004cb2:	f7fb fa9d 	bl	80001f0 <memchr>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d03f      	beq.n	8004d3a <_vfiprintf_r+0x20a>
 8004cba:	4b26      	ldr	r3, [pc, #152]	@ (8004d54 <_vfiprintf_r+0x224>)
 8004cbc:	bb1b      	cbnz	r3, 8004d06 <_vfiprintf_r+0x1d6>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	9303      	str	r3, [sp, #12]
 8004cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ccc:	443b      	add	r3, r7
 8004cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cd0:	e76a      	b.n	8004ba8 <_vfiprintf_r+0x78>
 8004cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7a8      	b.n	8004c2e <_vfiprintf_r+0xfe>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	3401      	adds	r4, #1
 8004ce0:	9305      	str	r3, [sp, #20]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0c0a 	mov.w	ip, #10
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cee:	3a30      	subs	r2, #48	@ 0x30
 8004cf0:	2a09      	cmp	r2, #9
 8004cf2:	d903      	bls.n	8004cfc <_vfiprintf_r+0x1cc>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0c6      	beq.n	8004c86 <_vfiprintf_r+0x156>
 8004cf8:	9105      	str	r1, [sp, #20]
 8004cfa:	e7c4      	b.n	8004c86 <_vfiprintf_r+0x156>
 8004cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d00:	4604      	mov	r4, r0
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7f0      	b.n	8004ce8 <_vfiprintf_r+0x1b8>
 8004d06:	ab03      	add	r3, sp, #12
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	462a      	mov	r2, r5
 8004d0c:	4b12      	ldr	r3, [pc, #72]	@ (8004d58 <_vfiprintf_r+0x228>)
 8004d0e:	a904      	add	r1, sp, #16
 8004d10:	4630      	mov	r0, r6
 8004d12:	f3af 8000 	nop.w
 8004d16:	4607      	mov	r7, r0
 8004d18:	1c78      	adds	r0, r7, #1
 8004d1a:	d1d6      	bne.n	8004cca <_vfiprintf_r+0x19a>
 8004d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d1e:	07d9      	lsls	r1, r3, #31
 8004d20:	d405      	bmi.n	8004d2e <_vfiprintf_r+0x1fe>
 8004d22:	89ab      	ldrh	r3, [r5, #12]
 8004d24:	059a      	lsls	r2, r3, #22
 8004d26:	d402      	bmi.n	8004d2e <_vfiprintf_r+0x1fe>
 8004d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d2a:	f7ff f9a1 	bl	8004070 <__retarget_lock_release_recursive>
 8004d2e:	89ab      	ldrh	r3, [r5, #12]
 8004d30:	065b      	lsls	r3, r3, #25
 8004d32:	f53f af1f 	bmi.w	8004b74 <_vfiprintf_r+0x44>
 8004d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d38:	e71e      	b.n	8004b78 <_vfiprintf_r+0x48>
 8004d3a:	ab03      	add	r3, sp, #12
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	462a      	mov	r2, r5
 8004d40:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <_vfiprintf_r+0x228>)
 8004d42:	a904      	add	r1, sp, #16
 8004d44:	4630      	mov	r0, r6
 8004d46:	f7ff fc81 	bl	800464c <_printf_i>
 8004d4a:	e7e4      	b.n	8004d16 <_vfiprintf_r+0x1e6>
 8004d4c:	080051d1 	.word	0x080051d1
 8004d50:	080051db 	.word	0x080051db
 8004d54:	00000000 	.word	0x00000000
 8004d58:	08004b0d 	.word	0x08004b0d
 8004d5c:	080051d7 	.word	0x080051d7

08004d60 <__swbuf_r>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	460e      	mov	r6, r1
 8004d64:	4614      	mov	r4, r2
 8004d66:	4605      	mov	r5, r0
 8004d68:	b118      	cbz	r0, 8004d72 <__swbuf_r+0x12>
 8004d6a:	6a03      	ldr	r3, [r0, #32]
 8004d6c:	b90b      	cbnz	r3, 8004d72 <__swbuf_r+0x12>
 8004d6e:	f7fe ffe5 	bl	8003d3c <__sinit>
 8004d72:	69a3      	ldr	r3, [r4, #24]
 8004d74:	60a3      	str	r3, [r4, #8]
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	071a      	lsls	r2, r3, #28
 8004d7a:	d501      	bpl.n	8004d80 <__swbuf_r+0x20>
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	b943      	cbnz	r3, 8004d92 <__swbuf_r+0x32>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f82a 	bl	8004ddc <__swsetup_r>
 8004d88:	b118      	cbz	r0, 8004d92 <__swbuf_r+0x32>
 8004d8a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d8e:	4638      	mov	r0, r7
 8004d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	6922      	ldr	r2, [r4, #16]
 8004d96:	1a98      	subs	r0, r3, r2
 8004d98:	6963      	ldr	r3, [r4, #20]
 8004d9a:	b2f6      	uxtb	r6, r6
 8004d9c:	4283      	cmp	r3, r0
 8004d9e:	4637      	mov	r7, r6
 8004da0:	dc05      	bgt.n	8004dae <__swbuf_r+0x4e>
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff fdf3 	bl	8004990 <_fflush_r>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d1ed      	bne.n	8004d8a <__swbuf_r+0x2a>
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	60a3      	str	r3, [r4, #8]
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	6022      	str	r2, [r4, #0]
 8004dba:	701e      	strb	r6, [r3, #0]
 8004dbc:	6962      	ldr	r2, [r4, #20]
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d004      	beq.n	8004dce <__swbuf_r+0x6e>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	07db      	lsls	r3, r3, #31
 8004dc8:	d5e1      	bpl.n	8004d8e <__swbuf_r+0x2e>
 8004dca:	2e0a      	cmp	r6, #10
 8004dcc:	d1df      	bne.n	8004d8e <__swbuf_r+0x2e>
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f7ff fddd 	bl	8004990 <_fflush_r>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d0d9      	beq.n	8004d8e <__swbuf_r+0x2e>
 8004dda:	e7d6      	b.n	8004d8a <__swbuf_r+0x2a>

08004ddc <__swsetup_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <__swsetup_r+0xa8>)
 8004de0:	4605      	mov	r5, r0
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	460c      	mov	r4, r1
 8004de6:	b118      	cbz	r0, 8004df0 <__swsetup_r+0x14>
 8004de8:	6a03      	ldr	r3, [r0, #32]
 8004dea:	b90b      	cbnz	r3, 8004df0 <__swsetup_r+0x14>
 8004dec:	f7fe ffa6 	bl	8003d3c <__sinit>
 8004df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df4:	0719      	lsls	r1, r3, #28
 8004df6:	d422      	bmi.n	8004e3e <__swsetup_r+0x62>
 8004df8:	06da      	lsls	r2, r3, #27
 8004dfa:	d407      	bmi.n	8004e0c <__swsetup_r+0x30>
 8004dfc:	2209      	movs	r2, #9
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	e033      	b.n	8004e74 <__swsetup_r+0x98>
 8004e0c:	0758      	lsls	r0, r3, #29
 8004e0e:	d512      	bpl.n	8004e36 <__swsetup_r+0x5a>
 8004e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e12:	b141      	cbz	r1, 8004e26 <__swsetup_r+0x4a>
 8004e14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e18:	4299      	cmp	r1, r3
 8004e1a:	d002      	beq.n	8004e22 <__swsetup_r+0x46>
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f7ff f94f 	bl	80040c0 <_free_r>
 8004e22:	2300      	movs	r3, #0
 8004e24:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	b94b      	cbnz	r3, 8004e56 <__swsetup_r+0x7a>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e4c:	d003      	beq.n	8004e56 <__swsetup_r+0x7a>
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4628      	mov	r0, r5
 8004e52:	f000 f88b 	bl	8004f6c <__smakebuf_r>
 8004e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e5a:	f013 0201 	ands.w	r2, r3, #1
 8004e5e:	d00a      	beq.n	8004e76 <__swsetup_r+0x9a>
 8004e60:	2200      	movs	r2, #0
 8004e62:	60a2      	str	r2, [r4, #8]
 8004e64:	6962      	ldr	r2, [r4, #20]
 8004e66:	4252      	negs	r2, r2
 8004e68:	61a2      	str	r2, [r4, #24]
 8004e6a:	6922      	ldr	r2, [r4, #16]
 8004e6c:	b942      	cbnz	r2, 8004e80 <__swsetup_r+0xa4>
 8004e6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e72:	d1c5      	bne.n	8004e00 <__swsetup_r+0x24>
 8004e74:	bd38      	pop	{r3, r4, r5, pc}
 8004e76:	0799      	lsls	r1, r3, #30
 8004e78:	bf58      	it	pl
 8004e7a:	6962      	ldrpl	r2, [r4, #20]
 8004e7c:	60a2      	str	r2, [r4, #8]
 8004e7e:	e7f4      	b.n	8004e6a <__swsetup_r+0x8e>
 8004e80:	2000      	movs	r0, #0
 8004e82:	e7f7      	b.n	8004e74 <__swsetup_r+0x98>
 8004e84:	20000018 	.word	0x20000018

08004e88 <_raise_r>:
 8004e88:	291f      	cmp	r1, #31
 8004e8a:	b538      	push	{r3, r4, r5, lr}
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	d904      	bls.n	8004e9c <_raise_r+0x14>
 8004e92:	2316      	movs	r3, #22
 8004e94:	6003      	str	r3, [r0, #0]
 8004e96:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004e9e:	b112      	cbz	r2, 8004ea6 <_raise_r+0x1e>
 8004ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ea4:	b94b      	cbnz	r3, 8004eba <_raise_r+0x32>
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 f830 	bl	8004f0c <_getpid_r>
 8004eac:	4622      	mov	r2, r4
 8004eae:	4601      	mov	r1, r0
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb6:	f000 b817 	b.w	8004ee8 <_kill_r>
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d00a      	beq.n	8004ed4 <_raise_r+0x4c>
 8004ebe:	1c59      	adds	r1, r3, #1
 8004ec0:	d103      	bne.n	8004eca <_raise_r+0x42>
 8004ec2:	2316      	movs	r3, #22
 8004ec4:	6003      	str	r3, [r0, #0]
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	e7e7      	b.n	8004e9a <_raise_r+0x12>
 8004eca:	2100      	movs	r1, #0
 8004ecc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4798      	blx	r3
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e7e0      	b.n	8004e9a <_raise_r+0x12>

08004ed8 <raise>:
 8004ed8:	4b02      	ldr	r3, [pc, #8]	@ (8004ee4 <raise+0xc>)
 8004eda:	4601      	mov	r1, r0
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	f7ff bfd3 	b.w	8004e88 <_raise_r>
 8004ee2:	bf00      	nop
 8004ee4:	20000018 	.word	0x20000018

08004ee8 <_kill_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d07      	ldr	r5, [pc, #28]	@ (8004f08 <_kill_r+0x20>)
 8004eec:	2300      	movs	r3, #0
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	602b      	str	r3, [r5, #0]
 8004ef6:	f7fc f821 	bl	8000f3c <_kill>
 8004efa:	1c43      	adds	r3, r0, #1
 8004efc:	d102      	bne.n	8004f04 <_kill_r+0x1c>
 8004efe:	682b      	ldr	r3, [r5, #0]
 8004f00:	b103      	cbz	r3, 8004f04 <_kill_r+0x1c>
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	bd38      	pop	{r3, r4, r5, pc}
 8004f06:	bf00      	nop
 8004f08:	20000364 	.word	0x20000364

08004f0c <_getpid_r>:
 8004f0c:	f7fc b80e 	b.w	8000f2c <_getpid>

08004f10 <_malloc_usable_size_r>:
 8004f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f14:	1f18      	subs	r0, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfbc      	itt	lt
 8004f1a:	580b      	ldrlt	r3, [r1, r0]
 8004f1c:	18c0      	addlt	r0, r0, r3
 8004f1e:	4770      	bx	lr

08004f20 <__swhatbuf_r>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	460c      	mov	r4, r1
 8004f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	b096      	sub	sp, #88	@ 0x58
 8004f2c:	4615      	mov	r5, r2
 8004f2e:	461e      	mov	r6, r3
 8004f30:	da0d      	bge.n	8004f4e <__swhatbuf_r+0x2e>
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2340      	movne	r3, #64	@ 0x40
 8004f40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f44:	2000      	movs	r0, #0
 8004f46:	6031      	str	r1, [r6, #0]
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	b016      	add	sp, #88	@ 0x58
 8004f4c:	bd70      	pop	{r4, r5, r6, pc}
 8004f4e:	466a      	mov	r2, sp
 8004f50:	f000 f848 	bl	8004fe4 <_fstat_r>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	dbec      	blt.n	8004f32 <__swhatbuf_r+0x12>
 8004f58:	9901      	ldr	r1, [sp, #4]
 8004f5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f62:	4259      	negs	r1, r3
 8004f64:	4159      	adcs	r1, r3
 8004f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f6a:	e7eb      	b.n	8004f44 <__swhatbuf_r+0x24>

08004f6c <__smakebuf_r>:
 8004f6c:	898b      	ldrh	r3, [r1, #12]
 8004f6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f70:	079d      	lsls	r5, r3, #30
 8004f72:	4606      	mov	r6, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	d507      	bpl.n	8004f88 <__smakebuf_r+0x1c>
 8004f78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	2301      	movs	r3, #1
 8004f82:	6163      	str	r3, [r4, #20]
 8004f84:	b003      	add	sp, #12
 8004f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f88:	ab01      	add	r3, sp, #4
 8004f8a:	466a      	mov	r2, sp
 8004f8c:	f7ff ffc8 	bl	8004f20 <__swhatbuf_r>
 8004f90:	9f00      	ldr	r7, [sp, #0]
 8004f92:	4605      	mov	r5, r0
 8004f94:	4639      	mov	r1, r7
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7ff f906 	bl	80041a8 <_malloc_r>
 8004f9c:	b948      	cbnz	r0, 8004fb2 <__smakebuf_r+0x46>
 8004f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa2:	059a      	lsls	r2, r3, #22
 8004fa4:	d4ee      	bmi.n	8004f84 <__smakebuf_r+0x18>
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	f043 0302 	orr.w	r3, r3, #2
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	e7e2      	b.n	8004f78 <__smakebuf_r+0xc>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	6020      	str	r0, [r4, #0]
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	9b01      	ldr	r3, [sp, #4]
 8004fbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fc2:	b15b      	cbz	r3, 8004fdc <__smakebuf_r+0x70>
 8004fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f000 f81d 	bl	8005008 <_isatty_r>
 8004fce:	b128      	cbz	r0, 8004fdc <__smakebuf_r+0x70>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	431d      	orrs	r5, r3
 8004fe0:	81a5      	strh	r5, [r4, #12]
 8004fe2:	e7cf      	b.n	8004f84 <__smakebuf_r+0x18>

08004fe4 <_fstat_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d07      	ldr	r5, [pc, #28]	@ (8005004 <_fstat_r+0x20>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	602b      	str	r3, [r5, #0]
 8004ff2:	f7fc f803 	bl	8000ffc <_fstat>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d102      	bne.n	8005000 <_fstat_r+0x1c>
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	b103      	cbz	r3, 8005000 <_fstat_r+0x1c>
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	20000364 	.word	0x20000364

08005008 <_isatty_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d06      	ldr	r5, [pc, #24]	@ (8005024 <_isatty_r+0x1c>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fc f802 	bl	800101c <_isatty>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_isatty_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_isatty_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20000364 	.word	0x20000364

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
